
PID_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000422c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080044c4  080044c4  000144c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044d4  080044d4  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  080044d4  080044d4  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044d4  080044d4  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044d4  080044d4  000144d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044d8  080044d8  000144d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  080044dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  080044ec  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  0800454c  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000061c  240000d0  080045ac  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  240006ec  080045ac  000206ec  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000126bc  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000022b4  00000000  00000000  000327ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d30  00000000  00000000  00034a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000c38  00000000  00000000  000357a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00039484  00000000  00000000  000363d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f75b  00000000  00000000  0006f85c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001790bc  00000000  00000000  0007efb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001f8073  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000036a8  00000000  00000000  001f80c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080044ac 	.word	0x080044ac

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	080044ac 	.word	0x080044ac

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	; (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	; (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	; (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	; (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	; (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	; (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	; (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	; (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	; (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	; (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	; (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	; (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	; (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	; (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	; (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	; (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	; (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	; (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	; (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	; (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	; (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	; (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
#ifdef DEBUG
 while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET));
 800040a:	bf00      	nop
 800040c:	4b27      	ldr	r3, [pc, #156]	; (80004ac <main+0xa8>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000414:	2b00      	cmp	r3, #0
 8000416:	d1f9      	bne.n	800040c <main+0x8>
  timeout = 0xFFFF;
 8000418:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800041c:	607b      	str	r3, [r7, #4]
   while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800041e:	bf00      	nop
 8000420:	4b22      	ldr	r3, [pc, #136]	; (80004ac <main+0xa8>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000428:	2b00      	cmp	r3, #0
 800042a:	d004      	beq.n	8000436 <main+0x32>
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	1e5a      	subs	r2, r3, #1
 8000430:	607a      	str	r2, [r7, #4]
 8000432:	2b00      	cmp	r3, #0
 8000434:	dcf4      	bgt.n	8000420 <main+0x1c>
   if ( timeout < 0 )
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	2b00      	cmp	r3, #0
 800043a:	da01      	bge.n	8000440 <main+0x3c>
   {
   Error_Handler();
 800043c:	f000 f990 	bl	8000760 <Error_Handler>
#endif
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000440:	f000 fb58 	bl	8000af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000444:	f000 f834 	bl	80004b0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000448:	4b18      	ldr	r3, [pc, #96]	; (80004ac <main+0xa8>)
 800044a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800044e:	4a17      	ldr	r2, [pc, #92]	; (80004ac <main+0xa8>)
 8000450:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000454:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000458:	4b14      	ldr	r3, [pc, #80]	; (80004ac <main+0xa8>)
 800045a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800045e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000462:	603b      	str	r3, [r7, #0]
 8000464:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000466:	2000      	movs	r0, #0
 8000468:	f001 fad2 	bl	8001a10 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800046c:	2100      	movs	r1, #0
 800046e:	2000      	movs	r0, #0
 8000470:	f001 fae8 	bl	8001a44 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000474:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000478:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800047a:	bf00      	nop
 800047c:	4b0b      	ldr	r3, [pc, #44]	; (80004ac <main+0xa8>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000484:	2b00      	cmp	r3, #0
 8000486:	d104      	bne.n	8000492 <main+0x8e>
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	1e5a      	subs	r2, r3, #1
 800048c:	607a      	str	r2, [r7, #4]
 800048e:	2b00      	cmp	r3, #0
 8000490:	dcf4      	bgt.n	800047c <main+0x78>
if ( timeout < 0 )
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	2b00      	cmp	r3, #0
 8000496:	da01      	bge.n	800049c <main+0x98>
{
Error_Handler();
 8000498:	f000 f962 	bl	8000760 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800049c:	f000 f90a 	bl	80006b4 <MX_GPIO_Init>
  MX_ETH_Init();
 80004a0:	f000 f88a 	bl	80005b8 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004a4:	f000 f8d4 	bl	8000650 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004a8:	e7fe      	b.n	80004a8 <main+0xa4>
 80004aa:	bf00      	nop
 80004ac:	58024400 	.word	0x58024400

080004b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b09c      	sub	sp, #112	; 0x70
 80004b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004ba:	224c      	movs	r2, #76	; 0x4c
 80004bc:	2100      	movs	r1, #0
 80004be:	4618      	mov	r0, r3
 80004c0:	f003 ffec 	bl	800449c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	2220      	movs	r2, #32
 80004c8:	2100      	movs	r1, #0
 80004ca:	4618      	mov	r0, r3
 80004cc:	f003 ffe6 	bl	800449c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80004d0:	2004      	movs	r0, #4
 80004d2:	f001 fc13 	bl	8001cfc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80004d6:	2300      	movs	r3, #0
 80004d8:	603b      	str	r3, [r7, #0]
 80004da:	4b34      	ldr	r3, [pc, #208]	; (80005ac <SystemClock_Config+0xfc>)
 80004dc:	699b      	ldr	r3, [r3, #24]
 80004de:	4a33      	ldr	r2, [pc, #204]	; (80005ac <SystemClock_Config+0xfc>)
 80004e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80004e4:	6193      	str	r3, [r2, #24]
 80004e6:	4b31      	ldr	r3, [pc, #196]	; (80005ac <SystemClock_Config+0xfc>)
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004ee:	603b      	str	r3, [r7, #0]
 80004f0:	4b2f      	ldr	r3, [pc, #188]	; (80005b0 <SystemClock_Config+0x100>)
 80004f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004f4:	4a2e      	ldr	r2, [pc, #184]	; (80005b0 <SystemClock_Config+0x100>)
 80004f6:	f043 0301 	orr.w	r3, r3, #1
 80004fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004fc:	4b2c      	ldr	r3, [pc, #176]	; (80005b0 <SystemClock_Config+0x100>)
 80004fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000500:	f003 0301 	and.w	r3, r3, #1
 8000504:	603b      	str	r3, [r7, #0]
 8000506:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000508:	bf00      	nop
 800050a:	4b28      	ldr	r3, [pc, #160]	; (80005ac <SystemClock_Config+0xfc>)
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000512:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000516:	d1f8      	bne.n	800050a <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000518:	4b26      	ldr	r3, [pc, #152]	; (80005b4 <SystemClock_Config+0x104>)
 800051a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800051c:	f023 0303 	bic.w	r3, r3, #3
 8000520:	4a24      	ldr	r2, [pc, #144]	; (80005b4 <SystemClock_Config+0x104>)
 8000522:	f043 0302 	orr.w	r3, r3, #2
 8000526:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000528:	2301      	movs	r3, #1
 800052a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800052c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000530:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000532:	2302      	movs	r3, #2
 8000534:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000536:	2302      	movs	r3, #2
 8000538:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800053a:	2301      	movs	r3, #1
 800053c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800053e:	2378      	movs	r3, #120	; 0x78
 8000540:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000542:	2302      	movs	r3, #2
 8000544:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000546:	2302      	movs	r3, #2
 8000548:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800054a:	2302      	movs	r3, #2
 800054c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800054e:	230c      	movs	r3, #12
 8000550:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000552:	2300      	movs	r3, #0
 8000554:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800055e:	4618      	mov	r0, r3
 8000560:	f001 fc36 	bl	8001dd0 <HAL_RCC_OscConfig>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800056a:	f000 f8f9 	bl	8000760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056e:	233f      	movs	r3, #63	; 0x3f
 8000570:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000572:	2303      	movs	r3, #3
 8000574:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800057a:	2308      	movs	r3, #8
 800057c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800057e:	2340      	movs	r3, #64	; 0x40
 8000580:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000582:	2340      	movs	r3, #64	; 0x40
 8000584:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800058a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800058c:	2340      	movs	r3, #64	; 0x40
 800058e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	2104      	movs	r1, #4
 8000594:	4618      	mov	r0, r3
 8000596:	f002 f849 	bl	800262c <HAL_RCC_ClockConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80005a0:	f000 f8de 	bl	8000760 <Error_Handler>
  }
}
 80005a4:	bf00      	nop
 80005a6:	3770      	adds	r7, #112	; 0x70
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	58024800 	.word	0x58024800
 80005b0:	58000400 	.word	0x58000400
 80005b4:	58024400 	.word	0x58024400

080005b8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80005bc:	4b1e      	ldr	r3, [pc, #120]	; (8000638 <MX_ETH_Init+0x80>)
 80005be:	4a1f      	ldr	r2, [pc, #124]	; (800063c <MX_ETH_Init+0x84>)
 80005c0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80005c2:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <MX_ETH_Init+0x88>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80005c8:	4b1d      	ldr	r3, [pc, #116]	; (8000640 <MX_ETH_Init+0x88>)
 80005ca:	2280      	movs	r2, #128	; 0x80
 80005cc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80005ce:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <MX_ETH_Init+0x88>)
 80005d0:	22e1      	movs	r2, #225	; 0xe1
 80005d2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80005d4:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <MX_ETH_Init+0x88>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80005da:	4b19      	ldr	r3, [pc, #100]	; (8000640 <MX_ETH_Init+0x88>)
 80005dc:	2200      	movs	r2, #0
 80005de:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80005e0:	4b17      	ldr	r3, [pc, #92]	; (8000640 <MX_ETH_Init+0x88>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80005e6:	4b14      	ldr	r3, [pc, #80]	; (8000638 <MX_ETH_Init+0x80>)
 80005e8:	4a15      	ldr	r2, [pc, #84]	; (8000640 <MX_ETH_Init+0x88>)
 80005ea:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <MX_ETH_Init+0x80>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80005f2:	4b11      	ldr	r3, [pc, #68]	; (8000638 <MX_ETH_Init+0x80>)
 80005f4:	4a13      	ldr	r2, [pc, #76]	; (8000644 <MX_ETH_Init+0x8c>)
 80005f6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80005f8:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <MX_ETH_Init+0x80>)
 80005fa:	4a13      	ldr	r2, [pc, #76]	; (8000648 <MX_ETH_Init+0x90>)
 80005fc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80005fe:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <MX_ETH_Init+0x80>)
 8000600:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000604:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000606:	480c      	ldr	r0, [pc, #48]	; (8000638 <MX_ETH_Init+0x80>)
 8000608:	f000 fc2e 	bl	8000e68 <HAL_ETH_Init>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000612:	f000 f8a5 	bl	8000760 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000616:	2238      	movs	r2, #56	; 0x38
 8000618:	2100      	movs	r1, #0
 800061a:	480c      	ldr	r0, [pc, #48]	; (800064c <MX_ETH_Init+0x94>)
 800061c:	f003 ff3e 	bl	800449c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000620:	4b0a      	ldr	r3, [pc, #40]	; (800064c <MX_ETH_Init+0x94>)
 8000622:	2221      	movs	r2, #33	; 0x21
 8000624:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <MX_ETH_Init+0x94>)
 8000628:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800062c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800062e:	4b07      	ldr	r3, [pc, #28]	; (800064c <MX_ETH_Init+0x94>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	24000124 	.word	0x24000124
 800063c:	40028000 	.word	0x40028000
 8000640:	240006e0 	.word	0x240006e0
 8000644:	24000070 	.word	0x24000070
 8000648:	24000010 	.word	0x24000010
 800064c:	240000ec 	.word	0x240000ec

08000650 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000654:	4b15      	ldr	r3, [pc, #84]	; (80006ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000656:	4a16      	ldr	r2, [pc, #88]	; (80006b0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000658:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800065c:	2209      	movs	r2, #9
 800065e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000662:	2202      	movs	r2, #2
 8000664:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800066c:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800066e:	2202      	movs	r2, #2
 8000670:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000674:	2200      	movs	r2, #0
 8000676:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800067a:	2200      	movs	r2, #0
 800067c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000680:	2200      	movs	r2, #0
 8000682:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000684:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000686:	2201      	movs	r2, #1
 8000688:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800068c:	2201      	movs	r2, #1
 800068e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000692:	2200      	movs	r2, #0
 8000694:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000696:	4805      	ldr	r0, [pc, #20]	; (80006ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000698:	f001 f9e8 	bl	8001a6c <HAL_PCD_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80006a2:	f000 f85d 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	240001d4 	.word	0x240001d4
 80006b0:	40080000 	.word	0x40080000

080006b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b087      	sub	sp, #28
 80006b8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ba:	4b28      	ldr	r3, [pc, #160]	; (800075c <MX_GPIO_Init+0xa8>)
 80006bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c0:	4a26      	ldr	r2, [pc, #152]	; (800075c <MX_GPIO_Init+0xa8>)
 80006c2:	f043 0304 	orr.w	r3, r3, #4
 80006c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ca:	4b24      	ldr	r3, [pc, #144]	; (800075c <MX_GPIO_Init+0xa8>)
 80006cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d0:	f003 0304 	and.w	r3, r3, #4
 80006d4:	617b      	str	r3, [r7, #20]
 80006d6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d8:	4b20      	ldr	r3, [pc, #128]	; (800075c <MX_GPIO_Init+0xa8>)
 80006da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006de:	4a1f      	ldr	r2, [pc, #124]	; (800075c <MX_GPIO_Init+0xa8>)
 80006e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006e8:	4b1c      	ldr	r3, [pc, #112]	; (800075c <MX_GPIO_Init+0xa8>)
 80006ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	4b19      	ldr	r3, [pc, #100]	; (800075c <MX_GPIO_Init+0xa8>)
 80006f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006fc:	4a17      	ldr	r2, [pc, #92]	; (800075c <MX_GPIO_Init+0xa8>)
 80006fe:	f043 0301 	orr.w	r3, r3, #1
 8000702:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <MX_GPIO_Init+0xa8>)
 8000708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800070c:	f003 0301 	and.w	r3, r3, #1
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_GPIO_Init+0xa8>)
 8000716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800071a:	4a10      	ldr	r2, [pc, #64]	; (800075c <MX_GPIO_Init+0xa8>)
 800071c:	f043 0302 	orr.w	r3, r3, #2
 8000720:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000724:	4b0d      	ldr	r3, [pc, #52]	; (800075c <MX_GPIO_Init+0xa8>)
 8000726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000732:	4b0a      	ldr	r3, [pc, #40]	; (800075c <MX_GPIO_Init+0xa8>)
 8000734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000738:	4a08      	ldr	r2, [pc, #32]	; (800075c <MX_GPIO_Init+0xa8>)
 800073a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800073e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_GPIO_Init+0xa8>)
 8000744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	687b      	ldr	r3, [r7, #4]

}
 8000750:	bf00      	nop
 8000752:	371c      	adds	r7, #28
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	58024400 	.word	0x58024400

08000760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000764:	b672      	cpsid	i
}
 8000766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000768:	e7fe      	b.n	8000768 <Error_Handler+0x8>
	...

0800076c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000772:	4b0a      	ldr	r3, [pc, #40]	; (800079c <HAL_MspInit+0x30>)
 8000774:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000778:	4a08      	ldr	r2, [pc, #32]	; (800079c <HAL_MspInit+0x30>)
 800077a:	f043 0302 	orr.w	r3, r3, #2
 800077e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <HAL_MspInit+0x30>)
 8000784:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000788:	f003 0302 	and.w	r3, r3, #2
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	58024400 	.word	0x58024400

080007a0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08e      	sub	sp, #56	; 0x38
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a59      	ldr	r2, [pc, #356]	; (8000924 <HAL_ETH_MspInit+0x184>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	f040 80ab 	bne.w	800091a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80007c4:	4b58      	ldr	r3, [pc, #352]	; (8000928 <HAL_ETH_MspInit+0x188>)
 80007c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007ca:	4a57      	ldr	r2, [pc, #348]	; (8000928 <HAL_ETH_MspInit+0x188>)
 80007cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007d0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007d4:	4b54      	ldr	r3, [pc, #336]	; (8000928 <HAL_ETH_MspInit+0x188>)
 80007d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007de:	623b      	str	r3, [r7, #32]
 80007e0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80007e2:	4b51      	ldr	r3, [pc, #324]	; (8000928 <HAL_ETH_MspInit+0x188>)
 80007e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007e8:	4a4f      	ldr	r2, [pc, #316]	; (8000928 <HAL_ETH_MspInit+0x188>)
 80007ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007ee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007f2:	4b4d      	ldr	r3, [pc, #308]	; (8000928 <HAL_ETH_MspInit+0x188>)
 80007f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007fc:	61fb      	str	r3, [r7, #28]
 80007fe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000800:	4b49      	ldr	r3, [pc, #292]	; (8000928 <HAL_ETH_MspInit+0x188>)
 8000802:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000806:	4a48      	ldr	r2, [pc, #288]	; (8000928 <HAL_ETH_MspInit+0x188>)
 8000808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800080c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000810:	4b45      	ldr	r3, [pc, #276]	; (8000928 <HAL_ETH_MspInit+0x188>)
 8000812:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800081a:	61bb      	str	r3, [r7, #24]
 800081c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800081e:	4b42      	ldr	r3, [pc, #264]	; (8000928 <HAL_ETH_MspInit+0x188>)
 8000820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000824:	4a40      	ldr	r2, [pc, #256]	; (8000928 <HAL_ETH_MspInit+0x188>)
 8000826:	f043 0304 	orr.w	r3, r3, #4
 800082a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800082e:	4b3e      	ldr	r3, [pc, #248]	; (8000928 <HAL_ETH_MspInit+0x188>)
 8000830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000834:	f003 0304 	and.w	r3, r3, #4
 8000838:	617b      	str	r3, [r7, #20]
 800083a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083c:	4b3a      	ldr	r3, [pc, #232]	; (8000928 <HAL_ETH_MspInit+0x188>)
 800083e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000842:	4a39      	ldr	r2, [pc, #228]	; (8000928 <HAL_ETH_MspInit+0x188>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800084c:	4b36      	ldr	r3, [pc, #216]	; (8000928 <HAL_ETH_MspInit+0x188>)
 800084e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	4b33      	ldr	r3, [pc, #204]	; (8000928 <HAL_ETH_MspInit+0x188>)
 800085c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000860:	4a31      	ldr	r2, [pc, #196]	; (8000928 <HAL_ETH_MspInit+0x188>)
 8000862:	f043 0302 	orr.w	r3, r3, #2
 8000866:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800086a:	4b2f      	ldr	r3, [pc, #188]	; (8000928 <HAL_ETH_MspInit+0x188>)
 800086c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000870:	f003 0302 	and.w	r3, r3, #2
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000878:	4b2b      	ldr	r3, [pc, #172]	; (8000928 <HAL_ETH_MspInit+0x188>)
 800087a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800087e:	4a2a      	ldr	r2, [pc, #168]	; (8000928 <HAL_ETH_MspInit+0x188>)
 8000880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000884:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000888:	4b27      	ldr	r3, [pc, #156]	; (8000928 <HAL_ETH_MspInit+0x188>)
 800088a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800088e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000896:	2332      	movs	r3, #50	; 0x32
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008a6:	230b      	movs	r3, #11
 80008a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ae:	4619      	mov	r1, r3
 80008b0:	481e      	ldr	r0, [pc, #120]	; (800092c <HAL_ETH_MspInit+0x18c>)
 80008b2:	f000 fefd 	bl	80016b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80008b6:	2386      	movs	r3, #134	; 0x86
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008c6:	230b      	movs	r3, #11
 80008c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ce:	4619      	mov	r1, r3
 80008d0:	4817      	ldr	r0, [pc, #92]	; (8000930 <HAL_ETH_MspInit+0x190>)
 80008d2:	f000 feed 	bl	80016b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2300      	movs	r3, #0
 80008e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008e8:	230b      	movs	r3, #11
 80008ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f0:	4619      	mov	r1, r3
 80008f2:	4810      	ldr	r0, [pc, #64]	; (8000934 <HAL_ETH_MspInit+0x194>)
 80008f4:	f000 fedc 	bl	80016b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80008f8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800090a:	230b      	movs	r3, #11
 800090c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800090e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000912:	4619      	mov	r1, r3
 8000914:	4808      	ldr	r0, [pc, #32]	; (8000938 <HAL_ETH_MspInit+0x198>)
 8000916:	f000 fecb 	bl	80016b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800091a:	bf00      	nop
 800091c:	3738      	adds	r7, #56	; 0x38
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40028000 	.word	0x40028000
 8000928:	58024400 	.word	0x58024400
 800092c:	58020800 	.word	0x58020800
 8000930:	58020000 	.word	0x58020000
 8000934:	58020400 	.word	0x58020400
 8000938:	58021800 	.word	0x58021800

0800093c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b0b8      	sub	sp, #224	; 0xe0
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000954:	f107 0310 	add.w	r3, r7, #16
 8000958:	22bc      	movs	r2, #188	; 0xbc
 800095a:	2100      	movs	r1, #0
 800095c:	4618      	mov	r0, r3
 800095e:	f003 fd9d 	bl	800449c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a36      	ldr	r2, [pc, #216]	; (8000a40 <HAL_PCD_MspInit+0x104>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d165      	bne.n	8000a38 <HAL_PCD_MspInit+0xfc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800096c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000970:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000972:	2301      	movs	r3, #1
 8000974:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000976:	2318      	movs	r3, #24
 8000978:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800097a:	2302      	movs	r3, #2
 800097c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 800097e:	2304      	movs	r3, #4
 8000980:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000982:	2302      	movs	r3, #2
 8000984:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000986:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800098a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000990:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000994:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000998:	f107 0310 	add.w	r3, r7, #16
 800099c:	4618      	mov	r0, r3
 800099e:	f002 f9a5 	bl	8002cec <HAL_RCCEx_PeriphCLKConfig>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80009a8:	f7ff feda 	bl	8000760 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80009ac:	f001 fa00 	bl	8001db0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b0:	4b24      	ldr	r3, [pc, #144]	; (8000a44 <HAL_PCD_MspInit+0x108>)
 80009b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b6:	4a23      	ldr	r2, [pc, #140]	; (8000a44 <HAL_PCD_MspInit+0x108>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c0:	4b20      	ldr	r3, [pc, #128]	; (8000a44 <HAL_PCD_MspInit+0x108>)
 80009c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80009ce:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80009d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80009e8:	230a      	movs	r3, #10
 80009ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80009f2:	4619      	mov	r1, r3
 80009f4:	4814      	ldr	r0, [pc, #80]	; (8000a48 <HAL_PCD_MspInit+0x10c>)
 80009f6:	f000 fe5b 	bl	80016b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a02:	2300      	movs	r3, #0
 8000a04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a12:	4619      	mov	r1, r3
 8000a14:	480c      	ldr	r0, [pc, #48]	; (8000a48 <HAL_PCD_MspInit+0x10c>)
 8000a16:	f000 fe4b 	bl	80016b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <HAL_PCD_MspInit+0x108>)
 8000a1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a20:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <HAL_PCD_MspInit+0x108>)
 8000a22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a26:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_PCD_MspInit+0x108>)
 8000a2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000a38:	bf00      	nop
 8000a3a:	37e0      	adds	r7, #224	; 0xe0
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40080000 	.word	0x40080000
 8000a44:	58024400 	.word	0x58024400
 8000a48:	58020000 	.word	0x58020000

08000a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <NMI_Handler+0x4>

08000a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <HardFault_Handler+0x4>

08000a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <MemManage_Handler+0x4>

08000a5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <BusFault_Handler+0x4>

08000a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <UsageFault_Handler+0x4>

08000a6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a98:	f000 f89e 	bl	8000bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000aa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ad8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000aa4:	f7ff fc18 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa8:	480c      	ldr	r0, [pc, #48]	; (8000adc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aaa:	490d      	ldr	r1, [pc, #52]	; (8000ae0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000aac:	4a0d      	ldr	r2, [pc, #52]	; (8000ae4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab0:	e002      	b.n	8000ab8 <LoopCopyDataInit>

08000ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab6:	3304      	adds	r3, #4

08000ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000abc:	d3f9      	bcc.n	8000ab2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000abe:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ac0:	4c0a      	ldr	r4, [pc, #40]	; (8000aec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac4:	e001      	b.n	8000aca <LoopFillZerobss>

08000ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac8:	3204      	adds	r2, #4

08000aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000acc:	d3fb      	bcc.n	8000ac6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ace:	f003 fcc1 	bl	8004454 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ad2:	f7ff fc97 	bl	8000404 <main>
  bx  lr
 8000ad6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ad8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000adc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ae0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000ae4:	080044dc 	.word	0x080044dc
  ldr r2, =_sbss
 8000ae8:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8000aec:	240006ec 	.word	0x240006ec

08000af0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af0:	e7fe      	b.n	8000af0 <ADC3_IRQHandler>
	...

08000af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000afa:	2003      	movs	r0, #3
 8000afc:	f000 f982 	bl	8000e04 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b00:	f001 ff4a 	bl	8002998 <HAL_RCC_GetSysClockFreq>
 8000b04:	4602      	mov	r2, r0
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <HAL_Init+0x68>)
 8000b08:	699b      	ldr	r3, [r3, #24]
 8000b0a:	0a1b      	lsrs	r3, r3, #8
 8000b0c:	f003 030f 	and.w	r3, r3, #15
 8000b10:	4913      	ldr	r1, [pc, #76]	; (8000b60 <HAL_Init+0x6c>)
 8000b12:	5ccb      	ldrb	r3, [r1, r3]
 8000b14:	f003 031f 	and.w	r3, r3, #31
 8000b18:	fa22 f303 	lsr.w	r3, r2, r3
 8000b1c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <HAL_Init+0x68>)
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	f003 030f 	and.w	r3, r3, #15
 8000b26:	4a0e      	ldr	r2, [pc, #56]	; (8000b60 <HAL_Init+0x6c>)
 8000b28:	5cd3      	ldrb	r3, [r2, r3]
 8000b2a:	f003 031f 	and.w	r3, r3, #31
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	fa22 f303 	lsr.w	r3, r2, r3
 8000b34:	4a0b      	ldr	r2, [pc, #44]	; (8000b64 <HAL_Init+0x70>)
 8000b36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000b38:	4a0b      	ldr	r2, [pc, #44]	; (8000b68 <HAL_Init+0x74>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f000 f814 	bl	8000b6c <HAL_InitTick>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e002      	b.n	8000b54 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000b4e:	f7ff fe0d 	bl	800076c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b52:	2300      	movs	r3, #0
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	080044c4 	.word	0x080044c4
 8000b64:	24000004 	.word	0x24000004
 8000b68:	24000000 	.word	0x24000000

08000b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000b74:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <HAL_InitTick+0x60>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d101      	bne.n	8000b80 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	e021      	b.n	8000bc4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b80:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <HAL_InitTick+0x64>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <HAL_InitTick+0x60>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 f959 	bl	8000e4e <HAL_SYSTICK_Config>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e00e      	b.n	8000bc4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2b0f      	cmp	r3, #15
 8000baa:	d80a      	bhi.n	8000bc2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bac:	2200      	movs	r2, #0
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	f000 f931 	bl	8000e1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bb8:	4a06      	ldr	r2, [pc, #24]	; (8000bd4 <HAL_InitTick+0x68>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	e000      	b.n	8000bc4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	2400000c 	.word	0x2400000c
 8000bd0:	24000000 	.word	0x24000000
 8000bd4:	24000008 	.word	0x24000008

08000bd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_IncTick+0x20>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	461a      	mov	r2, r3
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_IncTick+0x24>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4413      	add	r3, r2
 8000be8:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <HAL_IncTick+0x24>)
 8000bea:	6013      	str	r3, [r2, #0]
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	2400000c 	.word	0x2400000c
 8000bfc:	240006e8 	.word	0x240006e8

08000c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return uwTick;
 8000c04:	4b03      	ldr	r3, [pc, #12]	; (8000c14 <HAL_GetTick+0x14>)
 8000c06:	681b      	ldr	r3, [r3, #0]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	240006e8 	.word	0x240006e8

08000c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c20:	f7ff ffee 	bl	8000c00 <HAL_GetTick>
 8000c24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c30:	d005      	beq.n	8000c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c32:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <HAL_Delay+0x44>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	461a      	mov	r2, r3
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c3e:	bf00      	nop
 8000c40:	f7ff ffde 	bl	8000c00 <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d8f7      	bhi.n	8000c40 <HAL_Delay+0x28>
  {
  }
}
 8000c50:	bf00      	nop
 8000c52:	bf00      	nop
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	2400000c 	.word	0x2400000c

08000c60 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000c64:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <HAL_GetREVID+0x14>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	0c1b      	lsrs	r3, r3, #16
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	5c001000 	.word	0x5c001000

08000c78 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8000c88:	4904      	ldr	r1, [pc, #16]	; (8000c9c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	604b      	str	r3, [r1, #4]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	58000400 	.word	0x58000400

08000ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <__NVIC_SetPriorityGrouping+0x40>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb6:	68ba      	ldr	r2, [r7, #8]
 8000cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cce:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <__NVIC_SetPriorityGrouping+0x40>)
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	60d3      	str	r3, [r2, #12]
}
 8000cd4:	bf00      	nop
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000ed00 	.word	0xe000ed00
 8000ce4:	05fa0000 	.word	0x05fa0000

08000ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <__NVIC_GetPriorityGrouping+0x18>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	0a1b      	lsrs	r3, r3, #8
 8000cf2:	f003 0307 	and.w	r3, r3, #7
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	6039      	str	r1, [r7, #0]
 8000d0e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	db0a      	blt.n	8000d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	490c      	ldr	r1, [pc, #48]	; (8000d50 <__NVIC_SetPriority+0x4c>)
 8000d1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d22:	0112      	lsls	r2, r2, #4
 8000d24:	b2d2      	uxtb	r2, r2
 8000d26:	440b      	add	r3, r1
 8000d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d2c:	e00a      	b.n	8000d44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	4908      	ldr	r1, [pc, #32]	; (8000d54 <__NVIC_SetPriority+0x50>)
 8000d34:	88fb      	ldrh	r3, [r7, #6]
 8000d36:	f003 030f 	and.w	r3, r3, #15
 8000d3a:	3b04      	subs	r3, #4
 8000d3c:	0112      	lsls	r2, r2, #4
 8000d3e:	b2d2      	uxtb	r2, r2
 8000d40:	440b      	add	r3, r1
 8000d42:	761a      	strb	r2, [r3, #24]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000e100 	.word	0xe000e100
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b089      	sub	sp, #36	; 0x24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	f1c3 0307 	rsb	r3, r3, #7
 8000d72:	2b04      	cmp	r3, #4
 8000d74:	bf28      	it	cs
 8000d76:	2304      	movcs	r3, #4
 8000d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	2b06      	cmp	r3, #6
 8000d80:	d902      	bls.n	8000d88 <NVIC_EncodePriority+0x30>
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3b03      	subs	r3, #3
 8000d86:	e000      	b.n	8000d8a <NVIC_EncodePriority+0x32>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43da      	mvns	r2, r3
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da0:	f04f 31ff 	mov.w	r1, #4294967295
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa01 f303 	lsl.w	r3, r1, r3
 8000daa:	43d9      	mvns	r1, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	4313      	orrs	r3, r2
         );
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3724      	adds	r7, #36	; 0x24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
	...

08000dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd0:	d301      	bcc.n	8000dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e00f      	b.n	8000df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <SysTick_Config+0x40>)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dde:	210f      	movs	r1, #15
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295
 8000de4:	f7ff ff8e 	bl	8000d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <SysTick_Config+0x40>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dee:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <SysTick_Config+0x40>)
 8000df0:	2207      	movs	r2, #7
 8000df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	e000e010 	.word	0xe000e010

08000e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff ff47 	bl	8000ca0 <__NVIC_SetPriorityGrouping>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b086      	sub	sp, #24
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4603      	mov	r3, r0
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
 8000e26:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e28:	f7ff ff5e 	bl	8000ce8 <__NVIC_GetPriorityGrouping>
 8000e2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	68b9      	ldr	r1, [r7, #8]
 8000e32:	6978      	ldr	r0, [r7, #20]
 8000e34:	f7ff ff90 	bl	8000d58 <NVIC_EncodePriority>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e3e:	4611      	mov	r1, r2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff5f 	bl	8000d04 <__NVIC_SetPriority>
}
 8000e46:	bf00      	nop
 8000e48:	3718      	adds	r7, #24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f7ff ffb2 	bl	8000dc0 <SysTick_Config>
 8000e5c:	4603      	mov	r3, r0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d101      	bne.n	8000e7a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e0cf      	b.n	800101a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d106      	bne.n	8000e92 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2223      	movs	r2, #35	; 0x23
 8000e88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f7ff fc87 	bl	80007a0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e92:	4b64      	ldr	r3, [pc, #400]	; (8001024 <HAL_ETH_Init+0x1bc>)
 8000e94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e98:	4a62      	ldr	r2, [pc, #392]	; (8001024 <HAL_ETH_Init+0x1bc>)
 8000e9a:	f043 0302 	orr.w	r3, r3, #2
 8000e9e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ea2:	4b60      	ldr	r3, [pc, #384]	; (8001024 <HAL_ETH_Init+0x1bc>)
 8000ea4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ea8:	f003 0302 	and.w	r3, r3, #2
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	7a1b      	ldrb	r3, [r3, #8]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d103      	bne.n	8000ec0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8000eb8:	2000      	movs	r0, #0
 8000eba:	f7ff fedd 	bl	8000c78 <HAL_SYSCFG_ETHInterfaceSelect>
 8000ebe:	e003      	b.n	8000ec8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8000ec0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000ec4:	f7ff fed8 	bl	8000c78 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8000ec8:	4b57      	ldr	r3, [pc, #348]	; (8001028 <HAL_ETH_Init+0x1c0>)
 8000eca:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	6812      	ldr	r2, [r2, #0]
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000ee2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ee4:	f7ff fe8c 	bl	8000c00 <HAL_GetTick>
 8000ee8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8000eea:	e011      	b.n	8000f10 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8000eec:	f7ff fe88 	bl	8000c00 <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000efa:	d909      	bls.n	8000f10 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2204      	movs	r2, #4
 8000f00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	22e0      	movs	r2, #224	; 0xe0
 8000f08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e084      	b.n	800101a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d1e4      	bne.n	8000eec <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f000 f886 	bl	8001034 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8000f28:	f001 feb0 	bl	8002c8c <HAL_RCC_GetHCLKFreq>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	4a3f      	ldr	r2, [pc, #252]	; (800102c <HAL_ETH_Init+0x1c4>)
 8000f30:	fba2 2303 	umull	r2, r3, r2, r3
 8000f34:	0c9a      	lsrs	r2, r3, #18
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	3a01      	subs	r2, #1
 8000f3c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f000 fa71 	bl	8001428 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f4e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000f52:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	6812      	ldr	r2, [r2, #0]
 8000f5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f5e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000f62:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	f003 0303 	and.w	r3, r3, #3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d009      	beq.n	8000f86 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2201      	movs	r2, #1
 8000f76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	22e0      	movs	r2, #224	; 0xe0
 8000f7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e049      	b.n	800101a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f8e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8000f92:	4b27      	ldr	r3, [pc, #156]	; (8001030 <HAL_ETH_Init+0x1c8>)
 8000f94:	4013      	ands	r3, r2
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	6952      	ldr	r2, [r2, #20]
 8000f9a:	0051      	lsls	r1, r2, #1
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	6812      	ldr	r2, [r2, #0]
 8000fa0:	430b      	orrs	r3, r1
 8000fa2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000fa6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 fad9 	bl	8001562 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f000 fb1f 	bl	80015f4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	3305      	adds	r3, #5
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	021a      	lsls	r2, r3, #8
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	3303      	adds	r3, #3
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	061a      	lsls	r2, r3, #24
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	3302      	adds	r3, #2
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	041b      	lsls	r3, r3, #16
 8000fe8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000ff4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001002:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001004:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2210      	movs	r2, #16
 8001014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	58024400 	.word	0x58024400
 8001028:	58000400 	.word	0x58000400
 800102c:	431bde83 	.word	0x431bde83
 8001030:	ffff8001 	.word	0xffff8001

08001034 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001044:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800104c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800104e:	f001 fe1d 	bl	8002c8c <HAL_RCC_GetHCLKFreq>
 8001052:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	4a1e      	ldr	r2, [pc, #120]	; (80010d0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d908      	bls.n	800106e <HAL_ETH_SetMDIOClockRange+0x3a>
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	4a1d      	ldr	r2, [pc, #116]	; (80010d4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d804      	bhi.n	800106e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	e027      	b.n	80010be <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	4a18      	ldr	r2, [pc, #96]	; (80010d4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d908      	bls.n	8001088 <HAL_ETH_SetMDIOClockRange+0x54>
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	4a17      	ldr	r2, [pc, #92]	; (80010d8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d204      	bcs.n	8001088 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	e01a      	b.n	80010be <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	4a13      	ldr	r2, [pc, #76]	; (80010d8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d303      	bcc.n	8001098 <HAL_ETH_SetMDIOClockRange+0x64>
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	4a12      	ldr	r2, [pc, #72]	; (80010dc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d911      	bls.n	80010bc <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	4a10      	ldr	r2, [pc, #64]	; (80010dc <HAL_ETH_SetMDIOClockRange+0xa8>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d908      	bls.n	80010b2 <HAL_ETH_SetMDIOClockRange+0x7e>
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	4a0f      	ldr	r2, [pc, #60]	; (80010e0 <HAL_ETH_SetMDIOClockRange+0xac>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d804      	bhi.n	80010b2 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	e005      	b.n	80010be <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	e000      	b.n	80010be <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80010bc:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80010c8:	bf00      	nop
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	01312cff 	.word	0x01312cff
 80010d4:	02160ebf 	.word	0x02160ebf
 80010d8:	03938700 	.word	0x03938700
 80010dc:	05f5e0ff 	.word	0x05f5e0ff
 80010e0:	08f0d17f 	.word	0x08f0d17f

080010e4 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80010f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	791b      	ldrb	r3, [r3, #4]
 80010fc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80010fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	7b1b      	ldrb	r3, [r3, #12]
 8001104:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001106:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	7b5b      	ldrb	r3, [r3, #13]
 800110c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800110e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	7b9b      	ldrb	r3, [r3, #14]
 8001114:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001116:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	7bdb      	ldrb	r3, [r3, #15]
 800111c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800111e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001120:	683a      	ldr	r2, [r7, #0]
 8001122:	7c12      	ldrb	r2, [r2, #16]
 8001124:	2a00      	cmp	r2, #0
 8001126:	d102      	bne.n	800112e <ETH_SetMACConfig+0x4a>
 8001128:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800112c:	e000      	b.n	8001130 <ETH_SetMACConfig+0x4c>
 800112e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001130:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	7c52      	ldrb	r2, [r2, #17]
 8001136:	2a00      	cmp	r2, #0
 8001138:	d102      	bne.n	8001140 <ETH_SetMACConfig+0x5c>
 800113a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800113e:	e000      	b.n	8001142 <ETH_SetMACConfig+0x5e>
 8001140:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001142:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	7c9b      	ldrb	r3, [r3, #18]
 8001148:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800114a:	431a      	orrs	r2, r3
               macconf->Speed |
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001150:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001156:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	7f1b      	ldrb	r3, [r3, #28]
 800115c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800115e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	7f5b      	ldrb	r3, [r3, #29]
 8001164:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001166:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001168:	683a      	ldr	r2, [r7, #0]
 800116a:	7f92      	ldrb	r2, [r2, #30]
 800116c:	2a00      	cmp	r2, #0
 800116e:	d102      	bne.n	8001176 <ETH_SetMACConfig+0x92>
 8001170:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001174:	e000      	b.n	8001178 <ETH_SetMACConfig+0x94>
 8001176:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001178:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	7fdb      	ldrb	r3, [r3, #31]
 800117e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001180:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001188:	2a00      	cmp	r2, #0
 800118a:	d102      	bne.n	8001192 <ETH_SetMACConfig+0xae>
 800118c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001190:	e000      	b.n	8001194 <ETH_SetMACConfig+0xb0>
 8001192:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001194:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800119a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80011a2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80011a4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80011aa:	4313      	orrs	r3, r2
 80011ac:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b56      	ldr	r3, [pc, #344]	; (8001310 <ETH_SetMACConfig+0x22c>)
 80011b6:	4013      	ands	r3, r2
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	6812      	ldr	r2, [r2, #0]
 80011bc:	68f9      	ldr	r1, [r7, #12]
 80011be:	430b      	orrs	r3, r1
 80011c0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011c6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80011ce:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80011d0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80011d8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80011da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80011e2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80011e4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80011e6:	683a      	ldr	r2, [r7, #0]
 80011e8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80011ec:	2a00      	cmp	r2, #0
 80011ee:	d102      	bne.n	80011f6 <ETH_SetMACConfig+0x112>
 80011f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011f4:	e000      	b.n	80011f8 <ETH_SetMACConfig+0x114>
 80011f6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80011f8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80011fe:	4313      	orrs	r3, r2
 8001200:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	4b42      	ldr	r3, [pc, #264]	; (8001314 <ETH_SetMACConfig+0x230>)
 800120a:	4013      	ands	r3, r2
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	6812      	ldr	r2, [r2, #0]
 8001210:	68f9      	ldr	r1, [r7, #12]
 8001212:	430b      	orrs	r3, r1
 8001214:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800121c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001222:	4313      	orrs	r3, r2
 8001224:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	68da      	ldr	r2, [r3, #12]
 800122c:	4b3a      	ldr	r3, [pc, #232]	; (8001318 <ETH_SetMACConfig+0x234>)
 800122e:	4013      	ands	r3, r2
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	6812      	ldr	r2, [r2, #0]
 8001234:	68f9      	ldr	r1, [r7, #12]
 8001236:	430b      	orrs	r3, r1
 8001238:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001240:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001246:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001248:	683a      	ldr	r2, [r7, #0]
 800124a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800124e:	2a00      	cmp	r2, #0
 8001250:	d101      	bne.n	8001256 <ETH_SetMACConfig+0x172>
 8001252:	2280      	movs	r2, #128	; 0x80
 8001254:	e000      	b.n	8001258 <ETH_SetMACConfig+0x174>
 8001256:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001258:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800125e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001260:	4313      	orrs	r3, r2
 8001262:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800126a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800126e:	4013      	ands	r3, r2
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	6812      	ldr	r2, [r2, #0]
 8001274:	68f9      	ldr	r1, [r7, #12]
 8001276:	430b      	orrs	r3, r1
 8001278:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001280:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001288:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800128a:	4313      	orrs	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001296:	f023 0103 	bic.w	r1, r3, #3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	430a      	orrs	r2, r1
 80012a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80012ae:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	430a      	orrs	r2, r1
 80012bc:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80012ca:	2a00      	cmp	r2, #0
 80012cc:	d101      	bne.n	80012d2 <ETH_SetMACConfig+0x1ee>
 80012ce:	2240      	movs	r2, #64	; 0x40
 80012d0:	e000      	b.n	80012d4 <ETH_SetMACConfig+0x1f0>
 80012d2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80012d4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80012dc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80012de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80012e6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80012e8:	4313      	orrs	r3, r2
 80012ea:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80012f4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	68fa      	ldr	r2, [r7, #12]
 80012fe:	430a      	orrs	r2, r1
 8001300:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001304:	bf00      	nop
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	00048083 	.word	0x00048083
 8001314:	c0f88000 	.word	0xc0f88000
 8001318:	fffffef0 	.word	0xfffffef0

0800131c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b38      	ldr	r3, [pc, #224]	; (8001414 <ETH_SetDMAConfig+0xf8>)
 8001332:	4013      	ands	r3, r2
 8001334:	683a      	ldr	r2, [r7, #0]
 8001336:	6811      	ldr	r1, [r2, #0]
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	6812      	ldr	r2, [r2, #0]
 800133c:	430b      	orrs	r3, r1
 800133e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001342:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	791b      	ldrb	r3, [r3, #4]
 8001348:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800134e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	7b1b      	ldrb	r3, [r3, #12]
 8001354:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001356:	4313      	orrs	r3, r2
 8001358:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	4b2c      	ldr	r3, [pc, #176]	; (8001418 <ETH_SetDMAConfig+0xfc>)
 8001366:	4013      	ands	r3, r2
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	6812      	ldr	r2, [r2, #0]
 800136c:	68f9      	ldr	r1, [r7, #12]
 800136e:	430b      	orrs	r3, r1
 8001370:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001374:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	7b5b      	ldrb	r3, [r3, #13]
 800137a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001380:	4313      	orrs	r3, r2
 8001382:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800138c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001390:	4b22      	ldr	r3, [pc, #136]	; (800141c <ETH_SetDMAConfig+0x100>)
 8001392:	4013      	ands	r3, r2
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	6812      	ldr	r2, [r2, #0]
 8001398:	68f9      	ldr	r1, [r7, #12]
 800139a:	430b      	orrs	r3, r1
 800139c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013a0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	7d1b      	ldrb	r3, [r3, #20]
 80013ac:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80013ae:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	7f5b      	ldrb	r3, [r3, #29]
 80013b4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80013b6:	4313      	orrs	r3, r2
 80013b8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013c2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80013c6:	4b16      	ldr	r3, [pc, #88]	; (8001420 <ETH_SetDMAConfig+0x104>)
 80013c8:	4013      	ands	r3, r2
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	6812      	ldr	r2, [r2, #0]
 80013ce:	68f9      	ldr	r1, [r7, #12]
 80013d0:	430b      	orrs	r3, r1
 80013d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013d6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	7f1b      	ldrb	r3, [r3, #28]
 80013de:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80013e4:	4313      	orrs	r3, r2
 80013e6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013f0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80013f4:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <ETH_SetDMAConfig+0x108>)
 80013f6:	4013      	ands	r3, r2
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	6812      	ldr	r2, [r2, #0]
 80013fc:	68f9      	ldr	r1, [r7, #12]
 80013fe:	430b      	orrs	r3, r1
 8001400:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001404:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	ffff87fd 	.word	0xffff87fd
 8001418:	ffff2ffe 	.word	0xffff2ffe
 800141c:	fffec000 	.word	0xfffec000
 8001420:	ffc0efef 	.word	0xffc0efef
 8001424:	7fc0ffff 	.word	0x7fc0ffff

08001428 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b0a4      	sub	sp, #144	; 0x90
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001430:	2301      	movs	r3, #1
 8001432:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001436:	2300      	movs	r3, #0
 8001438:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001440:	2300      	movs	r3, #0
 8001442:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001446:	2301      	movs	r3, #1
 8001448:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800144c:	2301      	movs	r3, #1
 800144e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001452:	2301      	movs	r3, #1
 8001454:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001458:	2300      	movs	r3, #0
 800145a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800145e:	2301      	movs	r3, #1
 8001460:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001464:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001468:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800146a:	2300      	movs	r3, #0
 800146c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001470:	2300      	movs	r3, #0
 8001472:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001474:	2300      	movs	r3, #0
 8001476:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001480:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001484:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001486:	2300      	movs	r3, #0
 8001488:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800148c:	2300      	movs	r3, #0
 800148e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001490:	2301      	movs	r3, #1
 8001492:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80014a2:	2300      	movs	r3, #0
 80014a4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80014aa:	2300      	movs	r3, #0
 80014ac:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80014ba:	2301      	movs	r3, #1
 80014bc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80014c0:	2320      	movs	r3, #32
 80014c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80014c6:	2301      	movs	r3, #1
 80014c8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80014d2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80014d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80014d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014dc:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80014e4:	2302      	movs	r3, #2
 80014e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80014fc:	2301      	movs	r3, #1
 80014fe:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001502:	2300      	movs	r3, #0
 8001504:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001506:	2301      	movs	r3, #1
 8001508:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800150c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001510:	4619      	mov	r1, r3
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff fde6 	bl	80010e4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001518:	2301      	movs	r3, #1
 800151a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800151c:	2301      	movs	r3, #1
 800151e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001520:	2300      	movs	r3, #0
 8001522:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800152a:	2300      	movs	r3, #0
 800152c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800152e:	2300      	movs	r3, #0
 8001530:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001532:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001536:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800153c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001540:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001542:	2300      	movs	r3, #0
 8001544:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001548:	f44f 7306 	mov.w	r3, #536	; 0x218
 800154c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800154e:	f107 0308 	add.w	r3, r7, #8
 8001552:	4619      	mov	r1, r3
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7ff fee1 	bl	800131c <ETH_SetDMAConfig>
}
 800155a:	bf00      	nop
 800155c:	3790      	adds	r7, #144	; 0x90
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001562:	b480      	push	{r7}
 8001564:	b085      	sub	sp, #20
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	e01d      	b.n	80015ac <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68d9      	ldr	r1, [r3, #12]
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	4613      	mov	r3, r2
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	4413      	add	r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	440b      	add	r3, r1
 8001580:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	2200      	movs	r2, #0
 800158c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800159a:	68b9      	ldr	r1, [r7, #8]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	3206      	adds	r2, #6
 80015a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	3301      	adds	r3, #1
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2b03      	cmp	r3, #3
 80015b0:	d9de      	bls.n	8001570 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015c0:	461a      	mov	r2, r3
 80015c2:	2303      	movs	r3, #3
 80015c4:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68da      	ldr	r2, [r3, #12]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015d4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68da      	ldr	r2, [r3, #12]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015e4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80015e8:	bf00      	nop
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	e023      	b.n	800164a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6919      	ldr	r1, [r3, #16]
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	4613      	mov	r3, r2
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	4413      	add	r3, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	440b      	add	r3, r1
 8001612:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	2200      	movs	r2, #0
 800161e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	2200      	movs	r2, #0
 800162a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	2200      	movs	r2, #0
 8001636:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001638:	68b9      	ldr	r1, [r7, #8]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	3212      	adds	r2, #18
 8001640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	3301      	adds	r3, #1
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2b03      	cmp	r3, #3
 800164e:	d9d8      	bls.n	8001602 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001676:	461a      	mov	r2, r3
 8001678:	2303      	movs	r3, #3
 800167a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	691a      	ldr	r2, [r3, #16]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800168a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800169e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80016a2:	bf00      	nop
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
	...

080016b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b089      	sub	sp, #36	; 0x24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80016be:	4b89      	ldr	r3, [pc, #548]	; (80018e4 <HAL_GPIO_Init+0x234>)
 80016c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016c2:	e194      	b.n	80019ee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	2101      	movs	r1, #1
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	fa01 f303 	lsl.w	r3, r1, r3
 80016d0:	4013      	ands	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 8186 	beq.w	80019e8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d005      	beq.n	80016f4 <HAL_GPIO_Init+0x44>
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0303 	and.w	r3, r3, #3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d130      	bne.n	8001756 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	2203      	movs	r2, #3
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	68da      	ldr	r2, [r3, #12]
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4313      	orrs	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800172a:	2201      	movs	r2, #1
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4013      	ands	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	091b      	lsrs	r3, r3, #4
 8001740:	f003 0201 	and.w	r2, r3, #1
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4313      	orrs	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	2b03      	cmp	r3, #3
 8001760:	d017      	beq.n	8001792 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	2203      	movs	r2, #3
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4013      	ands	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4313      	orrs	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f003 0303 	and.w	r3, r3, #3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d123      	bne.n	80017e6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	08da      	lsrs	r2, r3, #3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	3208      	adds	r2, #8
 80017a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	220f      	movs	r2, #15
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43db      	mvns	r3, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4013      	ands	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	691a      	ldr	r2, [r3, #16]
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	f003 0307 	and.w	r3, r3, #7
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	08da      	lsrs	r2, r3, #3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3208      	adds	r2, #8
 80017e0:	69b9      	ldr	r1, [r7, #24]
 80017e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	2203      	movs	r2, #3
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43db      	mvns	r3, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4013      	ands	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f003 0203 	and.w	r2, r3, #3
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001822:	2b00      	cmp	r3, #0
 8001824:	f000 80e0 	beq.w	80019e8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001828:	4b2f      	ldr	r3, [pc, #188]	; (80018e8 <HAL_GPIO_Init+0x238>)
 800182a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800182e:	4a2e      	ldr	r2, [pc, #184]	; (80018e8 <HAL_GPIO_Init+0x238>)
 8001830:	f043 0302 	orr.w	r3, r3, #2
 8001834:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001838:	4b2b      	ldr	r3, [pc, #172]	; (80018e8 <HAL_GPIO_Init+0x238>)
 800183a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001846:	4a29      	ldr	r2, [pc, #164]	; (80018ec <HAL_GPIO_Init+0x23c>)
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	089b      	lsrs	r3, r3, #2
 800184c:	3302      	adds	r3, #2
 800184e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001852:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f003 0303 	and.w	r3, r3, #3
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	220f      	movs	r2, #15
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4013      	ands	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a20      	ldr	r2, [pc, #128]	; (80018f0 <HAL_GPIO_Init+0x240>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d052      	beq.n	8001918 <HAL_GPIO_Init+0x268>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a1f      	ldr	r2, [pc, #124]	; (80018f4 <HAL_GPIO_Init+0x244>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d031      	beq.n	80018de <HAL_GPIO_Init+0x22e>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a1e      	ldr	r2, [pc, #120]	; (80018f8 <HAL_GPIO_Init+0x248>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d02b      	beq.n	80018da <HAL_GPIO_Init+0x22a>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a1d      	ldr	r2, [pc, #116]	; (80018fc <HAL_GPIO_Init+0x24c>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d025      	beq.n	80018d6 <HAL_GPIO_Init+0x226>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a1c      	ldr	r2, [pc, #112]	; (8001900 <HAL_GPIO_Init+0x250>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d01f      	beq.n	80018d2 <HAL_GPIO_Init+0x222>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a1b      	ldr	r2, [pc, #108]	; (8001904 <HAL_GPIO_Init+0x254>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d019      	beq.n	80018ce <HAL_GPIO_Init+0x21e>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a1a      	ldr	r2, [pc, #104]	; (8001908 <HAL_GPIO_Init+0x258>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d013      	beq.n	80018ca <HAL_GPIO_Init+0x21a>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a19      	ldr	r2, [pc, #100]	; (800190c <HAL_GPIO_Init+0x25c>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d00d      	beq.n	80018c6 <HAL_GPIO_Init+0x216>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a18      	ldr	r2, [pc, #96]	; (8001910 <HAL_GPIO_Init+0x260>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d007      	beq.n	80018c2 <HAL_GPIO_Init+0x212>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a17      	ldr	r2, [pc, #92]	; (8001914 <HAL_GPIO_Init+0x264>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d101      	bne.n	80018be <HAL_GPIO_Init+0x20e>
 80018ba:	2309      	movs	r3, #9
 80018bc:	e02d      	b.n	800191a <HAL_GPIO_Init+0x26a>
 80018be:	230a      	movs	r3, #10
 80018c0:	e02b      	b.n	800191a <HAL_GPIO_Init+0x26a>
 80018c2:	2308      	movs	r3, #8
 80018c4:	e029      	b.n	800191a <HAL_GPIO_Init+0x26a>
 80018c6:	2307      	movs	r3, #7
 80018c8:	e027      	b.n	800191a <HAL_GPIO_Init+0x26a>
 80018ca:	2306      	movs	r3, #6
 80018cc:	e025      	b.n	800191a <HAL_GPIO_Init+0x26a>
 80018ce:	2305      	movs	r3, #5
 80018d0:	e023      	b.n	800191a <HAL_GPIO_Init+0x26a>
 80018d2:	2304      	movs	r3, #4
 80018d4:	e021      	b.n	800191a <HAL_GPIO_Init+0x26a>
 80018d6:	2303      	movs	r3, #3
 80018d8:	e01f      	b.n	800191a <HAL_GPIO_Init+0x26a>
 80018da:	2302      	movs	r3, #2
 80018dc:	e01d      	b.n	800191a <HAL_GPIO_Init+0x26a>
 80018de:	2301      	movs	r3, #1
 80018e0:	e01b      	b.n	800191a <HAL_GPIO_Init+0x26a>
 80018e2:	bf00      	nop
 80018e4:	58000080 	.word	0x58000080
 80018e8:	58024400 	.word	0x58024400
 80018ec:	58000400 	.word	0x58000400
 80018f0:	58020000 	.word	0x58020000
 80018f4:	58020400 	.word	0x58020400
 80018f8:	58020800 	.word	0x58020800
 80018fc:	58020c00 	.word	0x58020c00
 8001900:	58021000 	.word	0x58021000
 8001904:	58021400 	.word	0x58021400
 8001908:	58021800 	.word	0x58021800
 800190c:	58021c00 	.word	0x58021c00
 8001910:	58022000 	.word	0x58022000
 8001914:	58022400 	.word	0x58022400
 8001918:	2300      	movs	r3, #0
 800191a:	69fa      	ldr	r2, [r7, #28]
 800191c:	f002 0203 	and.w	r2, r2, #3
 8001920:	0092      	lsls	r2, r2, #2
 8001922:	4093      	lsls	r3, r2
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4313      	orrs	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800192a:	4938      	ldr	r1, [pc, #224]	; (8001a0c <HAL_GPIO_Init+0x35c>)
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	089b      	lsrs	r3, r3, #2
 8001930:	3302      	adds	r3, #2
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	43db      	mvns	r3, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4013      	ands	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800195e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	43db      	mvns	r3, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d003      	beq.n	800198c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	4313      	orrs	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800198c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	43db      	mvns	r3, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	3301      	adds	r3, #1
 80019ec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	fa22 f303 	lsr.w	r3, r2, r3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f47f ae63 	bne.w	80016c4 <HAL_GPIO_Init+0x14>
  }
}
 80019fe:	bf00      	nop
 8001a00:	bf00      	nop
 8001a02:	3724      	adds	r7, #36	; 0x24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	58000400 	.word	0x58000400

08001a10 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001a18:	4a08      	ldr	r2, [pc, #32]	; (8001a3c <HAL_HSEM_FastTake+0x2c>)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3320      	adds	r3, #32
 8001a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a22:	4a07      	ldr	r2, [pc, #28]	; (8001a40 <HAL_HSEM_FastTake+0x30>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d101      	bne.n	8001a2c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	e000      	b.n	8001a2e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	58026400 	.word	0x58026400
 8001a40:	80000300 	.word	0x80000300

08001a44 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001a4e:	4906      	ldr	r1, [pc, #24]	; (8001a68 <HAL_HSEM_Release+0x24>)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	58026400 	.word	0x58026400

08001a6c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a6e:	b08f      	sub	sp, #60	; 0x3c
 8001a70:	af0a      	add	r7, sp, #40	; 0x28
 8001a72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e116      	b.n	8001cac <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d106      	bne.n	8001a9e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7fe ff4f 	bl	800093c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2203      	movs	r2, #3
 8001aa2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d102      	bne.n	8001ab8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f002 fa2d 	bl	8003f1c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	687e      	ldr	r6, [r7, #4]
 8001aca:	466d      	mov	r5, sp
 8001acc:	f106 0410 	add.w	r4, r6, #16
 8001ad0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ad2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ad4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ad6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ad8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001adc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ae0:	1d33      	adds	r3, r6, #4
 8001ae2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ae4:	6838      	ldr	r0, [r7, #0]
 8001ae6:	f002 f9ab 	bl	8003e40 <USB_CoreInit>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d005      	beq.n	8001afc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2202      	movs	r2, #2
 8001af4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e0d7      	b.n	8001cac <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2100      	movs	r1, #0
 8001b02:	4618      	mov	r0, r3
 8001b04:	f002 fa1b 	bl	8003f3e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b08:	2300      	movs	r3, #0
 8001b0a:	73fb      	strb	r3, [r7, #15]
 8001b0c:	e04a      	b.n	8001ba4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b0e:	7bfa      	ldrb	r2, [r7, #15]
 8001b10:	6879      	ldr	r1, [r7, #4]
 8001b12:	4613      	mov	r3, r2
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	4413      	add	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	333d      	adds	r3, #61	; 0x3d
 8001b1e:	2201      	movs	r2, #1
 8001b20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b22:	7bfa      	ldrb	r2, [r7, #15]
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	4613      	mov	r3, r2
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	4413      	add	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	440b      	add	r3, r1
 8001b30:	333c      	adds	r3, #60	; 0x3c
 8001b32:	7bfa      	ldrb	r2, [r7, #15]
 8001b34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b36:	7bfa      	ldrb	r2, [r7, #15]
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
 8001b3a:	b298      	uxth	r0, r3
 8001b3c:	6879      	ldr	r1, [r7, #4]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	4413      	add	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	440b      	add	r3, r1
 8001b48:	3344      	adds	r3, #68	; 0x44
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b4e:	7bfa      	ldrb	r2, [r7, #15]
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	4613      	mov	r3, r2
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	4413      	add	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	440b      	add	r3, r1
 8001b5c:	3340      	adds	r3, #64	; 0x40
 8001b5e:	2200      	movs	r2, #0
 8001b60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b62:	7bfa      	ldrb	r2, [r7, #15]
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	4613      	mov	r3, r2
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	440b      	add	r3, r1
 8001b70:	3348      	adds	r3, #72	; 0x48
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b76:	7bfa      	ldrb	r2, [r7, #15]
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	4413      	add	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	440b      	add	r3, r1
 8001b84:	334c      	adds	r3, #76	; 0x4c
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b8a:	7bfa      	ldrb	r2, [r7, #15]
 8001b8c:	6879      	ldr	r1, [r7, #4]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	4413      	add	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	440b      	add	r3, r1
 8001b98:	3354      	adds	r3, #84	; 0x54
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	73fb      	strb	r3, [r7, #15]
 8001ba4:	7bfa      	ldrb	r2, [r7, #15]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d3af      	bcc.n	8001b0e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bae:	2300      	movs	r3, #0
 8001bb0:	73fb      	strb	r3, [r7, #15]
 8001bb2:	e044      	b.n	8001c3e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001bb4:	7bfa      	ldrb	r2, [r7, #15]
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001bca:	7bfa      	ldrb	r2, [r7, #15]
 8001bcc:	6879      	ldr	r1, [r7, #4]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001bdc:	7bfa      	ldrb	r2, [r7, #15]
 8001bde:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001be0:	7bfa      	ldrb	r2, [r7, #15]
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	4613      	mov	r3, r2
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	4413      	add	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	440b      	add	r3, r1
 8001bee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001bf6:	7bfa      	ldrb	r2, [r7, #15]
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	4413      	add	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	440b      	add	r3, r1
 8001c04:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c0c:	7bfa      	ldrb	r2, [r7, #15]
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	4613      	mov	r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	4413      	add	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	440b      	add	r3, r1
 8001c1a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c22:	7bfa      	ldrb	r2, [r7, #15]
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	4613      	mov	r3, r2
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	4413      	add	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	440b      	add	r3, r1
 8001c30:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	73fb      	strb	r3, [r7, #15]
 8001c3e:	7bfa      	ldrb	r2, [r7, #15]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d3b5      	bcc.n	8001bb4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	603b      	str	r3, [r7, #0]
 8001c4e:	687e      	ldr	r6, [r7, #4]
 8001c50:	466d      	mov	r5, sp
 8001c52:	f106 0410 	add.w	r4, r6, #16
 8001c56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c62:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c66:	1d33      	adds	r3, r6, #4
 8001c68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c6a:	6838      	ldr	r0, [r7, #0]
 8001c6c:	f002 f9b4 	bl	8003fd8 <USB_DevInit>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d005      	beq.n	8001c82 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2202      	movs	r2, #2
 8001c7a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e014      	b.n	8001cac <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d102      	bne.n	8001ca0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f80a 	bl	8001cb4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f002 fb72 	bl	800438e <USB_DevDisconnect>

  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cb4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001ce2:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <HAL_PCDEx_ActivateLPM+0x44>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	10000003 	.word	0x10000003

08001cfc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001d04:	4b29      	ldr	r3, [pc, #164]	; (8001dac <HAL_PWREx_ConfigSupply+0xb0>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	2b06      	cmp	r3, #6
 8001d0e:	d00a      	beq.n	8001d26 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001d10:	4b26      	ldr	r3, [pc, #152]	; (8001dac <HAL_PWREx_ConfigSupply+0xb0>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d001      	beq.n	8001d22 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e040      	b.n	8001da4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001d22:	2300      	movs	r3, #0
 8001d24:	e03e      	b.n	8001da4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001d26:	4b21      	ldr	r3, [pc, #132]	; (8001dac <HAL_PWREx_ConfigSupply+0xb0>)
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001d2e:	491f      	ldr	r1, [pc, #124]	; (8001dac <HAL_PWREx_ConfigSupply+0xb0>)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001d36:	f7fe ff63 	bl	8000c00 <HAL_GetTick>
 8001d3a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001d3c:	e009      	b.n	8001d52 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001d3e:	f7fe ff5f 	bl	8000c00 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d4c:	d901      	bls.n	8001d52 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e028      	b.n	8001da4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001d52:	4b16      	ldr	r3, [pc, #88]	; (8001dac <HAL_PWREx_ConfigSupply+0xb0>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d5e:	d1ee      	bne.n	8001d3e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b1e      	cmp	r3, #30
 8001d64:	d008      	beq.n	8001d78 <HAL_PWREx_ConfigSupply+0x7c>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b2e      	cmp	r3, #46	; 0x2e
 8001d6a:	d005      	beq.n	8001d78 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b1d      	cmp	r3, #29
 8001d70:	d002      	beq.n	8001d78 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b2d      	cmp	r3, #45	; 0x2d
 8001d76:	d114      	bne.n	8001da2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001d78:	f7fe ff42 	bl	8000c00 <HAL_GetTick>
 8001d7c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001d7e:	e009      	b.n	8001d94 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001d80:	f7fe ff3e 	bl	8000c00 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d8e:	d901      	bls.n	8001d94 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e007      	b.n	8001da4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001d94:	4b05      	ldr	r3, [pc, #20]	; (8001dac <HAL_PWREx_ConfigSupply+0xb0>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da0:	d1ee      	bne.n	8001d80 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	58024800 	.word	0x58024800

08001db0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001db4:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	4a04      	ldr	r2, [pc, #16]	; (8001dcc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dbe:	60d3      	str	r3, [r2, #12]
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	58024800 	.word	0x58024800

08001dd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08c      	sub	sp, #48	; 0x30
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d102      	bne.n	8001de4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	f000 bc1d 	b.w	800261e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 8087 	beq.w	8001f00 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001df2:	4b99      	ldr	r3, [pc, #612]	; (8002058 <HAL_RCC_OscConfig+0x288>)
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001dfc:	4b96      	ldr	r3, [pc, #600]	; (8002058 <HAL_RCC_OscConfig+0x288>)
 8001dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e00:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e04:	2b10      	cmp	r3, #16
 8001e06:	d007      	beq.n	8001e18 <HAL_RCC_OscConfig+0x48>
 8001e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e0a:	2b18      	cmp	r3, #24
 8001e0c:	d110      	bne.n	8001e30 <HAL_RCC_OscConfig+0x60>
 8001e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d10b      	bne.n	8001e30 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e18:	4b8f      	ldr	r3, [pc, #572]	; (8002058 <HAL_RCC_OscConfig+0x288>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d06c      	beq.n	8001efe <HAL_RCC_OscConfig+0x12e>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d168      	bne.n	8001efe <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e3f6      	b.n	800261e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e38:	d106      	bne.n	8001e48 <HAL_RCC_OscConfig+0x78>
 8001e3a:	4b87      	ldr	r3, [pc, #540]	; (8002058 <HAL_RCC_OscConfig+0x288>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a86      	ldr	r2, [pc, #536]	; (8002058 <HAL_RCC_OscConfig+0x288>)
 8001e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	e02e      	b.n	8001ea6 <HAL_RCC_OscConfig+0xd6>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d10c      	bne.n	8001e6a <HAL_RCC_OscConfig+0x9a>
 8001e50:	4b81      	ldr	r3, [pc, #516]	; (8002058 <HAL_RCC_OscConfig+0x288>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a80      	ldr	r2, [pc, #512]	; (8002058 <HAL_RCC_OscConfig+0x288>)
 8001e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e5a:	6013      	str	r3, [r2, #0]
 8001e5c:	4b7e      	ldr	r3, [pc, #504]	; (8002058 <HAL_RCC_OscConfig+0x288>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a7d      	ldr	r2, [pc, #500]	; (8002058 <HAL_RCC_OscConfig+0x288>)
 8001e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	e01d      	b.n	8001ea6 <HAL_RCC_OscConfig+0xd6>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e72:	d10c      	bne.n	8001e8e <HAL_RCC_OscConfig+0xbe>
 8001e74:	4b78      	ldr	r3, [pc, #480]	; (8002058 <HAL_RCC_OscConfig+0x288>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a77      	ldr	r2, [pc, #476]	; (8002058 <HAL_RCC_OscConfig+0x288>)
 8001e7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e7e:	6013      	str	r3, [r2, #0]
 8001e80:	4b75      	ldr	r3, [pc, #468]	; (8002058 <HAL_RCC_OscConfig+0x288>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a74      	ldr	r2, [pc, #464]	; (8002058 <HAL_RCC_OscConfig+0x288>)
 8001e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e8a:	6013      	str	r3, [r2, #0]
 8001e8c:	e00b      	b.n	8001ea6 <HAL_RCC_OscConfig+0xd6>
 8001e8e:	4b72      	ldr	r3, [pc, #456]	; (8002058 <HAL_RCC_OscConfig+0x288>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a71      	ldr	r2, [pc, #452]	; (8002058 <HAL_RCC_OscConfig+0x288>)
 8001e94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	4b6f      	ldr	r3, [pc, #444]	; (8002058 <HAL_RCC_OscConfig+0x288>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a6e      	ldr	r2, [pc, #440]	; (8002058 <HAL_RCC_OscConfig+0x288>)
 8001ea0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ea4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d013      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eae:	f7fe fea7 	bl	8000c00 <HAL_GetTick>
 8001eb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eb6:	f7fe fea3 	bl	8000c00 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b64      	cmp	r3, #100	; 0x64
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e3aa      	b.n	800261e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ec8:	4b63      	ldr	r3, [pc, #396]	; (8002058 <HAL_RCC_OscConfig+0x288>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0f0      	beq.n	8001eb6 <HAL_RCC_OscConfig+0xe6>
 8001ed4:	e014      	b.n	8001f00 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed6:	f7fe fe93 	bl	8000c00 <HAL_GetTick>
 8001eda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ede:	f7fe fe8f 	bl	8000c00 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b64      	cmp	r3, #100	; 0x64
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e396      	b.n	800261e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ef0:	4b59      	ldr	r3, [pc, #356]	; (8002058 <HAL_RCC_OscConfig+0x288>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1f0      	bne.n	8001ede <HAL_RCC_OscConfig+0x10e>
 8001efc:	e000      	b.n	8001f00 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001efe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 80cb 	beq.w	80020a4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f0e:	4b52      	ldr	r3, [pc, #328]	; (8002058 <HAL_RCC_OscConfig+0x288>)
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f16:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f18:	4b4f      	ldr	r3, [pc, #316]	; (8002058 <HAL_RCC_OscConfig+0x288>)
 8001f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001f1e:	6a3b      	ldr	r3, [r7, #32]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d007      	beq.n	8001f34 <HAL_RCC_OscConfig+0x164>
 8001f24:	6a3b      	ldr	r3, [r7, #32]
 8001f26:	2b18      	cmp	r3, #24
 8001f28:	d156      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x208>
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d151      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f34:	4b48      	ldr	r3, [pc, #288]	; (8002058 <HAL_RCC_OscConfig+0x288>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d005      	beq.n	8001f4c <HAL_RCC_OscConfig+0x17c>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e368      	b.n	800261e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f4c:	4b42      	ldr	r3, [pc, #264]	; (8002058 <HAL_RCC_OscConfig+0x288>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f023 0219 	bic.w	r2, r3, #25
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	493f      	ldr	r1, [pc, #252]	; (8002058 <HAL_RCC_OscConfig+0x288>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f5e:	f7fe fe4f 	bl	8000c00 <HAL_GetTick>
 8001f62:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f66:	f7fe fe4b 	bl	8000c00 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e352      	b.n	800261e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f78:	4b37      	ldr	r3, [pc, #220]	; (8002058 <HAL_RCC_OscConfig+0x288>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0f0      	beq.n	8001f66 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f84:	f7fe fe6c 	bl	8000c60 <HAL_GetREVID>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	f241 0203 	movw	r2, #4099	; 0x1003
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d817      	bhi.n	8001fc2 <HAL_RCC_OscConfig+0x1f2>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	2b40      	cmp	r3, #64	; 0x40
 8001f98:	d108      	bne.n	8001fac <HAL_RCC_OscConfig+0x1dc>
 8001f9a:	4b2f      	ldr	r3, [pc, #188]	; (8002058 <HAL_RCC_OscConfig+0x288>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001fa2:	4a2d      	ldr	r2, [pc, #180]	; (8002058 <HAL_RCC_OscConfig+0x288>)
 8001fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fa8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001faa:	e07b      	b.n	80020a4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fac:	4b2a      	ldr	r3, [pc, #168]	; (8002058 <HAL_RCC_OscConfig+0x288>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	031b      	lsls	r3, r3, #12
 8001fba:	4927      	ldr	r1, [pc, #156]	; (8002058 <HAL_RCC_OscConfig+0x288>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fc0:	e070      	b.n	80020a4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc2:	4b25      	ldr	r3, [pc, #148]	; (8002058 <HAL_RCC_OscConfig+0x288>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	061b      	lsls	r3, r3, #24
 8001fd0:	4921      	ldr	r1, [pc, #132]	; (8002058 <HAL_RCC_OscConfig+0x288>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fd6:	e065      	b.n	80020a4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d048      	beq.n	8002072 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001fe0:	4b1d      	ldr	r3, [pc, #116]	; (8002058 <HAL_RCC_OscConfig+0x288>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f023 0219 	bic.w	r2, r3, #25
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	491a      	ldr	r1, [pc, #104]	; (8002058 <HAL_RCC_OscConfig+0x288>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff2:	f7fe fe05 	bl	8000c00 <HAL_GetTick>
 8001ff6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ffa:	f7fe fe01 	bl	8000c00 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e308      	b.n	800261e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800200c:	4b12      	ldr	r3, [pc, #72]	; (8002058 <HAL_RCC_OscConfig+0x288>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0f0      	beq.n	8001ffa <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002018:	f7fe fe22 	bl	8000c60 <HAL_GetREVID>
 800201c:	4603      	mov	r3, r0
 800201e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002022:	4293      	cmp	r3, r2
 8002024:	d81a      	bhi.n	800205c <HAL_RCC_OscConfig+0x28c>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	2b40      	cmp	r3, #64	; 0x40
 800202c:	d108      	bne.n	8002040 <HAL_RCC_OscConfig+0x270>
 800202e:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <HAL_RCC_OscConfig+0x288>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002036:	4a08      	ldr	r2, [pc, #32]	; (8002058 <HAL_RCC_OscConfig+0x288>)
 8002038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800203c:	6053      	str	r3, [r2, #4]
 800203e:	e031      	b.n	80020a4 <HAL_RCC_OscConfig+0x2d4>
 8002040:	4b05      	ldr	r3, [pc, #20]	; (8002058 <HAL_RCC_OscConfig+0x288>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	031b      	lsls	r3, r3, #12
 800204e:	4902      	ldr	r1, [pc, #8]	; (8002058 <HAL_RCC_OscConfig+0x288>)
 8002050:	4313      	orrs	r3, r2
 8002052:	604b      	str	r3, [r1, #4]
 8002054:	e026      	b.n	80020a4 <HAL_RCC_OscConfig+0x2d4>
 8002056:	bf00      	nop
 8002058:	58024400 	.word	0x58024400
 800205c:	4b9a      	ldr	r3, [pc, #616]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	061b      	lsls	r3, r3, #24
 800206a:	4997      	ldr	r1, [pc, #604]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 800206c:	4313      	orrs	r3, r2
 800206e:	604b      	str	r3, [r1, #4]
 8002070:	e018      	b.n	80020a4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002072:	4b95      	ldr	r3, [pc, #596]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a94      	ldr	r2, [pc, #592]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 8002078:	f023 0301 	bic.w	r3, r3, #1
 800207c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207e:	f7fe fdbf 	bl	8000c00 <HAL_GetTick>
 8002082:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002086:	f7fe fdbb 	bl	8000c00 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e2c2      	b.n	800261e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002098:	4b8b      	ldr	r3, [pc, #556]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1f0      	bne.n	8002086 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0310 	and.w	r3, r3, #16
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 80a9 	beq.w	8002204 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020b2:	4b85      	ldr	r3, [pc, #532]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020ba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80020bc:	4b82      	ldr	r3, [pc, #520]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 80020be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	d007      	beq.n	80020d8 <HAL_RCC_OscConfig+0x308>
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	2b18      	cmp	r3, #24
 80020cc:	d13a      	bne.n	8002144 <HAL_RCC_OscConfig+0x374>
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d135      	bne.n	8002144 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80020d8:	4b7b      	ldr	r3, [pc, #492]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d005      	beq.n	80020f0 <HAL_RCC_OscConfig+0x320>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	2b80      	cmp	r3, #128	; 0x80
 80020ea:	d001      	beq.n	80020f0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e296      	b.n	800261e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80020f0:	f7fe fdb6 	bl	8000c60 <HAL_GetREVID>
 80020f4:	4603      	mov	r3, r0
 80020f6:	f241 0203 	movw	r2, #4099	; 0x1003
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d817      	bhi.n	800212e <HAL_RCC_OscConfig+0x35e>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	2b20      	cmp	r3, #32
 8002104:	d108      	bne.n	8002118 <HAL_RCC_OscConfig+0x348>
 8002106:	4b70      	ldr	r3, [pc, #448]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800210e:	4a6e      	ldr	r2, [pc, #440]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 8002110:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002114:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002116:	e075      	b.n	8002204 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002118:	4b6b      	ldr	r3, [pc, #428]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	069b      	lsls	r3, r3, #26
 8002126:	4968      	ldr	r1, [pc, #416]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 8002128:	4313      	orrs	r3, r2
 800212a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800212c:	e06a      	b.n	8002204 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800212e:	4b66      	ldr	r3, [pc, #408]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	061b      	lsls	r3, r3, #24
 800213c:	4962      	ldr	r1, [pc, #392]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 800213e:	4313      	orrs	r3, r2
 8002140:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002142:	e05f      	b.n	8002204 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d042      	beq.n	80021d2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800214c:	4b5e      	ldr	r3, [pc, #376]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a5d      	ldr	r2, [pc, #372]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 8002152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002158:	f7fe fd52 	bl	8000c00 <HAL_GetTick>
 800215c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002160:	f7fe fd4e 	bl	8000c00 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e255      	b.n	800261e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002172:	4b55      	ldr	r3, [pc, #340]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0f0      	beq.n	8002160 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800217e:	f7fe fd6f 	bl	8000c60 <HAL_GetREVID>
 8002182:	4603      	mov	r3, r0
 8002184:	f241 0203 	movw	r2, #4099	; 0x1003
 8002188:	4293      	cmp	r3, r2
 800218a:	d817      	bhi.n	80021bc <HAL_RCC_OscConfig+0x3ec>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	2b20      	cmp	r3, #32
 8002192:	d108      	bne.n	80021a6 <HAL_RCC_OscConfig+0x3d6>
 8002194:	4b4c      	ldr	r3, [pc, #304]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800219c:	4a4a      	ldr	r2, [pc, #296]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 800219e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80021a2:	6053      	str	r3, [r2, #4]
 80021a4:	e02e      	b.n	8002204 <HAL_RCC_OscConfig+0x434>
 80021a6:	4b48      	ldr	r3, [pc, #288]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	069b      	lsls	r3, r3, #26
 80021b4:	4944      	ldr	r1, [pc, #272]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	604b      	str	r3, [r1, #4]
 80021ba:	e023      	b.n	8002204 <HAL_RCC_OscConfig+0x434>
 80021bc:	4b42      	ldr	r3, [pc, #264]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	061b      	lsls	r3, r3, #24
 80021ca:	493f      	ldr	r1, [pc, #252]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	60cb      	str	r3, [r1, #12]
 80021d0:	e018      	b.n	8002204 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80021d2:	4b3d      	ldr	r3, [pc, #244]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a3c      	ldr	r2, [pc, #240]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 80021d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021de:	f7fe fd0f 	bl	8000c00 <HAL_GetTick>
 80021e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80021e6:	f7fe fd0b 	bl	8000c00 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e212      	b.n	800261e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80021f8:	4b33      	ldr	r3, [pc, #204]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1f0      	bne.n	80021e6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0308 	and.w	r3, r3, #8
 800220c:	2b00      	cmp	r3, #0
 800220e:	d036      	beq.n	800227e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	695b      	ldr	r3, [r3, #20]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d019      	beq.n	800224c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002218:	4b2b      	ldr	r3, [pc, #172]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 800221a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800221c:	4a2a      	ldr	r2, [pc, #168]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002224:	f7fe fcec 	bl	8000c00 <HAL_GetTick>
 8002228:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800222c:	f7fe fce8 	bl	8000c00 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e1ef      	b.n	800261e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800223e:	4b22      	ldr	r3, [pc, #136]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 8002240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0x45c>
 800224a:	e018      	b.n	800227e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800224c:	4b1e      	ldr	r3, [pc, #120]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 800224e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002250:	4a1d      	ldr	r2, [pc, #116]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 8002252:	f023 0301 	bic.w	r3, r3, #1
 8002256:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002258:	f7fe fcd2 	bl	8000c00 <HAL_GetTick>
 800225c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002260:	f7fe fcce 	bl	8000c00 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e1d5      	b.n	800261e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002272:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 8002274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0320 	and.w	r3, r3, #32
 8002286:	2b00      	cmp	r3, #0
 8002288:	d039      	beq.n	80022fe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d01c      	beq.n	80022cc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002292:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a0c      	ldr	r2, [pc, #48]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 8002298:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800229c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800229e:	f7fe fcaf 	bl	8000c00 <HAL_GetTick>
 80022a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80022a6:	f7fe fcab 	bl	8000c00 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e1b2      	b.n	800261e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80022b8:	4b03      	ldr	r3, [pc, #12]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0f0      	beq.n	80022a6 <HAL_RCC_OscConfig+0x4d6>
 80022c4:	e01b      	b.n	80022fe <HAL_RCC_OscConfig+0x52e>
 80022c6:	bf00      	nop
 80022c8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022cc:	4b9b      	ldr	r3, [pc, #620]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a9a      	ldr	r2, [pc, #616]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 80022d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022d6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80022d8:	f7fe fc92 	bl	8000c00 <HAL_GetTick>
 80022dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80022e0:	f7fe fc8e 	bl	8000c00 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e195      	b.n	800261e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80022f2:	4b92      	ldr	r3, [pc, #584]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f0      	bne.n	80022e0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 8081 	beq.w	800240e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800230c:	4b8c      	ldr	r3, [pc, #560]	; (8002540 <HAL_RCC_OscConfig+0x770>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a8b      	ldr	r2, [pc, #556]	; (8002540 <HAL_RCC_OscConfig+0x770>)
 8002312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002316:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002318:	f7fe fc72 	bl	8000c00 <HAL_GetTick>
 800231c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002320:	f7fe fc6e 	bl	8000c00 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b64      	cmp	r3, #100	; 0x64
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e175      	b.n	800261e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002332:	4b83      	ldr	r3, [pc, #524]	; (8002540 <HAL_RCC_OscConfig+0x770>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0f0      	beq.n	8002320 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d106      	bne.n	8002354 <HAL_RCC_OscConfig+0x584>
 8002346:	4b7d      	ldr	r3, [pc, #500]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 8002348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234a:	4a7c      	ldr	r2, [pc, #496]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	6713      	str	r3, [r2, #112]	; 0x70
 8002352:	e02d      	b.n	80023b0 <HAL_RCC_OscConfig+0x5e0>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10c      	bne.n	8002376 <HAL_RCC_OscConfig+0x5a6>
 800235c:	4b77      	ldr	r3, [pc, #476]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 800235e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002360:	4a76      	ldr	r2, [pc, #472]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 8002362:	f023 0301 	bic.w	r3, r3, #1
 8002366:	6713      	str	r3, [r2, #112]	; 0x70
 8002368:	4b74      	ldr	r3, [pc, #464]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 800236a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236c:	4a73      	ldr	r2, [pc, #460]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 800236e:	f023 0304 	bic.w	r3, r3, #4
 8002372:	6713      	str	r3, [r2, #112]	; 0x70
 8002374:	e01c      	b.n	80023b0 <HAL_RCC_OscConfig+0x5e0>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	2b05      	cmp	r3, #5
 800237c:	d10c      	bne.n	8002398 <HAL_RCC_OscConfig+0x5c8>
 800237e:	4b6f      	ldr	r3, [pc, #444]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 8002380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002382:	4a6e      	ldr	r2, [pc, #440]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 8002384:	f043 0304 	orr.w	r3, r3, #4
 8002388:	6713      	str	r3, [r2, #112]	; 0x70
 800238a:	4b6c      	ldr	r3, [pc, #432]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 800238c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238e:	4a6b      	ldr	r2, [pc, #428]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 8002390:	f043 0301 	orr.w	r3, r3, #1
 8002394:	6713      	str	r3, [r2, #112]	; 0x70
 8002396:	e00b      	b.n	80023b0 <HAL_RCC_OscConfig+0x5e0>
 8002398:	4b68      	ldr	r3, [pc, #416]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 800239a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239c:	4a67      	ldr	r2, [pc, #412]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 800239e:	f023 0301 	bic.w	r3, r3, #1
 80023a2:	6713      	str	r3, [r2, #112]	; 0x70
 80023a4:	4b65      	ldr	r3, [pc, #404]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 80023a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a8:	4a64      	ldr	r2, [pc, #400]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 80023aa:	f023 0304 	bic.w	r3, r3, #4
 80023ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d015      	beq.n	80023e4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b8:	f7fe fc22 	bl	8000c00 <HAL_GetTick>
 80023bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023be:	e00a      	b.n	80023d6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023c0:	f7fe fc1e 	bl	8000c00 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e123      	b.n	800261e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023d6:	4b59      	ldr	r3, [pc, #356]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 80023d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0ee      	beq.n	80023c0 <HAL_RCC_OscConfig+0x5f0>
 80023e2:	e014      	b.n	800240e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e4:	f7fe fc0c 	bl	8000c00 <HAL_GetTick>
 80023e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023ea:	e00a      	b.n	8002402 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ec:	f7fe fc08 	bl	8000c00 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e10d      	b.n	800261e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002402:	4b4e      	ldr	r3, [pc, #312]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 8002404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1ee      	bne.n	80023ec <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 8102 	beq.w	800261c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002418:	4b48      	ldr	r3, [pc, #288]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002420:	2b18      	cmp	r3, #24
 8002422:	f000 80bd 	beq.w	80025a0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	2b02      	cmp	r3, #2
 800242c:	f040 809e 	bne.w	800256c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002430:	4b42      	ldr	r3, [pc, #264]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a41      	ldr	r2, [pc, #260]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 8002436:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800243a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243c:	f7fe fbe0 	bl	8000c00 <HAL_GetTick>
 8002440:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002444:	f7fe fbdc 	bl	8000c00 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e0e3      	b.n	800261e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002456:	4b39      	ldr	r3, [pc, #228]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f0      	bne.n	8002444 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002462:	4b36      	ldr	r3, [pc, #216]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 8002464:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002466:	4b37      	ldr	r3, [pc, #220]	; (8002544 <HAL_RCC_OscConfig+0x774>)
 8002468:	4013      	ands	r3, r2
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002472:	0112      	lsls	r2, r2, #4
 8002474:	430a      	orrs	r2, r1
 8002476:	4931      	ldr	r1, [pc, #196]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 8002478:	4313      	orrs	r3, r2
 800247a:	628b      	str	r3, [r1, #40]	; 0x28
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002480:	3b01      	subs	r3, #1
 8002482:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800248a:	3b01      	subs	r3, #1
 800248c:	025b      	lsls	r3, r3, #9
 800248e:	b29b      	uxth	r3, r3
 8002490:	431a      	orrs	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002496:	3b01      	subs	r3, #1
 8002498:	041b      	lsls	r3, r3, #16
 800249a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a4:	3b01      	subs	r3, #1
 80024a6:	061b      	lsls	r3, r3, #24
 80024a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80024ac:	4923      	ldr	r1, [pc, #140]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80024b2:	4b22      	ldr	r3, [pc, #136]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 80024b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b6:	4a21      	ldr	r2, [pc, #132]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 80024b8:	f023 0301 	bic.w	r3, r3, #1
 80024bc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80024be:	4b1f      	ldr	r3, [pc, #124]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 80024c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024c2:	4b21      	ldr	r3, [pc, #132]	; (8002548 <HAL_RCC_OscConfig+0x778>)
 80024c4:	4013      	ands	r3, r2
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80024ca:	00d2      	lsls	r2, r2, #3
 80024cc:	491b      	ldr	r1, [pc, #108]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80024d2:	4b1a      	ldr	r3, [pc, #104]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 80024d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d6:	f023 020c 	bic.w	r2, r3, #12
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	4917      	ldr	r1, [pc, #92]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80024e4:	4b15      	ldr	r3, [pc, #84]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 80024e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e8:	f023 0202 	bic.w	r2, r3, #2
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f0:	4912      	ldr	r1, [pc, #72]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80024f6:	4b11      	ldr	r3, [pc, #68]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 80024f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fa:	4a10      	ldr	r2, [pc, #64]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 80024fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002500:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002502:	4b0e      	ldr	r3, [pc, #56]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 8002504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002506:	4a0d      	ldr	r2, [pc, #52]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 8002508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800250c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800250e:	4b0b      	ldr	r3, [pc, #44]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 8002510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002512:	4a0a      	ldr	r2, [pc, #40]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 8002514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002518:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800251a:	4b08      	ldr	r3, [pc, #32]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 800251c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251e:	4a07      	ldr	r2, [pc, #28]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002526:	4b05      	ldr	r3, [pc, #20]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a04      	ldr	r2, [pc, #16]	; (800253c <HAL_RCC_OscConfig+0x76c>)
 800252c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002530:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002532:	f7fe fb65 	bl	8000c00 <HAL_GetTick>
 8002536:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002538:	e011      	b.n	800255e <HAL_RCC_OscConfig+0x78e>
 800253a:	bf00      	nop
 800253c:	58024400 	.word	0x58024400
 8002540:	58024800 	.word	0x58024800
 8002544:	fffffc0c 	.word	0xfffffc0c
 8002548:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800254c:	f7fe fb58 	bl	8000c00 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e05f      	b.n	800261e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800255e:	4b32      	ldr	r3, [pc, #200]	; (8002628 <HAL_RCC_OscConfig+0x858>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0f0      	beq.n	800254c <HAL_RCC_OscConfig+0x77c>
 800256a:	e057      	b.n	800261c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256c:	4b2e      	ldr	r3, [pc, #184]	; (8002628 <HAL_RCC_OscConfig+0x858>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a2d      	ldr	r2, [pc, #180]	; (8002628 <HAL_RCC_OscConfig+0x858>)
 8002572:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002578:	f7fe fb42 	bl	8000c00 <HAL_GetTick>
 800257c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002580:	f7fe fb3e 	bl	8000c00 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e045      	b.n	800261e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002592:	4b25      	ldr	r3, [pc, #148]	; (8002628 <HAL_RCC_OscConfig+0x858>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0x7b0>
 800259e:	e03d      	b.n	800261c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80025a0:	4b21      	ldr	r3, [pc, #132]	; (8002628 <HAL_RCC_OscConfig+0x858>)
 80025a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80025a6:	4b20      	ldr	r3, [pc, #128]	; (8002628 <HAL_RCC_OscConfig+0x858>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d031      	beq.n	8002618 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	f003 0203 	and.w	r2, r3, #3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025be:	429a      	cmp	r2, r3
 80025c0:	d12a      	bne.n	8002618 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	091b      	lsrs	r3, r3, #4
 80025c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d122      	bne.n	8002618 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025dc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80025de:	429a      	cmp	r2, r3
 80025e0:	d11a      	bne.n	8002618 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	0a5b      	lsrs	r3, r3, #9
 80025e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ee:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d111      	bne.n	8002618 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	0c1b      	lsrs	r3, r3, #16
 80025f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002600:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002602:	429a      	cmp	r2, r3
 8002604:	d108      	bne.n	8002618 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	0e1b      	lsrs	r3, r3, #24
 800260a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002612:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002614:	429a      	cmp	r2, r3
 8002616:	d001      	beq.n	800261c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e000      	b.n	800261e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3730      	adds	r7, #48	; 0x30
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	58024400 	.word	0x58024400

0800262c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e19c      	b.n	800297a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002640:	4b8a      	ldr	r3, [pc, #552]	; (800286c <HAL_RCC_ClockConfig+0x240>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 030f 	and.w	r3, r3, #15
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d910      	bls.n	8002670 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264e:	4b87      	ldr	r3, [pc, #540]	; (800286c <HAL_RCC_ClockConfig+0x240>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f023 020f 	bic.w	r2, r3, #15
 8002656:	4985      	ldr	r1, [pc, #532]	; (800286c <HAL_RCC_ClockConfig+0x240>)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	4313      	orrs	r3, r2
 800265c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800265e:	4b83      	ldr	r3, [pc, #524]	; (800286c <HAL_RCC_ClockConfig+0x240>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d001      	beq.n	8002670 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e184      	b.n	800297a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	2b00      	cmp	r3, #0
 800267a:	d010      	beq.n	800269e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	691a      	ldr	r2, [r3, #16]
 8002680:	4b7b      	ldr	r3, [pc, #492]	; (8002870 <HAL_RCC_ClockConfig+0x244>)
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002688:	429a      	cmp	r2, r3
 800268a:	d908      	bls.n	800269e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800268c:	4b78      	ldr	r3, [pc, #480]	; (8002870 <HAL_RCC_ClockConfig+0x244>)
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	4975      	ldr	r1, [pc, #468]	; (8002870 <HAL_RCC_ClockConfig+0x244>)
 800269a:	4313      	orrs	r3, r2
 800269c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d010      	beq.n	80026cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	695a      	ldr	r2, [r3, #20]
 80026ae:	4b70      	ldr	r3, [pc, #448]	; (8002870 <HAL_RCC_ClockConfig+0x244>)
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d908      	bls.n	80026cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80026ba:	4b6d      	ldr	r3, [pc, #436]	; (8002870 <HAL_RCC_ClockConfig+0x244>)
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	496a      	ldr	r1, [pc, #424]	; (8002870 <HAL_RCC_ClockConfig+0x244>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0310 	and.w	r3, r3, #16
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d010      	beq.n	80026fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	699a      	ldr	r2, [r3, #24]
 80026dc:	4b64      	ldr	r3, [pc, #400]	; (8002870 <HAL_RCC_ClockConfig+0x244>)
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d908      	bls.n	80026fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80026e8:	4b61      	ldr	r3, [pc, #388]	; (8002870 <HAL_RCC_ClockConfig+0x244>)
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	495e      	ldr	r1, [pc, #376]	; (8002870 <HAL_RCC_ClockConfig+0x244>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0320 	and.w	r3, r3, #32
 8002702:	2b00      	cmp	r3, #0
 8002704:	d010      	beq.n	8002728 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69da      	ldr	r2, [r3, #28]
 800270a:	4b59      	ldr	r3, [pc, #356]	; (8002870 <HAL_RCC_ClockConfig+0x244>)
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002712:	429a      	cmp	r2, r3
 8002714:	d908      	bls.n	8002728 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002716:	4b56      	ldr	r3, [pc, #344]	; (8002870 <HAL_RCC_ClockConfig+0x244>)
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	4953      	ldr	r1, [pc, #332]	; (8002870 <HAL_RCC_ClockConfig+0x244>)
 8002724:	4313      	orrs	r3, r2
 8002726:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d010      	beq.n	8002756 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68da      	ldr	r2, [r3, #12]
 8002738:	4b4d      	ldr	r3, [pc, #308]	; (8002870 <HAL_RCC_ClockConfig+0x244>)
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	f003 030f 	and.w	r3, r3, #15
 8002740:	429a      	cmp	r2, r3
 8002742:	d908      	bls.n	8002756 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002744:	4b4a      	ldr	r3, [pc, #296]	; (8002870 <HAL_RCC_ClockConfig+0x244>)
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	f023 020f 	bic.w	r2, r3, #15
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4947      	ldr	r1, [pc, #284]	; (8002870 <HAL_RCC_ClockConfig+0x244>)
 8002752:	4313      	orrs	r3, r2
 8002754:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d055      	beq.n	800280e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002762:	4b43      	ldr	r3, [pc, #268]	; (8002870 <HAL_RCC_ClockConfig+0x244>)
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	4940      	ldr	r1, [pc, #256]	; (8002870 <HAL_RCC_ClockConfig+0x244>)
 8002770:	4313      	orrs	r3, r2
 8002772:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b02      	cmp	r3, #2
 800277a:	d107      	bne.n	800278c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800277c:	4b3c      	ldr	r3, [pc, #240]	; (8002870 <HAL_RCC_ClockConfig+0x244>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d121      	bne.n	80027cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e0f6      	b.n	800297a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b03      	cmp	r3, #3
 8002792:	d107      	bne.n	80027a4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002794:	4b36      	ldr	r3, [pc, #216]	; (8002870 <HAL_RCC_ClockConfig+0x244>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d115      	bne.n	80027cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e0ea      	b.n	800297a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d107      	bne.n	80027bc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027ac:	4b30      	ldr	r3, [pc, #192]	; (8002870 <HAL_RCC_ClockConfig+0x244>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d109      	bne.n	80027cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e0de      	b.n	800297a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027bc:	4b2c      	ldr	r3, [pc, #176]	; (8002870 <HAL_RCC_ClockConfig+0x244>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e0d6      	b.n	800297a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027cc:	4b28      	ldr	r3, [pc, #160]	; (8002870 <HAL_RCC_ClockConfig+0x244>)
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	f023 0207 	bic.w	r2, r3, #7
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	4925      	ldr	r1, [pc, #148]	; (8002870 <HAL_RCC_ClockConfig+0x244>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027de:	f7fe fa0f 	bl	8000c00 <HAL_GetTick>
 80027e2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e4:	e00a      	b.n	80027fc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e6:	f7fe fa0b 	bl	8000c00 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e0be      	b.n	800297a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027fc:	4b1c      	ldr	r3, [pc, #112]	; (8002870 <HAL_RCC_ClockConfig+0x244>)
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	429a      	cmp	r2, r3
 800280c:	d1eb      	bne.n	80027e6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d010      	beq.n	800283c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68da      	ldr	r2, [r3, #12]
 800281e:	4b14      	ldr	r3, [pc, #80]	; (8002870 <HAL_RCC_ClockConfig+0x244>)
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	429a      	cmp	r2, r3
 8002828:	d208      	bcs.n	800283c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800282a:	4b11      	ldr	r3, [pc, #68]	; (8002870 <HAL_RCC_ClockConfig+0x244>)
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	f023 020f 	bic.w	r2, r3, #15
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	490e      	ldr	r1, [pc, #56]	; (8002870 <HAL_RCC_ClockConfig+0x244>)
 8002838:	4313      	orrs	r3, r2
 800283a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800283c:	4b0b      	ldr	r3, [pc, #44]	; (800286c <HAL_RCC_ClockConfig+0x240>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 030f 	and.w	r3, r3, #15
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d214      	bcs.n	8002874 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284a:	4b08      	ldr	r3, [pc, #32]	; (800286c <HAL_RCC_ClockConfig+0x240>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f023 020f 	bic.w	r2, r3, #15
 8002852:	4906      	ldr	r1, [pc, #24]	; (800286c <HAL_RCC_ClockConfig+0x240>)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	4313      	orrs	r3, r2
 8002858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800285a:	4b04      	ldr	r3, [pc, #16]	; (800286c <HAL_RCC_ClockConfig+0x240>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	429a      	cmp	r2, r3
 8002866:	d005      	beq.n	8002874 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e086      	b.n	800297a <HAL_RCC_ClockConfig+0x34e>
 800286c:	52002000 	.word	0x52002000
 8002870:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b00      	cmp	r3, #0
 800287e:	d010      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691a      	ldr	r2, [r3, #16]
 8002884:	4b3f      	ldr	r3, [pc, #252]	; (8002984 <HAL_RCC_ClockConfig+0x358>)
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800288c:	429a      	cmp	r2, r3
 800288e:	d208      	bcs.n	80028a2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002890:	4b3c      	ldr	r3, [pc, #240]	; (8002984 <HAL_RCC_ClockConfig+0x358>)
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	4939      	ldr	r1, [pc, #228]	; (8002984 <HAL_RCC_ClockConfig+0x358>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d010      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	695a      	ldr	r2, [r3, #20]
 80028b2:	4b34      	ldr	r3, [pc, #208]	; (8002984 <HAL_RCC_ClockConfig+0x358>)
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d208      	bcs.n	80028d0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80028be:	4b31      	ldr	r3, [pc, #196]	; (8002984 <HAL_RCC_ClockConfig+0x358>)
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	492e      	ldr	r1, [pc, #184]	; (8002984 <HAL_RCC_ClockConfig+0x358>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0310 	and.w	r3, r3, #16
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d010      	beq.n	80028fe <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	699a      	ldr	r2, [r3, #24]
 80028e0:	4b28      	ldr	r3, [pc, #160]	; (8002984 <HAL_RCC_ClockConfig+0x358>)
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d208      	bcs.n	80028fe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80028ec:	4b25      	ldr	r3, [pc, #148]	; (8002984 <HAL_RCC_ClockConfig+0x358>)
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	4922      	ldr	r1, [pc, #136]	; (8002984 <HAL_RCC_ClockConfig+0x358>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0320 	and.w	r3, r3, #32
 8002906:	2b00      	cmp	r3, #0
 8002908:	d010      	beq.n	800292c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69da      	ldr	r2, [r3, #28]
 800290e:	4b1d      	ldr	r3, [pc, #116]	; (8002984 <HAL_RCC_ClockConfig+0x358>)
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002916:	429a      	cmp	r2, r3
 8002918:	d208      	bcs.n	800292c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800291a:	4b1a      	ldr	r3, [pc, #104]	; (8002984 <HAL_RCC_ClockConfig+0x358>)
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	4917      	ldr	r1, [pc, #92]	; (8002984 <HAL_RCC_ClockConfig+0x358>)
 8002928:	4313      	orrs	r3, r2
 800292a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800292c:	f000 f834 	bl	8002998 <HAL_RCC_GetSysClockFreq>
 8002930:	4602      	mov	r2, r0
 8002932:	4b14      	ldr	r3, [pc, #80]	; (8002984 <HAL_RCC_ClockConfig+0x358>)
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	0a1b      	lsrs	r3, r3, #8
 8002938:	f003 030f 	and.w	r3, r3, #15
 800293c:	4912      	ldr	r1, [pc, #72]	; (8002988 <HAL_RCC_ClockConfig+0x35c>)
 800293e:	5ccb      	ldrb	r3, [r1, r3]
 8002940:	f003 031f 	and.w	r3, r3, #31
 8002944:	fa22 f303 	lsr.w	r3, r2, r3
 8002948:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800294a:	4b0e      	ldr	r3, [pc, #56]	; (8002984 <HAL_RCC_ClockConfig+0x358>)
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	4a0d      	ldr	r2, [pc, #52]	; (8002988 <HAL_RCC_ClockConfig+0x35c>)
 8002954:	5cd3      	ldrb	r3, [r2, r3]
 8002956:	f003 031f 	and.w	r3, r3, #31
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	fa22 f303 	lsr.w	r3, r2, r3
 8002960:	4a0a      	ldr	r2, [pc, #40]	; (800298c <HAL_RCC_ClockConfig+0x360>)
 8002962:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002964:	4a0a      	ldr	r2, [pc, #40]	; (8002990 <HAL_RCC_ClockConfig+0x364>)
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800296a:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <HAL_RCC_ClockConfig+0x368>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f7fe f8fc 	bl	8000b6c <HAL_InitTick>
 8002974:	4603      	mov	r3, r0
 8002976:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002978:	7bfb      	ldrb	r3, [r7, #15]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	58024400 	.word	0x58024400
 8002988:	080044c4 	.word	0x080044c4
 800298c:	24000004 	.word	0x24000004
 8002990:	24000000 	.word	0x24000000
 8002994:	24000008 	.word	0x24000008

08002998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002998:	b480      	push	{r7}
 800299a:	b089      	sub	sp, #36	; 0x24
 800299c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800299e:	4bb3      	ldr	r3, [pc, #716]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029a6:	2b18      	cmp	r3, #24
 80029a8:	f200 8155 	bhi.w	8002c56 <HAL_RCC_GetSysClockFreq+0x2be>
 80029ac:	a201      	add	r2, pc, #4	; (adr r2, 80029b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80029ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b2:	bf00      	nop
 80029b4:	08002a19 	.word	0x08002a19
 80029b8:	08002c57 	.word	0x08002c57
 80029bc:	08002c57 	.word	0x08002c57
 80029c0:	08002c57 	.word	0x08002c57
 80029c4:	08002c57 	.word	0x08002c57
 80029c8:	08002c57 	.word	0x08002c57
 80029cc:	08002c57 	.word	0x08002c57
 80029d0:	08002c57 	.word	0x08002c57
 80029d4:	08002a3f 	.word	0x08002a3f
 80029d8:	08002c57 	.word	0x08002c57
 80029dc:	08002c57 	.word	0x08002c57
 80029e0:	08002c57 	.word	0x08002c57
 80029e4:	08002c57 	.word	0x08002c57
 80029e8:	08002c57 	.word	0x08002c57
 80029ec:	08002c57 	.word	0x08002c57
 80029f0:	08002c57 	.word	0x08002c57
 80029f4:	08002a45 	.word	0x08002a45
 80029f8:	08002c57 	.word	0x08002c57
 80029fc:	08002c57 	.word	0x08002c57
 8002a00:	08002c57 	.word	0x08002c57
 8002a04:	08002c57 	.word	0x08002c57
 8002a08:	08002c57 	.word	0x08002c57
 8002a0c:	08002c57 	.word	0x08002c57
 8002a10:	08002c57 	.word	0x08002c57
 8002a14:	08002a4b 	.word	0x08002a4b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a18:	4b94      	ldr	r3, [pc, #592]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0320 	and.w	r3, r3, #32
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d009      	beq.n	8002a38 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002a24:	4b91      	ldr	r3, [pc, #580]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	08db      	lsrs	r3, r3, #3
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	4a90      	ldr	r2, [pc, #576]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a30:	fa22 f303 	lsr.w	r3, r2, r3
 8002a34:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002a36:	e111      	b.n	8002c5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002a38:	4b8d      	ldr	r3, [pc, #564]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a3a:	61bb      	str	r3, [r7, #24]
    break;
 8002a3c:	e10e      	b.n	8002c5c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002a3e:	4b8d      	ldr	r3, [pc, #564]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a40:	61bb      	str	r3, [r7, #24]
    break;
 8002a42:	e10b      	b.n	8002c5c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002a44:	4b8c      	ldr	r3, [pc, #560]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002a46:	61bb      	str	r3, [r7, #24]
    break;
 8002a48:	e108      	b.n	8002c5c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a4a:	4b88      	ldr	r3, [pc, #544]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002a54:	4b85      	ldr	r3, [pc, #532]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a58:	091b      	lsrs	r3, r3, #4
 8002a5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a5e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002a60:	4b82      	ldr	r3, [pc, #520]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002a6a:	4b80      	ldr	r3, [pc, #512]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6e:	08db      	lsrs	r3, r3, #3
 8002a70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	fb02 f303 	mul.w	r3, r2, r3
 8002a7a:	ee07 3a90 	vmov	s15, r3
 8002a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a82:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 80e1 	beq.w	8002c50 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	f000 8083 	beq.w	8002b9c <HAL_RCC_GetSysClockFreq+0x204>
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	f200 80a1 	bhi.w	8002be0 <HAL_RCC_GetSysClockFreq+0x248>
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <HAL_RCC_GetSysClockFreq+0x114>
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d056      	beq.n	8002b58 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002aaa:	e099      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002aac:	4b6f      	ldr	r3, [pc, #444]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0320 	and.w	r3, r3, #32
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d02d      	beq.n	8002b14 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002ab8:	4b6c      	ldr	r3, [pc, #432]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	08db      	lsrs	r3, r3, #3
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	4a6b      	ldr	r2, [pc, #428]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	ee07 3a90 	vmov	s15, r3
 8002ad0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	ee07 3a90 	vmov	s15, r3
 8002ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ae2:	4b62      	ldr	r3, [pc, #392]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aea:	ee07 3a90 	vmov	s15, r3
 8002aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002af2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002af6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002afa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002afe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002b12:	e087      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	ee07 3a90 	vmov	s15, r3
 8002b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b1e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002c80 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b26:	4b51      	ldr	r3, [pc, #324]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b2e:	ee07 3a90 	vmov	s15, r3
 8002b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b36:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b3a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002b56:	e065      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	ee07 3a90 	vmov	s15, r3
 8002b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b62:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002c84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b6a:	4b40      	ldr	r3, [pc, #256]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b72:	ee07 3a90 	vmov	s15, r3
 8002b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b7e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002b9a:	e043      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	ee07 3a90 	vmov	s15, r3
 8002ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ba6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002c88 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bae:	4b2f      	ldr	r3, [pc, #188]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bb6:	ee07 3a90 	vmov	s15, r3
 8002bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bc2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002bde:	e021      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	ee07 3a90 	vmov	s15, r3
 8002be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bea:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002c84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bf2:	4b1e      	ldr	r3, [pc, #120]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bfa:	ee07 3a90 	vmov	s15, r3
 8002bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c02:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c06:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c22:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002c24:	4b11      	ldr	r3, [pc, #68]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c28:	0a5b      	lsrs	r3, r3, #9
 8002c2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c2e:	3301      	adds	r3, #1
 8002c30:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	ee07 3a90 	vmov	s15, r3
 8002c38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c48:	ee17 3a90 	vmov	r3, s15
 8002c4c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002c4e:	e005      	b.n	8002c5c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	61bb      	str	r3, [r7, #24]
    break;
 8002c54:	e002      	b.n	8002c5c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002c56:	4b07      	ldr	r3, [pc, #28]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002c58:	61bb      	str	r3, [r7, #24]
    break;
 8002c5a:	bf00      	nop
  }

  return sysclockfreq;
 8002c5c:	69bb      	ldr	r3, [r7, #24]
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3724      	adds	r7, #36	; 0x24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	58024400 	.word	0x58024400
 8002c70:	03d09000 	.word	0x03d09000
 8002c74:	003d0900 	.word	0x003d0900
 8002c78:	007a1200 	.word	0x007a1200
 8002c7c:	46000000 	.word	0x46000000
 8002c80:	4c742400 	.word	0x4c742400
 8002c84:	4a742400 	.word	0x4a742400
 8002c88:	4af42400 	.word	0x4af42400

08002c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002c92:	f7ff fe81 	bl	8002998 <HAL_RCC_GetSysClockFreq>
 8002c96:	4602      	mov	r2, r0
 8002c98:	4b10      	ldr	r3, [pc, #64]	; (8002cdc <HAL_RCC_GetHCLKFreq+0x50>)
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	0a1b      	lsrs	r3, r3, #8
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	490f      	ldr	r1, [pc, #60]	; (8002ce0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002ca4:	5ccb      	ldrb	r3, [r1, r3]
 8002ca6:	f003 031f 	and.w	r3, r3, #31
 8002caa:	fa22 f303 	lsr.w	r3, r2, r3
 8002cae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002cb0:	4b0a      	ldr	r3, [pc, #40]	; (8002cdc <HAL_RCC_GetHCLKFreq+0x50>)
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	f003 030f 	and.w	r3, r3, #15
 8002cb8:	4a09      	ldr	r2, [pc, #36]	; (8002ce0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002cba:	5cd3      	ldrb	r3, [r2, r3]
 8002cbc:	f003 031f 	and.w	r3, r3, #31
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc6:	4a07      	ldr	r2, [pc, #28]	; (8002ce4 <HAL_RCC_GetHCLKFreq+0x58>)
 8002cc8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002cca:	4a07      	ldr	r2, [pc, #28]	; (8002ce8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002cd0:	4b04      	ldr	r3, [pc, #16]	; (8002ce4 <HAL_RCC_GetHCLKFreq+0x58>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	58024400 	.word	0x58024400
 8002ce0:	080044c4 	.word	0x080044c4
 8002ce4:	24000004 	.word	0x24000004
 8002ce8:	24000000 	.word	0x24000000

08002cec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d03f      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d0c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d10:	d02a      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002d12:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d16:	d824      	bhi.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d1c:	d018      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d22:	d81e      	bhi.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d2c:	d007      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002d2e:	e018      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d30:	4ba3      	ldr	r3, [pc, #652]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d34:	4aa2      	ldr	r2, [pc, #648]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002d3c:	e015      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	3304      	adds	r3, #4
 8002d42:	2102      	movs	r1, #2
 8002d44:	4618      	mov	r0, r3
 8002d46:	f000 ff17 	bl	8003b78 <RCCEx_PLL2_Config>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002d4e:	e00c      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3324      	adds	r3, #36	; 0x24
 8002d54:	2102      	movs	r1, #2
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 ffc0 	bl	8003cdc <RCCEx_PLL3_Config>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002d60:	e003      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	75fb      	strb	r3, [r7, #23]
      break;
 8002d66:	e000      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002d68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d6a:	7dfb      	ldrb	r3, [r7, #23]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d109      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002d70:	4b93      	ldr	r3, [pc, #588]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d7c:	4990      	ldr	r1, [pc, #576]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	650b      	str	r3, [r1, #80]	; 0x50
 8002d82:	e001      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d84:	7dfb      	ldrb	r3, [r7, #23]
 8002d86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d03d      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d98:	2b04      	cmp	r3, #4
 8002d9a:	d826      	bhi.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002d9c:	a201      	add	r2, pc, #4	; (adr r2, 8002da4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da2:	bf00      	nop
 8002da4:	08002db9 	.word	0x08002db9
 8002da8:	08002dc7 	.word	0x08002dc7
 8002dac:	08002dd9 	.word	0x08002dd9
 8002db0:	08002df1 	.word	0x08002df1
 8002db4:	08002df1 	.word	0x08002df1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002db8:	4b81      	ldr	r3, [pc, #516]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbc:	4a80      	ldr	r2, [pc, #512]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002dbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002dc4:	e015      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	3304      	adds	r3, #4
 8002dca:	2100      	movs	r1, #0
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f000 fed3 	bl	8003b78 <RCCEx_PLL2_Config>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002dd6:	e00c      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	3324      	adds	r3, #36	; 0x24
 8002ddc:	2100      	movs	r1, #0
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 ff7c 	bl	8003cdc <RCCEx_PLL3_Config>
 8002de4:	4603      	mov	r3, r0
 8002de6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002de8:	e003      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	75fb      	strb	r3, [r7, #23]
      break;
 8002dee:	e000      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002df0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002df2:	7dfb      	ldrb	r3, [r7, #23]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d109      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002df8:	4b71      	ldr	r3, [pc, #452]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dfc:	f023 0207 	bic.w	r2, r3, #7
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e04:	496e      	ldr	r1, [pc, #440]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	650b      	str	r3, [r1, #80]	; 0x50
 8002e0a:	e001      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e0c:	7dfb      	ldrb	r3, [r7, #23]
 8002e0e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d042      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e24:	d02b      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002e26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e2a:	d825      	bhi.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002e2c:	2bc0      	cmp	r3, #192	; 0xc0
 8002e2e:	d028      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002e30:	2bc0      	cmp	r3, #192	; 0xc0
 8002e32:	d821      	bhi.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002e34:	2b80      	cmp	r3, #128	; 0x80
 8002e36:	d016      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002e38:	2b80      	cmp	r3, #128	; 0x80
 8002e3a:	d81d      	bhi.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d002      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002e40:	2b40      	cmp	r3, #64	; 0x40
 8002e42:	d007      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002e44:	e018      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e46:	4b5e      	ldr	r3, [pc, #376]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4a:	4a5d      	ldr	r2, [pc, #372]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002e52:	e017      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3304      	adds	r3, #4
 8002e58:	2100      	movs	r1, #0
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 fe8c 	bl	8003b78 <RCCEx_PLL2_Config>
 8002e60:	4603      	mov	r3, r0
 8002e62:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002e64:	e00e      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	3324      	adds	r3, #36	; 0x24
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f000 ff35 	bl	8003cdc <RCCEx_PLL3_Config>
 8002e72:	4603      	mov	r3, r0
 8002e74:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002e76:	e005      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e7c:	e002      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002e7e:	bf00      	nop
 8002e80:	e000      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002e82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e84:	7dfb      	ldrb	r3, [r7, #23]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d109      	bne.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002e8a:	4b4d      	ldr	r3, [pc, #308]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e8e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e96:	494a      	ldr	r1, [pc, #296]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	650b      	str	r3, [r1, #80]	; 0x50
 8002e9c:	e001      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e9e:	7dfb      	ldrb	r3, [r7, #23]
 8002ea0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d049      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002eb4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002eb8:	d030      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002eba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ebe:	d82a      	bhi.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002ec0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002ec4:	d02c      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002ec6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002eca:	d824      	bhi.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002ecc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ed0:	d018      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002ed2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ed6:	d81e      	bhi.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002edc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ee0:	d007      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002ee2:	e018      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ee4:	4b36      	ldr	r3, [pc, #216]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee8:	4a35      	ldr	r2, [pc, #212]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002eea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ef0:	e017      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f000 fe3d 	bl	8003b78 <RCCEx_PLL2_Config>
 8002efe:	4603      	mov	r3, r0
 8002f00:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002f02:	e00e      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3324      	adds	r3, #36	; 0x24
 8002f08:	2100      	movs	r1, #0
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 fee6 	bl	8003cdc <RCCEx_PLL3_Config>
 8002f10:	4603      	mov	r3, r0
 8002f12:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002f14:	e005      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	75fb      	strb	r3, [r7, #23]
      break;
 8002f1a:	e002      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002f1c:	bf00      	nop
 8002f1e:	e000      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002f20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f22:	7dfb      	ldrb	r3, [r7, #23]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10a      	bne.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002f28:	4b25      	ldr	r3, [pc, #148]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002f36:	4922      	ldr	r1, [pc, #136]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	658b      	str	r3, [r1, #88]	; 0x58
 8002f3c:	e001      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f3e:	7dfb      	ldrb	r3, [r7, #23]
 8002f40:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d04b      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002f54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f58:	d030      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002f5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f5e:	d82a      	bhi.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002f60:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f64:	d02e      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002f66:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f6a:	d824      	bhi.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002f6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f70:	d018      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002f72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f76:	d81e      	bhi.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002f7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f80:	d007      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002f82:	e018      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f84:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f88:	4a0d      	ldr	r2, [pc, #52]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002f8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002f90:	e019      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3304      	adds	r3, #4
 8002f96:	2100      	movs	r1, #0
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 fded 	bl	8003b78 <RCCEx_PLL2_Config>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002fa2:	e010      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3324      	adds	r3, #36	; 0x24
 8002fa8:	2100      	movs	r1, #0
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 fe96 	bl	8003cdc <RCCEx_PLL3_Config>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002fb4:	e007      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	75fb      	strb	r3, [r7, #23]
      break;
 8002fba:	e004      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002fbc:	bf00      	nop
 8002fbe:	e002      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002fc0:	58024400 	.word	0x58024400
      break;
 8002fc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fc6:	7dfb      	ldrb	r3, [r7, #23]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10a      	bne.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002fcc:	4b99      	ldr	r3, [pc, #612]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002fda:	4996      	ldr	r1, [pc, #600]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	658b      	str	r3, [r1, #88]	; 0x58
 8002fe0:	e001      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe2:	7dfb      	ldrb	r3, [r7, #23]
 8002fe4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d032      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff6:	2b30      	cmp	r3, #48	; 0x30
 8002ff8:	d01c      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002ffa:	2b30      	cmp	r3, #48	; 0x30
 8002ffc:	d817      	bhi.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002ffe:	2b20      	cmp	r3, #32
 8003000:	d00c      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003002:	2b20      	cmp	r3, #32
 8003004:	d813      	bhi.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003006:	2b00      	cmp	r3, #0
 8003008:	d016      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800300a:	2b10      	cmp	r3, #16
 800300c:	d10f      	bne.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800300e:	4b89      	ldr	r3, [pc, #548]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003012:	4a88      	ldr	r2, [pc, #544]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003018:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800301a:	e00e      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3304      	adds	r3, #4
 8003020:	2102      	movs	r1, #2
 8003022:	4618      	mov	r0, r3
 8003024:	f000 fda8 	bl	8003b78 <RCCEx_PLL2_Config>
 8003028:	4603      	mov	r3, r0
 800302a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800302c:	e005      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	75fb      	strb	r3, [r7, #23]
      break;
 8003032:	e002      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003034:	bf00      	nop
 8003036:	e000      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003038:	bf00      	nop
    }

    if(ret == HAL_OK)
 800303a:	7dfb      	ldrb	r3, [r7, #23]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d109      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003040:	4b7c      	ldr	r3, [pc, #496]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003044:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800304c:	4979      	ldr	r1, [pc, #484]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800304e:	4313      	orrs	r3, r2
 8003050:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003052:	e001      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003054:	7dfb      	ldrb	r3, [r7, #23]
 8003056:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d047      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003068:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800306c:	d030      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800306e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003072:	d82a      	bhi.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003074:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003078:	d02c      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800307a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800307e:	d824      	bhi.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003080:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003084:	d018      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800308a:	d81e      	bhi.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800308c:	2b00      	cmp	r3, #0
 800308e:	d003      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003094:	d007      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003096:	e018      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003098:	4b66      	ldr	r3, [pc, #408]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	4a65      	ldr	r2, [pc, #404]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800309e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80030a4:	e017      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	3304      	adds	r3, #4
 80030aa:	2100      	movs	r1, #0
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 fd63 	bl	8003b78 <RCCEx_PLL2_Config>
 80030b2:	4603      	mov	r3, r0
 80030b4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80030b6:	e00e      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3324      	adds	r3, #36	; 0x24
 80030bc:	2100      	movs	r1, #0
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 fe0c 	bl	8003cdc <RCCEx_PLL3_Config>
 80030c4:	4603      	mov	r3, r0
 80030c6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80030c8:	e005      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	75fb      	strb	r3, [r7, #23]
      break;
 80030ce:	e002      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80030d0:	bf00      	nop
 80030d2:	e000      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80030d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030d6:	7dfb      	ldrb	r3, [r7, #23]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d109      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80030dc:	4b55      	ldr	r3, [pc, #340]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80030de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030e0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e8:	4952      	ldr	r1, [pc, #328]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	650b      	str	r3, [r1, #80]	; 0x50
 80030ee:	e001      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f0:	7dfb      	ldrb	r3, [r7, #23]
 80030f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d049      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003108:	d02e      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800310a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800310e:	d828      	bhi.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003110:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003114:	d02a      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003116:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800311a:	d822      	bhi.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800311c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003120:	d026      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003122:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003126:	d81c      	bhi.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003128:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800312c:	d010      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800312e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003132:	d816      	bhi.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003134:	2b00      	cmp	r3, #0
 8003136:	d01d      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800313c:	d111      	bne.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	3304      	adds	r3, #4
 8003142:	2101      	movs	r1, #1
 8003144:	4618      	mov	r0, r3
 8003146:	f000 fd17 	bl	8003b78 <RCCEx_PLL2_Config>
 800314a:	4603      	mov	r3, r0
 800314c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800314e:	e012      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3324      	adds	r3, #36	; 0x24
 8003154:	2101      	movs	r1, #1
 8003156:	4618      	mov	r0, r3
 8003158:	f000 fdc0 	bl	8003cdc <RCCEx_PLL3_Config>
 800315c:	4603      	mov	r3, r0
 800315e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003160:	e009      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	75fb      	strb	r3, [r7, #23]
      break;
 8003166:	e006      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003168:	bf00      	nop
 800316a:	e004      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800316c:	bf00      	nop
 800316e:	e002      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003170:	bf00      	nop
 8003172:	e000      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003174:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003176:	7dfb      	ldrb	r3, [r7, #23]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d109      	bne.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800317c:	4b2d      	ldr	r3, [pc, #180]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800317e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003180:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003188:	492a      	ldr	r1, [pc, #168]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800318a:	4313      	orrs	r3, r2
 800318c:	650b      	str	r3, [r1, #80]	; 0x50
 800318e:	e001      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003190:	7dfb      	ldrb	r3, [r7, #23]
 8003192:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d04d      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80031a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031aa:	d02e      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80031ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031b0:	d828      	bhi.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80031b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031b6:	d02a      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x522>
 80031b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031bc:	d822      	bhi.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80031be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80031c2:	d026      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80031c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80031c8:	d81c      	bhi.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80031ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031ce:	d010      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80031d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031d4:	d816      	bhi.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d01d      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80031da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031de:	d111      	bne.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3304      	adds	r3, #4
 80031e4:	2101      	movs	r1, #1
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 fcc6 	bl	8003b78 <RCCEx_PLL2_Config>
 80031ec:	4603      	mov	r3, r0
 80031ee:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80031f0:	e012      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	3324      	adds	r3, #36	; 0x24
 80031f6:	2101      	movs	r1, #1
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 fd6f 	bl	8003cdc <RCCEx_PLL3_Config>
 80031fe:	4603      	mov	r3, r0
 8003200:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003202:	e009      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	75fb      	strb	r3, [r7, #23]
      break;
 8003208:	e006      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800320a:	bf00      	nop
 800320c:	e004      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800320e:	bf00      	nop
 8003210:	e002      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003212:	bf00      	nop
 8003214:	e000      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003216:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003218:	7dfb      	ldrb	r3, [r7, #23]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10c      	bne.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800321e:	4b05      	ldr	r3, [pc, #20]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003222:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800322c:	4901      	ldr	r1, [pc, #4]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800322e:	4313      	orrs	r3, r2
 8003230:	658b      	str	r3, [r1, #88]	; 0x58
 8003232:	e003      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003234:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003238:	7dfb      	ldrb	r3, [r7, #23]
 800323a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d02f      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800324c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003250:	d00e      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003252:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003256:	d814      	bhi.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003258:	2b00      	cmp	r3, #0
 800325a:	d015      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800325c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003260:	d10f      	bne.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003262:	4baf      	ldr	r3, [pc, #700]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003266:	4aae      	ldr	r2, [pc, #696]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800326c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800326e:	e00c      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3304      	adds	r3, #4
 8003274:	2101      	movs	r1, #1
 8003276:	4618      	mov	r0, r3
 8003278:	f000 fc7e 	bl	8003b78 <RCCEx_PLL2_Config>
 800327c:	4603      	mov	r3, r0
 800327e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003280:	e003      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	75fb      	strb	r3, [r7, #23]
      break;
 8003286:	e000      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003288:	bf00      	nop
    }

    if(ret == HAL_OK)
 800328a:	7dfb      	ldrb	r3, [r7, #23]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d109      	bne.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003290:	4ba3      	ldr	r3, [pc, #652]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003294:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800329c:	49a0      	ldr	r1, [pc, #640]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	650b      	str	r3, [r1, #80]	; 0x50
 80032a2:	e001      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032a4:	7dfb      	ldrb	r3, [r7, #23]
 80032a6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d032      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d81b      	bhi.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80032bc:	a201      	add	r2, pc, #4	; (adr r2, 80032c4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80032be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c2:	bf00      	nop
 80032c4:	080032fb 	.word	0x080032fb
 80032c8:	080032d5 	.word	0x080032d5
 80032cc:	080032e3 	.word	0x080032e3
 80032d0:	080032fb 	.word	0x080032fb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032d4:	4b92      	ldr	r3, [pc, #584]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80032d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d8:	4a91      	ldr	r2, [pc, #580]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80032da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80032e0:	e00c      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	3304      	adds	r3, #4
 80032e6:	2102      	movs	r1, #2
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 fc45 	bl	8003b78 <RCCEx_PLL2_Config>
 80032ee:	4603      	mov	r3, r0
 80032f0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80032f2:	e003      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	75fb      	strb	r3, [r7, #23]
      break;
 80032f8:	e000      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80032fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032fc:	7dfb      	ldrb	r3, [r7, #23]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d109      	bne.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003302:	4b87      	ldr	r3, [pc, #540]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003306:	f023 0203 	bic.w	r2, r3, #3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330e:	4984      	ldr	r1, [pc, #528]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003310:	4313      	orrs	r3, r2
 8003312:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003314:	e001      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003316:	7dfb      	ldrb	r3, [r7, #23]
 8003318:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 8086 	beq.w	8003434 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003328:	4b7e      	ldr	r3, [pc, #504]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a7d      	ldr	r2, [pc, #500]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800332e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003332:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003334:	f7fd fc64 	bl	8000c00 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800333a:	e009      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800333c:	f7fd fc60 	bl	8000c00 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b64      	cmp	r3, #100	; 0x64
 8003348:	d902      	bls.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	75fb      	strb	r3, [r7, #23]
        break;
 800334e:	e005      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003350:	4b74      	ldr	r3, [pc, #464]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0ef      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800335c:	7dfb      	ldrb	r3, [r7, #23]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d166      	bne.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003362:	4b6f      	ldr	r3, [pc, #444]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003364:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800336c:	4053      	eors	r3, r2
 800336e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003372:	2b00      	cmp	r3, #0
 8003374:	d013      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003376:	4b6a      	ldr	r3, [pc, #424]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800337e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003380:	4b67      	ldr	r3, [pc, #412]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003384:	4a66      	ldr	r2, [pc, #408]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800338a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800338c:	4b64      	ldr	r3, [pc, #400]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800338e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003390:	4a63      	ldr	r2, [pc, #396]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003396:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003398:	4a61      	ldr	r2, [pc, #388]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80033a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033a8:	d115      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033aa:	f7fd fc29 	bl	8000c00 <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033b0:	e00b      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b2:	f7fd fc25 	bl	8000c00 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d902      	bls.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	75fb      	strb	r3, [r7, #23]
            break;
 80033c8:	e005      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033ca:	4b55      	ldr	r3, [pc, #340]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80033cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0ed      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80033d6:	7dfb      	ldrb	r3, [r7, #23]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d126      	bne.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80033e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033ea:	d10d      	bne.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80033ec:	4b4c      	ldr	r3, [pc, #304]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80033fa:	0919      	lsrs	r1, r3, #4
 80033fc:	4b4a      	ldr	r3, [pc, #296]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80033fe:	400b      	ands	r3, r1
 8003400:	4947      	ldr	r1, [pc, #284]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003402:	4313      	orrs	r3, r2
 8003404:	610b      	str	r3, [r1, #16]
 8003406:	e005      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003408:	4b45      	ldr	r3, [pc, #276]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	4a44      	ldr	r2, [pc, #272]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800340e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003412:	6113      	str	r3, [r2, #16]
 8003414:	4b42      	ldr	r3, [pc, #264]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003416:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800341e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003422:	493f      	ldr	r1, [pc, #252]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003424:	4313      	orrs	r3, r2
 8003426:	670b      	str	r3, [r1, #112]	; 0x70
 8003428:	e004      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800342a:	7dfb      	ldrb	r3, [r7, #23]
 800342c:	75bb      	strb	r3, [r7, #22]
 800342e:	e001      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003430:	7dfb      	ldrb	r3, [r7, #23]
 8003432:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 8085 	beq.w	800354c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003446:	2b28      	cmp	r3, #40	; 0x28
 8003448:	d866      	bhi.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800344a:	a201      	add	r2, pc, #4	; (adr r2, 8003450 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800344c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003450:	0800352d 	.word	0x0800352d
 8003454:	08003519 	.word	0x08003519
 8003458:	08003519 	.word	0x08003519
 800345c:	08003519 	.word	0x08003519
 8003460:	08003519 	.word	0x08003519
 8003464:	08003519 	.word	0x08003519
 8003468:	08003519 	.word	0x08003519
 800346c:	08003519 	.word	0x08003519
 8003470:	080034f5 	.word	0x080034f5
 8003474:	08003519 	.word	0x08003519
 8003478:	08003519 	.word	0x08003519
 800347c:	08003519 	.word	0x08003519
 8003480:	08003519 	.word	0x08003519
 8003484:	08003519 	.word	0x08003519
 8003488:	08003519 	.word	0x08003519
 800348c:	08003519 	.word	0x08003519
 8003490:	08003507 	.word	0x08003507
 8003494:	08003519 	.word	0x08003519
 8003498:	08003519 	.word	0x08003519
 800349c:	08003519 	.word	0x08003519
 80034a0:	08003519 	.word	0x08003519
 80034a4:	08003519 	.word	0x08003519
 80034a8:	08003519 	.word	0x08003519
 80034ac:	08003519 	.word	0x08003519
 80034b0:	0800352d 	.word	0x0800352d
 80034b4:	08003519 	.word	0x08003519
 80034b8:	08003519 	.word	0x08003519
 80034bc:	08003519 	.word	0x08003519
 80034c0:	08003519 	.word	0x08003519
 80034c4:	08003519 	.word	0x08003519
 80034c8:	08003519 	.word	0x08003519
 80034cc:	08003519 	.word	0x08003519
 80034d0:	0800352d 	.word	0x0800352d
 80034d4:	08003519 	.word	0x08003519
 80034d8:	08003519 	.word	0x08003519
 80034dc:	08003519 	.word	0x08003519
 80034e0:	08003519 	.word	0x08003519
 80034e4:	08003519 	.word	0x08003519
 80034e8:	08003519 	.word	0x08003519
 80034ec:	08003519 	.word	0x08003519
 80034f0:	0800352d 	.word	0x0800352d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3304      	adds	r3, #4
 80034f8:	2101      	movs	r1, #1
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 fb3c 	bl	8003b78 <RCCEx_PLL2_Config>
 8003500:	4603      	mov	r3, r0
 8003502:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003504:	e013      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3324      	adds	r3, #36	; 0x24
 800350a:	2101      	movs	r1, #1
 800350c:	4618      	mov	r0, r3
 800350e:	f000 fbe5 	bl	8003cdc <RCCEx_PLL3_Config>
 8003512:	4603      	mov	r3, r0
 8003514:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003516:	e00a      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	75fb      	strb	r3, [r7, #23]
      break;
 800351c:	e007      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x842>
 800351e:	bf00      	nop
 8003520:	58024400 	.word	0x58024400
 8003524:	58024800 	.word	0x58024800
 8003528:	00ffffcf 	.word	0x00ffffcf
      break;
 800352c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800352e:	7dfb      	ldrb	r3, [r7, #23]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d109      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003534:	4b96      	ldr	r3, [pc, #600]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003538:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003540:	4993      	ldr	r1, [pc, #588]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003542:	4313      	orrs	r3, r2
 8003544:	654b      	str	r3, [r1, #84]	; 0x54
 8003546:	e001      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003548:	7dfb      	ldrb	r3, [r7, #23]
 800354a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d038      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355c:	2b05      	cmp	r3, #5
 800355e:	d821      	bhi.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003560:	a201      	add	r2, pc, #4	; (adr r2, 8003568 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003566:	bf00      	nop
 8003568:	080035ab 	.word	0x080035ab
 800356c:	08003581 	.word	0x08003581
 8003570:	08003593 	.word	0x08003593
 8003574:	080035ab 	.word	0x080035ab
 8003578:	080035ab 	.word	0x080035ab
 800357c:	080035ab 	.word	0x080035ab
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3304      	adds	r3, #4
 8003584:	2101      	movs	r1, #1
 8003586:	4618      	mov	r0, r3
 8003588:	f000 faf6 	bl	8003b78 <RCCEx_PLL2_Config>
 800358c:	4603      	mov	r3, r0
 800358e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003590:	e00c      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	3324      	adds	r3, #36	; 0x24
 8003596:	2101      	movs	r1, #1
 8003598:	4618      	mov	r0, r3
 800359a:	f000 fb9f 	bl	8003cdc <RCCEx_PLL3_Config>
 800359e:	4603      	mov	r3, r0
 80035a0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80035a2:	e003      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	75fb      	strb	r3, [r7, #23]
      break;
 80035a8:	e000      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80035aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035ac:	7dfb      	ldrb	r3, [r7, #23]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d109      	bne.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80035b2:	4b77      	ldr	r3, [pc, #476]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80035b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b6:	f023 0207 	bic.w	r2, r3, #7
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035be:	4974      	ldr	r1, [pc, #464]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	654b      	str	r3, [r1, #84]	; 0x54
 80035c4:	e001      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c6:	7dfb      	ldrb	r3, [r7, #23]
 80035c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0304 	and.w	r3, r3, #4
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d03a      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035dc:	2b05      	cmp	r3, #5
 80035de:	d821      	bhi.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80035e0:	a201      	add	r2, pc, #4	; (adr r2, 80035e8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80035e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e6:	bf00      	nop
 80035e8:	0800362b 	.word	0x0800362b
 80035ec:	08003601 	.word	0x08003601
 80035f0:	08003613 	.word	0x08003613
 80035f4:	0800362b 	.word	0x0800362b
 80035f8:	0800362b 	.word	0x0800362b
 80035fc:	0800362b 	.word	0x0800362b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3304      	adds	r3, #4
 8003604:	2101      	movs	r1, #1
 8003606:	4618      	mov	r0, r3
 8003608:	f000 fab6 	bl	8003b78 <RCCEx_PLL2_Config>
 800360c:	4603      	mov	r3, r0
 800360e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003610:	e00c      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	3324      	adds	r3, #36	; 0x24
 8003616:	2101      	movs	r1, #1
 8003618:	4618      	mov	r0, r3
 800361a:	f000 fb5f 	bl	8003cdc <RCCEx_PLL3_Config>
 800361e:	4603      	mov	r3, r0
 8003620:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003622:	e003      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	75fb      	strb	r3, [r7, #23]
      break;
 8003628:	e000      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800362a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800362c:	7dfb      	ldrb	r3, [r7, #23]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10a      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003632:	4b57      	ldr	r3, [pc, #348]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003636:	f023 0207 	bic.w	r2, r3, #7
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003640:	4953      	ldr	r1, [pc, #332]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003642:	4313      	orrs	r3, r2
 8003644:	658b      	str	r3, [r1, #88]	; 0x58
 8003646:	e001      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003648:	7dfb      	ldrb	r3, [r7, #23]
 800364a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0320 	and.w	r3, r3, #32
 8003654:	2b00      	cmp	r3, #0
 8003656:	d04b      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800365e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003662:	d02e      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003664:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003668:	d828      	bhi.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800366a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800366e:	d02a      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003674:	d822      	bhi.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003676:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800367a:	d026      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800367c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003680:	d81c      	bhi.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003682:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003686:	d010      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003688:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800368c:	d816      	bhi.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800368e:	2b00      	cmp	r3, #0
 8003690:	d01d      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003692:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003696:	d111      	bne.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3304      	adds	r3, #4
 800369c:	2100      	movs	r1, #0
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 fa6a 	bl	8003b78 <RCCEx_PLL2_Config>
 80036a4:	4603      	mov	r3, r0
 80036a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80036a8:	e012      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	3324      	adds	r3, #36	; 0x24
 80036ae:	2102      	movs	r1, #2
 80036b0:	4618      	mov	r0, r3
 80036b2:	f000 fb13 	bl	8003cdc <RCCEx_PLL3_Config>
 80036b6:	4603      	mov	r3, r0
 80036b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80036ba:	e009      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	75fb      	strb	r3, [r7, #23]
      break;
 80036c0:	e006      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80036c2:	bf00      	nop
 80036c4:	e004      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80036c6:	bf00      	nop
 80036c8:	e002      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80036ca:	bf00      	nop
 80036cc:	e000      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80036ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036d0:	7dfb      	ldrb	r3, [r7, #23]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10a      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036d6:	4b2e      	ldr	r3, [pc, #184]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80036d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036da:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036e4:	492a      	ldr	r1, [pc, #168]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	654b      	str	r3, [r1, #84]	; 0x54
 80036ea:	e001      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ec:	7dfb      	ldrb	r3, [r7, #23]
 80036ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d04d      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003702:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003706:	d02e      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003708:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800370c:	d828      	bhi.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800370e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003712:	d02a      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003718:	d822      	bhi.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800371a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800371e:	d026      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003720:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003724:	d81c      	bhi.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003726:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800372a:	d010      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800372c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003730:	d816      	bhi.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003732:	2b00      	cmp	r3, #0
 8003734:	d01d      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800373a:	d111      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3304      	adds	r3, #4
 8003740:	2100      	movs	r1, #0
 8003742:	4618      	mov	r0, r3
 8003744:	f000 fa18 	bl	8003b78 <RCCEx_PLL2_Config>
 8003748:	4603      	mov	r3, r0
 800374a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800374c:	e012      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	3324      	adds	r3, #36	; 0x24
 8003752:	2102      	movs	r1, #2
 8003754:	4618      	mov	r0, r3
 8003756:	f000 fac1 	bl	8003cdc <RCCEx_PLL3_Config>
 800375a:	4603      	mov	r3, r0
 800375c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800375e:	e009      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	75fb      	strb	r3, [r7, #23]
      break;
 8003764:	e006      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003766:	bf00      	nop
 8003768:	e004      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800376a:	bf00      	nop
 800376c:	e002      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800376e:	bf00      	nop
 8003770:	e000      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003772:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003774:	7dfb      	ldrb	r3, [r7, #23]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10c      	bne.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800377a:	4b05      	ldr	r3, [pc, #20]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800377c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003788:	4901      	ldr	r1, [pc, #4]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800378a:	4313      	orrs	r3, r2
 800378c:	658b      	str	r3, [r1, #88]	; 0x58
 800378e:	e003      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003790:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003794:	7dfb      	ldrb	r3, [r7, #23]
 8003796:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d04b      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037aa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80037ae:	d02e      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80037b0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80037b4:	d828      	bhi.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80037b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ba:	d02a      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80037bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037c0:	d822      	bhi.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80037c2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80037c6:	d026      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80037c8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80037cc:	d81c      	bhi.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80037ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037d2:	d010      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80037d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037d8:	d816      	bhi.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d01d      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80037de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037e2:	d111      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3304      	adds	r3, #4
 80037e8:	2100      	movs	r1, #0
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 f9c4 	bl	8003b78 <RCCEx_PLL2_Config>
 80037f0:	4603      	mov	r3, r0
 80037f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80037f4:	e012      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	3324      	adds	r3, #36	; 0x24
 80037fa:	2102      	movs	r1, #2
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 fa6d 	bl	8003cdc <RCCEx_PLL3_Config>
 8003802:	4603      	mov	r3, r0
 8003804:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003806:	e009      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	75fb      	strb	r3, [r7, #23]
      break;
 800380c:	e006      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800380e:	bf00      	nop
 8003810:	e004      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003812:	bf00      	nop
 8003814:	e002      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003816:	bf00      	nop
 8003818:	e000      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800381a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800381c:	7dfb      	ldrb	r3, [r7, #23]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10a      	bne.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003822:	4b9d      	ldr	r3, [pc, #628]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003826:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003830:	4999      	ldr	r1, [pc, #612]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003832:	4313      	orrs	r3, r2
 8003834:	658b      	str	r3, [r1, #88]	; 0x58
 8003836:	e001      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003838:	7dfb      	ldrb	r3, [r7, #23]
 800383a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0308 	and.w	r3, r3, #8
 8003844:	2b00      	cmp	r3, #0
 8003846:	d01a      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800384e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003852:	d10a      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3324      	adds	r3, #36	; 0x24
 8003858:	2102      	movs	r1, #2
 800385a:	4618      	mov	r0, r3
 800385c:	f000 fa3e 	bl	8003cdc <RCCEx_PLL3_Config>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800386a:	4b8b      	ldr	r3, [pc, #556]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800386c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003878:	4987      	ldr	r1, [pc, #540]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800387a:	4313      	orrs	r3, r2
 800387c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0310 	and.w	r3, r3, #16
 8003886:	2b00      	cmp	r3, #0
 8003888:	d01a      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003890:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003894:	d10a      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	3324      	adds	r3, #36	; 0x24
 800389a:	2102      	movs	r1, #2
 800389c:	4618      	mov	r0, r3
 800389e:	f000 fa1d 	bl	8003cdc <RCCEx_PLL3_Config>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038ac:	4b7a      	ldr	r3, [pc, #488]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80038ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038ba:	4977      	ldr	r1, [pc, #476]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d034      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80038d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038d6:	d01d      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80038d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038dc:	d817      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80038e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038e6:	d009      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80038e8:	e011      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	3304      	adds	r3, #4
 80038ee:	2100      	movs	r1, #0
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 f941 	bl	8003b78 <RCCEx_PLL2_Config>
 80038f6:	4603      	mov	r3, r0
 80038f8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80038fa:	e00c      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3324      	adds	r3, #36	; 0x24
 8003900:	2102      	movs	r1, #2
 8003902:	4618      	mov	r0, r3
 8003904:	f000 f9ea 	bl	8003cdc <RCCEx_PLL3_Config>
 8003908:	4603      	mov	r3, r0
 800390a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800390c:	e003      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	75fb      	strb	r3, [r7, #23]
      break;
 8003912:	e000      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003914:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003916:	7dfb      	ldrb	r3, [r7, #23]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10a      	bne.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800391c:	4b5e      	ldr	r3, [pc, #376]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800391e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003920:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800392a:	495b      	ldr	r1, [pc, #364]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800392c:	4313      	orrs	r3, r2
 800392e:	658b      	str	r3, [r1, #88]	; 0x58
 8003930:	e001      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003932:	7dfb      	ldrb	r3, [r7, #23]
 8003934:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d033      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003948:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800394c:	d01c      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800394e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003952:	d816      	bhi.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003954:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003958:	d003      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800395a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800395e:	d007      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8003960:	e00f      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003962:	4b4d      	ldr	r3, [pc, #308]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003966:	4a4c      	ldr	r2, [pc, #304]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800396c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800396e:	e00c      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3324      	adds	r3, #36	; 0x24
 8003974:	2101      	movs	r1, #1
 8003976:	4618      	mov	r0, r3
 8003978:	f000 f9b0 	bl	8003cdc <RCCEx_PLL3_Config>
 800397c:	4603      	mov	r3, r0
 800397e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003980:	e003      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	75fb      	strb	r3, [r7, #23]
      break;
 8003986:	e000      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003988:	bf00      	nop
    }

    if(ret == HAL_OK)
 800398a:	7dfb      	ldrb	r3, [r7, #23]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10a      	bne.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003990:	4b41      	ldr	r3, [pc, #260]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003994:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800399e:	493e      	ldr	r1, [pc, #248]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	654b      	str	r3, [r1, #84]	; 0x54
 80039a4:	e001      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a6:	7dfb      	ldrb	r3, [r7, #23]
 80039a8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d029      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80039be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c2:	d007      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80039c4:	e00f      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039c6:	4b34      	ldr	r3, [pc, #208]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80039c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ca:	4a33      	ldr	r2, [pc, #204]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80039cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80039d2:	e00b      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	3304      	adds	r3, #4
 80039d8:	2102      	movs	r1, #2
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 f8cc 	bl	8003b78 <RCCEx_PLL2_Config>
 80039e0:	4603      	mov	r3, r0
 80039e2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80039e4:	e002      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	75fb      	strb	r3, [r7, #23]
      break;
 80039ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ec:	7dfb      	ldrb	r3, [r7, #23]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d109      	bne.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80039f2:	4b29      	ldr	r3, [pc, #164]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80039f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039fe:	4926      	ldr	r1, [pc, #152]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003a04:	e001      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a06:	7dfb      	ldrb	r3, [r7, #23]
 8003a08:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00a      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	3324      	adds	r3, #36	; 0x24
 8003a1a:	2102      	movs	r1, #2
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 f95d 	bl	8003cdc <RCCEx_PLL3_Config>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d033      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a40:	d017      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003a42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a46:	d811      	bhi.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a4c:	d013      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003a4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a52:	d80b      	bhi.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d010      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003a58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a5c:	d106      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a5e:	4b0e      	ldr	r3, [pc, #56]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a62:	4a0d      	ldr	r2, [pc, #52]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003a6a:	e007      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a70:	e004      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003a72:	bf00      	nop
 8003a74:	e002      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003a76:	bf00      	nop
 8003a78:	e000      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003a7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a7c:	7dfb      	ldrb	r3, [r7, #23]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10c      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a82:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a8e:	4902      	ldr	r1, [pc, #8]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	654b      	str	r3, [r1, #84]	; 0x54
 8003a94:	e004      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8003a96:	bf00      	nop
 8003a98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a9c:	7dfb      	ldrb	r3, [r7, #23]
 8003a9e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d008      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003aac:	4b31      	ldr	r3, [pc, #196]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab8:	492e      	ldr	r1, [pc, #184]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d009      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003aca:	4b2a      	ldr	r3, [pc, #168]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003ad8:	4926      	ldr	r1, [pc, #152]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d008      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003aea:	4b22      	ldr	r3, [pc, #136]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aee:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003af6:	491f      	ldr	r1, [pc, #124]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00d      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b08:	4b1a      	ldr	r3, [pc, #104]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	4a19      	ldr	r2, [pc, #100]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003b0e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b12:	6113      	str	r3, [r2, #16]
 8003b14:	4b17      	ldr	r3, [pc, #92]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003b16:	691a      	ldr	r2, [r3, #16]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003b1e:	4915      	ldr	r1, [pc, #84]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	da08      	bge.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003b2c:	4b11      	ldr	r3, [pc, #68]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b30:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b38:	490e      	ldr	r1, [pc, #56]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d009      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b4a:	4b0a      	ldr	r3, [pc, #40]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b58:	4906      	ldr	r1, [pc, #24]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003b5e:	7dbb      	ldrb	r3, [r7, #22]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8003b64:	2300      	movs	r3, #0
 8003b66:	e000      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3718      	adds	r7, #24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	58024400 	.word	0x58024400

08003b78 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b82:	2300      	movs	r3, #0
 8003b84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b86:	4b53      	ldr	r3, [pc, #332]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	2b03      	cmp	r3, #3
 8003b90:	d101      	bne.n	8003b96 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e099      	b.n	8003cca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003b96:	4b4f      	ldr	r3, [pc, #316]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a4e      	ldr	r2, [pc, #312]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003b9c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ba0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ba2:	f7fd f82d 	bl	8000c00 <HAL_GetTick>
 8003ba6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003ba8:	e008      	b.n	8003bbc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003baa:	f7fd f829 	bl	8000c00 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e086      	b.n	8003cca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003bbc:	4b45      	ldr	r3, [pc, #276]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1f0      	bne.n	8003baa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003bc8:	4b42      	ldr	r3, [pc, #264]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bcc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	031b      	lsls	r3, r3, #12
 8003bd6:	493f      	ldr	r1, [pc, #252]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	628b      	str	r3, [r1, #40]	; 0x28
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	3b01      	subs	r3, #1
 8003be2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	3b01      	subs	r3, #1
 8003bec:	025b      	lsls	r3, r3, #9
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	041b      	lsls	r3, r3, #16
 8003bfa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	3b01      	subs	r3, #1
 8003c06:	061b      	lsls	r3, r3, #24
 8003c08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c0c:	4931      	ldr	r1, [pc, #196]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003c12:	4b30      	ldr	r3, [pc, #192]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	492d      	ldr	r1, [pc, #180]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003c24:	4b2b      	ldr	r3, [pc, #172]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c28:	f023 0220 	bic.w	r2, r3, #32
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	4928      	ldr	r1, [pc, #160]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003c36:	4b27      	ldr	r3, [pc, #156]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3a:	4a26      	ldr	r2, [pc, #152]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003c3c:	f023 0310 	bic.w	r3, r3, #16
 8003c40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003c42:	4b24      	ldr	r3, [pc, #144]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003c44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c46:	4b24      	ldr	r3, [pc, #144]	; (8003cd8 <RCCEx_PLL2_Config+0x160>)
 8003c48:	4013      	ands	r3, r2
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	69d2      	ldr	r2, [r2, #28]
 8003c4e:	00d2      	lsls	r2, r2, #3
 8003c50:	4920      	ldr	r1, [pc, #128]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003c56:	4b1f      	ldr	r3, [pc, #124]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5a:	4a1e      	ldr	r2, [pc, #120]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003c5c:	f043 0310 	orr.w	r3, r3, #16
 8003c60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d106      	bne.n	8003c76 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003c68:	4b1a      	ldr	r3, [pc, #104]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6c:	4a19      	ldr	r2, [pc, #100]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003c6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c74:	e00f      	b.n	8003c96 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d106      	bne.n	8003c8a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003c7c:	4b15      	ldr	r3, [pc, #84]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c80:	4a14      	ldr	r2, [pc, #80]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003c82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c88:	e005      	b.n	8003c96 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003c8a:	4b12      	ldr	r3, [pc, #72]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8e:	4a11      	ldr	r2, [pc, #68]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003c90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c94:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003c96:	4b0f      	ldr	r3, [pc, #60]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a0e      	ldr	r2, [pc, #56]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003c9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ca0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ca2:	f7fc ffad 	bl	8000c00 <HAL_GetTick>
 8003ca6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003ca8:	e008      	b.n	8003cbc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003caa:	f7fc ffa9 	bl	8000c00 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d901      	bls.n	8003cbc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e006      	b.n	8003cca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003cbc:	4b05      	ldr	r3, [pc, #20]	; (8003cd4 <RCCEx_PLL2_Config+0x15c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0f0      	beq.n	8003caa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	58024400 	.word	0x58024400
 8003cd8:	ffff0007 	.word	0xffff0007

08003cdc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003cea:	4b53      	ldr	r3, [pc, #332]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cee:	f003 0303 	and.w	r3, r3, #3
 8003cf2:	2b03      	cmp	r3, #3
 8003cf4:	d101      	bne.n	8003cfa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e099      	b.n	8003e2e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003cfa:	4b4f      	ldr	r3, [pc, #316]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a4e      	ldr	r2, [pc, #312]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d06:	f7fc ff7b 	bl	8000c00 <HAL_GetTick>
 8003d0a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003d0c:	e008      	b.n	8003d20 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003d0e:	f7fc ff77 	bl	8000c00 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e086      	b.n	8003e2e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003d20:	4b45      	ldr	r3, [pc, #276]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1f0      	bne.n	8003d0e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003d2c:	4b42      	ldr	r3, [pc, #264]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d30:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	051b      	lsls	r3, r3, #20
 8003d3a:	493f      	ldr	r1, [pc, #252]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	628b      	str	r3, [r1, #40]	; 0x28
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	3b01      	subs	r3, #1
 8003d46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	025b      	lsls	r3, r3, #9
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	431a      	orrs	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	041b      	lsls	r3, r3, #16
 8003d5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	061b      	lsls	r3, r3, #24
 8003d6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d70:	4931      	ldr	r1, [pc, #196]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003d76:	4b30      	ldr	r3, [pc, #192]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	492d      	ldr	r1, [pc, #180]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003d88:	4b2b      	ldr	r3, [pc, #172]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	4928      	ldr	r1, [pc, #160]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003d9a:	4b27      	ldr	r3, [pc, #156]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9e:	4a26      	ldr	r2, [pc, #152]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003da0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003da4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003da6:	4b24      	ldr	r3, [pc, #144]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003da8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003daa:	4b24      	ldr	r3, [pc, #144]	; (8003e3c <RCCEx_PLL3_Config+0x160>)
 8003dac:	4013      	ands	r3, r2
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	69d2      	ldr	r2, [r2, #28]
 8003db2:	00d2      	lsls	r2, r2, #3
 8003db4:	4920      	ldr	r1, [pc, #128]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003dba:	4b1f      	ldr	r3, [pc, #124]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbe:	4a1e      	ldr	r2, [pc, #120]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d106      	bne.n	8003dda <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003dcc:	4b1a      	ldr	r3, [pc, #104]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd0:	4a19      	ldr	r2, [pc, #100]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003dd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003dd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003dd8:	e00f      	b.n	8003dfa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d106      	bne.n	8003dee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003de0:	4b15      	ldr	r3, [pc, #84]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	4a14      	ldr	r2, [pc, #80]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003de6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003dea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003dec:	e005      	b.n	8003dfa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003dee:	4b12      	ldr	r3, [pc, #72]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df2:	4a11      	ldr	r2, [pc, #68]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003df4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003df8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003dfa:	4b0f      	ldr	r3, [pc, #60]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a0e      	ldr	r2, [pc, #56]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e06:	f7fc fefb 	bl	8000c00 <HAL_GetTick>
 8003e0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e0c:	e008      	b.n	8003e20 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003e0e:	f7fc fef7 	bl	8000c00 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d901      	bls.n	8003e20 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e006      	b.n	8003e2e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e20:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <RCCEx_PLL3_Config+0x15c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d0f0      	beq.n	8003e0e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	58024400 	.word	0x58024400
 8003e3c:	ffff0007 	.word	0xffff0007

08003e40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e40:	b084      	sub	sp, #16
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b084      	sub	sp, #16
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
 8003e4a:	f107 001c 	add.w	r0, r7, #28
 8003e4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d120      	bne.n	8003e9a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68da      	ldr	r2, [r3, #12]
 8003e68:	4b2a      	ldr	r3, [pc, #168]	; (8003f14 <USB_CoreInit+0xd4>)
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d105      	bne.n	8003e8e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 faac 	bl	80043ec <USB_CoreReset>
 8003e94:	4603      	mov	r3, r0
 8003e96:	73fb      	strb	r3, [r7, #15]
 8003e98:	e01a      	b.n	8003ed0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 faa0 	bl	80043ec <USB_CoreReset>
 8003eac:	4603      	mov	r3, r0
 8003eae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d106      	bne.n	8003ec4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	639a      	str	r2, [r3, #56]	; 0x38
 8003ec2:	e005      	b.n	8003ed0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d116      	bne.n	8003f04 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ee4:	4b0c      	ldr	r3, [pc, #48]	; (8003f18 <USB_CoreInit+0xd8>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f043 0206 	orr.w	r2, r3, #6
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f043 0220 	orr.w	r2, r3, #32
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f10:	b004      	add	sp, #16
 8003f12:	4770      	bx	lr
 8003f14:	ffbdffbf 	.word	0xffbdffbf
 8003f18:	03ee0000 	.word	0x03ee0000

08003f1c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f023 0201 	bic.w	r2, r3, #1
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b084      	sub	sp, #16
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
 8003f46:	460b      	mov	r3, r1
 8003f48:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003f5a:	78fb      	ldrb	r3, [r7, #3]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d115      	bne.n	8003f8c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003f6c:	2001      	movs	r0, #1
 8003f6e:	f7fc fe53 	bl	8000c18 <HAL_Delay>
      ms++;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	3301      	adds	r3, #1
 8003f76:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 fa29 	bl	80043d0 <USB_GetMode>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d01e      	beq.n	8003fc2 <USB_SetCurrentMode+0x84>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2b31      	cmp	r3, #49	; 0x31
 8003f88:	d9f0      	bls.n	8003f6c <USB_SetCurrentMode+0x2e>
 8003f8a:	e01a      	b.n	8003fc2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003f8c:	78fb      	ldrb	r3, [r7, #3]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d115      	bne.n	8003fbe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003f9e:	2001      	movs	r0, #1
 8003fa0:	f7fc fe3a 	bl	8000c18 <HAL_Delay>
      ms++;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 fa10 	bl	80043d0 <USB_GetMode>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d005      	beq.n	8003fc2 <USB_SetCurrentMode+0x84>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2b31      	cmp	r3, #49	; 0x31
 8003fba:	d9f0      	bls.n	8003f9e <USB_SetCurrentMode+0x60>
 8003fbc:	e001      	b.n	8003fc2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e005      	b.n	8003fce <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2b32      	cmp	r3, #50	; 0x32
 8003fc6:	d101      	bne.n	8003fcc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e000      	b.n	8003fce <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
	...

08003fd8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003fd8:	b084      	sub	sp, #16
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b086      	sub	sp, #24
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
 8003fe2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003fe6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003fea:	2300      	movs	r3, #0
 8003fec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	613b      	str	r3, [r7, #16]
 8003ff6:	e009      	b.n	800400c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	3340      	adds	r3, #64	; 0x40
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	2200      	movs	r2, #0
 8004004:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	3301      	adds	r3, #1
 800400a:	613b      	str	r3, [r7, #16]
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	2b0e      	cmp	r3, #14
 8004010:	d9f2      	bls.n	8003ff8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004014:	2b00      	cmp	r3, #0
 8004016:	d11c      	bne.n	8004052 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004026:	f043 0302 	orr.w	r3, r3, #2
 800402a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004030:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	e005      	b.n	800405e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004056:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004064:	461a      	mov	r2, r3
 8004066:	2300      	movs	r3, #0
 8004068:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004070:	4619      	mov	r1, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004078:	461a      	mov	r2, r3
 800407a:	680b      	ldr	r3, [r1, #0]
 800407c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800407e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004080:	2b01      	cmp	r3, #1
 8004082:	d10c      	bne.n	800409e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004086:	2b00      	cmp	r3, #0
 8004088:	d104      	bne.n	8004094 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800408a:	2100      	movs	r1, #0
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f965 	bl	800435c <USB_SetDevSpeed>
 8004092:	e008      	b.n	80040a6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004094:	2101      	movs	r1, #1
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f960 	bl	800435c <USB_SetDevSpeed>
 800409c:	e003      	b.n	80040a6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800409e:	2103      	movs	r1, #3
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f95b 	bl	800435c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80040a6:	2110      	movs	r1, #16
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f8f3 	bl	8004294 <USB_FlushTxFifo>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f91f 	bl	80042fc <USB_FlushRxFifo>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ce:	461a      	mov	r2, r3
 80040d0:	2300      	movs	r3, #0
 80040d2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040da:	461a      	mov	r2, r3
 80040dc:	2300      	movs	r3, #0
 80040de:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e6:	461a      	mov	r2, r3
 80040e8:	2300      	movs	r3, #0
 80040ea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040ec:	2300      	movs	r3, #0
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	e043      	b.n	800417a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	015a      	lsls	r2, r3, #5
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	4413      	add	r3, r2
 80040fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004104:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004108:	d118      	bne.n	800413c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10a      	bne.n	8004126 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4413      	add	r3, r2
 8004118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800411c:	461a      	mov	r2, r3
 800411e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004122:	6013      	str	r3, [r2, #0]
 8004124:	e013      	b.n	800414e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	015a      	lsls	r2, r3, #5
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	4413      	add	r3, r2
 800412e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004132:	461a      	mov	r2, r3
 8004134:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	e008      	b.n	800414e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4413      	add	r3, r2
 8004144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004148:	461a      	mov	r2, r3
 800414a:	2300      	movs	r3, #0
 800414c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	015a      	lsls	r2, r3, #5
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	4413      	add	r3, r2
 8004156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800415a:	461a      	mov	r2, r3
 800415c:	2300      	movs	r3, #0
 800415e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	4413      	add	r3, r2
 8004168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800416c:	461a      	mov	r2, r3
 800416e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004172:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	3301      	adds	r3, #1
 8004178:	613b      	str	r3, [r7, #16]
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	429a      	cmp	r2, r3
 8004180:	d3b7      	bcc.n	80040f2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004182:	2300      	movs	r3, #0
 8004184:	613b      	str	r3, [r7, #16]
 8004186:	e043      	b.n	8004210 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	015a      	lsls	r2, r3, #5
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	4413      	add	r3, r2
 8004190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800419a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800419e:	d118      	bne.n	80041d2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10a      	bne.n	80041bc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	015a      	lsls	r2, r3, #5
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	4413      	add	r3, r2
 80041ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b2:	461a      	mov	r2, r3
 80041b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80041b8:	6013      	str	r3, [r2, #0]
 80041ba:	e013      	b.n	80041e4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c8:	461a      	mov	r2, r3
 80041ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80041ce:	6013      	str	r3, [r2, #0]
 80041d0:	e008      	b.n	80041e4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	015a      	lsls	r2, r3, #5
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	4413      	add	r3, r2
 80041da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041de:	461a      	mov	r2, r3
 80041e0:	2300      	movs	r3, #0
 80041e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	015a      	lsls	r2, r3, #5
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4413      	add	r3, r2
 80041ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f0:	461a      	mov	r2, r3
 80041f2:	2300      	movs	r3, #0
 80041f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004202:	461a      	mov	r2, r3
 8004204:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004208:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	3301      	adds	r3, #1
 800420e:	613b      	str	r3, [r7, #16]
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	429a      	cmp	r2, r3
 8004216:	d3b7      	bcc.n	8004188 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004226:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800422a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004238:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800423a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423c:	2b00      	cmp	r3, #0
 800423e:	d105      	bne.n	800424c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	f043 0210 	orr.w	r2, r3, #16
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	699a      	ldr	r2, [r3, #24]
 8004250:	4b0e      	ldr	r3, [pc, #56]	; (800428c <USB_DevInit+0x2b4>)
 8004252:	4313      	orrs	r3, r2
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800425a:	2b00      	cmp	r3, #0
 800425c:	d005      	beq.n	800426a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	f043 0208 	orr.w	r2, r3, #8
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800426a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800426c:	2b01      	cmp	r3, #1
 800426e:	d105      	bne.n	800427c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	699a      	ldr	r2, [r3, #24]
 8004274:	4b06      	ldr	r3, [pc, #24]	; (8004290 <USB_DevInit+0x2b8>)
 8004276:	4313      	orrs	r3, r2
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800427c:	7dfb      	ldrb	r3, [r7, #23]
}
 800427e:	4618      	mov	r0, r3
 8004280:	3718      	adds	r7, #24
 8004282:	46bd      	mov	sp, r7
 8004284:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004288:	b004      	add	sp, #16
 800428a:	4770      	bx	lr
 800428c:	803c3800 	.word	0x803c3800
 8004290:	40000004 	.word	0x40000004

08004294 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800429e:	2300      	movs	r3, #0
 80042a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	3301      	adds	r3, #1
 80042a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	4a13      	ldr	r2, [pc, #76]	; (80042f8 <USB_FlushTxFifo+0x64>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d901      	bls.n	80042b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e01b      	b.n	80042ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	daf2      	bge.n	80042a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	019b      	lsls	r3, r3, #6
 80042c4:	f043 0220 	orr.w	r2, r3, #32
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	3301      	adds	r3, #1
 80042d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	4a08      	ldr	r2, [pc, #32]	; (80042f8 <USB_FlushTxFifo+0x64>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d901      	bls.n	80042de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e006      	b.n	80042ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	f003 0320 	and.w	r3, r3, #32
 80042e6:	2b20      	cmp	r3, #32
 80042e8:	d0f0      	beq.n	80042cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3714      	adds	r7, #20
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	00030d40 	.word	0x00030d40

080042fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	3301      	adds	r3, #1
 800430c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	4a11      	ldr	r2, [pc, #68]	; (8004358 <USB_FlushRxFifo+0x5c>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d901      	bls.n	800431a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e018      	b.n	800434c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	2b00      	cmp	r3, #0
 8004320:	daf2      	bge.n	8004308 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004322:	2300      	movs	r3, #0
 8004324:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2210      	movs	r2, #16
 800432a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	3301      	adds	r3, #1
 8004330:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	4a08      	ldr	r2, [pc, #32]	; (8004358 <USB_FlushRxFifo+0x5c>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d901      	bls.n	800433e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e006      	b.n	800434c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	f003 0310 	and.w	r3, r3, #16
 8004346:	2b10      	cmp	r3, #16
 8004348:	d0f0      	beq.n	800432c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3714      	adds	r7, #20
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	00030d40 	.word	0x00030d40

0800435c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	460b      	mov	r3, r1
 8004366:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	68f9      	ldr	r1, [r7, #12]
 8004378:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800437c:	4313      	orrs	r3, r2
 800437e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800438e:	b480      	push	{r7}
 8004390:	b085      	sub	sp, #20
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80043a8:	f023 0303 	bic.w	r3, r3, #3
 80043ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043bc:	f043 0302 	orr.w	r3, r3, #2
 80043c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	f003 0301 	and.w	r3, r3, #1
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	3301      	adds	r3, #1
 80043fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	4a13      	ldr	r2, [pc, #76]	; (8004450 <USB_CoreReset+0x64>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d901      	bls.n	800440a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e01b      	b.n	8004442 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	2b00      	cmp	r3, #0
 8004410:	daf2      	bge.n	80043f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004412:	2300      	movs	r3, #0
 8004414:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	f043 0201 	orr.w	r2, r3, #1
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	3301      	adds	r3, #1
 8004426:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4a09      	ldr	r2, [pc, #36]	; (8004450 <USB_CoreReset+0x64>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d901      	bls.n	8004434 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e006      	b.n	8004442 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b01      	cmp	r3, #1
 800443e:	d0f0      	beq.n	8004422 <USB_CoreReset+0x36>

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	00030d40 	.word	0x00030d40

08004454 <__libc_init_array>:
 8004454:	b570      	push	{r4, r5, r6, lr}
 8004456:	4d0d      	ldr	r5, [pc, #52]	; (800448c <__libc_init_array+0x38>)
 8004458:	4c0d      	ldr	r4, [pc, #52]	; (8004490 <__libc_init_array+0x3c>)
 800445a:	1b64      	subs	r4, r4, r5
 800445c:	10a4      	asrs	r4, r4, #2
 800445e:	2600      	movs	r6, #0
 8004460:	42a6      	cmp	r6, r4
 8004462:	d109      	bne.n	8004478 <__libc_init_array+0x24>
 8004464:	4d0b      	ldr	r5, [pc, #44]	; (8004494 <__libc_init_array+0x40>)
 8004466:	4c0c      	ldr	r4, [pc, #48]	; (8004498 <__libc_init_array+0x44>)
 8004468:	f000 f820 	bl	80044ac <_init>
 800446c:	1b64      	subs	r4, r4, r5
 800446e:	10a4      	asrs	r4, r4, #2
 8004470:	2600      	movs	r6, #0
 8004472:	42a6      	cmp	r6, r4
 8004474:	d105      	bne.n	8004482 <__libc_init_array+0x2e>
 8004476:	bd70      	pop	{r4, r5, r6, pc}
 8004478:	f855 3b04 	ldr.w	r3, [r5], #4
 800447c:	4798      	blx	r3
 800447e:	3601      	adds	r6, #1
 8004480:	e7ee      	b.n	8004460 <__libc_init_array+0xc>
 8004482:	f855 3b04 	ldr.w	r3, [r5], #4
 8004486:	4798      	blx	r3
 8004488:	3601      	adds	r6, #1
 800448a:	e7f2      	b.n	8004472 <__libc_init_array+0x1e>
 800448c:	080044d4 	.word	0x080044d4
 8004490:	080044d4 	.word	0x080044d4
 8004494:	080044d4 	.word	0x080044d4
 8004498:	080044d8 	.word	0x080044d8

0800449c <memset>:
 800449c:	4402      	add	r2, r0
 800449e:	4603      	mov	r3, r0
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d100      	bne.n	80044a6 <memset+0xa>
 80044a4:	4770      	bx	lr
 80044a6:	f803 1b01 	strb.w	r1, [r3], #1
 80044aa:	e7f9      	b.n	80044a0 <memset+0x4>

080044ac <_init>:
 80044ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ae:	bf00      	nop
 80044b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044b2:	bc08      	pop	{r3}
 80044b4:	469e      	mov	lr, r3
 80044b6:	4770      	bx	lr

080044b8 <_fini>:
 80044b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ba:	bf00      	nop
 80044bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044be:	bc08      	pop	{r3}
 80044c0:	469e      	mov	lr, r3
 80044c2:	4770      	bx	lr
