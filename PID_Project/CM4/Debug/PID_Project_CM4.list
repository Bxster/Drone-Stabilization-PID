
PID_Project_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d9ac  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000794  0810dc50  0810dc50  0001dc50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810e3e4  0810e3e4  0001e3e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810e3ec  0810e3ec  0001e3ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810e3f0  0810e3f0  0001e3f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000200  10000000  0810e3f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002c4  10000200  0810e5f4  00020200  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  100004c4  0810e5f4  000204c4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ce8f  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000030df  00000000  00000000  0003d0bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001648  00000000  00000000  000401a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001500  00000000  00000000  000417e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c792  00000000  00000000  00042ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001bd1e  00000000  00000000  0007f47a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018d125  00000000  00000000  0009b198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002282bd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000075ac  00000000  00000000  00228310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000200 	.word	0x10000200
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810dc34 	.word	0x0810dc34

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000204 	.word	0x10000204
 81002dc:	0810dc34 	.word	0x0810dc34

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dac:	f000 b9aa 	b.w	8101104 <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	; (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	; (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9d08      	ldr	r5, [sp, #32]
 8100e3a:	4604      	mov	r4, r0
 8100e3c:	468e      	mov	lr, r1
 8100e3e:	2b00      	cmp	r3, #0
 8100e40:	d14d      	bne.n	8100ede <__udivmoddi4+0xaa>
 8100e42:	428a      	cmp	r2, r1
 8100e44:	4694      	mov	ip, r2
 8100e46:	d969      	bls.n	8100f1c <__udivmoddi4+0xe8>
 8100e48:	fab2 f282 	clz	r2, r2
 8100e4c:	b152      	cbz	r2, 8100e64 <__udivmoddi4+0x30>
 8100e4e:	fa01 f302 	lsl.w	r3, r1, r2
 8100e52:	f1c2 0120 	rsb	r1, r2, #32
 8100e56:	fa20 f101 	lsr.w	r1, r0, r1
 8100e5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8100e5e:	ea41 0e03 	orr.w	lr, r1, r3
 8100e62:	4094      	lsls	r4, r2
 8100e64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100e68:	0c21      	lsrs	r1, r4, #16
 8100e6a:	fbbe f6f8 	udiv	r6, lr, r8
 8100e6e:	fa1f f78c 	uxth.w	r7, ip
 8100e72:	fb08 e316 	mls	r3, r8, r6, lr
 8100e76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8100e7a:	fb06 f107 	mul.w	r1, r6, r7
 8100e7e:	4299      	cmp	r1, r3
 8100e80:	d90a      	bls.n	8100e98 <__udivmoddi4+0x64>
 8100e82:	eb1c 0303 	adds.w	r3, ip, r3
 8100e86:	f106 30ff 	add.w	r0, r6, #4294967295
 8100e8a:	f080 811f 	bcs.w	81010cc <__udivmoddi4+0x298>
 8100e8e:	4299      	cmp	r1, r3
 8100e90:	f240 811c 	bls.w	81010cc <__udivmoddi4+0x298>
 8100e94:	3e02      	subs	r6, #2
 8100e96:	4463      	add	r3, ip
 8100e98:	1a5b      	subs	r3, r3, r1
 8100e9a:	b2a4      	uxth	r4, r4
 8100e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8100ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8100ea4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100ea8:	fb00 f707 	mul.w	r7, r0, r7
 8100eac:	42a7      	cmp	r7, r4
 8100eae:	d90a      	bls.n	8100ec6 <__udivmoddi4+0x92>
 8100eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8100eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8100eb8:	f080 810a 	bcs.w	81010d0 <__udivmoddi4+0x29c>
 8100ebc:	42a7      	cmp	r7, r4
 8100ebe:	f240 8107 	bls.w	81010d0 <__udivmoddi4+0x29c>
 8100ec2:	4464      	add	r4, ip
 8100ec4:	3802      	subs	r0, #2
 8100ec6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100eca:	1be4      	subs	r4, r4, r7
 8100ecc:	2600      	movs	r6, #0
 8100ece:	b11d      	cbz	r5, 8100ed8 <__udivmoddi4+0xa4>
 8100ed0:	40d4      	lsrs	r4, r2
 8100ed2:	2300      	movs	r3, #0
 8100ed4:	e9c5 4300 	strd	r4, r3, [r5]
 8100ed8:	4631      	mov	r1, r6
 8100eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ede:	428b      	cmp	r3, r1
 8100ee0:	d909      	bls.n	8100ef6 <__udivmoddi4+0xc2>
 8100ee2:	2d00      	cmp	r5, #0
 8100ee4:	f000 80ef 	beq.w	81010c6 <__udivmoddi4+0x292>
 8100ee8:	2600      	movs	r6, #0
 8100eea:	e9c5 0100 	strd	r0, r1, [r5]
 8100eee:	4630      	mov	r0, r6
 8100ef0:	4631      	mov	r1, r6
 8100ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ef6:	fab3 f683 	clz	r6, r3
 8100efa:	2e00      	cmp	r6, #0
 8100efc:	d14a      	bne.n	8100f94 <__udivmoddi4+0x160>
 8100efe:	428b      	cmp	r3, r1
 8100f00:	d302      	bcc.n	8100f08 <__udivmoddi4+0xd4>
 8100f02:	4282      	cmp	r2, r0
 8100f04:	f200 80f9 	bhi.w	81010fa <__udivmoddi4+0x2c6>
 8100f08:	1a84      	subs	r4, r0, r2
 8100f0a:	eb61 0303 	sbc.w	r3, r1, r3
 8100f0e:	2001      	movs	r0, #1
 8100f10:	469e      	mov	lr, r3
 8100f12:	2d00      	cmp	r5, #0
 8100f14:	d0e0      	beq.n	8100ed8 <__udivmoddi4+0xa4>
 8100f16:	e9c5 4e00 	strd	r4, lr, [r5]
 8100f1a:	e7dd      	b.n	8100ed8 <__udivmoddi4+0xa4>
 8100f1c:	b902      	cbnz	r2, 8100f20 <__udivmoddi4+0xec>
 8100f1e:	deff      	udf	#255	; 0xff
 8100f20:	fab2 f282 	clz	r2, r2
 8100f24:	2a00      	cmp	r2, #0
 8100f26:	f040 8092 	bne.w	810104e <__udivmoddi4+0x21a>
 8100f2a:	eba1 010c 	sub.w	r1, r1, ip
 8100f2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100f32:	fa1f fe8c 	uxth.w	lr, ip
 8100f36:	2601      	movs	r6, #1
 8100f38:	0c20      	lsrs	r0, r4, #16
 8100f3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8100f3e:	fb07 1113 	mls	r1, r7, r3, r1
 8100f42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100f46:	fb0e f003 	mul.w	r0, lr, r3
 8100f4a:	4288      	cmp	r0, r1
 8100f4c:	d908      	bls.n	8100f60 <__udivmoddi4+0x12c>
 8100f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8100f52:	f103 38ff 	add.w	r8, r3, #4294967295
 8100f56:	d202      	bcs.n	8100f5e <__udivmoddi4+0x12a>
 8100f58:	4288      	cmp	r0, r1
 8100f5a:	f200 80cb 	bhi.w	81010f4 <__udivmoddi4+0x2c0>
 8100f5e:	4643      	mov	r3, r8
 8100f60:	1a09      	subs	r1, r1, r0
 8100f62:	b2a4      	uxth	r4, r4
 8100f64:	fbb1 f0f7 	udiv	r0, r1, r7
 8100f68:	fb07 1110 	mls	r1, r7, r0, r1
 8100f6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8100f70:	fb0e fe00 	mul.w	lr, lr, r0
 8100f74:	45a6      	cmp	lr, r4
 8100f76:	d908      	bls.n	8100f8a <__udivmoddi4+0x156>
 8100f78:	eb1c 0404 	adds.w	r4, ip, r4
 8100f7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8100f80:	d202      	bcs.n	8100f88 <__udivmoddi4+0x154>
 8100f82:	45a6      	cmp	lr, r4
 8100f84:	f200 80bb 	bhi.w	81010fe <__udivmoddi4+0x2ca>
 8100f88:	4608      	mov	r0, r1
 8100f8a:	eba4 040e 	sub.w	r4, r4, lr
 8100f8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8100f92:	e79c      	b.n	8100ece <__udivmoddi4+0x9a>
 8100f94:	f1c6 0720 	rsb	r7, r6, #32
 8100f98:	40b3      	lsls	r3, r6
 8100f9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8100f9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8100fa2:	fa20 f407 	lsr.w	r4, r0, r7
 8100fa6:	fa01 f306 	lsl.w	r3, r1, r6
 8100faa:	431c      	orrs	r4, r3
 8100fac:	40f9      	lsrs	r1, r7
 8100fae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100fb2:	fa00 f306 	lsl.w	r3, r0, r6
 8100fb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8100fba:	0c20      	lsrs	r0, r4, #16
 8100fbc:	fa1f fe8c 	uxth.w	lr, ip
 8100fc0:	fb09 1118 	mls	r1, r9, r8, r1
 8100fc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100fc8:	fb08 f00e 	mul.w	r0, r8, lr
 8100fcc:	4288      	cmp	r0, r1
 8100fce:	fa02 f206 	lsl.w	r2, r2, r6
 8100fd2:	d90b      	bls.n	8100fec <__udivmoddi4+0x1b8>
 8100fd4:	eb1c 0101 	adds.w	r1, ip, r1
 8100fd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8100fdc:	f080 8088 	bcs.w	81010f0 <__udivmoddi4+0x2bc>
 8100fe0:	4288      	cmp	r0, r1
 8100fe2:	f240 8085 	bls.w	81010f0 <__udivmoddi4+0x2bc>
 8100fe6:	f1a8 0802 	sub.w	r8, r8, #2
 8100fea:	4461      	add	r1, ip
 8100fec:	1a09      	subs	r1, r1, r0
 8100fee:	b2a4      	uxth	r4, r4
 8100ff0:	fbb1 f0f9 	udiv	r0, r1, r9
 8100ff4:	fb09 1110 	mls	r1, r9, r0, r1
 8100ff8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8100ffc:	fb00 fe0e 	mul.w	lr, r0, lr
 8101000:	458e      	cmp	lr, r1
 8101002:	d908      	bls.n	8101016 <__udivmoddi4+0x1e2>
 8101004:	eb1c 0101 	adds.w	r1, ip, r1
 8101008:	f100 34ff 	add.w	r4, r0, #4294967295
 810100c:	d26c      	bcs.n	81010e8 <__udivmoddi4+0x2b4>
 810100e:	458e      	cmp	lr, r1
 8101010:	d96a      	bls.n	81010e8 <__udivmoddi4+0x2b4>
 8101012:	3802      	subs	r0, #2
 8101014:	4461      	add	r1, ip
 8101016:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 810101a:	fba0 9402 	umull	r9, r4, r0, r2
 810101e:	eba1 010e 	sub.w	r1, r1, lr
 8101022:	42a1      	cmp	r1, r4
 8101024:	46c8      	mov	r8, r9
 8101026:	46a6      	mov	lr, r4
 8101028:	d356      	bcc.n	81010d8 <__udivmoddi4+0x2a4>
 810102a:	d053      	beq.n	81010d4 <__udivmoddi4+0x2a0>
 810102c:	b15d      	cbz	r5, 8101046 <__udivmoddi4+0x212>
 810102e:	ebb3 0208 	subs.w	r2, r3, r8
 8101032:	eb61 010e 	sbc.w	r1, r1, lr
 8101036:	fa01 f707 	lsl.w	r7, r1, r7
 810103a:	fa22 f306 	lsr.w	r3, r2, r6
 810103e:	40f1      	lsrs	r1, r6
 8101040:	431f      	orrs	r7, r3
 8101042:	e9c5 7100 	strd	r7, r1, [r5]
 8101046:	2600      	movs	r6, #0
 8101048:	4631      	mov	r1, r6
 810104a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810104e:	f1c2 0320 	rsb	r3, r2, #32
 8101052:	40d8      	lsrs	r0, r3
 8101054:	fa0c fc02 	lsl.w	ip, ip, r2
 8101058:	fa21 f303 	lsr.w	r3, r1, r3
 810105c:	4091      	lsls	r1, r2
 810105e:	4301      	orrs	r1, r0
 8101060:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8101064:	fa1f fe8c 	uxth.w	lr, ip
 8101068:	fbb3 f0f7 	udiv	r0, r3, r7
 810106c:	fb07 3610 	mls	r6, r7, r0, r3
 8101070:	0c0b      	lsrs	r3, r1, #16
 8101072:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8101076:	fb00 f60e 	mul.w	r6, r0, lr
 810107a:	429e      	cmp	r6, r3
 810107c:	fa04 f402 	lsl.w	r4, r4, r2
 8101080:	d908      	bls.n	8101094 <__udivmoddi4+0x260>
 8101082:	eb1c 0303 	adds.w	r3, ip, r3
 8101086:	f100 38ff 	add.w	r8, r0, #4294967295
 810108a:	d22f      	bcs.n	81010ec <__udivmoddi4+0x2b8>
 810108c:	429e      	cmp	r6, r3
 810108e:	d92d      	bls.n	81010ec <__udivmoddi4+0x2b8>
 8101090:	3802      	subs	r0, #2
 8101092:	4463      	add	r3, ip
 8101094:	1b9b      	subs	r3, r3, r6
 8101096:	b289      	uxth	r1, r1
 8101098:	fbb3 f6f7 	udiv	r6, r3, r7
 810109c:	fb07 3316 	mls	r3, r7, r6, r3
 81010a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81010a4:	fb06 f30e 	mul.w	r3, r6, lr
 81010a8:	428b      	cmp	r3, r1
 81010aa:	d908      	bls.n	81010be <__udivmoddi4+0x28a>
 81010ac:	eb1c 0101 	adds.w	r1, ip, r1
 81010b0:	f106 38ff 	add.w	r8, r6, #4294967295
 81010b4:	d216      	bcs.n	81010e4 <__udivmoddi4+0x2b0>
 81010b6:	428b      	cmp	r3, r1
 81010b8:	d914      	bls.n	81010e4 <__udivmoddi4+0x2b0>
 81010ba:	3e02      	subs	r6, #2
 81010bc:	4461      	add	r1, ip
 81010be:	1ac9      	subs	r1, r1, r3
 81010c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 81010c4:	e738      	b.n	8100f38 <__udivmoddi4+0x104>
 81010c6:	462e      	mov	r6, r5
 81010c8:	4628      	mov	r0, r5
 81010ca:	e705      	b.n	8100ed8 <__udivmoddi4+0xa4>
 81010cc:	4606      	mov	r6, r0
 81010ce:	e6e3      	b.n	8100e98 <__udivmoddi4+0x64>
 81010d0:	4618      	mov	r0, r3
 81010d2:	e6f8      	b.n	8100ec6 <__udivmoddi4+0x92>
 81010d4:	454b      	cmp	r3, r9
 81010d6:	d2a9      	bcs.n	810102c <__udivmoddi4+0x1f8>
 81010d8:	ebb9 0802 	subs.w	r8, r9, r2
 81010dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 81010e0:	3801      	subs	r0, #1
 81010e2:	e7a3      	b.n	810102c <__udivmoddi4+0x1f8>
 81010e4:	4646      	mov	r6, r8
 81010e6:	e7ea      	b.n	81010be <__udivmoddi4+0x28a>
 81010e8:	4620      	mov	r0, r4
 81010ea:	e794      	b.n	8101016 <__udivmoddi4+0x1e2>
 81010ec:	4640      	mov	r0, r8
 81010ee:	e7d1      	b.n	8101094 <__udivmoddi4+0x260>
 81010f0:	46d0      	mov	r8, sl
 81010f2:	e77b      	b.n	8100fec <__udivmoddi4+0x1b8>
 81010f4:	3b02      	subs	r3, #2
 81010f6:	4461      	add	r1, ip
 81010f8:	e732      	b.n	8100f60 <__udivmoddi4+0x12c>
 81010fa:	4630      	mov	r0, r6
 81010fc:	e709      	b.n	8100f12 <__udivmoddi4+0xde>
 81010fe:	4464      	add	r4, ip
 8101100:	3802      	subs	r0, #2
 8101102:	e742      	b.n	8100f8a <__udivmoddi4+0x156>

08101104 <__aeabi_idiv0>:
 8101104:	4770      	bx	lr
 8101106:	bf00      	nop

08101108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101108:	b480      	push	{r7}
 810110a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 810110c:	4b09      	ldr	r3, [pc, #36]	; (8101134 <SystemInit+0x2c>)
 810110e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8101112:	4a08      	ldr	r2, [pc, #32]	; (8101134 <SystemInit+0x2c>)
 8101114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810111c:	4b05      	ldr	r3, [pc, #20]	; (8101134 <SystemInit+0x2c>)
 810111e:	691b      	ldr	r3, [r3, #16]
 8101120:	4a04      	ldr	r2, [pc, #16]	; (8101134 <SystemInit+0x2c>)
 8101122:	f043 0310 	orr.w	r3, r3, #16
 8101126:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101128:	bf00      	nop
 810112a:	46bd      	mov	sp, r7
 810112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101130:	4770      	bx	lr
 8101132:	bf00      	nop
 8101134:	e000ed00 	.word	0xe000ed00

08101138 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8101138:	b580      	push	{r7, lr}
 810113a:	b082      	sub	sp, #8
 810113c:	af00      	add	r7, sp, #0
 810113e:	4603      	mov	r3, r0
 8101140:	71fb      	strb	r3, [r7, #7]
 8101142:	79fb      	ldrb	r3, [r7, #7]
 8101144:	4619      	mov	r1, r3
 8101146:	2007      	movs	r0, #7
 8101148:	f000 fc92 	bl	8101a70 <bno055_writeData>
 810114c:	bf00      	nop
 810114e:	3708      	adds	r7, #8
 8101150:	46bd      	mov	sp, r7
 8101152:	bd80      	pop	{r7, pc}

08101154 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8101154:	b580      	push	{r7, lr}
 8101156:	b082      	sub	sp, #8
 8101158:	af00      	add	r7, sp, #0
 810115a:	4603      	mov	r3, r0
 810115c:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 810115e:	79fb      	ldrb	r3, [r7, #7]
 8101160:	4619      	mov	r1, r3
 8101162:	203d      	movs	r0, #61	; 0x3d
 8101164:	f000 fc84 	bl	8101a70 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8101168:	79fb      	ldrb	r3, [r7, #7]
 810116a:	2b00      	cmp	r3, #0
 810116c:	d103      	bne.n	8101176 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 810116e:	2013      	movs	r0, #19
 8101170:	f000 fc72 	bl	8101a58 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8101174:	e002      	b.n	810117c <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8101176:	2007      	movs	r0, #7
 8101178:	f000 fc6e 	bl	8101a58 <bno055_delay>
}
 810117c:	bf00      	nop
 810117e:	3708      	adds	r7, #8
 8101180:	46bd      	mov	sp, r7
 8101182:	bd80      	pop	{r7, pc}

08101184 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8101184:	b580      	push	{r7, lr}
 8101186:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8101188:	2000      	movs	r0, #0
 810118a:	f7ff ffe3 	bl	8101154 <bno055_setOperationMode>
}
 810118e:	bf00      	nop
 8101190:	bd80      	pop	{r7, pc}

08101192 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8101192:	b580      	push	{r7, lr}
 8101194:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8101196:	200c      	movs	r0, #12
 8101198:	f7ff ffdc 	bl	8101154 <bno055_setOperationMode>
}
 810119c:	bf00      	nop
 810119e:	bd80      	pop	{r7, pc}

081011a0 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 81011a0:	b580      	push	{r7, lr}
 81011a2:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 81011a4:	2120      	movs	r1, #32
 81011a6:	203f      	movs	r0, #63	; 0x3f
 81011a8:	f000 fc62 	bl	8101a70 <bno055_writeData>
  bno055_delay(700);
 81011ac:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 81011b0:	f000 fc52 	bl	8101a58 <bno055_delay>
}
 81011b4:	bf00      	nop
 81011b6:	bd80      	pop	{r7, pc}

081011b8 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 81011b8:	b580      	push	{r7, lr}
 81011ba:	b082      	sub	sp, #8
 81011bc:	af00      	add	r7, sp, #0
  bno055_reset();
 81011be:	f7ff ffef 	bl	81011a0 <bno055_reset>

  uint8_t id = 0;
 81011c2:	2300      	movs	r3, #0
 81011c4:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 81011c6:	1dfb      	adds	r3, r7, #7
 81011c8:	2201      	movs	r2, #1
 81011ca:	4619      	mov	r1, r3
 81011cc:	2000      	movs	r0, #0
 81011ce:	f000 fd3b 	bl	8101c48 <bno055_readData>
  if (id != BNO055_ID) {
 81011d2:	79fb      	ldrb	r3, [r7, #7]
 81011d4:	2ba0      	cmp	r3, #160	; 0xa0
 81011d6:	d004      	beq.n	81011e2 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 81011d8:	79fb      	ldrb	r3, [r7, #7]
 81011da:	4619      	mov	r1, r3
 81011dc:	4809      	ldr	r0, [pc, #36]	; (8101204 <bno055_setup+0x4c>)
 81011de:	f008 fd95 	bl	8109d0c <iprintf>
  }
  bno055_setPage(0);
 81011e2:	2000      	movs	r0, #0
 81011e4:	f7ff ffa8 	bl	8101138 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 81011e8:	2100      	movs	r1, #0
 81011ea:	203f      	movs	r0, #63	; 0x3f
 81011ec:	f000 fc40 	bl	8101a70 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 81011f0:	f7ff ffc8 	bl	8101184 <bno055_setOperationModeConfig>
  bno055_delay(10);
 81011f4:	200a      	movs	r0, #10
 81011f6:	f000 fc2f 	bl	8101a58 <bno055_delay>
}
 81011fa:	bf00      	nop
 81011fc:	3708      	adds	r7, #8
 81011fe:	46bd      	mov	sp, r7
 8101200:	bd80      	pop	{r7, pc}
 8101202:	bf00      	nop
 8101204:	0810dc50 	.word	0x0810dc50

08101208 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8101208:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 810120c:	b09e      	sub	sp, #120	; 0x78
 810120e:	af00      	add	r7, sp, #0
 8101210:	4603      	mov	r3, r0
 8101212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 8101216:	2000      	movs	r0, #0
 8101218:	f7ff ff8e 	bl	8101138 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 810121c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101220:	2b20      	cmp	r3, #32
 8101222:	d108      	bne.n	8101236 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8101224:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8101228:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810122c:	2208      	movs	r2, #8
 810122e:	4618      	mov	r0, r3
 8101230:	f000 fd0a 	bl	8101c48 <bno055_readData>
 8101234:	e007      	b.n	8101246 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8101236:	f107 0148 	add.w	r1, r7, #72	; 0x48
 810123a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810123e:	2206      	movs	r2, #6
 8101240:	4618      	mov	r0, r3
 8101242:	f000 fd01 	bl	8101c48 <bno055_readData>

  double scale = 1;
 8101246:	f04f 0200 	mov.w	r2, #0
 810124a:	4b8b      	ldr	r3, [pc, #556]	; (8101478 <bno055_getVector+0x270>)
 810124c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8101250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101254:	2b0e      	cmp	r3, #14
 8101256:	d109      	bne.n	810126c <bno055_getVector+0x64>
    scale = magScale;
 8101258:	4b88      	ldr	r3, [pc, #544]	; (810147c <bno055_getVector+0x274>)
 810125a:	881b      	ldrh	r3, [r3, #0]
 810125c:	4618      	mov	r0, r3
 810125e:	f7ff f9d9 	bl	8100614 <__aeabi_ui2d>
 8101262:	4602      	mov	r2, r0
 8101264:	460b      	mov	r3, r1
 8101266:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 810126a:	e03e      	b.n	81012ea <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 810126c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101270:	2b08      	cmp	r3, #8
 8101272:	d007      	beq.n	8101284 <bno055_getVector+0x7c>
 8101274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101278:	2b28      	cmp	r3, #40	; 0x28
 810127a:	d003      	beq.n	8101284 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 810127c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101280:	2b2e      	cmp	r3, #46	; 0x2e
 8101282:	d109      	bne.n	8101298 <bno055_getVector+0x90>
    scale = accelScale;
 8101284:	4b7e      	ldr	r3, [pc, #504]	; (8101480 <bno055_getVector+0x278>)
 8101286:	881b      	ldrh	r3, [r3, #0]
 8101288:	4618      	mov	r0, r3
 810128a:	f7ff f9c3 	bl	8100614 <__aeabi_ui2d>
 810128e:	4602      	mov	r2, r0
 8101290:	460b      	mov	r3, r1
 8101292:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8101296:	e028      	b.n	81012ea <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8101298:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810129c:	2b14      	cmp	r3, #20
 810129e:	d109      	bne.n	81012b4 <bno055_getVector+0xac>
    scale = angularRateScale;
 81012a0:	4b78      	ldr	r3, [pc, #480]	; (8101484 <bno055_getVector+0x27c>)
 81012a2:	881b      	ldrh	r3, [r3, #0]
 81012a4:	4618      	mov	r0, r3
 81012a6:	f7ff f9b5 	bl	8100614 <__aeabi_ui2d>
 81012aa:	4602      	mov	r2, r0
 81012ac:	460b      	mov	r3, r1
 81012ae:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 81012b2:	e01a      	b.n	81012ea <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 81012b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81012b8:	2b1a      	cmp	r3, #26
 81012ba:	d109      	bne.n	81012d0 <bno055_getVector+0xc8>
    scale = eulerScale;
 81012bc:	4b72      	ldr	r3, [pc, #456]	; (8101488 <bno055_getVector+0x280>)
 81012be:	881b      	ldrh	r3, [r3, #0]
 81012c0:	4618      	mov	r0, r3
 81012c2:	f7ff f9a7 	bl	8100614 <__aeabi_ui2d>
 81012c6:	4602      	mov	r2, r0
 81012c8:	460b      	mov	r3, r1
 81012ca:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 81012ce:	e00c      	b.n	81012ea <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 81012d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81012d4:	2b20      	cmp	r3, #32
 81012d6:	d108      	bne.n	81012ea <bno055_getVector+0xe2>
    scale = quaScale;
 81012d8:	4b6c      	ldr	r3, [pc, #432]	; (810148c <bno055_getVector+0x284>)
 81012da:	881b      	ldrh	r3, [r3, #0]
 81012dc:	4618      	mov	r0, r3
 81012de:	f7ff f999 	bl	8100614 <__aeabi_ui2d>
 81012e2:	4602      	mov	r2, r0
 81012e4:	460b      	mov	r3, r1
 81012e6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 81012ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 81012ee:	2220      	movs	r2, #32
 81012f0:	2100      	movs	r1, #0
 81012f2:	4618      	mov	r0, r3
 81012f4:	f007 fe88 	bl	8109008 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 81012f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81012fc:	2b20      	cmp	r3, #32
 81012fe:	d150      	bne.n	81013a2 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8101300:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8101304:	021b      	lsls	r3, r3, #8
 8101306:	b21a      	sxth	r2, r3
 8101308:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 810130c:	b21b      	sxth	r3, r3
 810130e:	4313      	orrs	r3, r2
 8101310:	b21b      	sxth	r3, r3
 8101312:	4618      	mov	r0, r3
 8101314:	f7ff f98e 	bl	8100634 <__aeabi_i2d>
 8101318:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810131c:	f7ff fb1e 	bl	810095c <__aeabi_ddiv>
 8101320:	4602      	mov	r2, r0
 8101322:	460b      	mov	r3, r1
 8101324:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8101328:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 810132c:	021b      	lsls	r3, r3, #8
 810132e:	b21a      	sxth	r2, r3
 8101330:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8101334:	b21b      	sxth	r3, r3
 8101336:	4313      	orrs	r3, r2
 8101338:	b21b      	sxth	r3, r3
 810133a:	4618      	mov	r0, r3
 810133c:	f7ff f97a 	bl	8100634 <__aeabi_i2d>
 8101340:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8101344:	f7ff fb0a 	bl	810095c <__aeabi_ddiv>
 8101348:	4602      	mov	r2, r0
 810134a:	460b      	mov	r3, r1
 810134c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8101350:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8101354:	021b      	lsls	r3, r3, #8
 8101356:	b21a      	sxth	r2, r3
 8101358:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 810135c:	b21b      	sxth	r3, r3
 810135e:	4313      	orrs	r3, r2
 8101360:	b21b      	sxth	r3, r3
 8101362:	4618      	mov	r0, r3
 8101364:	f7ff f966 	bl	8100634 <__aeabi_i2d>
 8101368:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810136c:	f7ff faf6 	bl	810095c <__aeabi_ddiv>
 8101370:	4602      	mov	r2, r0
 8101372:	460b      	mov	r3, r1
 8101374:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8101378:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 810137c:	021b      	lsls	r3, r3, #8
 810137e:	b21a      	sxth	r2, r3
 8101380:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8101384:	b21b      	sxth	r3, r3
 8101386:	4313      	orrs	r3, r2
 8101388:	b21b      	sxth	r3, r3
 810138a:	4618      	mov	r0, r3
 810138c:	f7ff f952 	bl	8100634 <__aeabi_i2d>
 8101390:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8101394:	f7ff fae2 	bl	810095c <__aeabi_ddiv>
 8101398:	4602      	mov	r2, r0
 810139a:	460b      	mov	r3, r1
 810139c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 81013a0:	e03b      	b.n	810141a <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 81013a2:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 81013a6:	021b      	lsls	r3, r3, #8
 81013a8:	b21a      	sxth	r2, r3
 81013aa:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 81013ae:	b21b      	sxth	r3, r3
 81013b0:	4313      	orrs	r3, r2
 81013b2:	b21b      	sxth	r3, r3
 81013b4:	4618      	mov	r0, r3
 81013b6:	f7ff f93d 	bl	8100634 <__aeabi_i2d>
 81013ba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 81013be:	f7ff facd 	bl	810095c <__aeabi_ddiv>
 81013c2:	4602      	mov	r2, r0
 81013c4:	460b      	mov	r3, r1
 81013c6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 81013ca:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 81013ce:	021b      	lsls	r3, r3, #8
 81013d0:	b21a      	sxth	r2, r3
 81013d2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 81013d6:	b21b      	sxth	r3, r3
 81013d8:	4313      	orrs	r3, r2
 81013da:	b21b      	sxth	r3, r3
 81013dc:	4618      	mov	r0, r3
 81013de:	f7ff f929 	bl	8100634 <__aeabi_i2d>
 81013e2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 81013e6:	f7ff fab9 	bl	810095c <__aeabi_ddiv>
 81013ea:	4602      	mov	r2, r0
 81013ec:	460b      	mov	r3, r1
 81013ee:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 81013f2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 81013f6:	021b      	lsls	r3, r3, #8
 81013f8:	b21a      	sxth	r2, r3
 81013fa:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 81013fe:	b21b      	sxth	r3, r3
 8101400:	4313      	orrs	r3, r2
 8101402:	b21b      	sxth	r3, r3
 8101404:	4618      	mov	r0, r3
 8101406:	f7ff f915 	bl	8100634 <__aeabi_i2d>
 810140a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810140e:	f7ff faa5 	bl	810095c <__aeabi_ddiv>
 8101412:	4602      	mov	r2, r0
 8101414:	460b      	mov	r3, r1
 8101416:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 810141a:	f107 0450 	add.w	r4, r7, #80	; 0x50
 810141e:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8101422:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101424:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101426:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 810142a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 810142e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8101432:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8101436:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 810143a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 810143e:	ec49 8b14 	vmov	d4, r8, r9
 8101442:	ec45 4b15 	vmov	d5, r4, r5
 8101446:	ec41 0b16 	vmov	d6, r0, r1
 810144a:	ec43 2b17 	vmov	d7, r2, r3
}
 810144e:	eeb0 0a44 	vmov.f32	s0, s8
 8101452:	eef0 0a64 	vmov.f32	s1, s9
 8101456:	eeb0 1a45 	vmov.f32	s2, s10
 810145a:	eef0 1a65 	vmov.f32	s3, s11
 810145e:	eeb0 2a46 	vmov.f32	s4, s12
 8101462:	eef0 2a66 	vmov.f32	s5, s13
 8101466:	eeb0 3a47 	vmov.f32	s6, s14
 810146a:	eef0 3a67 	vmov.f32	s7, s15
 810146e:	3778      	adds	r7, #120	; 0x78
 8101470:	46bd      	mov	sp, r7
 8101472:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8101476:	bf00      	nop
 8101478:	3ff00000 	.word	0x3ff00000
 810147c:	1000000e 	.word	0x1000000e
 8101480:	10000008 	.word	0x10000008
 8101484:	1000000a 	.word	0x1000000a
 8101488:	1000000c 	.word	0x1000000c
 810148c:	10000010 	.word	0x10000010

08101490 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 8101490:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8101494:	b090      	sub	sp, #64	; 0x40
 8101496:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 8101498:	201a      	movs	r0, #26
 810149a:	f7ff feb5 	bl	8101208 <bno055_getVector>
 810149e:	eeb0 4a40 	vmov.f32	s8, s0
 81014a2:	eef0 4a60 	vmov.f32	s9, s1
 81014a6:	eeb0 5a41 	vmov.f32	s10, s2
 81014aa:	eef0 5a61 	vmov.f32	s11, s3
 81014ae:	eeb0 6a42 	vmov.f32	s12, s4
 81014b2:	eef0 6a62 	vmov.f32	s13, s5
 81014b6:	eeb0 7a43 	vmov.f32	s14, s6
 81014ba:	eef0 7a63 	vmov.f32	s15, s7
 81014be:	ed87 4b08 	vstr	d4, [r7, #32]
 81014c2:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 81014c6:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 81014ca:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 81014ce:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 81014d2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 81014d6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 81014da:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 81014de:	ec49 8b14 	vmov	d4, r8, r9
 81014e2:	ec45 4b15 	vmov	d5, r4, r5
 81014e6:	ec41 0b16 	vmov	d6, r0, r1
 81014ea:	ec43 2b17 	vmov	d7, r2, r3
}
 81014ee:	eeb0 0a44 	vmov.f32	s0, s8
 81014f2:	eef0 0a64 	vmov.f32	s1, s9
 81014f6:	eeb0 1a45 	vmov.f32	s2, s10
 81014fa:	eef0 1a65 	vmov.f32	s3, s11
 81014fe:	eeb0 2a46 	vmov.f32	s4, s12
 8101502:	eef0 2a66 	vmov.f32	s5, s13
 8101506:	eeb0 3a47 	vmov.f32	s6, s14
 810150a:	eef0 3a67 	vmov.f32	s7, s15
 810150e:	3740      	adds	r7, #64	; 0x40
 8101510:	46bd      	mov	sp, r7
 8101512:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08101516 <PID_Init>:
#include<map.h>
#include<parametri.h>


void PID_Init( PID* conf, float kp, float kd, float ki, float dt, float outMin, float outMax)
{
 8101516:	b480      	push	{r7}
 8101518:	b089      	sub	sp, #36	; 0x24
 810151a:	af00      	add	r7, sp, #0
 810151c:	61f8      	str	r0, [r7, #28]
 810151e:	ed87 0a06 	vstr	s0, [r7, #24]
 8101522:	edc7 0a05 	vstr	s1, [r7, #20]
 8101526:	ed87 1a04 	vstr	s2, [r7, #16]
 810152a:	edc7 1a03 	vstr	s3, [r7, #12]
 810152e:	ed87 2a02 	vstr	s4, [r7, #8]
 8101532:	edc7 2a01 	vstr	s5, [r7, #4]
	conf->kp = kp;
 8101536:	69fb      	ldr	r3, [r7, #28]
 8101538:	69ba      	ldr	r2, [r7, #24]
 810153a:	601a      	str	r2, [r3, #0]
	conf->kd = kd;
 810153c:	69fb      	ldr	r3, [r7, #28]
 810153e:	697a      	ldr	r2, [r7, #20]
 8101540:	605a      	str	r2, [r3, #4]
	conf->ki = ki;
 8101542:	69fb      	ldr	r3, [r7, #28]
 8101544:	693a      	ldr	r2, [r7, #16]
 8101546:	609a      	str	r2, [r3, #8]
	conf->dt = dt;
 8101548:	69fb      	ldr	r3, [r7, #28]
 810154a:	68fa      	ldr	r2, [r7, #12]
 810154c:	60da      	str	r2, [r3, #12]
	conf->Iterm = 0;
 810154e:	69fb      	ldr	r3, [r7, #28]
 8101550:	f04f 0200 	mov.w	r2, #0
 8101554:	615a      	str	r2, [r3, #20]
	conf->lastError = 0;
 8101556:	69fb      	ldr	r3, [r7, #28]
 8101558:	f04f 0200 	mov.w	r2, #0
 810155c:	611a      	str	r2, [r3, #16]
	conf->outMax = outMax,
 810155e:	69fb      	ldr	r3, [r7, #28]
 8101560:	687a      	ldr	r2, [r7, #4]
 8101562:	619a      	str	r2, [r3, #24]
	conf->outMin = outMin;
 8101564:	69fb      	ldr	r3, [r7, #28]
 8101566:	68ba      	ldr	r2, [r7, #8]
 8101568:	61da      	str	r2, [r3, #28]
}
 810156a:	bf00      	nop
 810156c:	3724      	adds	r7, #36	; 0x24
 810156e:	46bd      	mov	sp, r7
 8101570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101574:	4770      	bx	lr

08101576 <PID_Compute>:

float PID_Compute(float input, float setPoint, PID* conf)
{
 8101576:	b480      	push	{r7}
 8101578:	b08b      	sub	sp, #44	; 0x2c
 810157a:	af00      	add	r7, sp, #0
 810157c:	ed87 0a03 	vstr	s0, [r7, #12]
 8101580:	edc7 0a02 	vstr	s1, [r7, #8]
 8101584:	6078      	str	r0, [r7, #4]
	float error = setPoint - input;
 8101586:	ed97 7a02 	vldr	s14, [r7, #8]
 810158a:	edd7 7a03 	vldr	s15, [r7, #12]
 810158e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8101592:	edc7 7a05 	vstr	s15, [r7, #20]
	//calcolo della variabile di errore

	conf->Iterm += (error * conf->dt) * conf->ki;
 8101596:	687b      	ldr	r3, [r7, #4]
 8101598:	ed93 7a05 	vldr	s14, [r3, #20]
 810159c:	687b      	ldr	r3, [r7, #4]
 810159e:	edd3 6a03 	vldr	s13, [r3, #12]
 81015a2:	edd7 7a05 	vldr	s15, [r7, #20]
 81015a6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 81015aa:	687b      	ldr	r3, [r7, #4]
 81015ac:	edd3 7a02 	vldr	s15, [r3, #8]
 81015b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81015b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 81015b8:	687b      	ldr	r3, [r7, #4]
 81015ba:	edc3 7a05 	vstr	s15, [r3, #20]
	/*calcola l'integrale dell'errore (aggiungendo il nuovo errore). Noto il valore
	 * precedente dell'integrale dell'errore aggiungiamo l'errore nel nuovo passaggio
	 * quindi otteniamo l'area sotto la funzione di errore passo dopo passo*/

	if((conf->Iterm) > conf->outMax) conf->Iterm = conf->outMax;
 81015be:	687b      	ldr	r3, [r7, #4]
 81015c0:	ed93 7a05 	vldr	s14, [r3, #20]
 81015c4:	687b      	ldr	r3, [r7, #4]
 81015c6:	edd3 7a06 	vldr	s15, [r3, #24]
 81015ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 81015ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81015d2:	dd04      	ble.n	81015de <PID_Compute+0x68>
 81015d4:	687b      	ldr	r3, [r7, #4]
 81015d6:	699a      	ldr	r2, [r3, #24]
 81015d8:	687b      	ldr	r3, [r7, #4]
 81015da:	615a      	str	r2, [r3, #20]
 81015dc:	e00e      	b.n	81015fc <PID_Compute+0x86>
	else if((conf->Iterm) < conf->outMin) conf->Iterm = conf->outMin;
 81015de:	687b      	ldr	r3, [r7, #4]
 81015e0:	ed93 7a05 	vldr	s14, [r3, #20]
 81015e4:	687b      	ldr	r3, [r7, #4]
 81015e6:	edd3 7a07 	vldr	s15, [r3, #28]
 81015ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 81015ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81015f2:	d503      	bpl.n	81015fc <PID_Compute+0x86>
 81015f4:	687b      	ldr	r3, [r7, #4]
 81015f6:	69da      	ldr	r2, [r3, #28]
 81015f8:	687b      	ldr	r3, [r7, #4]
 81015fa:	615a      	str	r2, [r3, #20]

	float error2 = error;
 81015fc:	697b      	ldr	r3, [r7, #20]
 81015fe:	627b      	str	r3, [r7, #36]	; 0x24
	float lastError = conf->lastError;
 8101600:	687b      	ldr	r3, [r7, #4]
 8101602:	691b      	ldr	r3, [r3, #16]
 8101604:	623b      	str	r3, [r7, #32]

	if (error2 <=0 && lastError <=0) {
 8101606:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 810160a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 810160e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101612:	d812      	bhi.n	810163a <PID_Compute+0xc4>
 8101614:	edd7 7a08 	vldr	s15, [r7, #32]
 8101618:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 810161c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101620:	d80b      	bhi.n	810163a <PID_Compute+0xc4>
		error2 = -error2;
 8101622:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8101626:	eef1 7a67 	vneg.f32	s15, s15
 810162a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		lastError = -lastError;
 810162e:	edd7 7a08 	vldr	s15, [r7, #32]
 8101632:	eef1 7a67 	vneg.f32	s15, s15
 8101636:	edc7 7a08 	vstr	s15, [r7, #32]
	}

	float dInput = (error2 - lastError) / conf->dt;
 810163a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 810163e:	edd7 7a08 	vldr	s15, [r7, #32]
 8101642:	ee77 6a67 	vsub.f32	s13, s14, s15
 8101646:	687b      	ldr	r3, [r7, #4]
 8101648:	ed93 7a03 	vldr	s14, [r3, #12]
 810164c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101650:	edc7 7a07 	vstr	s15, [r7, #28]
	//derivata del valore di uscita

	if (dInput > 0) {
 8101654:	edd7 7a07 	vldr	s15, [r7, #28]
 8101658:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 810165c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101660:	dd0d      	ble.n	810167e <PID_Compute+0x108>
		if (error < 0) dInput=-dInput;
 8101662:	edd7 7a05 	vldr	s15, [r7, #20]
 8101666:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 810166a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810166e:	d513      	bpl.n	8101698 <PID_Compute+0x122>
 8101670:	edd7 7a07 	vldr	s15, [r7, #28]
 8101674:	eef1 7a67 	vneg.f32	s15, s15
 8101678:	edc7 7a07 	vstr	s15, [r7, #28]
 810167c:	e00c      	b.n	8101698 <PID_Compute+0x122>
	}
	else {
		if (error < 0) dInput=-dInput;
 810167e:	edd7 7a05 	vldr	s15, [r7, #20]
 8101682:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8101686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810168a:	d505      	bpl.n	8101698 <PID_Compute+0x122>
 810168c:	edd7 7a07 	vldr	s15, [r7, #28]
 8101690:	eef1 7a67 	vneg.f32	s15, s15
 8101694:	edc7 7a07 	vstr	s15, [r7, #28]
	}

	float output = (conf->kp * error) + (conf->Iterm) + (conf->kd * dInput);
 8101698:	687b      	ldr	r3, [r7, #4]
 810169a:	ed93 7a00 	vldr	s14, [r3]
 810169e:	edd7 7a05 	vldr	s15, [r7, #20]
 81016a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 81016a6:	687b      	ldr	r3, [r7, #4]
 81016a8:	edd3 7a05 	vldr	s15, [r3, #20]
 81016ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 81016b0:	687b      	ldr	r3, [r7, #4]
 81016b2:	edd3 6a01 	vldr	s13, [r3, #4]
 81016b6:	edd7 7a07 	vldr	s15, [r7, #28]
 81016ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81016be:	ee77 7a27 	vadd.f32	s15, s14, s15
 81016c2:	edc7 7a06 	vstr	s15, [r7, #24]
    //calcola l'output del PID sommando tutti e tre gli output
	//printf("%.4f, %.4f, %.4f\r\n", input, conf->kp*error, conf->kd * dInput);

	if(output > conf->outMax) output = conf->outMax;
 81016c6:	687b      	ldr	r3, [r7, #4]
 81016c8:	edd3 7a06 	vldr	s15, [r3, #24]
 81016cc:	ed97 7a06 	vldr	s14, [r7, #24]
 81016d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 81016d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81016d8:	dd03      	ble.n	81016e2 <PID_Compute+0x16c>
 81016da:	687b      	ldr	r3, [r7, #4]
 81016dc:	699b      	ldr	r3, [r3, #24]
 81016de:	61bb      	str	r3, [r7, #24]
 81016e0:	e00c      	b.n	81016fc <PID_Compute+0x186>
	else if(output < conf->outMin) output = conf->outMin;
 81016e2:	687b      	ldr	r3, [r7, #4]
 81016e4:	edd3 7a07 	vldr	s15, [r3, #28]
 81016e8:	ed97 7a06 	vldr	s14, [r7, #24]
 81016ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 81016f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81016f4:	d502      	bpl.n	81016fc <PID_Compute+0x186>
 81016f6:	687b      	ldr	r3, [r7, #4]
 81016f8:	69db      	ldr	r3, [r3, #28]
 81016fa:	61bb      	str	r3, [r7, #24]

	conf->lastError = error;
 81016fc:	687b      	ldr	r3, [r7, #4]
 81016fe:	697a      	ldr	r2, [r7, #20]
 8101700:	611a      	str	r2, [r3, #16]
	//ricorda la variabile per il prossimo ciclo

	return output;
 8101702:	69bb      	ldr	r3, [r7, #24]
 8101704:	ee07 3a90 	vmov	s15, r3
}
 8101708:	eeb0 0a67 	vmov.f32	s0, s15
 810170c:	372c      	adds	r7, #44	; 0x2c
 810170e:	46bd      	mov	sp, r7
 8101710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101714:	4770      	bx	lr
	...

08101718 <SpeedCompute>:

float* SpeedCompute(float virtualInputs[])
{
 8101718:	b5b0      	push	{r4, r5, r7, lr}
 810171a:	b082      	sub	sp, #8
 810171c:	af00      	add	r7, sp, #0
 810171e:	6078      	str	r0, [r7, #4]
	static float Speeds_quad[4];
	static float Speeds[4];

	Speeds_quad[0] = (1/(4*b))*virtualInputs[0] + (1/(2*l*b))*virtualInputs[2] - (1/(4*d))*virtualInputs[3];
 8101720:	687b      	ldr	r3, [r7, #4]
 8101722:	681b      	ldr	r3, [r3, #0]
 8101724:	4618      	mov	r0, r3
 8101726:	f7fe ff97 	bl	8100658 <__aeabi_f2d>
 810172a:	a3a3      	add	r3, pc, #652	; (adr r3, 81019b8 <SpeedCompute+0x2a0>)
 810172c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101730:	f7fe ffea 	bl	8100708 <__aeabi_dmul>
 8101734:	4602      	mov	r2, r0
 8101736:	460b      	mov	r3, r1
 8101738:	4614      	mov	r4, r2
 810173a:	461d      	mov	r5, r3
 810173c:	687b      	ldr	r3, [r7, #4]
 810173e:	3308      	adds	r3, #8
 8101740:	681b      	ldr	r3, [r3, #0]
 8101742:	4618      	mov	r0, r3
 8101744:	f7fe ff88 	bl	8100658 <__aeabi_f2d>
 8101748:	a39d      	add	r3, pc, #628	; (adr r3, 81019c0 <SpeedCompute+0x2a8>)
 810174a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810174e:	f7fe ffdb 	bl	8100708 <__aeabi_dmul>
 8101752:	4602      	mov	r2, r0
 8101754:	460b      	mov	r3, r1
 8101756:	4620      	mov	r0, r4
 8101758:	4629      	mov	r1, r5
 810175a:	f7fe fe1f 	bl	810039c <__adddf3>
 810175e:	4602      	mov	r2, r0
 8101760:	460b      	mov	r3, r1
 8101762:	4614      	mov	r4, r2
 8101764:	461d      	mov	r5, r3
 8101766:	687b      	ldr	r3, [r7, #4]
 8101768:	330c      	adds	r3, #12
 810176a:	681b      	ldr	r3, [r3, #0]
 810176c:	4618      	mov	r0, r3
 810176e:	f7fe ff73 	bl	8100658 <__aeabi_f2d>
 8101772:	a395      	add	r3, pc, #596	; (adr r3, 81019c8 <SpeedCompute+0x2b0>)
 8101774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101778:	f7fe ffc6 	bl	8100708 <__aeabi_dmul>
 810177c:	4602      	mov	r2, r0
 810177e:	460b      	mov	r3, r1
 8101780:	4620      	mov	r0, r4
 8101782:	4629      	mov	r1, r5
 8101784:	f7fe fe08 	bl	8100398 <__aeabi_dsub>
 8101788:	4602      	mov	r2, r0
 810178a:	460b      	mov	r3, r1
 810178c:	4610      	mov	r0, r2
 810178e:	4619      	mov	r1, r3
 8101790:	f7ff fab2 	bl	8100cf8 <__aeabi_d2f>
 8101794:	4603      	mov	r3, r0
 8101796:	4a8e      	ldr	r2, [pc, #568]	; (81019d0 <SpeedCompute+0x2b8>)
 8101798:	6013      	str	r3, [r2, #0]
	Speeds_quad[1] = (1/(4*b))*virtualInputs[0] - (1/(2*l*b))*virtualInputs[1] + (1/(4*d))*virtualInputs[3];
 810179a:	687b      	ldr	r3, [r7, #4]
 810179c:	681b      	ldr	r3, [r3, #0]
 810179e:	4618      	mov	r0, r3
 81017a0:	f7fe ff5a 	bl	8100658 <__aeabi_f2d>
 81017a4:	a384      	add	r3, pc, #528	; (adr r3, 81019b8 <SpeedCompute+0x2a0>)
 81017a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81017aa:	f7fe ffad 	bl	8100708 <__aeabi_dmul>
 81017ae:	4602      	mov	r2, r0
 81017b0:	460b      	mov	r3, r1
 81017b2:	4614      	mov	r4, r2
 81017b4:	461d      	mov	r5, r3
 81017b6:	687b      	ldr	r3, [r7, #4]
 81017b8:	3304      	adds	r3, #4
 81017ba:	681b      	ldr	r3, [r3, #0]
 81017bc:	4618      	mov	r0, r3
 81017be:	f7fe ff4b 	bl	8100658 <__aeabi_f2d>
 81017c2:	a37f      	add	r3, pc, #508	; (adr r3, 81019c0 <SpeedCompute+0x2a8>)
 81017c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81017c8:	f7fe ff9e 	bl	8100708 <__aeabi_dmul>
 81017cc:	4602      	mov	r2, r0
 81017ce:	460b      	mov	r3, r1
 81017d0:	4620      	mov	r0, r4
 81017d2:	4629      	mov	r1, r5
 81017d4:	f7fe fde0 	bl	8100398 <__aeabi_dsub>
 81017d8:	4602      	mov	r2, r0
 81017da:	460b      	mov	r3, r1
 81017dc:	4614      	mov	r4, r2
 81017de:	461d      	mov	r5, r3
 81017e0:	687b      	ldr	r3, [r7, #4]
 81017e2:	330c      	adds	r3, #12
 81017e4:	681b      	ldr	r3, [r3, #0]
 81017e6:	4618      	mov	r0, r3
 81017e8:	f7fe ff36 	bl	8100658 <__aeabi_f2d>
 81017ec:	a376      	add	r3, pc, #472	; (adr r3, 81019c8 <SpeedCompute+0x2b0>)
 81017ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 81017f2:	f7fe ff89 	bl	8100708 <__aeabi_dmul>
 81017f6:	4602      	mov	r2, r0
 81017f8:	460b      	mov	r3, r1
 81017fa:	4620      	mov	r0, r4
 81017fc:	4629      	mov	r1, r5
 81017fe:	f7fe fdcd 	bl	810039c <__adddf3>
 8101802:	4602      	mov	r2, r0
 8101804:	460b      	mov	r3, r1
 8101806:	4610      	mov	r0, r2
 8101808:	4619      	mov	r1, r3
 810180a:	f7ff fa75 	bl	8100cf8 <__aeabi_d2f>
 810180e:	4603      	mov	r3, r0
 8101810:	4a6f      	ldr	r2, [pc, #444]	; (81019d0 <SpeedCompute+0x2b8>)
 8101812:	6053      	str	r3, [r2, #4]
	Speeds_quad[2] = (1/(4*b))*virtualInputs[0] - (1/(2*l*b))*virtualInputs[2] - (1/(4*d))*virtualInputs[3];
 8101814:	687b      	ldr	r3, [r7, #4]
 8101816:	681b      	ldr	r3, [r3, #0]
 8101818:	4618      	mov	r0, r3
 810181a:	f7fe ff1d 	bl	8100658 <__aeabi_f2d>
 810181e:	a366      	add	r3, pc, #408	; (adr r3, 81019b8 <SpeedCompute+0x2a0>)
 8101820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101824:	f7fe ff70 	bl	8100708 <__aeabi_dmul>
 8101828:	4602      	mov	r2, r0
 810182a:	460b      	mov	r3, r1
 810182c:	4614      	mov	r4, r2
 810182e:	461d      	mov	r5, r3
 8101830:	687b      	ldr	r3, [r7, #4]
 8101832:	3308      	adds	r3, #8
 8101834:	681b      	ldr	r3, [r3, #0]
 8101836:	4618      	mov	r0, r3
 8101838:	f7fe ff0e 	bl	8100658 <__aeabi_f2d>
 810183c:	a360      	add	r3, pc, #384	; (adr r3, 81019c0 <SpeedCompute+0x2a8>)
 810183e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101842:	f7fe ff61 	bl	8100708 <__aeabi_dmul>
 8101846:	4602      	mov	r2, r0
 8101848:	460b      	mov	r3, r1
 810184a:	4620      	mov	r0, r4
 810184c:	4629      	mov	r1, r5
 810184e:	f7fe fda3 	bl	8100398 <__aeabi_dsub>
 8101852:	4602      	mov	r2, r0
 8101854:	460b      	mov	r3, r1
 8101856:	4614      	mov	r4, r2
 8101858:	461d      	mov	r5, r3
 810185a:	687b      	ldr	r3, [r7, #4]
 810185c:	330c      	adds	r3, #12
 810185e:	681b      	ldr	r3, [r3, #0]
 8101860:	4618      	mov	r0, r3
 8101862:	f7fe fef9 	bl	8100658 <__aeabi_f2d>
 8101866:	a358      	add	r3, pc, #352	; (adr r3, 81019c8 <SpeedCompute+0x2b0>)
 8101868:	e9d3 2300 	ldrd	r2, r3, [r3]
 810186c:	f7fe ff4c 	bl	8100708 <__aeabi_dmul>
 8101870:	4602      	mov	r2, r0
 8101872:	460b      	mov	r3, r1
 8101874:	4620      	mov	r0, r4
 8101876:	4629      	mov	r1, r5
 8101878:	f7fe fd8e 	bl	8100398 <__aeabi_dsub>
 810187c:	4602      	mov	r2, r0
 810187e:	460b      	mov	r3, r1
 8101880:	4610      	mov	r0, r2
 8101882:	4619      	mov	r1, r3
 8101884:	f7ff fa38 	bl	8100cf8 <__aeabi_d2f>
 8101888:	4603      	mov	r3, r0
 810188a:	4a51      	ldr	r2, [pc, #324]	; (81019d0 <SpeedCompute+0x2b8>)
 810188c:	6093      	str	r3, [r2, #8]
	Speeds_quad[3] = (1/(4*b))*virtualInputs[0] + (1/(2*l*b))*virtualInputs[1] + (1/(4*d))*virtualInputs[3];
 810188e:	687b      	ldr	r3, [r7, #4]
 8101890:	681b      	ldr	r3, [r3, #0]
 8101892:	4618      	mov	r0, r3
 8101894:	f7fe fee0 	bl	8100658 <__aeabi_f2d>
 8101898:	a347      	add	r3, pc, #284	; (adr r3, 81019b8 <SpeedCompute+0x2a0>)
 810189a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810189e:	f7fe ff33 	bl	8100708 <__aeabi_dmul>
 81018a2:	4602      	mov	r2, r0
 81018a4:	460b      	mov	r3, r1
 81018a6:	4614      	mov	r4, r2
 81018a8:	461d      	mov	r5, r3
 81018aa:	687b      	ldr	r3, [r7, #4]
 81018ac:	3304      	adds	r3, #4
 81018ae:	681b      	ldr	r3, [r3, #0]
 81018b0:	4618      	mov	r0, r3
 81018b2:	f7fe fed1 	bl	8100658 <__aeabi_f2d>
 81018b6:	a342      	add	r3, pc, #264	; (adr r3, 81019c0 <SpeedCompute+0x2a8>)
 81018b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81018bc:	f7fe ff24 	bl	8100708 <__aeabi_dmul>
 81018c0:	4602      	mov	r2, r0
 81018c2:	460b      	mov	r3, r1
 81018c4:	4620      	mov	r0, r4
 81018c6:	4629      	mov	r1, r5
 81018c8:	f7fe fd68 	bl	810039c <__adddf3>
 81018cc:	4602      	mov	r2, r0
 81018ce:	460b      	mov	r3, r1
 81018d0:	4614      	mov	r4, r2
 81018d2:	461d      	mov	r5, r3
 81018d4:	687b      	ldr	r3, [r7, #4]
 81018d6:	330c      	adds	r3, #12
 81018d8:	681b      	ldr	r3, [r3, #0]
 81018da:	4618      	mov	r0, r3
 81018dc:	f7fe febc 	bl	8100658 <__aeabi_f2d>
 81018e0:	a339      	add	r3, pc, #228	; (adr r3, 81019c8 <SpeedCompute+0x2b0>)
 81018e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81018e6:	f7fe ff0f 	bl	8100708 <__aeabi_dmul>
 81018ea:	4602      	mov	r2, r0
 81018ec:	460b      	mov	r3, r1
 81018ee:	4620      	mov	r0, r4
 81018f0:	4629      	mov	r1, r5
 81018f2:	f7fe fd53 	bl	810039c <__adddf3>
 81018f6:	4602      	mov	r2, r0
 81018f8:	460b      	mov	r3, r1
 81018fa:	4610      	mov	r0, r2
 81018fc:	4619      	mov	r1, r3
 81018fe:	f7ff f9fb 	bl	8100cf8 <__aeabi_d2f>
 8101902:	4603      	mov	r3, r0
 8101904:	4a32      	ldr	r2, [pc, #200]	; (81019d0 <SpeedCompute+0x2b8>)
 8101906:	60d3      	str	r3, [r2, #12]
     * Calcoliamo le velocità dei motori al quadrato, poichè non possono essere negative. Partendo dal
     * valore di throttle e seguendo le matrici di controllo dei droni andiamo a sommare e sottrarre le
     * variabili date tramite il pid per il controllo delle velocità.
     */

	Speeds[0]= sqrt(Speeds_quad[0]);
 8101908:	4b31      	ldr	r3, [pc, #196]	; (81019d0 <SpeedCompute+0x2b8>)
 810190a:	681b      	ldr	r3, [r3, #0]
 810190c:	4618      	mov	r0, r3
 810190e:	f7fe fea3 	bl	8100658 <__aeabi_f2d>
 8101912:	4602      	mov	r2, r0
 8101914:	460b      	mov	r3, r1
 8101916:	ec43 2b10 	vmov	d0, r2, r3
 810191a:	f00c f8ad 	bl	810da78 <sqrt>
 810191e:	ec53 2b10 	vmov	r2, r3, d0
 8101922:	4610      	mov	r0, r2
 8101924:	4619      	mov	r1, r3
 8101926:	f7ff f9e7 	bl	8100cf8 <__aeabi_d2f>
 810192a:	4603      	mov	r3, r0
 810192c:	4a29      	ldr	r2, [pc, #164]	; (81019d4 <SpeedCompute+0x2bc>)
 810192e:	6013      	str	r3, [r2, #0]
	Speeds[1]= sqrt(Speeds_quad[1]);
 8101930:	4b27      	ldr	r3, [pc, #156]	; (81019d0 <SpeedCompute+0x2b8>)
 8101932:	685b      	ldr	r3, [r3, #4]
 8101934:	4618      	mov	r0, r3
 8101936:	f7fe fe8f 	bl	8100658 <__aeabi_f2d>
 810193a:	4602      	mov	r2, r0
 810193c:	460b      	mov	r3, r1
 810193e:	ec43 2b10 	vmov	d0, r2, r3
 8101942:	f00c f899 	bl	810da78 <sqrt>
 8101946:	ec53 2b10 	vmov	r2, r3, d0
 810194a:	4610      	mov	r0, r2
 810194c:	4619      	mov	r1, r3
 810194e:	f7ff f9d3 	bl	8100cf8 <__aeabi_d2f>
 8101952:	4603      	mov	r3, r0
 8101954:	4a1f      	ldr	r2, [pc, #124]	; (81019d4 <SpeedCompute+0x2bc>)
 8101956:	6053      	str	r3, [r2, #4]
	Speeds[2]= sqrt(Speeds_quad[2]);
 8101958:	4b1d      	ldr	r3, [pc, #116]	; (81019d0 <SpeedCompute+0x2b8>)
 810195a:	689b      	ldr	r3, [r3, #8]
 810195c:	4618      	mov	r0, r3
 810195e:	f7fe fe7b 	bl	8100658 <__aeabi_f2d>
 8101962:	4602      	mov	r2, r0
 8101964:	460b      	mov	r3, r1
 8101966:	ec43 2b10 	vmov	d0, r2, r3
 810196a:	f00c f885 	bl	810da78 <sqrt>
 810196e:	ec53 2b10 	vmov	r2, r3, d0
 8101972:	4610      	mov	r0, r2
 8101974:	4619      	mov	r1, r3
 8101976:	f7ff f9bf 	bl	8100cf8 <__aeabi_d2f>
 810197a:	4603      	mov	r3, r0
 810197c:	4a15      	ldr	r2, [pc, #84]	; (81019d4 <SpeedCompute+0x2bc>)
 810197e:	6093      	str	r3, [r2, #8]
	Speeds[3]= sqrt(Speeds_quad[3]);
 8101980:	4b13      	ldr	r3, [pc, #76]	; (81019d0 <SpeedCompute+0x2b8>)
 8101982:	68db      	ldr	r3, [r3, #12]
 8101984:	4618      	mov	r0, r3
 8101986:	f7fe fe67 	bl	8100658 <__aeabi_f2d>
 810198a:	4602      	mov	r2, r0
 810198c:	460b      	mov	r3, r1
 810198e:	ec43 2b10 	vmov	d0, r2, r3
 8101992:	f00c f871 	bl	810da78 <sqrt>
 8101996:	ec53 2b10 	vmov	r2, r3, d0
 810199a:	4610      	mov	r0, r2
 810199c:	4619      	mov	r1, r3
 810199e:	f7ff f9ab 	bl	8100cf8 <__aeabi_d2f>
 81019a2:	4603      	mov	r3, r0
 81019a4:	4a0b      	ldr	r2, [pc, #44]	; (81019d4 <SpeedCompute+0x2bc>)
 81019a6:	60d3      	str	r3, [r2, #12]
    //Una volta calcolata la velocità dei motori al quadrato, viene eseguita la radice

    return Speeds;
 81019a8:	4b0a      	ldr	r3, [pc, #40]	; (81019d4 <SpeedCompute+0x2bc>)
}
 81019aa:	4618      	mov	r0, r3
 81019ac:	3708      	adds	r7, #8
 81019ae:	46bd      	mov	sp, r7
 81019b0:	bdb0      	pop	{r4, r5, r7, pc}
 81019b2:	bf00      	nop
 81019b4:	f3af 8000 	nop.w
 81019b8:	5d54bf10 	.word	0x5d54bf10
 81019bc:	40d4fe08 	.word	0x40d4fe08
 81019c0:	bcf8c177 	.word	0xbcf8c177
 81019c4:	40ff54f1 	.word	0x40ff54f1
 81019c8:	ffffffff 	.word	0xffffffff
 81019cc:	40a869ff 	.word	0x40a869ff
 81019d0:	1000021c 	.word	0x1000021c
 81019d4:	1000022c 	.word	0x1000022c

081019d8 <Receiver_Init>:




void Receiver_Init (ChannelForFrequency_Data* ch, ChannelForDuty_Data chDuty[], int ne)
{
 81019d8:	b480      	push	{r7}
 81019da:	b087      	sub	sp, #28
 81019dc:	af00      	add	r7, sp, #0
 81019de:	60f8      	str	r0, [r7, #12]
 81019e0:	60b9      	str	r1, [r7, #8]
 81019e2:	607a      	str	r2, [r7, #4]
	int i = 0;
 81019e4:	2300      	movs	r3, #0
 81019e6:	617b      	str	r3, [r7, #20]

	ch->firstCaptured = 0;
 81019e8:	68fb      	ldr	r3, [r7, #12]
 81019ea:	2200      	movs	r2, #0
 81019ec:	605a      	str	r2, [r3, #4]

	for(i = 0; i<ne; i++)
 81019ee:	2300      	movs	r3, #0
 81019f0:	617b      	str	r3, [r7, #20]
 81019f2:	e00f      	b.n	8101a14 <Receiver_Init+0x3c>
	{
		chDuty[i].firstCaptured = 0;
 81019f4:	697b      	ldr	r3, [r7, #20]
 81019f6:	011b      	lsls	r3, r3, #4
 81019f8:	68ba      	ldr	r2, [r7, #8]
 81019fa:	4413      	add	r3, r2
 81019fc:	2200      	movs	r2, #0
 81019fe:	605a      	str	r2, [r3, #4]
		chDuty[i].duty = 0;
 8101a00:	697b      	ldr	r3, [r7, #20]
 8101a02:	011b      	lsls	r3, r3, #4
 8101a04:	68ba      	ldr	r2, [r7, #8]
 8101a06:	4413      	add	r3, r2
 8101a08:	f04f 0200 	mov.w	r2, #0
 8101a0c:	60da      	str	r2, [r3, #12]
	for(i = 0; i<ne; i++)
 8101a0e:	697b      	ldr	r3, [r7, #20]
 8101a10:	3301      	adds	r3, #1
 8101a12:	617b      	str	r3, [r7, #20]
 8101a14:	697a      	ldr	r2, [r7, #20]
 8101a16:	687b      	ldr	r3, [r7, #4]
 8101a18:	429a      	cmp	r2, r3
 8101a1a:	dbeb      	blt.n	81019f4 <Receiver_Init+0x1c>
	}

	ch->flagFirstFrequency = 1;
 8101a1c:	68fb      	ldr	r3, [r7, #12]
 8101a1e:	2201      	movs	r2, #1
 8101a20:	609a      	str	r2, [r3, #8]
	ch->frequency = 0;
 8101a22:	68fb      	ldr	r3, [r7, #12]
 8101a24:	f04f 0200 	mov.w	r2, #0
 8101a28:	60da      	str	r2, [r3, #12]
}
 8101a2a:	bf00      	nop
 8101a2c:	371c      	adds	r7, #28
 8101a2e:	46bd      	mov	sp, r7
 8101a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a34:	4770      	bx	lr
	...

08101a38 <bno055_assignI2C>:

#include "IMU.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8101a38:	b480      	push	{r7}
 8101a3a:	b083      	sub	sp, #12
 8101a3c:	af00      	add	r7, sp, #0
 8101a3e:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8101a40:	4a04      	ldr	r2, [pc, #16]	; (8101a54 <bno055_assignI2C+0x1c>)
 8101a42:	687b      	ldr	r3, [r7, #4]
 8101a44:	6013      	str	r3, [r2, #0]
}
 8101a46:	bf00      	nop
 8101a48:	370c      	adds	r7, #12
 8101a4a:	46bd      	mov	sp, r7
 8101a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a50:	4770      	bx	lr
 8101a52:	bf00      	nop
 8101a54:	1000023c 	.word	0x1000023c

08101a58 <bno055_delay>:

void bno055_delay(int time) {
 8101a58:	b580      	push	{r7, lr}
 8101a5a:	b082      	sub	sp, #8
 8101a5c:	af00      	add	r7, sp, #0
 8101a5e:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8101a60:	687b      	ldr	r3, [r7, #4]
 8101a62:	4618      	mov	r0, r3
 8101a64:	f001 fc06 	bl	8103274 <HAL_Delay>
#endif
}
 8101a68:	bf00      	nop
 8101a6a:	3708      	adds	r7, #8
 8101a6c:	46bd      	mov	sp, r7
 8101a6e:	bd80      	pop	{r7, pc}

08101a70 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8101a70:	b580      	push	{r7, lr}
 8101a72:	b088      	sub	sp, #32
 8101a74:	af02      	add	r7, sp, #8
 8101a76:	4603      	mov	r3, r0
 8101a78:	460a      	mov	r2, r1
 8101a7a:	71fb      	strb	r3, [r7, #7]
 8101a7c:	4613      	mov	r3, r2
 8101a7e:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8101a80:	79fb      	ldrb	r3, [r7, #7]
 8101a82:	733b      	strb	r3, [r7, #12]
 8101a84:	79bb      	ldrb	r3, [r7, #6]
 8101a86:	737b      	strb	r3, [r7, #13]
  HAL_StatusTypeDef status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR<<1, txdata, sizeof(txdata), 10);
 8101a88:	4b5a      	ldr	r3, [pc, #360]	; (8101bf4 <bno055_writeData+0x184>)
 8101a8a:	6818      	ldr	r0, [r3, #0]
 8101a8c:	f107 020c 	add.w	r2, r7, #12
 8101a90:	230a      	movs	r3, #10
 8101a92:	9300      	str	r3, [sp, #0]
 8101a94:	2302      	movs	r3, #2
 8101a96:	2150      	movs	r1, #80	; 0x50
 8101a98:	f001 ffba 	bl	8103a10 <HAL_I2C_Master_Transmit>
 8101a9c:	4603      	mov	r3, r0
 8101a9e:	75fb      	strb	r3, [r7, #23]
  if (status == HAL_OK) {
 8101aa0:	7dfb      	ldrb	r3, [r7, #23]
 8101aa2:	2b00      	cmp	r3, #0
 8101aa4:	f000 80a0 	beq.w	8101be8 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8101aa8:	7dfb      	ldrb	r3, [r7, #23]
 8101aaa:	2b01      	cmp	r3, #1
 8101aac:	d103      	bne.n	8101ab6 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8101aae:	4852      	ldr	r0, [pc, #328]	; (8101bf8 <bno055_writeData+0x188>)
 8101ab0:	f008 f9b2 	bl	8109e18 <puts>
 8101ab4:	e012      	b.n	8101adc <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8101ab6:	7dfb      	ldrb	r3, [r7, #23]
 8101ab8:	2b03      	cmp	r3, #3
 8101aba:	d103      	bne.n	8101ac4 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8101abc:	484f      	ldr	r0, [pc, #316]	; (8101bfc <bno055_writeData+0x18c>)
 8101abe:	f008 f9ab 	bl	8109e18 <puts>
 8101ac2:	e00b      	b.n	8101adc <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8101ac4:	7dfb      	ldrb	r3, [r7, #23]
 8101ac6:	2b02      	cmp	r3, #2
 8101ac8:	d103      	bne.n	8101ad2 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8101aca:	484d      	ldr	r0, [pc, #308]	; (8101c00 <bno055_writeData+0x190>)
 8101acc:	f008 f9a4 	bl	8109e18 <puts>
 8101ad0:	e004      	b.n	8101adc <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8101ad2:	7dfb      	ldrb	r3, [r7, #23]
 8101ad4:	4619      	mov	r1, r3
 8101ad6:	484b      	ldr	r0, [pc, #300]	; (8101c04 <bno055_writeData+0x194>)
 8101ad8:	f008 f918 	bl	8109d0c <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8101adc:	4b45      	ldr	r3, [pc, #276]	; (8101bf4 <bno055_writeData+0x184>)
 8101ade:	681b      	ldr	r3, [r3, #0]
 8101ae0:	4618      	mov	r0, r3
 8101ae2:	f002 f98d 	bl	8103e00 <HAL_I2C_GetError>
 8101ae6:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8101ae8:	693b      	ldr	r3, [r7, #16]
 8101aea:	2b00      	cmp	r3, #0
 8101aec:	d07e      	beq.n	8101bec <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8101aee:	693b      	ldr	r3, [r7, #16]
 8101af0:	2b01      	cmp	r3, #1
 8101af2:	d103      	bne.n	8101afc <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8101af4:	4844      	ldr	r0, [pc, #272]	; (8101c08 <bno055_writeData+0x198>)
 8101af6:	f008 f98f 	bl	8109e18 <puts>
 8101afa:	e021      	b.n	8101b40 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8101afc:	693b      	ldr	r3, [r7, #16]
 8101afe:	2b02      	cmp	r3, #2
 8101b00:	d103      	bne.n	8101b0a <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8101b02:	4842      	ldr	r0, [pc, #264]	; (8101c0c <bno055_writeData+0x19c>)
 8101b04:	f008 f988 	bl	8109e18 <puts>
 8101b08:	e01a      	b.n	8101b40 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8101b0a:	693b      	ldr	r3, [r7, #16]
 8101b0c:	2b04      	cmp	r3, #4
 8101b0e:	d103      	bne.n	8101b18 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8101b10:	483f      	ldr	r0, [pc, #252]	; (8101c10 <bno055_writeData+0x1a0>)
 8101b12:	f008 f981 	bl	8109e18 <puts>
 8101b16:	e013      	b.n	8101b40 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8101b18:	693b      	ldr	r3, [r7, #16]
 8101b1a:	2b08      	cmp	r3, #8
 8101b1c:	d103      	bne.n	8101b26 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8101b1e:	483d      	ldr	r0, [pc, #244]	; (8101c14 <bno055_writeData+0x1a4>)
 8101b20:	f008 f97a 	bl	8109e18 <puts>
 8101b24:	e00c      	b.n	8101b40 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8101b26:	693b      	ldr	r3, [r7, #16]
 8101b28:	2b10      	cmp	r3, #16
 8101b2a:	d103      	bne.n	8101b34 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8101b2c:	483a      	ldr	r0, [pc, #232]	; (8101c18 <bno055_writeData+0x1a8>)
 8101b2e:	f008 f973 	bl	8109e18 <puts>
 8101b32:	e005      	b.n	8101b40 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8101b34:	693b      	ldr	r3, [r7, #16]
 8101b36:	2b20      	cmp	r3, #32
 8101b38:	d102      	bne.n	8101b40 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8101b3a:	4838      	ldr	r0, [pc, #224]	; (8101c1c <bno055_writeData+0x1ac>)
 8101b3c:	f008 f96c 	bl	8109e18 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8101b40:	4b2c      	ldr	r3, [pc, #176]	; (8101bf4 <bno055_writeData+0x184>)
 8101b42:	681b      	ldr	r3, [r3, #0]
 8101b44:	4618      	mov	r0, r3
 8101b46:	f002 f94d 	bl	8103de4 <HAL_I2C_GetState>
 8101b4a:	4603      	mov	r3, r0
 8101b4c:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8101b4e:	7bfb      	ldrb	r3, [r7, #15]
 8101b50:	2b00      	cmp	r3, #0
 8101b52:	d103      	bne.n	8101b5c <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8101b54:	4832      	ldr	r0, [pc, #200]	; (8101c20 <bno055_writeData+0x1b0>)
 8101b56:	f008 f95f 	bl	8109e18 <puts>
 8101b5a:	e048      	b.n	8101bee <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8101b5c:	7bfb      	ldrb	r3, [r7, #15]
 8101b5e:	2b20      	cmp	r3, #32
 8101b60:	d103      	bne.n	8101b6a <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8101b62:	482f      	ldr	r0, [pc, #188]	; (8101c20 <bno055_writeData+0x1b0>)
 8101b64:	f008 f958 	bl	8109e18 <puts>
 8101b68:	e041      	b.n	8101bee <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8101b6a:	7bfb      	ldrb	r3, [r7, #15]
 8101b6c:	2b24      	cmp	r3, #36	; 0x24
 8101b6e:	d103      	bne.n	8101b78 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8101b70:	482c      	ldr	r0, [pc, #176]	; (8101c24 <bno055_writeData+0x1b4>)
 8101b72:	f008 f951 	bl	8109e18 <puts>
 8101b76:	e03a      	b.n	8101bee <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8101b78:	7bfb      	ldrb	r3, [r7, #15]
 8101b7a:	2b21      	cmp	r3, #33	; 0x21
 8101b7c:	d103      	bne.n	8101b86 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8101b7e:	482a      	ldr	r0, [pc, #168]	; (8101c28 <bno055_writeData+0x1b8>)
 8101b80:	f008 f94a 	bl	8109e18 <puts>
 8101b84:	e033      	b.n	8101bee <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8101b86:	7bfb      	ldrb	r3, [r7, #15]
 8101b88:	2b22      	cmp	r3, #34	; 0x22
 8101b8a:	d103      	bne.n	8101b94 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8101b8c:	4827      	ldr	r0, [pc, #156]	; (8101c2c <bno055_writeData+0x1bc>)
 8101b8e:	f008 f943 	bl	8109e18 <puts>
 8101b92:	e02c      	b.n	8101bee <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8101b94:	7bfb      	ldrb	r3, [r7, #15]
 8101b96:	2b28      	cmp	r3, #40	; 0x28
 8101b98:	d103      	bne.n	8101ba2 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8101b9a:	4825      	ldr	r0, [pc, #148]	; (8101c30 <bno055_writeData+0x1c0>)
 8101b9c:	f008 f93c 	bl	8109e18 <puts>
 8101ba0:	e025      	b.n	8101bee <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8101ba2:	7bfb      	ldrb	r3, [r7, #15]
 8101ba4:	2b29      	cmp	r3, #41	; 0x29
 8101ba6:	d103      	bne.n	8101bb0 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8101ba8:	4822      	ldr	r0, [pc, #136]	; (8101c34 <bno055_writeData+0x1c4>)
 8101baa:	f008 f935 	bl	8109e18 <puts>
 8101bae:	e01e      	b.n	8101bee <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8101bb0:	7bfb      	ldrb	r3, [r7, #15]
 8101bb2:	2b2a      	cmp	r3, #42	; 0x2a
 8101bb4:	d103      	bne.n	8101bbe <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8101bb6:	4820      	ldr	r0, [pc, #128]	; (8101c38 <bno055_writeData+0x1c8>)
 8101bb8:	f008 f92e 	bl	8109e18 <puts>
 8101bbc:	e017      	b.n	8101bee <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8101bbe:	7bfb      	ldrb	r3, [r7, #15]
 8101bc0:	2b60      	cmp	r3, #96	; 0x60
 8101bc2:	d103      	bne.n	8101bcc <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8101bc4:	481d      	ldr	r0, [pc, #116]	; (8101c3c <bno055_writeData+0x1cc>)
 8101bc6:	f008 f927 	bl	8109e18 <puts>
 8101bca:	e010      	b.n	8101bee <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8101bcc:	7bfb      	ldrb	r3, [r7, #15]
 8101bce:	2ba0      	cmp	r3, #160	; 0xa0
 8101bd0:	d103      	bne.n	8101bda <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8101bd2:	481b      	ldr	r0, [pc, #108]	; (8101c40 <bno055_writeData+0x1d0>)
 8101bd4:	f008 f920 	bl	8109e18 <puts>
 8101bd8:	e009      	b.n	8101bee <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8101bda:	7bfb      	ldrb	r3, [r7, #15]
 8101bdc:	2be0      	cmp	r3, #224	; 0xe0
 8101bde:	d106      	bne.n	8101bee <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8101be0:	4818      	ldr	r0, [pc, #96]	; (8101c44 <bno055_writeData+0x1d4>)
 8101be2:	f008 f919 	bl	8109e18 <puts>
 8101be6:	e002      	b.n	8101bee <bno055_writeData+0x17e>
    return;
 8101be8:	bf00      	nop
 8101bea:	e000      	b.n	8101bee <bno055_writeData+0x17e>
    return;
 8101bec:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8101bee:	3718      	adds	r7, #24
 8101bf0:	46bd      	mov	sp, r7
 8101bf2:	bd80      	pop	{r7, pc}
 8101bf4:	1000023c 	.word	0x1000023c
 8101bf8:	0810dc8c 	.word	0x0810dc8c
 8101bfc:	0810dcb0 	.word	0x0810dcb0
 8101c00:	0810dcd8 	.word	0x0810dcd8
 8101c04:	0810dcfc 	.word	0x0810dcfc
 8101c08:	0810dd14 	.word	0x0810dd14
 8101c0c:	0810dd28 	.word	0x0810dd28
 8101c10:	0810dd3c 	.word	0x0810dd3c
 8101c14:	0810dd50 	.word	0x0810dd50
 8101c18:	0810dd64 	.word	0x0810dd64
 8101c1c:	0810dd78 	.word	0x0810dd78
 8101c20:	0810dd90 	.word	0x0810dd90
 8101c24:	0810dda8 	.word	0x0810dda8
 8101c28:	0810ddbc 	.word	0x0810ddbc
 8101c2c:	0810ddd4 	.word	0x0810ddd4
 8101c30:	0810ddec 	.word	0x0810ddec
 8101c34:	0810de04 	.word	0x0810de04
 8101c38:	0810de24 	.word	0x0810de24
 8101c3c:	0810de44 	.word	0x0810de44
 8101c40:	0810de5c 	.word	0x0810de5c
 8101c44:	0810de74 	.word	0x0810de74

08101c48 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8101c48:	b580      	push	{r7, lr}
 8101c4a:	b084      	sub	sp, #16
 8101c4c:	af02      	add	r7, sp, #8
 8101c4e:	4603      	mov	r3, r0
 8101c50:	6039      	str	r1, [r7, #0]
 8101c52:	71fb      	strb	r3, [r7, #7]
 8101c54:	4613      	mov	r3, r2
 8101c56:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1, 100);
 8101c58:	4b0b      	ldr	r3, [pc, #44]	; (8101c88 <bno055_readData+0x40>)
 8101c5a:	6818      	ldr	r0, [r3, #0]
 8101c5c:	1dfa      	adds	r2, r7, #7
 8101c5e:	2364      	movs	r3, #100	; 0x64
 8101c60:	9300      	str	r3, [sp, #0]
 8101c62:	2301      	movs	r3, #1
 8101c64:	2150      	movs	r1, #80	; 0x50
 8101c66:	f001 fed3 	bl	8103a10 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len, 100);
 8101c6a:	4b07      	ldr	r3, [pc, #28]	; (8101c88 <bno055_readData+0x40>)
 8101c6c:	6818      	ldr	r0, [r3, #0]
 8101c6e:	79bb      	ldrb	r3, [r7, #6]
 8101c70:	b29b      	uxth	r3, r3
 8101c72:	2264      	movs	r2, #100	; 0x64
 8101c74:	9200      	str	r2, [sp, #0]
 8101c76:	683a      	ldr	r2, [r7, #0]
 8101c78:	2150      	movs	r1, #80	; 0x50
 8101c7a:	f001 ffbd 	bl	8103bf8 <HAL_I2C_Master_Receive>
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8101c7e:	bf00      	nop
 8101c80:	3708      	adds	r7, #8
 8101c82:	46bd      	mov	sp, r7
 8101c84:	bd80      	pop	{r7, pc}
 8101c86:	bf00      	nop
 8101c88:	1000023c 	.word	0x1000023c
 8101c8c:	00000000 	.word	0x00000000

08101c90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8101c94:	ed2d 8b02 	vpush	{d8}
 8101c98:	b0aa      	sub	sp, #168	; 0xa8
 8101c9a:	af0e      	add	r7, sp, #56	; 0x38

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101c9c:	4b7c      	ldr	r3, [pc, #496]	; (8101e90 <main+0x200>)
 8101c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ca2:	4a7b      	ldr	r2, [pc, #492]	; (8101e90 <main+0x200>)
 8101ca4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101ca8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101cac:	4b78      	ldr	r3, [pc, #480]	; (8101e90 <main+0x200>)
 8101cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101cb6:	65bb      	str	r3, [r7, #88]	; 0x58
 8101cb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101cba:	2001      	movs	r0, #1
 8101cbc:	f001 fe06 	bl	81038cc <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8101cc0:	f002 fc34 	bl	810452c <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8101cc4:	2201      	movs	r2, #1
 8101cc6:	2102      	movs	r1, #2
 8101cc8:	2000      	movs	r0, #0
 8101cca:	f002 fbb5 	bl	8104438 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101cce:	4b71      	ldr	r3, [pc, #452]	; (8101e94 <main+0x204>)
 8101cd0:	681b      	ldr	r3, [r3, #0]
 8101cd2:	091b      	lsrs	r3, r3, #4
 8101cd4:	f003 030f 	and.w	r3, r3, #15
 8101cd8:	2b07      	cmp	r3, #7
 8101cda:	d108      	bne.n	8101cee <main+0x5e>
 8101cdc:	4b6e      	ldr	r3, [pc, #440]	; (8101e98 <main+0x208>)
 8101cde:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8101ce2:	4a6d      	ldr	r2, [pc, #436]	; (8101e98 <main+0x208>)
 8101ce4:	f043 0301 	orr.w	r3, r3, #1
 8101ce8:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8101cec:	e007      	b.n	8101cfe <main+0x6e>
 8101cee:	4b6a      	ldr	r3, [pc, #424]	; (8101e98 <main+0x208>)
 8101cf0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8101cf4:	4a68      	ldr	r2, [pc, #416]	; (8101e98 <main+0x208>)
 8101cf6:	f043 0301 	orr.w	r3, r3, #1
 8101cfa:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101cfe:	f001 fa05 	bl	810310c <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8101d02:	f000 fc85 	bl	8102610 <MX_GPIO_Init>
  MX_TIM3_Init();
 8101d06:	f000 fb21 	bl	810234c <MX_TIM3_Init>
  MX_I2C1_Init();
 8101d0a:	f000 fa8b 	bl	8102224 <MX_I2C1_Init>
  MX_TIM5_Init();
 8101d0e:	f000 fbb5 	bl	810247c <MX_TIM5_Init>
  MX_TIM1_Init();
 8101d12:	f000 fac7 	bl	81022a4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  MX_USART3_UART_Init();
 8101d16:	f000 fc2f 	bl	8102578 <MX_USART3_UART_Init>
  bno055_assignI2C(&hi2c1);
 8101d1a:	4860      	ldr	r0, [pc, #384]	; (8101e9c <main+0x20c>)
 8101d1c:	f7ff fe8c 	bl	8101a38 <bno055_assignI2C>
  bno055_setup();
 8101d20:	f7ff fa4a 	bl	81011b8 <bno055_setup>
  bno055_setOperationModeNDOF();
 8101d24:	f7ff fa35 	bl	8101192 <bno055_setOperationModeNDOF>


  Receiver_Init(&chFrequency, chDuty, NUMBER_CHANNELS);
 8101d28:	2205      	movs	r2, #5
 8101d2a:	495d      	ldr	r1, [pc, #372]	; (8101ea0 <main+0x210>)
 8101d2c:	485d      	ldr	r0, [pc, #372]	; (8101ea4 <main+0x214>)
 8101d2e:	f7ff fe53 	bl	81019d8 <Receiver_Init>

  waitingForGettingFrequency();
 8101d32:	f000 fd2f 	bl	8102794 <waitingForGettingFrequency>
  jumpHalfPeriod(chFrequency.frequency);
 8101d36:	4b5b      	ldr	r3, [pc, #364]	; (8101ea4 <main+0x214>)
 8101d38:	edd3 7a03 	vldr	s15, [r3, #12]
 8101d3c:	eeb0 0a67 	vmov.f32	s0, s15
 8101d40:	f000 fd0e 	bl	8102760 <jumpHalfPeriod>
  startInputCaptureInterruptDutyCycle();
 8101d44:	f000 fd02 	bl	810274c <startInputCaptureInterruptDutyCycle>
  //si attende di ottenere i primi valori dal radiocomando, prima di entrare nel loop
 // waitingForFirstValues(chDuty, NUMBER_CHANNELS);


  //inizializzazione PWM
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8101d48:	2100      	movs	r1, #0
 8101d4a:	4857      	ldr	r0, [pc, #348]	; (8101ea8 <main+0x218>)
 8101d4c:	f004 fa6e 	bl	810622c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8101d50:	2104      	movs	r1, #4
 8101d52:	4855      	ldr	r0, [pc, #340]	; (8101ea8 <main+0x218>)
 8101d54:	f004 fa6a 	bl	810622c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8101d58:	2108      	movs	r1, #8
 8101d5a:	4853      	ldr	r0, [pc, #332]	; (8101ea8 <main+0x218>)
 8101d5c:	f004 fa66 	bl	810622c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 8101d60:	210c      	movs	r1, #12
 8101d62:	4851      	ldr	r0, [pc, #324]	; (8101ea8 <main+0x218>)
 8101d64:	f004 fa62 	bl	810622c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 8101d68:	4850      	ldr	r0, [pc, #320]	; (8101eac <main+0x21c>)
 8101d6a:	f004 f985 	bl	8106078 <HAL_TIM_Base_Start_IT>


	  PID_Init(&Pitch_PID, Kp, Kd, Ki, dtempo, -1.3, 1.3);
 8101d6e:	eddf 2a50 	vldr	s5, [pc, #320]	; 8101eb0 <main+0x220>
 8101d72:	ed9f 2a50 	vldr	s4, [pc, #320]	; 8101eb4 <main+0x224>
 8101d76:	eddf 1a50 	vldr	s3, [pc, #320]	; 8101eb8 <main+0x228>
 8101d7a:	ed9f 1a50 	vldr	s2, [pc, #320]	; 8101ebc <main+0x22c>
 8101d7e:	eddf 0a50 	vldr	s1, [pc, #320]	; 8101ec0 <main+0x230>
 8101d82:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8101ec4 <main+0x234>
 8101d86:	4850      	ldr	r0, [pc, #320]	; (8101ec8 <main+0x238>)
 8101d88:	f7ff fbc5 	bl	8101516 <PID_Init>
	  PID_Init(&Roll_PID, Kp, Kd, Ki, dtempo, -1.3, 1.3);
 8101d8c:	eddf 2a48 	vldr	s5, [pc, #288]	; 8101eb0 <main+0x220>
 8101d90:	ed9f 2a48 	vldr	s4, [pc, #288]	; 8101eb4 <main+0x224>
 8101d94:	eddf 1a48 	vldr	s3, [pc, #288]	; 8101eb8 <main+0x228>
 8101d98:	ed9f 1a48 	vldr	s2, [pc, #288]	; 8101ebc <main+0x22c>
 8101d9c:	eddf 0a48 	vldr	s1, [pc, #288]	; 8101ec0 <main+0x230>
 8101da0:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8101ec4 <main+0x234>
 8101da4:	4849      	ldr	r0, [pc, #292]	; (8101ecc <main+0x23c>)
 8101da6:	f7ff fbb6 	bl	8101516 <PID_Init>
    /* USER CODE BEGIN 3 */


      //armamento(4.75%)

	  if(i == 1){
 8101daa:	4b49      	ldr	r3, [pc, #292]	; (8101ed0 <main+0x240>)
 8101dac:	681b      	ldr	r3, [r3, #0]
 8101dae:	2b01      	cmp	r3, #1
 8101db0:	d125      	bne.n	8101dfe <main+0x16e>

		  HAL_Delay(5000);
 8101db2:	f241 3088 	movw	r0, #5000	; 0x1388
 8101db6:	f001 fa5d 	bl	8103274 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8101dba:	2201      	movs	r2, #1
 8101dbc:	2101      	movs	r1, #1
 8101dbe:	4845      	ldr	r0, [pc, #276]	; (8101ed4 <main+0x244>)
 8101dc0:	f001 fd50 	bl	8103864 <HAL_GPIO_WritePin>

    		TIM3->CCR1=950;
 8101dc4:	4b44      	ldr	r3, [pc, #272]	; (8101ed8 <main+0x248>)
 8101dc6:	f240 32b6 	movw	r2, #950	; 0x3b6
 8101dca:	635a      	str	r2, [r3, #52]	; 0x34
	  	    TIM3->CCR2=950;
 8101dcc:	4b42      	ldr	r3, [pc, #264]	; (8101ed8 <main+0x248>)
 8101dce:	f240 32b6 	movw	r2, #950	; 0x3b6
 8101dd2:	639a      	str	r2, [r3, #56]	; 0x38
	  		TIM3->CCR3=950;
 8101dd4:	4b40      	ldr	r3, [pc, #256]	; (8101ed8 <main+0x248>)
 8101dd6:	f240 32b6 	movw	r2, #950	; 0x3b6
 8101dda:	63da      	str	r2, [r3, #60]	; 0x3c
	  		TIM3->CCR4=950;
 8101ddc:	4b3e      	ldr	r3, [pc, #248]	; (8101ed8 <main+0x248>)
 8101dde:	f240 32b6 	movw	r2, #950	; 0x3b6
 8101de2:	641a      	str	r2, [r3, #64]	; 0x40

	  	    printf("%s\n", stringa);
 8101de4:	483d      	ldr	r0, [pc, #244]	; (8101edc <main+0x24c>)
 8101de6:	f008 f817 	bl	8109e18 <puts>
	  	    printf("PWM1, PWM2, PWM3, PWM4, ROLL, VI[1], PITCH, VI[2]\r\n");
 8101dea:	483d      	ldr	r0, [pc, #244]	; (8101ee0 <main+0x250>)
 8101dec:	f008 f814 	bl	8109e18 <puts>

	  		HAL_Delay(5000);
 8101df0:	f241 3088 	movw	r0, #5000	; 0x1388
 8101df4:	f001 fa3e 	bl	8103274 <HAL_Delay>
	  		i=3;
 8101df8:	4b35      	ldr	r3, [pc, #212]	; (8101ed0 <main+0x240>)
 8101dfa:	2203      	movs	r2, #3
 8101dfc:	601a      	str	r2, [r3, #0]
	  }

	  if(i == 2) {
 8101dfe:	4b34      	ldr	r3, [pc, #208]	; (8101ed0 <main+0x240>)
 8101e00:	681b      	ldr	r3, [r3, #0]
 8101e02:	2b02      	cmp	r3, #2
 8101e04:	d1d1      	bne.n	8101daa <main+0x11a>

		  float virtualInputs[4];

		  bno055_vector_t v = bno055_getVectorEuler();
 8101e06:	f7ff fb43 	bl	8101490 <bno055_getVectorEuler>
 8101e0a:	eeb0 4a40 	vmov.f32	s8, s0
 8101e0e:	eef0 4a60 	vmov.f32	s9, s1
 8101e12:	eeb0 5a41 	vmov.f32	s10, s2
 8101e16:	eef0 5a61 	vmov.f32	s11, s3
 8101e1a:	eeb0 6a42 	vmov.f32	s12, s4
 8101e1e:	eef0 6a62 	vmov.f32	s13, s5
 8101e22:	eeb0 7a43 	vmov.f32	s14, s6
 8101e26:	eef0 7a63 	vmov.f32	s15, s7
 8101e2a:	ed87 4b0a 	vstr	d4, [r7, #40]	; 0x28
 8101e2e:	ed87 5b0c 	vstr	d5, [r7, #48]	; 0x30
 8101e32:	ed87 6b0e 	vstr	d6, [r7, #56]	; 0x38
 8101e36:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
		  pitch=v.y;
 8101e3a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8101e3e:	4610      	mov	r0, r2
 8101e40:	4619      	mov	r1, r3
 8101e42:	f7fe ff59 	bl	8100cf8 <__aeabi_d2f>
 8101e46:	4603      	mov	r3, r0
 8101e48:	4a26      	ldr	r2, [pc, #152]	; (8101ee4 <main+0x254>)
 8101e4a:	6013      	str	r3, [r2, #0]

		  if (v.z<0) {
 8101e4c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8101e50:	f04f 0200 	mov.w	r2, #0
 8101e54:	f04f 0300 	mov.w	r3, #0
 8101e58:	f7fe fec8 	bl	8100bec <__aeabi_dcmplt>
 8101e5c:	4603      	mov	r3, r0
 8101e5e:	2b00      	cmp	r3, #0
 8101e60:	d046      	beq.n	8101ef0 <main+0x260>
			  roll= -v.z -180;
 8101e62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8101e66:	4692      	mov	sl, r2
 8101e68:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8101e6c:	f04f 0200 	mov.w	r2, #0
 8101e70:	4b1d      	ldr	r3, [pc, #116]	; (8101ee8 <main+0x258>)
 8101e72:	4650      	mov	r0, sl
 8101e74:	4659      	mov	r1, fp
 8101e76:	f7fe fa8f 	bl	8100398 <__aeabi_dsub>
 8101e7a:	4602      	mov	r2, r0
 8101e7c:	460b      	mov	r3, r1
 8101e7e:	4610      	mov	r0, r2
 8101e80:	4619      	mov	r1, r3
 8101e82:	f7fe ff39 	bl	8100cf8 <__aeabi_d2f>
 8101e86:	4603      	mov	r3, r0
 8101e88:	4a18      	ldr	r2, [pc, #96]	; (8101eec <main+0x25c>)
 8101e8a:	6013      	str	r3, [r2, #0]
 8101e8c:	e040      	b.n	8101f10 <main+0x280>
 8101e8e:	bf00      	nop
 8101e90:	58024400 	.word	0x58024400
 8101e94:	e000ed00 	.word	0xe000ed00
 8101e98:	58026400 	.word	0x58026400
 8101e9c:	10000240 	.word	0x10000240
 8101ea0:	1000044c 	.word	0x1000044c
 8101ea4:	1000049c 	.word	0x1000049c
 8101ea8:	100002d8 	.word	0x100002d8
 8101eac:	1000028c 	.word	0x1000028c
 8101eb0:	3fa66666 	.word	0x3fa66666
 8101eb4:	bfa66666 	.word	0xbfa66666
 8101eb8:	3c23d70a 	.word	0x3c23d70a
 8101ebc:	00000000 	.word	0x00000000
 8101ec0:	3cf5c28f 	.word	0x3cf5c28f
 8101ec4:	3d4ccccd 	.word	0x3d4ccccd
 8101ec8:	10000420 	.word	0x10000420
 8101ecc:	10000400 	.word	0x10000400
 8101ed0:	10000440 	.word	0x10000440
 8101ed4:	58020400 	.word	0x58020400
 8101ed8:	40000400 	.word	0x40000400
 8101edc:	10000014 	.word	0x10000014
 8101ee0:	0810de8c 	.word	0x0810de8c
 8101ee4:	10000448 	.word	0x10000448
 8101ee8:	40668000 	.word	0x40668000
 8101eec:	10000444 	.word	0x10000444
		  }
		  else {
			  roll= -v.z +180;
 8101ef0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8101ef4:	f04f 0000 	mov.w	r0, #0
 8101ef8:	49bd      	ldr	r1, [pc, #756]	; (81021f0 <main+0x560>)
 8101efa:	f7fe fa4d 	bl	8100398 <__aeabi_dsub>
 8101efe:	4602      	mov	r2, r0
 8101f00:	460b      	mov	r3, r1
 8101f02:	4610      	mov	r0, r2
 8101f04:	4619      	mov	r1, r3
 8101f06:	f7fe fef7 	bl	8100cf8 <__aeabi_d2f>
 8101f0a:	4603      	mov	r3, r0
 8101f0c:	4ab9      	ldr	r2, [pc, #740]	; (81021f4 <main+0x564>)
 8101f0e:	6013      	str	r3, [r2, #0]
		  }

		// printf("Roll: %f\t Pitch: %f\t Head: %f\r\n", pitch, roll, v.x);

		  virtualInputs[0] = 15.6;//che equivale alla forza peso del drone;
 8101f10:	4bb9      	ldr	r3, [pc, #740]	; (81021f8 <main+0x568>)
 8101f12:	64bb      	str	r3, [r7, #72]	; 0x48
		                         //ipotizziamo che questo valore sia il 50% del thrust complessivo;
		  virtualInputs[1] = PID_Compute(roll,0, &Pitch_PID);
 8101f14:	4bb7      	ldr	r3, [pc, #732]	; (81021f4 <main+0x564>)
 8101f16:	edd3 7a00 	vldr	s15, [r3]
 8101f1a:	48b8      	ldr	r0, [pc, #736]	; (81021fc <main+0x56c>)
 8101f1c:	eddf 0ab8 	vldr	s1, [pc, #736]	; 8102200 <main+0x570>
 8101f20:	eeb0 0a67 	vmov.f32	s0, s15
 8101f24:	f7ff fb27 	bl	8101576 <PID_Compute>
 8101f28:	eef0 7a40 	vmov.f32	s15, s0
 8101f2c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		  virtualInputs[2] = PID_Compute(pitch,0, &Roll_PID);
 8101f30:	4bb4      	ldr	r3, [pc, #720]	; (8102204 <main+0x574>)
 8101f32:	edd3 7a00 	vldr	s15, [r3]
 8101f36:	48b4      	ldr	r0, [pc, #720]	; (8102208 <main+0x578>)
 8101f38:	eddf 0ab1 	vldr	s1, [pc, #708]	; 8102200 <main+0x570>
 8101f3c:	eeb0 0a67 	vmov.f32	s0, s15
 8101f40:	f7ff fb19 	bl	8101576 <PID_Compute>
 8101f44:	eef0 7a40 	vmov.f32	s15, s0
 8101f48:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		  virtualInputs[3] = 0;//PID_Compute(0,0, &Yaw_PID);
 8101f4c:	f04f 0300 	mov.w	r3, #0
 8101f50:	657b      	str	r3, [r7, #84]	; 0x54

	  		float* Speeds;

	  		Speeds= SpeedCompute(virtualInputs);
 8101f52:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8101f56:	4618      	mov	r0, r3
 8101f58:	f7ff fbde 	bl	8101718 <SpeedCompute>
 8101f5c:	66f8      	str	r0, [r7, #108]	; 0x6c
	  	//Cambiamo il range di pwm che non è più 1240-2000 ma è 1240-1280
	  	//Questo per ovviare alla velocità troppo elevata

	  	//I valori ottenuti da SpeedCompute vengono mappati in velocità

	  	float avgMotor1 = map(*(Speeds+0), MinSpeed, MaxSpeed, (MinDuty/100)*TIM3->ARR, (MaxDuty/100)*TIM3->ARR);
 8101f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101f60:	ed93 8a00 	vldr	s16, [r3]
 8101f64:	4ba9      	ldr	r3, [pc, #676]	; (810220c <main+0x57c>)
 8101f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101f68:	4618      	mov	r0, r3
 8101f6a:	f7fe fb53 	bl	8100614 <__aeabi_ui2d>
 8101f6e:	a39c      	add	r3, pc, #624	; (adr r3, 81021e0 <main+0x550>)
 8101f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101f74:	f7fe fbc8 	bl	8100708 <__aeabi_dmul>
 8101f78:	4602      	mov	r2, r0
 8101f7a:	460b      	mov	r3, r1
 8101f7c:	4610      	mov	r0, r2
 8101f7e:	4619      	mov	r1, r3
 8101f80:	f7fe feba 	bl	8100cf8 <__aeabi_d2f>
 8101f84:	4604      	mov	r4, r0
 8101f86:	4ba1      	ldr	r3, [pc, #644]	; (810220c <main+0x57c>)
 8101f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101f8a:	4618      	mov	r0, r3
 8101f8c:	f7fe fb42 	bl	8100614 <__aeabi_ui2d>
 8101f90:	a395      	add	r3, pc, #596	; (adr r3, 81021e8 <main+0x558>)
 8101f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101f96:	f7fe fbb7 	bl	8100708 <__aeabi_dmul>
 8101f9a:	4602      	mov	r2, r0
 8101f9c:	460b      	mov	r3, r1
 8101f9e:	4610      	mov	r0, r2
 8101fa0:	4619      	mov	r1, r3
 8101fa2:	f7fe fea9 	bl	8100cf8 <__aeabi_d2f>
 8101fa6:	4603      	mov	r3, r0
 8101fa8:	ee02 3a10 	vmov	s4, r3
 8101fac:	ee01 4a90 	vmov	s3, r4
 8101fb0:	ed9f 1a97 	vldr	s2, [pc, #604]	; 8102210 <main+0x580>
 8101fb4:	eddf 0a97 	vldr	s1, [pc, #604]	; 8102214 <main+0x584>
 8101fb8:	eeb0 0a48 	vmov.f32	s0, s16
 8101fbc:	f000 fd32 	bl	8102a24 <map>
 8101fc0:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68
	    float avgMotor2 = map(*(Speeds+1), MinSpeed, MaxSpeed, (MinDuty/100)*TIM3->ARR, (MaxDuty/100)*TIM3->ARR);
 8101fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101fc6:	3304      	adds	r3, #4
 8101fc8:	ed93 8a00 	vldr	s16, [r3]
 8101fcc:	4b8f      	ldr	r3, [pc, #572]	; (810220c <main+0x57c>)
 8101fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101fd0:	4618      	mov	r0, r3
 8101fd2:	f7fe fb1f 	bl	8100614 <__aeabi_ui2d>
 8101fd6:	a382      	add	r3, pc, #520	; (adr r3, 81021e0 <main+0x550>)
 8101fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101fdc:	f7fe fb94 	bl	8100708 <__aeabi_dmul>
 8101fe0:	4602      	mov	r2, r0
 8101fe2:	460b      	mov	r3, r1
 8101fe4:	4610      	mov	r0, r2
 8101fe6:	4619      	mov	r1, r3
 8101fe8:	f7fe fe86 	bl	8100cf8 <__aeabi_d2f>
 8101fec:	4604      	mov	r4, r0
 8101fee:	4b87      	ldr	r3, [pc, #540]	; (810220c <main+0x57c>)
 8101ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101ff2:	4618      	mov	r0, r3
 8101ff4:	f7fe fb0e 	bl	8100614 <__aeabi_ui2d>
 8101ff8:	a37b      	add	r3, pc, #492	; (adr r3, 81021e8 <main+0x558>)
 8101ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101ffe:	f7fe fb83 	bl	8100708 <__aeabi_dmul>
 8102002:	4602      	mov	r2, r0
 8102004:	460b      	mov	r3, r1
 8102006:	4610      	mov	r0, r2
 8102008:	4619      	mov	r1, r3
 810200a:	f7fe fe75 	bl	8100cf8 <__aeabi_d2f>
 810200e:	4603      	mov	r3, r0
 8102010:	ee02 3a10 	vmov	s4, r3
 8102014:	ee01 4a90 	vmov	s3, r4
 8102018:	ed9f 1a7d 	vldr	s2, [pc, #500]	; 8102210 <main+0x580>
 810201c:	eddf 0a7d 	vldr	s1, [pc, #500]	; 8102214 <main+0x584>
 8102020:	eeb0 0a48 	vmov.f32	s0, s16
 8102024:	f000 fcfe 	bl	8102a24 <map>
 8102028:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
	    float avgMotor3 = map(*(Speeds+2), MinSpeed, MaxSpeed, (MinDuty/100)*TIM3->ARR, (MaxDuty/100)*TIM3->ARR);
 810202c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810202e:	3308      	adds	r3, #8
 8102030:	ed93 8a00 	vldr	s16, [r3]
 8102034:	4b75      	ldr	r3, [pc, #468]	; (810220c <main+0x57c>)
 8102036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102038:	4618      	mov	r0, r3
 810203a:	f7fe faeb 	bl	8100614 <__aeabi_ui2d>
 810203e:	a368      	add	r3, pc, #416	; (adr r3, 81021e0 <main+0x550>)
 8102040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102044:	f7fe fb60 	bl	8100708 <__aeabi_dmul>
 8102048:	4602      	mov	r2, r0
 810204a:	460b      	mov	r3, r1
 810204c:	4610      	mov	r0, r2
 810204e:	4619      	mov	r1, r3
 8102050:	f7fe fe52 	bl	8100cf8 <__aeabi_d2f>
 8102054:	4604      	mov	r4, r0
 8102056:	4b6d      	ldr	r3, [pc, #436]	; (810220c <main+0x57c>)
 8102058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810205a:	4618      	mov	r0, r3
 810205c:	f7fe fada 	bl	8100614 <__aeabi_ui2d>
 8102060:	a361      	add	r3, pc, #388	; (adr r3, 81021e8 <main+0x558>)
 8102062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102066:	f7fe fb4f 	bl	8100708 <__aeabi_dmul>
 810206a:	4602      	mov	r2, r0
 810206c:	460b      	mov	r3, r1
 810206e:	4610      	mov	r0, r2
 8102070:	4619      	mov	r1, r3
 8102072:	f7fe fe41 	bl	8100cf8 <__aeabi_d2f>
 8102076:	4603      	mov	r3, r0
 8102078:	ee02 3a10 	vmov	s4, r3
 810207c:	ee01 4a90 	vmov	s3, r4
 8102080:	ed9f 1a63 	vldr	s2, [pc, #396]	; 8102210 <main+0x580>
 8102084:	eddf 0a63 	vldr	s1, [pc, #396]	; 8102214 <main+0x584>
 8102088:	eeb0 0a48 	vmov.f32	s0, s16
 810208c:	f000 fcca 	bl	8102a24 <map>
 8102090:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
	    float avgMotor4 = map(*(Speeds+3), MinSpeed, MaxSpeed, (MinDuty/100)*TIM3->ARR, (MaxDuty/100)*TIM3->ARR);
 8102094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102096:	330c      	adds	r3, #12
 8102098:	ed93 8a00 	vldr	s16, [r3]
 810209c:	4b5b      	ldr	r3, [pc, #364]	; (810220c <main+0x57c>)
 810209e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81020a0:	4618      	mov	r0, r3
 81020a2:	f7fe fab7 	bl	8100614 <__aeabi_ui2d>
 81020a6:	a34e      	add	r3, pc, #312	; (adr r3, 81021e0 <main+0x550>)
 81020a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81020ac:	f7fe fb2c 	bl	8100708 <__aeabi_dmul>
 81020b0:	4602      	mov	r2, r0
 81020b2:	460b      	mov	r3, r1
 81020b4:	4610      	mov	r0, r2
 81020b6:	4619      	mov	r1, r3
 81020b8:	f7fe fe1e 	bl	8100cf8 <__aeabi_d2f>
 81020bc:	4604      	mov	r4, r0
 81020be:	4b53      	ldr	r3, [pc, #332]	; (810220c <main+0x57c>)
 81020c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81020c2:	4618      	mov	r0, r3
 81020c4:	f7fe faa6 	bl	8100614 <__aeabi_ui2d>
 81020c8:	a347      	add	r3, pc, #284	; (adr r3, 81021e8 <main+0x558>)
 81020ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 81020ce:	f7fe fb1b 	bl	8100708 <__aeabi_dmul>
 81020d2:	4602      	mov	r2, r0
 81020d4:	460b      	mov	r3, r1
 81020d6:	4610      	mov	r0, r2
 81020d8:	4619      	mov	r1, r3
 81020da:	f7fe fe0d 	bl	8100cf8 <__aeabi_d2f>
 81020de:	4603      	mov	r3, r0
 81020e0:	ee02 3a10 	vmov	s4, r3
 81020e4:	ee01 4a90 	vmov	s3, r4
 81020e8:	ed9f 1a49 	vldr	s2, [pc, #292]	; 8102210 <main+0x580>
 81020ec:	eddf 0a49 	vldr	s1, [pc, #292]	; 8102214 <main+0x584>
 81020f0:	eeb0 0a48 	vmov.f32	s0, s16
 81020f4:	f000 fc96 	bl	8102a24 <map>
 81020f8:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c


	    printf("%.2f,    %.2f,    %.2f,    %.2f,    %f,    %f,    %f,    %f\r\n", avgMotor1, avgMotor2, avgMotor3, avgMotor4, roll, virtualInputs[1], pitch, virtualInputs[2]);
 81020fc:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 81020fe:	f7fe faab 	bl	8100658 <__aeabi_f2d>
 8102102:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8102106:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8102108:	f7fe faa6 	bl	8100658 <__aeabi_f2d>
 810210c:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8102110:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8102112:	f7fe faa1 	bl	8100658 <__aeabi_f2d>
 8102116:	e9c7 0104 	strd	r0, r1, [r7, #16]
 810211a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 810211c:	f7fe fa9c 	bl	8100658 <__aeabi_f2d>
 8102120:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8102124:	4b33      	ldr	r3, [pc, #204]	; (81021f4 <main+0x564>)
 8102126:	681b      	ldr	r3, [r3, #0]
 8102128:	4618      	mov	r0, r3
 810212a:	f7fe fa95 	bl	8100658 <__aeabi_f2d>
 810212e:	e9c7 0100 	strd	r0, r1, [r7]
 8102132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8102134:	4618      	mov	r0, r3
 8102136:	f7fe fa8f 	bl	8100658 <__aeabi_f2d>
 810213a:	4680      	mov	r8, r0
 810213c:	4689      	mov	r9, r1
 810213e:	4b31      	ldr	r3, [pc, #196]	; (8102204 <main+0x574>)
 8102140:	681b      	ldr	r3, [r3, #0]
 8102142:	4618      	mov	r0, r3
 8102144:	f7fe fa88 	bl	8100658 <__aeabi_f2d>
 8102148:	4604      	mov	r4, r0
 810214a:	460d      	mov	r5, r1
 810214c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810214e:	4618      	mov	r0, r3
 8102150:	f7fe fa82 	bl	8100658 <__aeabi_f2d>
 8102154:	4602      	mov	r2, r0
 8102156:	460b      	mov	r3, r1
 8102158:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 810215c:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8102160:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8102164:	ed97 7b00 	vldr	d7, [r7]
 8102168:	ed8d 7b06 	vstr	d7, [sp, #24]
 810216c:	ed97 7b02 	vldr	d7, [r7, #8]
 8102170:	ed8d 7b04 	vstr	d7, [sp, #16]
 8102174:	ed97 7b04 	vldr	d7, [r7, #16]
 8102178:	ed8d 7b02 	vstr	d7, [sp, #8]
 810217c:	ed97 7b06 	vldr	d7, [r7, #24]
 8102180:	ed8d 7b00 	vstr	d7, [sp]
 8102184:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8102188:	4823      	ldr	r0, [pc, #140]	; (8102218 <main+0x588>)
 810218a:	f007 fdbf 	bl	8109d0c <iprintf>


	   	TIM3->CCR1 = avgMotor1;
 810218e:	4b1f      	ldr	r3, [pc, #124]	; (810220c <main+0x57c>)
 8102190:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8102194:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102198:	ee17 2a90 	vmov	r2, s15
 810219c:	635a      	str	r2, [r3, #52]	; 0x34
	   	TIM3->CCR2 = avgMotor2;
 810219e:	4b1b      	ldr	r3, [pc, #108]	; (810220c <main+0x57c>)
 81021a0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 81021a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81021a8:	ee17 2a90 	vmov	r2, s15
 81021ac:	639a      	str	r2, [r3, #56]	; 0x38
	    TIM3->CCR3 = avgMotor3;
 81021ae:	4b17      	ldr	r3, [pc, #92]	; (810220c <main+0x57c>)
 81021b0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 81021b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81021b8:	ee17 2a90 	vmov	r2, s15
 81021bc:	63da      	str	r2, [r3, #60]	; 0x3c
	    TIM3->CCR4 = avgMotor4;
 81021be:	4b13      	ldr	r3, [pc, #76]	; (810220c <main+0x57c>)
 81021c0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 81021c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81021c8:	ee17 2a90 	vmov	r2, s15
 81021cc:	641a      	str	r2, [r3, #64]	; 0x40

	  	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 81021ce:	2201      	movs	r2, #1
 81021d0:	2102      	movs	r1, #2
 81021d2:	4812      	ldr	r0, [pc, #72]	; (810221c <main+0x58c>)
 81021d4:	f001 fb46 	bl	8103864 <HAL_GPIO_WritePin>

	  	i=3;
 81021d8:	4b11      	ldr	r3, [pc, #68]	; (8102220 <main+0x590>)
 81021da:	2203      	movs	r2, #3
 81021dc:	601a      	str	r2, [r3, #0]
	  if(i == 1){
 81021de:	e5e4      	b.n	8101daa <main+0x11a>
 81021e0:	c8b43958 	.word	0xc8b43958
 81021e4:	3fafbe76 	.word	0x3fafbe76
 81021e8:	4189374c 	.word	0x4189374c
 81021ec:	3fb0e560 	.word	0x3fb0e560
 81021f0:	40668000 	.word	0x40668000
 81021f4:	10000444 	.word	0x10000444
 81021f8:	4179999a 	.word	0x4179999a
 81021fc:	10000420 	.word	0x10000420
 8102200:	00000000 	.word	0x00000000
 8102204:	10000448 	.word	0x10000448
 8102208:	10000400 	.word	0x10000400
 810220c:	40000400 	.word	0x40000400
 8102210:	44265c29 	.word	0x44265c29
 8102214:	43eeab85 	.word	0x43eeab85
 8102218:	0810dec0 	.word	0x0810dec0
 810221c:	58021000 	.word	0x58021000
 8102220:	10000440 	.word	0x10000440

08102224 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8102224:	b580      	push	{r7, lr}
 8102226:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8102228:	4b1b      	ldr	r3, [pc, #108]	; (8102298 <MX_I2C1_Init+0x74>)
 810222a:	4a1c      	ldr	r2, [pc, #112]	; (810229c <MX_I2C1_Init+0x78>)
 810222c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 810222e:	4b1a      	ldr	r3, [pc, #104]	; (8102298 <MX_I2C1_Init+0x74>)
 8102230:	4a1b      	ldr	r2, [pc, #108]	; (81022a0 <MX_I2C1_Init+0x7c>)
 8102232:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8102234:	4b18      	ldr	r3, [pc, #96]	; (8102298 <MX_I2C1_Init+0x74>)
 8102236:	2200      	movs	r2, #0
 8102238:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 810223a:	4b17      	ldr	r3, [pc, #92]	; (8102298 <MX_I2C1_Init+0x74>)
 810223c:	2201      	movs	r2, #1
 810223e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8102240:	4b15      	ldr	r3, [pc, #84]	; (8102298 <MX_I2C1_Init+0x74>)
 8102242:	2200      	movs	r2, #0
 8102244:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8102246:	4b14      	ldr	r3, [pc, #80]	; (8102298 <MX_I2C1_Init+0x74>)
 8102248:	2200      	movs	r2, #0
 810224a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 810224c:	4b12      	ldr	r3, [pc, #72]	; (8102298 <MX_I2C1_Init+0x74>)
 810224e:	2200      	movs	r2, #0
 8102250:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8102252:	4b11      	ldr	r3, [pc, #68]	; (8102298 <MX_I2C1_Init+0x74>)
 8102254:	2200      	movs	r2, #0
 8102256:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8102258:	4b0f      	ldr	r3, [pc, #60]	; (8102298 <MX_I2C1_Init+0x74>)
 810225a:	2200      	movs	r2, #0
 810225c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 810225e:	480e      	ldr	r0, [pc, #56]	; (8102298 <MX_I2C1_Init+0x74>)
 8102260:	f001 fb46 	bl	81038f0 <HAL_I2C_Init>
 8102264:	4603      	mov	r3, r0
 8102266:	2b00      	cmp	r3, #0
 8102268:	d001      	beq.n	810226e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 810226a:	f000 fbd5 	bl	8102a18 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 810226e:	2100      	movs	r1, #0
 8102270:	4809      	ldr	r0, [pc, #36]	; (8102298 <MX_I2C1_Init+0x74>)
 8102272:	f002 f849 	bl	8104308 <HAL_I2CEx_ConfigAnalogFilter>
 8102276:	4603      	mov	r3, r0
 8102278:	2b00      	cmp	r3, #0
 810227a:	d001      	beq.n	8102280 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 810227c:	f000 fbcc 	bl	8102a18 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8102280:	2100      	movs	r1, #0
 8102282:	4805      	ldr	r0, [pc, #20]	; (8102298 <MX_I2C1_Init+0x74>)
 8102284:	f002 f88b 	bl	810439e <HAL_I2CEx_ConfigDigitalFilter>
 8102288:	4603      	mov	r3, r0
 810228a:	2b00      	cmp	r3, #0
 810228c:	d001      	beq.n	8102292 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 810228e:	f000 fbc3 	bl	8102a18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8102292:	bf00      	nop
 8102294:	bd80      	pop	{r7, pc}
 8102296:	bf00      	nop
 8102298:	10000240 	.word	0x10000240
 810229c:	40005400 	.word	0x40005400
 81022a0:	00b03fdb 	.word	0x00b03fdb

081022a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 81022a4:	b580      	push	{r7, lr}
 81022a6:	b088      	sub	sp, #32
 81022a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 81022aa:	f107 0310 	add.w	r3, r7, #16
 81022ae:	2200      	movs	r2, #0
 81022b0:	601a      	str	r2, [r3, #0]
 81022b2:	605a      	str	r2, [r3, #4]
 81022b4:	609a      	str	r2, [r3, #8]
 81022b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81022b8:	1d3b      	adds	r3, r7, #4
 81022ba:	2200      	movs	r2, #0
 81022bc:	601a      	str	r2, [r3, #0]
 81022be:	605a      	str	r2, [r3, #4]
 81022c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 81022c2:	4b20      	ldr	r3, [pc, #128]	; (8102344 <MX_TIM1_Init+0xa0>)
 81022c4:	4a20      	ldr	r2, [pc, #128]	; (8102348 <MX_TIM1_Init+0xa4>)
 81022c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 81022c8:	4b1e      	ldr	r3, [pc, #120]	; (8102344 <MX_TIM1_Init+0xa0>)
 81022ca:	22ef      	movs	r2, #239	; 0xef
 81022cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 81022ce:	4b1d      	ldr	r3, [pc, #116]	; (8102344 <MX_TIM1_Init+0xa0>)
 81022d0:	2200      	movs	r2, #0
 81022d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 81022d4:	4b1b      	ldr	r3, [pc, #108]	; (8102344 <MX_TIM1_Init+0xa0>)
 81022d6:	f242 720f 	movw	r2, #9999	; 0x270f
 81022da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81022dc:	4b19      	ldr	r3, [pc, #100]	; (8102344 <MX_TIM1_Init+0xa0>)
 81022de:	2200      	movs	r2, #0
 81022e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 81022e2:	4b18      	ldr	r3, [pc, #96]	; (8102344 <MX_TIM1_Init+0xa0>)
 81022e4:	2200      	movs	r2, #0
 81022e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81022e8:	4b16      	ldr	r3, [pc, #88]	; (8102344 <MX_TIM1_Init+0xa0>)
 81022ea:	2200      	movs	r2, #0
 81022ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 81022ee:	4815      	ldr	r0, [pc, #84]	; (8102344 <MX_TIM1_Init+0xa0>)
 81022f0:	f003 fe6a 	bl	8105fc8 <HAL_TIM_Base_Init>
 81022f4:	4603      	mov	r3, r0
 81022f6:	2b00      	cmp	r3, #0
 81022f8:	d001      	beq.n	81022fe <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 81022fa:	f000 fb8d 	bl	8102a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 81022fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8102302:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8102304:	f107 0310 	add.w	r3, r7, #16
 8102308:	4619      	mov	r1, r3
 810230a:	480e      	ldr	r0, [pc, #56]	; (8102344 <MX_TIM1_Init+0xa0>)
 810230c:	f004 fddc 	bl	8106ec8 <HAL_TIM_ConfigClockSource>
 8102310:	4603      	mov	r3, r0
 8102312:	2b00      	cmp	r3, #0
 8102314:	d001      	beq.n	810231a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8102316:	f000 fb7f 	bl	8102a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810231a:	2300      	movs	r3, #0
 810231c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 810231e:	2300      	movs	r3, #0
 8102320:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8102322:	2300      	movs	r3, #0
 8102324:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8102326:	1d3b      	adds	r3, r7, #4
 8102328:	4619      	mov	r1, r3
 810232a:	4806      	ldr	r0, [pc, #24]	; (8102344 <MX_TIM1_Init+0xa0>)
 810232c:	f005 fc82 	bl	8107c34 <HAL_TIMEx_MasterConfigSynchronization>
 8102330:	4603      	mov	r3, r0
 8102332:	2b00      	cmp	r3, #0
 8102334:	d001      	beq.n	810233a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8102336:	f000 fb6f 	bl	8102a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 810233a:	bf00      	nop
 810233c:	3720      	adds	r7, #32
 810233e:	46bd      	mov	sp, r7
 8102340:	bd80      	pop	{r7, pc}
 8102342:	bf00      	nop
 8102344:	1000028c 	.word	0x1000028c
 8102348:	40010000 	.word	0x40010000

0810234c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 810234c:	b580      	push	{r7, lr}
 810234e:	b08e      	sub	sp, #56	; 0x38
 8102350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8102352:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8102356:	2200      	movs	r2, #0
 8102358:	601a      	str	r2, [r3, #0]
 810235a:	605a      	str	r2, [r3, #4]
 810235c:	609a      	str	r2, [r3, #8]
 810235e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8102360:	f107 031c 	add.w	r3, r7, #28
 8102364:	2200      	movs	r2, #0
 8102366:	601a      	str	r2, [r3, #0]
 8102368:	605a      	str	r2, [r3, #4]
 810236a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 810236c:	463b      	mov	r3, r7
 810236e:	2200      	movs	r2, #0
 8102370:	601a      	str	r2, [r3, #0]
 8102372:	605a      	str	r2, [r3, #4]
 8102374:	609a      	str	r2, [r3, #8]
 8102376:	60da      	str	r2, [r3, #12]
 8102378:	611a      	str	r2, [r3, #16]
 810237a:	615a      	str	r2, [r3, #20]
 810237c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 810237e:	4b3d      	ldr	r3, [pc, #244]	; (8102474 <MX_TIM3_Init+0x128>)
 8102380:	4a3d      	ldr	r2, [pc, #244]	; (8102478 <MX_TIM3_Init+0x12c>)
 8102382:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 8102384:	4b3b      	ldr	r3, [pc, #236]	; (8102474 <MX_TIM3_Init+0x128>)
 8102386:	22ef      	movs	r2, #239	; 0xef
 8102388:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 810238a:	4b3a      	ldr	r3, [pc, #232]	; (8102474 <MX_TIM3_Init+0x128>)
 810238c:	2200      	movs	r2, #0
 810238e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8102390:	4b38      	ldr	r3, [pc, #224]	; (8102474 <MX_TIM3_Init+0x128>)
 8102392:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8102396:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8102398:	4b36      	ldr	r3, [pc, #216]	; (8102474 <MX_TIM3_Init+0x128>)
 810239a:	2200      	movs	r2, #0
 810239c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810239e:	4b35      	ldr	r3, [pc, #212]	; (8102474 <MX_TIM3_Init+0x128>)
 81023a0:	2200      	movs	r2, #0
 81023a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 81023a4:	4833      	ldr	r0, [pc, #204]	; (8102474 <MX_TIM3_Init+0x128>)
 81023a6:	f003 fe0f 	bl	8105fc8 <HAL_TIM_Base_Init>
 81023aa:	4603      	mov	r3, r0
 81023ac:	2b00      	cmp	r3, #0
 81023ae:	d001      	beq.n	81023b4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 81023b0:	f000 fb32 	bl	8102a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 81023b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81023b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 81023ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 81023be:	4619      	mov	r1, r3
 81023c0:	482c      	ldr	r0, [pc, #176]	; (8102474 <MX_TIM3_Init+0x128>)
 81023c2:	f004 fd81 	bl	8106ec8 <HAL_TIM_ConfigClockSource>
 81023c6:	4603      	mov	r3, r0
 81023c8:	2b00      	cmp	r3, #0
 81023ca:	d001      	beq.n	81023d0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 81023cc:	f000 fb24 	bl	8102a18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 81023d0:	4828      	ldr	r0, [pc, #160]	; (8102474 <MX_TIM3_Init+0x128>)
 81023d2:	f003 fec9 	bl	8106168 <HAL_TIM_PWM_Init>
 81023d6:	4603      	mov	r3, r0
 81023d8:	2b00      	cmp	r3, #0
 81023da:	d001      	beq.n	81023e0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 81023dc:	f000 fb1c 	bl	8102a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81023e0:	2300      	movs	r3, #0
 81023e2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81023e4:	2300      	movs	r3, #0
 81023e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 81023e8:	f107 031c 	add.w	r3, r7, #28
 81023ec:	4619      	mov	r1, r3
 81023ee:	4821      	ldr	r0, [pc, #132]	; (8102474 <MX_TIM3_Init+0x128>)
 81023f0:	f005 fc20 	bl	8107c34 <HAL_TIMEx_MasterConfigSynchronization>
 81023f4:	4603      	mov	r3, r0
 81023f6:	2b00      	cmp	r3, #0
 81023f8:	d001      	beq.n	81023fe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 81023fa:	f000 fb0d 	bl	8102a18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 81023fe:	2360      	movs	r3, #96	; 0x60
 8102400:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8102402:	2300      	movs	r3, #0
 8102404:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8102406:	2300      	movs	r3, #0
 8102408:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 810240a:	2300      	movs	r3, #0
 810240c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 810240e:	463b      	mov	r3, r7
 8102410:	2200      	movs	r2, #0
 8102412:	4619      	mov	r1, r3
 8102414:	4817      	ldr	r0, [pc, #92]	; (8102474 <MX_TIM3_Init+0x128>)
 8102416:	f004 fc43 	bl	8106ca0 <HAL_TIM_PWM_ConfigChannel>
 810241a:	4603      	mov	r3, r0
 810241c:	2b00      	cmp	r3, #0
 810241e:	d001      	beq.n	8102424 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8102420:	f000 fafa 	bl	8102a18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8102424:	463b      	mov	r3, r7
 8102426:	2204      	movs	r2, #4
 8102428:	4619      	mov	r1, r3
 810242a:	4812      	ldr	r0, [pc, #72]	; (8102474 <MX_TIM3_Init+0x128>)
 810242c:	f004 fc38 	bl	8106ca0 <HAL_TIM_PWM_ConfigChannel>
 8102430:	4603      	mov	r3, r0
 8102432:	2b00      	cmp	r3, #0
 8102434:	d001      	beq.n	810243a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8102436:	f000 faef 	bl	8102a18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 810243a:	463b      	mov	r3, r7
 810243c:	2208      	movs	r2, #8
 810243e:	4619      	mov	r1, r3
 8102440:	480c      	ldr	r0, [pc, #48]	; (8102474 <MX_TIM3_Init+0x128>)
 8102442:	f004 fc2d 	bl	8106ca0 <HAL_TIM_PWM_ConfigChannel>
 8102446:	4603      	mov	r3, r0
 8102448:	2b00      	cmp	r3, #0
 810244a:	d001      	beq.n	8102450 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 810244c:	f000 fae4 	bl	8102a18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8102450:	463b      	mov	r3, r7
 8102452:	220c      	movs	r2, #12
 8102454:	4619      	mov	r1, r3
 8102456:	4807      	ldr	r0, [pc, #28]	; (8102474 <MX_TIM3_Init+0x128>)
 8102458:	f004 fc22 	bl	8106ca0 <HAL_TIM_PWM_ConfigChannel>
 810245c:	4603      	mov	r3, r0
 810245e:	2b00      	cmp	r3, #0
 8102460:	d001      	beq.n	8102466 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8102462:	f000 fad9 	bl	8102a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8102466:	4803      	ldr	r0, [pc, #12]	; (8102474 <MX_TIM3_Init+0x128>)
 8102468:	f000 fc36 	bl	8102cd8 <HAL_TIM_MspPostInit>

}
 810246c:	bf00      	nop
 810246e:	3738      	adds	r7, #56	; 0x38
 8102470:	46bd      	mov	sp, r7
 8102472:	bd80      	pop	{r7, pc}
 8102474:	100002d8 	.word	0x100002d8
 8102478:	40000400 	.word	0x40000400

0810247c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 810247c:	b580      	push	{r7, lr}
 810247e:	b08c      	sub	sp, #48	; 0x30
 8102480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8102482:	f107 0320 	add.w	r3, r7, #32
 8102486:	2200      	movs	r2, #0
 8102488:	601a      	str	r2, [r3, #0]
 810248a:	605a      	str	r2, [r3, #4]
 810248c:	609a      	str	r2, [r3, #8]
 810248e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8102490:	f107 0314 	add.w	r3, r7, #20
 8102494:	2200      	movs	r2, #0
 8102496:	601a      	str	r2, [r3, #0]
 8102498:	605a      	str	r2, [r3, #4]
 810249a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 810249c:	1d3b      	adds	r3, r7, #4
 810249e:	2200      	movs	r2, #0
 81024a0:	601a      	str	r2, [r3, #0]
 81024a2:	605a      	str	r2, [r3, #4]
 81024a4:	609a      	str	r2, [r3, #8]
 81024a6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 81024a8:	4b31      	ldr	r3, [pc, #196]	; (8102570 <MX_TIM5_Init+0xf4>)
 81024aa:	4a32      	ldr	r2, [pc, #200]	; (8102574 <MX_TIM5_Init+0xf8>)
 81024ac:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 240-1;
 81024ae:	4b30      	ldr	r3, [pc, #192]	; (8102570 <MX_TIM5_Init+0xf4>)
 81024b0:	22ef      	movs	r2, #239	; 0xef
 81024b2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 81024b4:	4b2e      	ldr	r3, [pc, #184]	; (8102570 <MX_TIM5_Init+0xf4>)
 81024b6:	2200      	movs	r2, #0
 81024b8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000-1;
 81024ba:	4b2d      	ldr	r3, [pc, #180]	; (8102570 <MX_TIM5_Init+0xf4>)
 81024bc:	f644 621f 	movw	r2, #19999	; 0x4e1f
 81024c0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81024c2:	4b2b      	ldr	r3, [pc, #172]	; (8102570 <MX_TIM5_Init+0xf4>)
 81024c4:	2200      	movs	r2, #0
 81024c6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81024c8:	4b29      	ldr	r3, [pc, #164]	; (8102570 <MX_TIM5_Init+0xf4>)
 81024ca:	2200      	movs	r2, #0
 81024cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 81024ce:	4828      	ldr	r0, [pc, #160]	; (8102570 <MX_TIM5_Init+0xf4>)
 81024d0:	f003 fd7a 	bl	8105fc8 <HAL_TIM_Base_Init>
 81024d4:	4603      	mov	r3, r0
 81024d6:	2b00      	cmp	r3, #0
 81024d8:	d001      	beq.n	81024de <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 81024da:	f000 fa9d 	bl	8102a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 81024de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81024e2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 81024e4:	f107 0320 	add.w	r3, r7, #32
 81024e8:	4619      	mov	r1, r3
 81024ea:	4821      	ldr	r0, [pc, #132]	; (8102570 <MX_TIM5_Init+0xf4>)
 81024ec:	f004 fcec 	bl	8106ec8 <HAL_TIM_ConfigClockSource>
 81024f0:	4603      	mov	r3, r0
 81024f2:	2b00      	cmp	r3, #0
 81024f4:	d001      	beq.n	81024fa <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 81024f6:	f000 fa8f 	bl	8102a18 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 81024fa:	481d      	ldr	r0, [pc, #116]	; (8102570 <MX_TIM5_Init+0xf4>)
 81024fc:	f003 ffa4 	bl	8106448 <HAL_TIM_IC_Init>
 8102500:	4603      	mov	r3, r0
 8102502:	2b00      	cmp	r3, #0
 8102504:	d001      	beq.n	810250a <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8102506:	f000 fa87 	bl	8102a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810250a:	2300      	movs	r3, #0
 810250c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810250e:	2300      	movs	r3, #0
 8102510:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8102512:	f107 0314 	add.w	r3, r7, #20
 8102516:	4619      	mov	r1, r3
 8102518:	4815      	ldr	r0, [pc, #84]	; (8102570 <MX_TIM5_Init+0xf4>)
 810251a:	f005 fb8b 	bl	8107c34 <HAL_TIMEx_MasterConfigSynchronization>
 810251e:	4603      	mov	r3, r0
 8102520:	2b00      	cmp	r3, #0
 8102522:	d001      	beq.n	8102528 <MX_TIM5_Init+0xac>
  {
    Error_Handler();
 8102524:	f000 fa78 	bl	8102a18 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8102528:	2300      	movs	r3, #0
 810252a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 810252c:	2301      	movs	r3, #1
 810252e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8102530:	2300      	movs	r3, #0
 8102532:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8102534:	2300      	movs	r3, #0
 8102536:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8102538:	1d3b      	adds	r3, r7, #4
 810253a:	2200      	movs	r2, #0
 810253c:	4619      	mov	r1, r3
 810253e:	480c      	ldr	r0, [pc, #48]	; (8102570 <MX_TIM5_Init+0xf4>)
 8102540:	f004 fb11 	bl	8106b66 <HAL_TIM_IC_ConfigChannel>
 8102544:	4603      	mov	r3, r0
 8102546:	2b00      	cmp	r3, #0
 8102548:	d001      	beq.n	810254e <MX_TIM5_Init+0xd2>
  {
    Error_Handler();
 810254a:	f000 fa65 	bl	8102a18 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 810254e:	230a      	movs	r3, #10
 8102550:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8102552:	1d3b      	adds	r3, r7, #4
 8102554:	220c      	movs	r2, #12
 8102556:	4619      	mov	r1, r3
 8102558:	4805      	ldr	r0, [pc, #20]	; (8102570 <MX_TIM5_Init+0xf4>)
 810255a:	f004 fb04 	bl	8106b66 <HAL_TIM_IC_ConfigChannel>
 810255e:	4603      	mov	r3, r0
 8102560:	2b00      	cmp	r3, #0
 8102562:	d001      	beq.n	8102568 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 8102564:	f000 fa58 	bl	8102a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8102568:	bf00      	nop
 810256a:	3730      	adds	r7, #48	; 0x30
 810256c:	46bd      	mov	sp, r7
 810256e:	bd80      	pop	{r7, pc}
 8102570:	10000324 	.word	0x10000324
 8102574:	40000c00 	.word	0x40000c00

08102578 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8102578:	b580      	push	{r7, lr}
 810257a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 810257c:	4b22      	ldr	r3, [pc, #136]	; (8102608 <MX_USART3_UART_Init+0x90>)
 810257e:	4a23      	ldr	r2, [pc, #140]	; (810260c <MX_USART3_UART_Init+0x94>)
 8102580:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8102582:	4b21      	ldr	r3, [pc, #132]	; (8102608 <MX_USART3_UART_Init+0x90>)
 8102584:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8102588:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 810258a:	4b1f      	ldr	r3, [pc, #124]	; (8102608 <MX_USART3_UART_Init+0x90>)
 810258c:	2200      	movs	r2, #0
 810258e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8102590:	4b1d      	ldr	r3, [pc, #116]	; (8102608 <MX_USART3_UART_Init+0x90>)
 8102592:	2200      	movs	r2, #0
 8102594:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8102596:	4b1c      	ldr	r3, [pc, #112]	; (8102608 <MX_USART3_UART_Init+0x90>)
 8102598:	2200      	movs	r2, #0
 810259a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 810259c:	4b1a      	ldr	r3, [pc, #104]	; (8102608 <MX_USART3_UART_Init+0x90>)
 810259e:	220c      	movs	r2, #12
 81025a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81025a2:	4b19      	ldr	r3, [pc, #100]	; (8102608 <MX_USART3_UART_Init+0x90>)
 81025a4:	2200      	movs	r2, #0
 81025a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 81025a8:	4b17      	ldr	r3, [pc, #92]	; (8102608 <MX_USART3_UART_Init+0x90>)
 81025aa:	2200      	movs	r2, #0
 81025ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81025ae:	4b16      	ldr	r3, [pc, #88]	; (8102608 <MX_USART3_UART_Init+0x90>)
 81025b0:	2200      	movs	r2, #0
 81025b2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81025b4:	4b14      	ldr	r3, [pc, #80]	; (8102608 <MX_USART3_UART_Init+0x90>)
 81025b6:	2200      	movs	r2, #0
 81025b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81025ba:	4b13      	ldr	r3, [pc, #76]	; (8102608 <MX_USART3_UART_Init+0x90>)
 81025bc:	2200      	movs	r2, #0
 81025be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 81025c0:	4811      	ldr	r0, [pc, #68]	; (8102608 <MX_USART3_UART_Init+0x90>)
 81025c2:	f005 fbe3 	bl	8107d8c <HAL_UART_Init>
 81025c6:	4603      	mov	r3, r0
 81025c8:	2b00      	cmp	r3, #0
 81025ca:	d001      	beq.n	81025d0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 81025cc:	f000 fa24 	bl	8102a18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 81025d0:	2100      	movs	r1, #0
 81025d2:	480d      	ldr	r0, [pc, #52]	; (8102608 <MX_USART3_UART_Init+0x90>)
 81025d4:	f006 fc16 	bl	8108e04 <HAL_UARTEx_SetTxFifoThreshold>
 81025d8:	4603      	mov	r3, r0
 81025da:	2b00      	cmp	r3, #0
 81025dc:	d001      	beq.n	81025e2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 81025de:	f000 fa1b 	bl	8102a18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81025e2:	2100      	movs	r1, #0
 81025e4:	4808      	ldr	r0, [pc, #32]	; (8102608 <MX_USART3_UART_Init+0x90>)
 81025e6:	f006 fc4b 	bl	8108e80 <HAL_UARTEx_SetRxFifoThreshold>
 81025ea:	4603      	mov	r3, r0
 81025ec:	2b00      	cmp	r3, #0
 81025ee:	d001      	beq.n	81025f4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 81025f0:	f000 fa12 	bl	8102a18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 81025f4:	4804      	ldr	r0, [pc, #16]	; (8102608 <MX_USART3_UART_Init+0x90>)
 81025f6:	f006 fbcc 	bl	8108d92 <HAL_UARTEx_DisableFifoMode>
 81025fa:	4603      	mov	r3, r0
 81025fc:	2b00      	cmp	r3, #0
 81025fe:	d001      	beq.n	8102604 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8102600:	f000 fa0a 	bl	8102a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8102604:	bf00      	nop
 8102606:	bd80      	pop	{r7, pc}
 8102608:	10000370 	.word	0x10000370
 810260c:	40004800 	.word	0x40004800

08102610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8102610:	b580      	push	{r7, lr}
 8102612:	b08a      	sub	sp, #40	; 0x28
 8102614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102616:	f107 0314 	add.w	r3, r7, #20
 810261a:	2200      	movs	r2, #0
 810261c:	601a      	str	r2, [r3, #0]
 810261e:	605a      	str	r2, [r3, #4]
 8102620:	609a      	str	r2, [r3, #8]
 8102622:	60da      	str	r2, [r3, #12]
 8102624:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8102626:	4b45      	ldr	r3, [pc, #276]	; (810273c <MX_GPIO_Init+0x12c>)
 8102628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810262c:	4a43      	ldr	r2, [pc, #268]	; (810273c <MX_GPIO_Init+0x12c>)
 810262e:	f043 0304 	orr.w	r3, r3, #4
 8102632:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102636:	4b41      	ldr	r3, [pc, #260]	; (810273c <MX_GPIO_Init+0x12c>)
 8102638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810263c:	f003 0304 	and.w	r3, r3, #4
 8102640:	613b      	str	r3, [r7, #16]
 8102642:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8102644:	4b3d      	ldr	r3, [pc, #244]	; (810273c <MX_GPIO_Init+0x12c>)
 8102646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810264a:	4a3c      	ldr	r2, [pc, #240]	; (810273c <MX_GPIO_Init+0x12c>)
 810264c:	f043 0301 	orr.w	r3, r3, #1
 8102650:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102654:	4b39      	ldr	r3, [pc, #228]	; (810273c <MX_GPIO_Init+0x12c>)
 8102656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810265a:	f003 0301 	and.w	r3, r3, #1
 810265e:	60fb      	str	r3, [r7, #12]
 8102660:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8102662:	4b36      	ldr	r3, [pc, #216]	; (810273c <MX_GPIO_Init+0x12c>)
 8102664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102668:	4a34      	ldr	r2, [pc, #208]	; (810273c <MX_GPIO_Init+0x12c>)
 810266a:	f043 0302 	orr.w	r3, r3, #2
 810266e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102672:	4b32      	ldr	r3, [pc, #200]	; (810273c <MX_GPIO_Init+0x12c>)
 8102674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102678:	f003 0302 	and.w	r3, r3, #2
 810267c:	60bb      	str	r3, [r7, #8]
 810267e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8102680:	4b2e      	ldr	r3, [pc, #184]	; (810273c <MX_GPIO_Init+0x12c>)
 8102682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102686:	4a2d      	ldr	r2, [pc, #180]	; (810273c <MX_GPIO_Init+0x12c>)
 8102688:	f043 0308 	orr.w	r3, r3, #8
 810268c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102690:	4b2a      	ldr	r3, [pc, #168]	; (810273c <MX_GPIO_Init+0x12c>)
 8102692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102696:	f003 0308 	and.w	r3, r3, #8
 810269a:	607b      	str	r3, [r7, #4]
 810269c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 810269e:	4b27      	ldr	r3, [pc, #156]	; (810273c <MX_GPIO_Init+0x12c>)
 81026a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81026a4:	4a25      	ldr	r2, [pc, #148]	; (810273c <MX_GPIO_Init+0x12c>)
 81026a6:	f043 0310 	orr.w	r3, r3, #16
 81026aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81026ae:	4b23      	ldr	r3, [pc, #140]	; (810273c <MX_GPIO_Init+0x12c>)
 81026b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81026b4:	f003 0310 	and.w	r3, r3, #16
 81026b8:	603b      	str	r3, [r7, #0]
 81026ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 81026bc:	2200      	movs	r2, #0
 81026be:	2101      	movs	r1, #1
 81026c0:	481f      	ldr	r0, [pc, #124]	; (8102740 <MX_GPIO_Init+0x130>)
 81026c2:	f001 f8cf 	bl	8103864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 81026c6:	2200      	movs	r2, #0
 81026c8:	2102      	movs	r1, #2
 81026ca:	481e      	ldr	r0, [pc, #120]	; (8102744 <MX_GPIO_Init+0x134>)
 81026cc:	f001 f8ca 	bl	8103864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 81026d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 81026d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 81026d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 81026da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81026dc:	2300      	movs	r3, #0
 81026de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81026e0:	f107 0314 	add.w	r3, r7, #20
 81026e4:	4619      	mov	r1, r3
 81026e6:	4818      	ldr	r0, [pc, #96]	; (8102748 <MX_GPIO_Init+0x138>)
 81026e8:	f000 ff0c 	bl	8103504 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 81026ec:	2301      	movs	r3, #1
 81026ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81026f0:	2301      	movs	r3, #1
 81026f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81026f4:	2300      	movs	r3, #0
 81026f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81026f8:	2300      	movs	r3, #0
 81026fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 81026fc:	f107 0314 	add.w	r3, r7, #20
 8102700:	4619      	mov	r1, r3
 8102702:	480f      	ldr	r0, [pc, #60]	; (8102740 <MX_GPIO_Init+0x130>)
 8102704:	f000 fefe 	bl	8103504 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8102708:	2302      	movs	r3, #2
 810270a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810270c:	2301      	movs	r3, #1
 810270e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102710:	2300      	movs	r3, #0
 8102712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102714:	2300      	movs	r3, #0
 8102716:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8102718:	f107 0314 	add.w	r3, r7, #20
 810271c:	4619      	mov	r1, r3
 810271e:	4809      	ldr	r0, [pc, #36]	; (8102744 <MX_GPIO_Init+0x134>)
 8102720:	f000 fef0 	bl	8103504 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8102724:	2200      	movs	r2, #0
 8102726:	2100      	movs	r1, #0
 8102728:	2028      	movs	r0, #40	; 0x28
 810272a:	f000 fea2 	bl	8103472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 810272e:	2028      	movs	r0, #40	; 0x28
 8102730:	f000 feb9 	bl	81034a6 <HAL_NVIC_EnableIRQ>

}
 8102734:	bf00      	nop
 8102736:	3728      	adds	r7, #40	; 0x28
 8102738:	46bd      	mov	sp, r7
 810273a:	bd80      	pop	{r7, pc}
 810273c:	58024400 	.word	0x58024400
 8102740:	58020400 	.word	0x58020400
 8102744:	58021000 	.word	0x58021000
 8102748:	58020800 	.word	0x58020800

0810274c <startInputCaptureInterruptDutyCycle>:

/* USER CODE BEGIN 4 */

void startInputCaptureInterruptDutyCycle()
{
 810274c:	b580      	push	{r7, lr}
 810274e:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_4); //ch5
 8102750:	210c      	movs	r1, #12
 8102752:	4802      	ldr	r0, [pc, #8]	; (810275c <startInputCaptureInterruptDutyCycle+0x10>)
 8102754:	f003 feda 	bl	810650c <HAL_TIM_IC_Start_IT>
}
 8102758:	bf00      	nop
 810275a:	bd80      	pop	{r7, pc}
 810275c:	10000324 	.word	0x10000324

08102760 <jumpHalfPeriod>:

	return level;
}

void jumpHalfPeriod (float frequency)
{
 8102760:	b580      	push	{r7, lr}
 8102762:	b082      	sub	sp, #8
 8102764:	af00      	add	r7, sp, #0
 8102766:	ed87 0a01 	vstr	s0, [r7, #4]
	HAL_Delay(1000/(2*frequency));
 810276a:	edd7 7a01 	vldr	s15, [r7, #4]
 810276e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8102772:	eddf 6a07 	vldr	s13, [pc, #28]	; 8102790 <jumpHalfPeriod+0x30>
 8102776:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810277a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810277e:	ee17 0a90 	vmov	r0, s15
 8102782:	f000 fd77 	bl	8103274 <HAL_Delay>
}
 8102786:	bf00      	nop
 8102788:	3708      	adds	r7, #8
 810278a:	46bd      	mov	sp, r7
 810278c:	bd80      	pop	{r7, pc}
 810278e:	bf00      	nop
 8102790:	447a0000 	.word	0x447a0000

08102794 <waitingForGettingFrequency>:

float waitingForGettingFrequency()
{
 8102794:	b580      	push	{r7, lr}
 8102796:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8102798:	2100      	movs	r1, #0
 810279a:	4812      	ldr	r0, [pc, #72]	; (81027e4 <waitingForGettingFrequency+0x50>)
 810279c:	f003 feb6 	bl	810650c <HAL_TIM_IC_Start_IT>

	while (chFrequency.frequency == 0 || chFrequency.frequency > 100 || chFrequency.flagFirstFrequency == 1) { }
 81027a0:	bf00      	nop
 81027a2:	4b11      	ldr	r3, [pc, #68]	; (81027e8 <waitingForGettingFrequency+0x54>)
 81027a4:	edd3 7a03 	vldr	s15, [r3, #12]
 81027a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 81027ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81027b0:	d0f7      	beq.n	81027a2 <waitingForGettingFrequency+0xe>
 81027b2:	4b0d      	ldr	r3, [pc, #52]	; (81027e8 <waitingForGettingFrequency+0x54>)
 81027b4:	edd3 7a03 	vldr	s15, [r3, #12]
 81027b8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 81027ec <waitingForGettingFrequency+0x58>
 81027bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 81027c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81027c4:	dced      	bgt.n	81027a2 <waitingForGettingFrequency+0xe>
 81027c6:	4b08      	ldr	r3, [pc, #32]	; (81027e8 <waitingForGettingFrequency+0x54>)
 81027c8:	689b      	ldr	r3, [r3, #8]
 81027ca:	2b01      	cmp	r3, #1
 81027cc:	d0e9      	beq.n	81027a2 <waitingForGettingFrequency+0xe>

	HAL_TIM_IC_Stop_IT(&htim5, TIM_CHANNEL_1);
 81027ce:	2100      	movs	r1, #0
 81027d0:	4804      	ldr	r0, [pc, #16]	; (81027e4 <waitingForGettingFrequency+0x50>)
 81027d2:	f003 ffeb 	bl	81067ac <HAL_TIM_IC_Stop_IT>

	return chFrequency.frequency;
 81027d6:	4b04      	ldr	r3, [pc, #16]	; (81027e8 <waitingForGettingFrequency+0x54>)
 81027d8:	68db      	ldr	r3, [r3, #12]
 81027da:	ee07 3a90 	vmov	s15, r3
}
 81027de:	eeb0 0a67 	vmov.f32	s0, s15
 81027e2:	bd80      	pop	{r7, pc}
 81027e4:	10000324 	.word	0x10000324
 81027e8:	1000049c 	.word	0x1000049c
 81027ec:	42c80000 	.word	0x42c80000

081027f0 <stopMotors>:
		}
	}while(i != ne);
}

void stopMotors()
{
 81027f0:	b480      	push	{r7}
 81027f2:	af00      	add	r7, sp, #0
	TIM3->CCR1 = 950;
 81027f4:	4b0b      	ldr	r3, [pc, #44]	; (8102824 <stopMotors+0x34>)
 81027f6:	f240 32b6 	movw	r2, #950	; 0x3b6
 81027fa:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = 950;
 81027fc:	4b09      	ldr	r3, [pc, #36]	; (8102824 <stopMotors+0x34>)
 81027fe:	f240 32b6 	movw	r2, #950	; 0x3b6
 8102802:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = 950;
 8102804:	4b07      	ldr	r3, [pc, #28]	; (8102824 <stopMotors+0x34>)
 8102806:	f240 32b6 	movw	r2, #950	; 0x3b6
 810280a:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = 950;
 810280c:	4b05      	ldr	r3, [pc, #20]	; (8102824 <stopMotors+0x34>)
 810280e:	f240 32b6 	movw	r2, #950	; 0x3b6
 8102812:	641a      	str	r2, [r3, #64]	; 0x40

	i=0;
 8102814:	4b04      	ldr	r3, [pc, #16]	; (8102828 <stopMotors+0x38>)
 8102816:	2200      	movs	r2, #0
 8102818:	601a      	str	r2, [r3, #0]
}
 810281a:	bf00      	nop
 810281c:	46bd      	mov	sp, r7
 810281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102822:	4770      	bx	lr
 8102824:	40000400 	.word	0x40000400
 8102828:	10000440 	.word	0x10000440

0810282c <HAL_TIM_IC_CaptureCallback>:

//radiocomando
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810282c:	b580      	push	{r7, lr}
 810282e:	b082      	sub	sp, #8
 8102830:	af00      	add	r7, sp, #0
 8102832:	6078      	str	r0, [r7, #4]

	if(htim == &htim5)
 8102834:	687b      	ldr	r3, [r7, #4]
 8102836:	4a53      	ldr	r2, [pc, #332]	; (8102984 <HAL_TIM_IC_CaptureCallback+0x158>)
 8102838:	4293      	cmp	r3, r2
 810283a:	f040 809e 	bne.w	810297a <HAL_TIM_IC_CaptureCallback+0x14e>
	{

		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 810283e:	687b      	ldr	r3, [r7, #4]
 8102840:	7f1b      	ldrb	r3, [r3, #28]
 8102842:	2b01      	cmp	r3, #1
 8102844:	d139      	bne.n	81028ba <HAL_TIM_IC_CaptureCallback+0x8e>
		{
			if (chFrequency.firstCaptured == 0) // if the first value is not captured
 8102846:	4b50      	ldr	r3, [pc, #320]	; (8102988 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8102848:	685b      	ldr	r3, [r3, #4]
 810284a:	2b00      	cmp	r3, #0
 810284c:	d107      	bne.n	810285e <HAL_TIM_IC_CaptureCallback+0x32>
			{
				chFrequency.firstCaptured = 1;  // set the first captured as true
 810284e:	4b4e      	ldr	r3, [pc, #312]	; (8102988 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8102850:	2201      	movs	r2, #1
 8102852:	605a      	str	r2, [r3, #4]
				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8102854:	687b      	ldr	r3, [r7, #4]
 8102856:	681b      	ldr	r3, [r3, #0]
 8102858:	2200      	movs	r2, #0
 810285a:	625a      	str	r2, [r3, #36]	; 0x24
 810285c:	e02d      	b.n	81028ba <HAL_TIM_IC_CaptureCallback+0x8e>
			}

			else   // if the first is already captured
			{
				chFrequency.val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read value
 810285e:	2100      	movs	r1, #0
 8102860:	6878      	ldr	r0, [r7, #4]
 8102862:	f004 fc29 	bl	81070b8 <HAL_TIM_ReadCapturedValue>
 8102866:	4603      	mov	r3, r0
 8102868:	4a47      	ldr	r2, [pc, #284]	; (8102988 <HAL_TIM_IC_CaptureCallback+0x15c>)
 810286a:	6013      	str	r3, [r2, #0]

				chFrequency.frequency = (float)refClock/chFrequency.val;
 810286c:	4b46      	ldr	r3, [pc, #280]	; (8102988 <HAL_TIM_IC_CaptureCallback+0x15c>)
 810286e:	681b      	ldr	r3, [r3, #0]
 8102870:	ee07 3a90 	vmov	s15, r3
 8102874:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102878:	eddf 6a44 	vldr	s13, [pc, #272]	; 810298c <HAL_TIM_IC_CaptureCallback+0x160>
 810287c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102880:	4b41      	ldr	r3, [pc, #260]	; (8102988 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8102882:	edc3 7a03 	vstr	s15, [r3, #12]
				chFrequency.frequency = floorf(chFrequency.frequency * 100) / 100;
 8102886:	4b40      	ldr	r3, [pc, #256]	; (8102988 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8102888:	edd3 7a03 	vldr	s15, [r3, #12]
 810288c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8102990 <HAL_TIM_IC_CaptureCallback+0x164>
 8102890:	ee67 7a87 	vmul.f32	s15, s15, s14
 8102894:	eeb0 0a67 	vmov.f32	s0, s15
 8102898:	f00b f8ac 	bl	810d9f4 <floorf>
 810289c:	eeb0 7a40 	vmov.f32	s14, s0
 81028a0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8102990 <HAL_TIM_IC_CaptureCallback+0x164>
 81028a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81028a8:	4b37      	ldr	r3, [pc, #220]	; (8102988 <HAL_TIM_IC_CaptureCallback+0x15c>)
 81028aa:	edc3 7a03 	vstr	s15, [r3, #12]

				chFrequency.firstCaptured = 0; // set it back to false
 81028ae:	4b36      	ldr	r3, [pc, #216]	; (8102988 <HAL_TIM_IC_CaptureCallback+0x15c>)
 81028b0:	2200      	movs	r2, #0
 81028b2:	605a      	str	r2, [r3, #4]
				chFrequency.flagFirstFrequency = 0;
 81028b4:	4b34      	ldr	r3, [pc, #208]	; (8102988 <HAL_TIM_IC_CaptureCallback+0x15c>)
 81028b6:	2200      	movs	r2, #0
 81028b8:	609a      	str	r2, [r3, #8]
			}
		}


		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) // if the interrupt source is channel4
 81028ba:	687b      	ldr	r3, [r7, #4]
 81028bc:	7f1b      	ldrb	r3, [r3, #28]
 81028be:	2b08      	cmp	r3, #8
 81028c0:	d15b      	bne.n	810297a <HAL_TIM_IC_CaptureCallback+0x14e>
		{
			if (chDuty[IC_CHANNEL5].firstCaptured == 0) // if the first value is not captured
 81028c2:	4b34      	ldr	r3, [pc, #208]	; (8102994 <HAL_TIM_IC_CaptureCallback+0x168>)
 81028c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81028c6:	2b00      	cmp	r3, #0
 81028c8:	d107      	bne.n	81028da <HAL_TIM_IC_CaptureCallback+0xae>
			{
				chDuty[IC_CHANNEL5].firstCaptured = 1; // set the first captured as true
 81028ca:	4b32      	ldr	r3, [pc, #200]	; (8102994 <HAL_TIM_IC_CaptureCallback+0x168>)
 81028cc:	2201      	movs	r2, #1
 81028ce:	645a      	str	r2, [r3, #68]	; 0x44
				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 81028d0:	687b      	ldr	r3, [r7, #4]
 81028d2:	681b      	ldr	r3, [r3, #0]
 81028d4:	2200      	movs	r2, #0
 81028d6:	625a      	str	r2, [r3, #36]	; 0x24
			}
		}


	}
}
 81028d8:	e04f      	b.n	810297a <HAL_TIM_IC_CaptureCallback+0x14e>
				chDuty[IC_CHANNEL5].val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);  // read value
 81028da:	210c      	movs	r1, #12
 81028dc:	6878      	ldr	r0, [r7, #4]
 81028de:	f004 fbeb 	bl	81070b8 <HAL_TIM_ReadCapturedValue>
 81028e2:	4603      	mov	r3, r0
 81028e4:	4a2b      	ldr	r2, [pc, #172]	; (8102994 <HAL_TIM_IC_CaptureCallback+0x168>)
 81028e6:	6413      	str	r3, [r2, #64]	; 0x40
				chDuty[IC_CHANNEL5].usWidth = (float) (chDuty[IC_CHANNEL5].val) / 1000000; //refClock;
 81028e8:	4b2a      	ldr	r3, [pc, #168]	; (8102994 <HAL_TIM_IC_CaptureCallback+0x168>)
 81028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81028ec:	ee07 3a90 	vmov	s15, r3
 81028f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81028f4:	eddf 6a25 	vldr	s13, [pc, #148]	; 810298c <HAL_TIM_IC_CaptureCallback+0x160>
 81028f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81028fc:	4b25      	ldr	r3, [pc, #148]	; (8102994 <HAL_TIM_IC_CaptureCallback+0x168>)
 81028fe:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
				chDuty[IC_CHANNEL5].duty = chDuty[IC_CHANNEL5].usWidth * chFrequency.frequency * 100;
 8102902:	4b24      	ldr	r3, [pc, #144]	; (8102994 <HAL_TIM_IC_CaptureCallback+0x168>)
 8102904:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8102908:	4b1f      	ldr	r3, [pc, #124]	; (8102988 <HAL_TIM_IC_CaptureCallback+0x15c>)
 810290a:	edd3 7a03 	vldr	s15, [r3, #12]
 810290e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102912:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8102990 <HAL_TIM_IC_CaptureCallback+0x164>
 8102916:	ee67 7a87 	vmul.f32	s15, s15, s14
 810291a:	4b1e      	ldr	r3, [pc, #120]	; (8102994 <HAL_TIM_IC_CaptureCallback+0x168>)
 810291c:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
				chDuty[IC_CHANNEL5].duty = floorf(chDuty[IC_CHANNEL5].duty * 100) / 100;
 8102920:	4b1c      	ldr	r3, [pc, #112]	; (8102994 <HAL_TIM_IC_CaptureCallback+0x168>)
 8102922:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8102926:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8102990 <HAL_TIM_IC_CaptureCallback+0x164>
 810292a:	ee67 7a87 	vmul.f32	s15, s15, s14
 810292e:	eeb0 0a67 	vmov.f32	s0, s15
 8102932:	f00b f85f 	bl	810d9f4 <floorf>
 8102936:	eeb0 7a40 	vmov.f32	s14, s0
 810293a:	eddf 6a15 	vldr	s13, [pc, #84]	; 8102990 <HAL_TIM_IC_CaptureCallback+0x164>
 810293e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8102942:	4b14      	ldr	r3, [pc, #80]	; (8102994 <HAL_TIM_IC_CaptureCallback+0x168>)
 8102944:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
				if(chDuty[IC_CHANNEL5].duty > LEVEL2_DUTY - error_level && chDuty[IC_CHANNEL5].duty < LEVEL2_DUTY + error_level){
 8102948:	4b12      	ldr	r3, [pc, #72]	; (8102994 <HAL_TIM_IC_CaptureCallback+0x168>)
 810294a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 810294e:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8102952:	eef4 7ac7 	vcmpe.f32	s15, s14
 8102956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810295a:	dd09      	ble.n	8102970 <HAL_TIM_IC_CaptureCallback+0x144>
 810295c:	4b0d      	ldr	r3, [pc, #52]	; (8102994 <HAL_TIM_IC_CaptureCallback+0x168>)
 810295e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8102962:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 8102966:	eef4 7ac7 	vcmpe.f32	s15, s14
 810296a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810296e:	d401      	bmi.n	8102974 <HAL_TIM_IC_CaptureCallback+0x148>
					stopMotors();
 8102970:	f7ff ff3e 	bl	81027f0 <stopMotors>
				chDuty[IC_CHANNEL5].firstCaptured = 0; // set it back to false
 8102974:	4b07      	ldr	r3, [pc, #28]	; (8102994 <HAL_TIM_IC_CaptureCallback+0x168>)
 8102976:	2200      	movs	r2, #0
 8102978:	645a      	str	r2, [r3, #68]	; 0x44
}
 810297a:	bf00      	nop
 810297c:	3708      	adds	r7, #8
 810297e:	46bd      	mov	sp, r7
 8102980:	bd80      	pop	{r7, pc}
 8102982:	bf00      	nop
 8102984:	10000324 	.word	0x10000324
 8102988:	1000049c 	.word	0x1000049c
 810298c:	49742400 	.word	0x49742400
 8102990:	42c80000 	.word	0x42c80000
 8102994:	1000044c 	.word	0x1000044c

08102998 <HAL_GPIO_EXTI_Callback>:

//user button
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8102998:	b480      	push	{r7}
 810299a:	b083      	sub	sp, #12
 810299c:	af00      	add	r7, sp, #0
 810299e:	4603      	mov	r3, r0
 81029a0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 81029a2:	88fb      	ldrh	r3, [r7, #6]
 81029a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81029a8:	d102      	bne.n	81029b0 <HAL_GPIO_EXTI_Callback+0x18>
		 i=1;
 81029aa:	4b04      	ldr	r3, [pc, #16]	; (81029bc <HAL_GPIO_EXTI_Callback+0x24>)
 81029ac:	2201      	movs	r2, #1
 81029ae:	601a      	str	r2, [r3, #0]
}
 81029b0:	bf00      	nop
 81029b2:	370c      	adds	r7, #12
 81029b4:	46bd      	mov	sp, r7
 81029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029ba:	4770      	bx	lr
 81029bc:	10000440 	.word	0x10000440

081029c0 <__io_putchar>:

//putty
int __io_putchar(int ch){
 81029c0:	b580      	push	{r7, lr}
 81029c2:	b082      	sub	sp, #8
 81029c4:	af00      	add	r7, sp, #0
 81029c6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 81029c8:	1d39      	adds	r1, r7, #4
 81029ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 81029ce:	2201      	movs	r2, #1
 81029d0:	4803      	ldr	r0, [pc, #12]	; (81029e0 <__io_putchar+0x20>)
 81029d2:	f005 fa2b 	bl	8107e2c <HAL_UART_Transmit>
	return ch;
 81029d6:	687b      	ldr	r3, [r7, #4]
}
 81029d8:	4618      	mov	r0, r3
 81029da:	3708      	adds	r7, #8
 81029dc:	46bd      	mov	sp, r7
 81029de:	bd80      	pop	{r7, pc}
 81029e0:	10000370 	.word	0x10000370

081029e4 <HAL_TIM_PeriodElapsedCallback>:

//timer ciclo codice
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim) {
 81029e4:	b480      	push	{r7}
 81029e6:	b083      	sub	sp, #12
 81029e8:	af00      	add	r7, sp, #0
 81029ea:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 81029ec:	687b      	ldr	r3, [r7, #4]
 81029ee:	4a08      	ldr	r2, [pc, #32]	; (8102a10 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 81029f0:	4293      	cmp	r3, r2
 81029f2:	d106      	bne.n	8102a02 <HAL_TIM_PeriodElapsedCallback+0x1e>
		if (i==3)
 81029f4:	4b07      	ldr	r3, [pc, #28]	; (8102a14 <HAL_TIM_PeriodElapsedCallback+0x30>)
 81029f6:	681b      	ldr	r3, [r3, #0]
 81029f8:	2b03      	cmp	r3, #3
 81029fa:	d102      	bne.n	8102a02 <HAL_TIM_PeriodElapsedCallback+0x1e>
			i=2;
 81029fc:	4b05      	ldr	r3, [pc, #20]	; (8102a14 <HAL_TIM_PeriodElapsedCallback+0x30>)
 81029fe:	2202      	movs	r2, #2
 8102a00:	601a      	str	r2, [r3, #0]
		/* else
			if(i==2)
				printf("Ciclo codice non terminato!\r\n"); */
	}
}
 8102a02:	bf00      	nop
 8102a04:	370c      	adds	r7, #12
 8102a06:	46bd      	mov	sp, r7
 8102a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a0c:	4770      	bx	lr
 8102a0e:	bf00      	nop
 8102a10:	1000028c 	.word	0x1000028c
 8102a14:	10000440 	.word	0x10000440

08102a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8102a18:	b480      	push	{r7}
 8102a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8102a1c:	b672      	cpsid	i
}
 8102a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8102a20:	e7fe      	b.n	8102a20 <Error_Handler+0x8>
	...

08102a24 <map>:
#include<map.h>
#include<parametri.h>


float map(float val, float from_src, float to_src, float from_dst, float to_dst)
{
 8102a24:	b480      	push	{r7}
 8102a26:	b089      	sub	sp, #36	; 0x24
 8102a28:	af00      	add	r7, sp, #0
 8102a2a:	ed87 0a05 	vstr	s0, [r7, #20]
 8102a2e:	edc7 0a04 	vstr	s1, [r7, #16]
 8102a32:	ed87 1a03 	vstr	s2, [r7, #12]
 8102a36:	edc7 1a02 	vstr	s3, [r7, #8]
 8102a3a:	ed87 2a01 	vstr	s4, [r7, #4]
	// from_src: minimo valore di velocità dei motori;
	// to_src: massimo valore di velocità dei motori;
	//from_dst: minimo valore di pwm;
	// to_dst: massimo valore di pwm;

	float duty=0;
 8102a3e:	f04f 0300 	mov.w	r3, #0
 8102a42:	61fb      	str	r3, [r7, #28]

	duty = (((to_dst - from_dst)/(to_src - from_src))*(val - from_src)) + from_dst;
 8102a44:	ed97 7a01 	vldr	s14, [r7, #4]
 8102a48:	edd7 7a02 	vldr	s15, [r7, #8]
 8102a4c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8102a50:	ed97 7a03 	vldr	s14, [r7, #12]
 8102a54:	edd7 7a04 	vldr	s15, [r7, #16]
 8102a58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8102a5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102a60:	edd7 6a05 	vldr	s13, [r7, #20]
 8102a64:	edd7 7a04 	vldr	s15, [r7, #16]
 8102a68:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8102a6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102a70:	ed97 7a02 	vldr	s14, [r7, #8]
 8102a74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8102a78:	edc7 7a07 	vstr	s15, [r7, #28]

	if(duty< (MinDuty/100)*20000){
 8102a7c:	edd7 7a07 	vldr	s15, [r7, #28]
 8102a80:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8102abc <map+0x98>
 8102a84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8102a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102a8c:	d501      	bpl.n	8102a92 <map+0x6e>
		return (MinDuty/100)*20000;
 8102a8e:	4b0c      	ldr	r3, [pc, #48]	; (8102ac0 <map+0x9c>)
 8102a90:	e00b      	b.n	8102aaa <map+0x86>
	}

	if(duty> (MaxDuty/100)*20000){
 8102a92:	edd7 7a07 	vldr	s15, [r7, #28]
 8102a96:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8102ac4 <map+0xa0>
 8102a9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8102a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102aa2:	dd01      	ble.n	8102aa8 <map+0x84>
		return (MaxDuty/100)*20000;
 8102aa4:	4b08      	ldr	r3, [pc, #32]	; (8102ac8 <map+0xa4>)
 8102aa6:	e000      	b.n	8102aaa <map+0x86>
	}
	//questi if non fanno spegnere il motore in caso di uscita dal range di pwm

	return duty;
 8102aa8:	69fb      	ldr	r3, [r7, #28]
}
 8102aaa:	ee07 3a90 	vmov	s15, r3
 8102aae:	eeb0 0a67 	vmov.f32	s0, s15
 8102ab2:	3724      	adds	r7, #36	; 0x24
 8102ab4:	46bd      	mov	sp, r7
 8102ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102aba:	4770      	bx	lr
 8102abc:	449b0000 	.word	0x449b0000
 8102ac0:	449b0000 	.word	0x449b0000
 8102ac4:	44a50000 	.word	0x44a50000
 8102ac8:	44a50000 	.word	0x44a50000

08102acc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8102acc:	b480      	push	{r7}
 8102ace:	b083      	sub	sp, #12
 8102ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102ad2:	4b0a      	ldr	r3, [pc, #40]	; (8102afc <HAL_MspInit+0x30>)
 8102ad4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102ad8:	4a08      	ldr	r2, [pc, #32]	; (8102afc <HAL_MspInit+0x30>)
 8102ada:	f043 0302 	orr.w	r3, r3, #2
 8102ade:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8102ae2:	4b06      	ldr	r3, [pc, #24]	; (8102afc <HAL_MspInit+0x30>)
 8102ae4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102ae8:	f003 0302 	and.w	r3, r3, #2
 8102aec:	607b      	str	r3, [r7, #4]
 8102aee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8102af0:	bf00      	nop
 8102af2:	370c      	adds	r7, #12
 8102af4:	46bd      	mov	sp, r7
 8102af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102afa:	4770      	bx	lr
 8102afc:	58024400 	.word	0x58024400

08102b00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8102b00:	b580      	push	{r7, lr}
 8102b02:	b0b8      	sub	sp, #224	; 0xe0
 8102b04:	af00      	add	r7, sp, #0
 8102b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102b08:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8102b0c:	2200      	movs	r2, #0
 8102b0e:	601a      	str	r2, [r3, #0]
 8102b10:	605a      	str	r2, [r3, #4]
 8102b12:	609a      	str	r2, [r3, #8]
 8102b14:	60da      	str	r2, [r3, #12]
 8102b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102b18:	f107 0310 	add.w	r3, r7, #16
 8102b1c:	22bc      	movs	r2, #188	; 0xbc
 8102b1e:	2100      	movs	r1, #0
 8102b20:	4618      	mov	r0, r3
 8102b22:	f006 fa71 	bl	8109008 <memset>
  if(hi2c->Instance==I2C1)
 8102b26:	687b      	ldr	r3, [r7, #4]
 8102b28:	681b      	ldr	r3, [r3, #0]
 8102b2a:	4a24      	ldr	r2, [pc, #144]	; (8102bbc <HAL_I2C_MspInit+0xbc>)
 8102b2c:	4293      	cmp	r3, r2
 8102b2e:	d141      	bne.n	8102bb4 <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8102b30:	2308      	movs	r3, #8
 8102b32:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8102b34:	2300      	movs	r3, #0
 8102b36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102b3a:	f107 0310 	add.w	r3, r7, #16
 8102b3e:	4618      	mov	r0, r3
 8102b40:	f001 feda 	bl	81048f8 <HAL_RCCEx_PeriphCLKConfig>
 8102b44:	4603      	mov	r3, r0
 8102b46:	2b00      	cmp	r3, #0
 8102b48:	d001      	beq.n	8102b4e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8102b4a:	f7ff ff65 	bl	8102a18 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102b4e:	4b1c      	ldr	r3, [pc, #112]	; (8102bc0 <HAL_I2C_MspInit+0xc0>)
 8102b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102b54:	4a1a      	ldr	r2, [pc, #104]	; (8102bc0 <HAL_I2C_MspInit+0xc0>)
 8102b56:	f043 0302 	orr.w	r3, r3, #2
 8102b5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102b5e:	4b18      	ldr	r3, [pc, #96]	; (8102bc0 <HAL_I2C_MspInit+0xc0>)
 8102b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102b64:	f003 0302 	and.w	r3, r3, #2
 8102b68:	60fb      	str	r3, [r7, #12]
 8102b6a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8102b6c:	23c0      	movs	r3, #192	; 0xc0
 8102b6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8102b72:	2312      	movs	r3, #18
 8102b74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102b78:	2300      	movs	r3, #0
 8102b7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102b7e:	2300      	movs	r3, #0
 8102b80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8102b84:	2304      	movs	r3, #4
 8102b86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102b8a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8102b8e:	4619      	mov	r1, r3
 8102b90:	480c      	ldr	r0, [pc, #48]	; (8102bc4 <HAL_I2C_MspInit+0xc4>)
 8102b92:	f000 fcb7 	bl	8103504 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8102b96:	4b0a      	ldr	r3, [pc, #40]	; (8102bc0 <HAL_I2C_MspInit+0xc0>)
 8102b98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102b9c:	4a08      	ldr	r2, [pc, #32]	; (8102bc0 <HAL_I2C_MspInit+0xc0>)
 8102b9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8102ba2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102ba6:	4b06      	ldr	r3, [pc, #24]	; (8102bc0 <HAL_I2C_MspInit+0xc0>)
 8102ba8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102bb0:	60bb      	str	r3, [r7, #8]
 8102bb2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8102bb4:	bf00      	nop
 8102bb6:	37e0      	adds	r7, #224	; 0xe0
 8102bb8:	46bd      	mov	sp, r7
 8102bba:	bd80      	pop	{r7, pc}
 8102bbc:	40005400 	.word	0x40005400
 8102bc0:	58024400 	.word	0x58024400
 8102bc4:	58020400 	.word	0x58020400

08102bc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8102bc8:	b580      	push	{r7, lr}
 8102bca:	b08c      	sub	sp, #48	; 0x30
 8102bcc:	af00      	add	r7, sp, #0
 8102bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102bd0:	f107 031c 	add.w	r3, r7, #28
 8102bd4:	2200      	movs	r2, #0
 8102bd6:	601a      	str	r2, [r3, #0]
 8102bd8:	605a      	str	r2, [r3, #4]
 8102bda:	609a      	str	r2, [r3, #8]
 8102bdc:	60da      	str	r2, [r3, #12]
 8102bde:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8102be0:	687b      	ldr	r3, [r7, #4]
 8102be2:	681b      	ldr	r3, [r3, #0]
 8102be4:	4a37      	ldr	r2, [pc, #220]	; (8102cc4 <HAL_TIM_Base_MspInit+0xfc>)
 8102be6:	4293      	cmp	r3, r2
 8102be8:	d117      	bne.n	8102c1a <HAL_TIM_Base_MspInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8102bea:	4b37      	ldr	r3, [pc, #220]	; (8102cc8 <HAL_TIM_Base_MspInit+0x100>)
 8102bec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102bf0:	4a35      	ldr	r2, [pc, #212]	; (8102cc8 <HAL_TIM_Base_MspInit+0x100>)
 8102bf2:	f043 0301 	orr.w	r3, r3, #1
 8102bf6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8102bfa:	4b33      	ldr	r3, [pc, #204]	; (8102cc8 <HAL_TIM_Base_MspInit+0x100>)
 8102bfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102c00:	f003 0301 	and.w	r3, r3, #1
 8102c04:	61bb      	str	r3, [r7, #24]
 8102c06:	69bb      	ldr	r3, [r7, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8102c08:	2200      	movs	r2, #0
 8102c0a:	2100      	movs	r1, #0
 8102c0c:	2019      	movs	r0, #25
 8102c0e:	f000 fc30 	bl	8103472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8102c12:	2019      	movs	r0, #25
 8102c14:	f000 fc47 	bl	81034a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8102c18:	e04f      	b.n	8102cba <HAL_TIM_Base_MspInit+0xf2>
  else if(htim_base->Instance==TIM3)
 8102c1a:	687b      	ldr	r3, [r7, #4]
 8102c1c:	681b      	ldr	r3, [r3, #0]
 8102c1e:	4a2b      	ldr	r2, [pc, #172]	; (8102ccc <HAL_TIM_Base_MspInit+0x104>)
 8102c20:	4293      	cmp	r3, r2
 8102c22:	d10f      	bne.n	8102c44 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8102c24:	4b28      	ldr	r3, [pc, #160]	; (8102cc8 <HAL_TIM_Base_MspInit+0x100>)
 8102c26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102c2a:	4a27      	ldr	r2, [pc, #156]	; (8102cc8 <HAL_TIM_Base_MspInit+0x100>)
 8102c2c:	f043 0302 	orr.w	r3, r3, #2
 8102c30:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102c34:	4b24      	ldr	r3, [pc, #144]	; (8102cc8 <HAL_TIM_Base_MspInit+0x100>)
 8102c36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102c3a:	f003 0302 	and.w	r3, r3, #2
 8102c3e:	617b      	str	r3, [r7, #20]
 8102c40:	697b      	ldr	r3, [r7, #20]
}
 8102c42:	e03a      	b.n	8102cba <HAL_TIM_Base_MspInit+0xf2>
  else if(htim_base->Instance==TIM5)
 8102c44:	687b      	ldr	r3, [r7, #4]
 8102c46:	681b      	ldr	r3, [r3, #0]
 8102c48:	4a21      	ldr	r2, [pc, #132]	; (8102cd0 <HAL_TIM_Base_MspInit+0x108>)
 8102c4a:	4293      	cmp	r3, r2
 8102c4c:	d135      	bne.n	8102cba <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8102c4e:	4b1e      	ldr	r3, [pc, #120]	; (8102cc8 <HAL_TIM_Base_MspInit+0x100>)
 8102c50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102c54:	4a1c      	ldr	r2, [pc, #112]	; (8102cc8 <HAL_TIM_Base_MspInit+0x100>)
 8102c56:	f043 0308 	orr.w	r3, r3, #8
 8102c5a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102c5e:	4b1a      	ldr	r3, [pc, #104]	; (8102cc8 <HAL_TIM_Base_MspInit+0x100>)
 8102c60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102c64:	f003 0308 	and.w	r3, r3, #8
 8102c68:	613b      	str	r3, [r7, #16]
 8102c6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8102c6c:	4b16      	ldr	r3, [pc, #88]	; (8102cc8 <HAL_TIM_Base_MspInit+0x100>)
 8102c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102c72:	4a15      	ldr	r2, [pc, #84]	; (8102cc8 <HAL_TIM_Base_MspInit+0x100>)
 8102c74:	f043 0301 	orr.w	r3, r3, #1
 8102c78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102c7c:	4b12      	ldr	r3, [pc, #72]	; (8102cc8 <HAL_TIM_Base_MspInit+0x100>)
 8102c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102c82:	f003 0301 	and.w	r3, r3, #1
 8102c86:	60fb      	str	r3, [r7, #12]
 8102c88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8102c8a:	2309      	movs	r3, #9
 8102c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102c8e:	2302      	movs	r3, #2
 8102c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102c92:	2300      	movs	r3, #0
 8102c94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102c96:	2300      	movs	r3, #0
 8102c98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8102c9a:	2302      	movs	r3, #2
 8102c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8102c9e:	f107 031c 	add.w	r3, r7, #28
 8102ca2:	4619      	mov	r1, r3
 8102ca4:	480b      	ldr	r0, [pc, #44]	; (8102cd4 <HAL_TIM_Base_MspInit+0x10c>)
 8102ca6:	f000 fc2d 	bl	8103504 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8102caa:	2200      	movs	r2, #0
 8102cac:	2100      	movs	r1, #0
 8102cae:	2032      	movs	r0, #50	; 0x32
 8102cb0:	f000 fbdf 	bl	8103472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8102cb4:	2032      	movs	r0, #50	; 0x32
 8102cb6:	f000 fbf6 	bl	81034a6 <HAL_NVIC_EnableIRQ>
}
 8102cba:	bf00      	nop
 8102cbc:	3730      	adds	r7, #48	; 0x30
 8102cbe:	46bd      	mov	sp, r7
 8102cc0:	bd80      	pop	{r7, pc}
 8102cc2:	bf00      	nop
 8102cc4:	40010000 	.word	0x40010000
 8102cc8:	58024400 	.word	0x58024400
 8102ccc:	40000400 	.word	0x40000400
 8102cd0:	40000c00 	.word	0x40000c00
 8102cd4:	58020000 	.word	0x58020000

08102cd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8102cd8:	b580      	push	{r7, lr}
 8102cda:	b08a      	sub	sp, #40	; 0x28
 8102cdc:	af00      	add	r7, sp, #0
 8102cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102ce0:	f107 0314 	add.w	r3, r7, #20
 8102ce4:	2200      	movs	r2, #0
 8102ce6:	601a      	str	r2, [r3, #0]
 8102ce8:	605a      	str	r2, [r3, #4]
 8102cea:	609a      	str	r2, [r3, #8]
 8102cec:	60da      	str	r2, [r3, #12]
 8102cee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8102cf0:	687b      	ldr	r3, [r7, #4]
 8102cf2:	681b      	ldr	r3, [r3, #0]
 8102cf4:	4a32      	ldr	r2, [pc, #200]	; (8102dc0 <HAL_TIM_MspPostInit+0xe8>)
 8102cf6:	4293      	cmp	r3, r2
 8102cf8:	d15d      	bne.n	8102db6 <HAL_TIM_MspPostInit+0xde>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8102cfa:	4b32      	ldr	r3, [pc, #200]	; (8102dc4 <HAL_TIM_MspPostInit+0xec>)
 8102cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102d00:	4a30      	ldr	r2, [pc, #192]	; (8102dc4 <HAL_TIM_MspPostInit+0xec>)
 8102d02:	f043 0301 	orr.w	r3, r3, #1
 8102d06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102d0a:	4b2e      	ldr	r3, [pc, #184]	; (8102dc4 <HAL_TIM_MspPostInit+0xec>)
 8102d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102d10:	f003 0301 	and.w	r3, r3, #1
 8102d14:	613b      	str	r3, [r7, #16]
 8102d16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102d18:	4b2a      	ldr	r3, [pc, #168]	; (8102dc4 <HAL_TIM_MspPostInit+0xec>)
 8102d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102d1e:	4a29      	ldr	r2, [pc, #164]	; (8102dc4 <HAL_TIM_MspPostInit+0xec>)
 8102d20:	f043 0302 	orr.w	r3, r3, #2
 8102d24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102d28:	4b26      	ldr	r3, [pc, #152]	; (8102dc4 <HAL_TIM_MspPostInit+0xec>)
 8102d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102d2e:	f003 0302 	and.w	r3, r3, #2
 8102d32:	60fb      	str	r3, [r7, #12]
 8102d34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8102d36:	4b23      	ldr	r3, [pc, #140]	; (8102dc4 <HAL_TIM_MspPostInit+0xec>)
 8102d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102d3c:	4a21      	ldr	r2, [pc, #132]	; (8102dc4 <HAL_TIM_MspPostInit+0xec>)
 8102d3e:	f043 0304 	orr.w	r3, r3, #4
 8102d42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102d46:	4b1f      	ldr	r3, [pc, #124]	; (8102dc4 <HAL_TIM_MspPostInit+0xec>)
 8102d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102d4c:	f003 0304 	and.w	r3, r3, #4
 8102d50:	60bb      	str	r3, [r7, #8]
 8102d52:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PB1     ------> TIM3_CH4
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8102d54:	2340      	movs	r3, #64	; 0x40
 8102d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102d58:	2302      	movs	r3, #2
 8102d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102d5c:	2300      	movs	r3, #0
 8102d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102d60:	2300      	movs	r3, #0
 8102d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8102d64:	2302      	movs	r3, #2
 8102d66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8102d68:	f107 0314 	add.w	r3, r7, #20
 8102d6c:	4619      	mov	r1, r3
 8102d6e:	4816      	ldr	r0, [pc, #88]	; (8102dc8 <HAL_TIM_MspPostInit+0xf0>)
 8102d70:	f000 fbc8 	bl	8103504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8102d74:	2302      	movs	r3, #2
 8102d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102d78:	2302      	movs	r3, #2
 8102d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102d7c:	2300      	movs	r3, #0
 8102d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102d80:	2300      	movs	r3, #0
 8102d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8102d84:	2302      	movs	r3, #2
 8102d86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102d88:	f107 0314 	add.w	r3, r7, #20
 8102d8c:	4619      	mov	r1, r3
 8102d8e:	480f      	ldr	r0, [pc, #60]	; (8102dcc <HAL_TIM_MspPostInit+0xf4>)
 8102d90:	f000 fbb8 	bl	8103504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8102d94:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8102d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102d9a:	2302      	movs	r3, #2
 8102d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102d9e:	2300      	movs	r3, #0
 8102da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102da2:	2300      	movs	r3, #0
 8102da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8102da6:	2302      	movs	r3, #2
 8102da8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8102daa:	f107 0314 	add.w	r3, r7, #20
 8102dae:	4619      	mov	r1, r3
 8102db0:	4807      	ldr	r0, [pc, #28]	; (8102dd0 <HAL_TIM_MspPostInit+0xf8>)
 8102db2:	f000 fba7 	bl	8103504 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8102db6:	bf00      	nop
 8102db8:	3728      	adds	r7, #40	; 0x28
 8102dba:	46bd      	mov	sp, r7
 8102dbc:	bd80      	pop	{r7, pc}
 8102dbe:	bf00      	nop
 8102dc0:	40000400 	.word	0x40000400
 8102dc4:	58024400 	.word	0x58024400
 8102dc8:	58020000 	.word	0x58020000
 8102dcc:	58020400 	.word	0x58020400
 8102dd0:	58020800 	.word	0x58020800

08102dd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8102dd4:	b580      	push	{r7, lr}
 8102dd6:	b0b8      	sub	sp, #224	; 0xe0
 8102dd8:	af00      	add	r7, sp, #0
 8102dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102ddc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8102de0:	2200      	movs	r2, #0
 8102de2:	601a      	str	r2, [r3, #0]
 8102de4:	605a      	str	r2, [r3, #4]
 8102de6:	609a      	str	r2, [r3, #8]
 8102de8:	60da      	str	r2, [r3, #12]
 8102dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102dec:	f107 0310 	add.w	r3, r7, #16
 8102df0:	22bc      	movs	r2, #188	; 0xbc
 8102df2:	2100      	movs	r1, #0
 8102df4:	4618      	mov	r0, r3
 8102df6:	f006 f907 	bl	8109008 <memset>
  if(huart->Instance==USART3)
 8102dfa:	687b      	ldr	r3, [r7, #4]
 8102dfc:	681b      	ldr	r3, [r3, #0]
 8102dfe:	4a25      	ldr	r2, [pc, #148]	; (8102e94 <HAL_UART_MspInit+0xc0>)
 8102e00:	4293      	cmp	r3, r2
 8102e02:	d142      	bne.n	8102e8a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8102e04:	2302      	movs	r3, #2
 8102e06:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8102e08:	2300      	movs	r3, #0
 8102e0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102e0e:	f107 0310 	add.w	r3, r7, #16
 8102e12:	4618      	mov	r0, r3
 8102e14:	f001 fd70 	bl	81048f8 <HAL_RCCEx_PeriphCLKConfig>
 8102e18:	4603      	mov	r3, r0
 8102e1a:	2b00      	cmp	r3, #0
 8102e1c:	d001      	beq.n	8102e22 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8102e1e:	f7ff fdfb 	bl	8102a18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8102e22:	4b1d      	ldr	r3, [pc, #116]	; (8102e98 <HAL_UART_MspInit+0xc4>)
 8102e24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102e28:	4a1b      	ldr	r2, [pc, #108]	; (8102e98 <HAL_UART_MspInit+0xc4>)
 8102e2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8102e2e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102e32:	4b19      	ldr	r3, [pc, #100]	; (8102e98 <HAL_UART_MspInit+0xc4>)
 8102e34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102e38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8102e3c:	60fb      	str	r3, [r7, #12]
 8102e3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8102e40:	4b15      	ldr	r3, [pc, #84]	; (8102e98 <HAL_UART_MspInit+0xc4>)
 8102e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102e46:	4a14      	ldr	r2, [pc, #80]	; (8102e98 <HAL_UART_MspInit+0xc4>)
 8102e48:	f043 0308 	orr.w	r3, r3, #8
 8102e4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102e50:	4b11      	ldr	r3, [pc, #68]	; (8102e98 <HAL_UART_MspInit+0xc4>)
 8102e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102e56:	f003 0308 	and.w	r3, r3, #8
 8102e5a:	60bb      	str	r3, [r7, #8]
 8102e5c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8102e5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8102e62:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102e66:	2302      	movs	r3, #2
 8102e68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102e6c:	2300      	movs	r3, #0
 8102e6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102e72:	2300      	movs	r3, #0
 8102e74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8102e78:	2307      	movs	r3, #7
 8102e7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102e7e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8102e82:	4619      	mov	r1, r3
 8102e84:	4805      	ldr	r0, [pc, #20]	; (8102e9c <HAL_UART_MspInit+0xc8>)
 8102e86:	f000 fb3d 	bl	8103504 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8102e8a:	bf00      	nop
 8102e8c:	37e0      	adds	r7, #224	; 0xe0
 8102e8e:	46bd      	mov	sp, r7
 8102e90:	bd80      	pop	{r7, pc}
 8102e92:	bf00      	nop
 8102e94:	40004800 	.word	0x40004800
 8102e98:	58024400 	.word	0x58024400
 8102e9c:	58020c00 	.word	0x58020c00

08102ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8102ea0:	b480      	push	{r7}
 8102ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8102ea4:	e7fe      	b.n	8102ea4 <NMI_Handler+0x4>

08102ea6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8102ea6:	b480      	push	{r7}
 8102ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8102eaa:	e7fe      	b.n	8102eaa <HardFault_Handler+0x4>

08102eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8102eac:	b480      	push	{r7}
 8102eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8102eb0:	e7fe      	b.n	8102eb0 <MemManage_Handler+0x4>

08102eb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8102eb2:	b480      	push	{r7}
 8102eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8102eb6:	e7fe      	b.n	8102eb6 <BusFault_Handler+0x4>

08102eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8102eb8:	b480      	push	{r7}
 8102eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102ebc:	e7fe      	b.n	8102ebc <UsageFault_Handler+0x4>

08102ebe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8102ebe:	b480      	push	{r7}
 8102ec0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8102ec2:	bf00      	nop
 8102ec4:	46bd      	mov	sp, r7
 8102ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102eca:	4770      	bx	lr

08102ecc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8102ecc:	b480      	push	{r7}
 8102ece:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8102ed0:	bf00      	nop
 8102ed2:	46bd      	mov	sp, r7
 8102ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ed8:	4770      	bx	lr

08102eda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8102eda:	b480      	push	{r7}
 8102edc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8102ede:	bf00      	nop
 8102ee0:	46bd      	mov	sp, r7
 8102ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ee6:	4770      	bx	lr

08102ee8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8102ee8:	b580      	push	{r7, lr}
 8102eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8102eec:	f000 f9a2 	bl	8103234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8102ef0:	bf00      	nop
 8102ef2:	bd80      	pop	{r7, pc}

08102ef4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8102ef4:	b580      	push	{r7, lr}
 8102ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8102ef8:	4802      	ldr	r0, [pc, #8]	; (8102f04 <TIM1_UP_IRQHandler+0x10>)
 8102efa:	f003 fd15 	bl	8106928 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8102efe:	bf00      	nop
 8102f00:	bd80      	pop	{r7, pc}
 8102f02:	bf00      	nop
 8102f04:	1000028c 	.word	0x1000028c

08102f08 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8102f08:	b580      	push	{r7, lr}
 8102f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8102f0c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8102f10:	f000 fcc1 	bl	8103896 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8102f14:	bf00      	nop
 8102f16:	bd80      	pop	{r7, pc}

08102f18 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8102f18:	b580      	push	{r7, lr}
 8102f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8102f1c:	4802      	ldr	r0, [pc, #8]	; (8102f28 <TIM5_IRQHandler+0x10>)
 8102f1e:	f003 fd03 	bl	8106928 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8102f22:	bf00      	nop
 8102f24:	bd80      	pop	{r7, pc}
 8102f26:	bf00      	nop
 8102f28:	10000324 	.word	0x10000324

08102f2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8102f2c:	b480      	push	{r7}
 8102f2e:	af00      	add	r7, sp, #0
	return 1;
 8102f30:	2301      	movs	r3, #1
}
 8102f32:	4618      	mov	r0, r3
 8102f34:	46bd      	mov	sp, r7
 8102f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f3a:	4770      	bx	lr

08102f3c <_kill>:

int _kill(int pid, int sig)
{
 8102f3c:	b580      	push	{r7, lr}
 8102f3e:	b082      	sub	sp, #8
 8102f40:	af00      	add	r7, sp, #0
 8102f42:	6078      	str	r0, [r7, #4]
 8102f44:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8102f46:	f006 f827 	bl	8108f98 <__errno>
 8102f4a:	4603      	mov	r3, r0
 8102f4c:	2216      	movs	r2, #22
 8102f4e:	601a      	str	r2, [r3, #0]
	return -1;
 8102f50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8102f54:	4618      	mov	r0, r3
 8102f56:	3708      	adds	r7, #8
 8102f58:	46bd      	mov	sp, r7
 8102f5a:	bd80      	pop	{r7, pc}

08102f5c <_exit>:

void _exit (int status)
{
 8102f5c:	b580      	push	{r7, lr}
 8102f5e:	b082      	sub	sp, #8
 8102f60:	af00      	add	r7, sp, #0
 8102f62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8102f64:	f04f 31ff 	mov.w	r1, #4294967295
 8102f68:	6878      	ldr	r0, [r7, #4]
 8102f6a:	f7ff ffe7 	bl	8102f3c <_kill>
	while (1) {}		/* Make sure we hang here */
 8102f6e:	e7fe      	b.n	8102f6e <_exit+0x12>

08102f70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8102f70:	b580      	push	{r7, lr}
 8102f72:	b086      	sub	sp, #24
 8102f74:	af00      	add	r7, sp, #0
 8102f76:	60f8      	str	r0, [r7, #12]
 8102f78:	60b9      	str	r1, [r7, #8]
 8102f7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102f7c:	2300      	movs	r3, #0
 8102f7e:	617b      	str	r3, [r7, #20]
 8102f80:	e00a      	b.n	8102f98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8102f82:	f3af 8000 	nop.w
 8102f86:	4601      	mov	r1, r0
 8102f88:	68bb      	ldr	r3, [r7, #8]
 8102f8a:	1c5a      	adds	r2, r3, #1
 8102f8c:	60ba      	str	r2, [r7, #8]
 8102f8e:	b2ca      	uxtb	r2, r1
 8102f90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102f92:	697b      	ldr	r3, [r7, #20]
 8102f94:	3301      	adds	r3, #1
 8102f96:	617b      	str	r3, [r7, #20]
 8102f98:	697a      	ldr	r2, [r7, #20]
 8102f9a:	687b      	ldr	r3, [r7, #4]
 8102f9c:	429a      	cmp	r2, r3
 8102f9e:	dbf0      	blt.n	8102f82 <_read+0x12>
	}

return len;
 8102fa0:	687b      	ldr	r3, [r7, #4]
}
 8102fa2:	4618      	mov	r0, r3
 8102fa4:	3718      	adds	r7, #24
 8102fa6:	46bd      	mov	sp, r7
 8102fa8:	bd80      	pop	{r7, pc}

08102faa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8102faa:	b580      	push	{r7, lr}
 8102fac:	b086      	sub	sp, #24
 8102fae:	af00      	add	r7, sp, #0
 8102fb0:	60f8      	str	r0, [r7, #12]
 8102fb2:	60b9      	str	r1, [r7, #8]
 8102fb4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102fb6:	2300      	movs	r3, #0
 8102fb8:	617b      	str	r3, [r7, #20]
 8102fba:	e009      	b.n	8102fd0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8102fbc:	68bb      	ldr	r3, [r7, #8]
 8102fbe:	1c5a      	adds	r2, r3, #1
 8102fc0:	60ba      	str	r2, [r7, #8]
 8102fc2:	781b      	ldrb	r3, [r3, #0]
 8102fc4:	4618      	mov	r0, r3
 8102fc6:	f7ff fcfb 	bl	81029c0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102fca:	697b      	ldr	r3, [r7, #20]
 8102fcc:	3301      	adds	r3, #1
 8102fce:	617b      	str	r3, [r7, #20]
 8102fd0:	697a      	ldr	r2, [r7, #20]
 8102fd2:	687b      	ldr	r3, [r7, #4]
 8102fd4:	429a      	cmp	r2, r3
 8102fd6:	dbf1      	blt.n	8102fbc <_write+0x12>
	}
	return len;
 8102fd8:	687b      	ldr	r3, [r7, #4]
}
 8102fda:	4618      	mov	r0, r3
 8102fdc:	3718      	adds	r7, #24
 8102fde:	46bd      	mov	sp, r7
 8102fe0:	bd80      	pop	{r7, pc}

08102fe2 <_close>:

int _close(int file)
{
 8102fe2:	b480      	push	{r7}
 8102fe4:	b083      	sub	sp, #12
 8102fe6:	af00      	add	r7, sp, #0
 8102fe8:	6078      	str	r0, [r7, #4]
	return -1;
 8102fea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8102fee:	4618      	mov	r0, r3
 8102ff0:	370c      	adds	r7, #12
 8102ff2:	46bd      	mov	sp, r7
 8102ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ff8:	4770      	bx	lr

08102ffa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8102ffa:	b480      	push	{r7}
 8102ffc:	b083      	sub	sp, #12
 8102ffe:	af00      	add	r7, sp, #0
 8103000:	6078      	str	r0, [r7, #4]
 8103002:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8103004:	683b      	ldr	r3, [r7, #0]
 8103006:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 810300a:	605a      	str	r2, [r3, #4]
	return 0;
 810300c:	2300      	movs	r3, #0
}
 810300e:	4618      	mov	r0, r3
 8103010:	370c      	adds	r7, #12
 8103012:	46bd      	mov	sp, r7
 8103014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103018:	4770      	bx	lr

0810301a <_isatty>:

int _isatty(int file)
{
 810301a:	b480      	push	{r7}
 810301c:	b083      	sub	sp, #12
 810301e:	af00      	add	r7, sp, #0
 8103020:	6078      	str	r0, [r7, #4]
	return 1;
 8103022:	2301      	movs	r3, #1
}
 8103024:	4618      	mov	r0, r3
 8103026:	370c      	adds	r7, #12
 8103028:	46bd      	mov	sp, r7
 810302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810302e:	4770      	bx	lr

08103030 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8103030:	b480      	push	{r7}
 8103032:	b085      	sub	sp, #20
 8103034:	af00      	add	r7, sp, #0
 8103036:	60f8      	str	r0, [r7, #12]
 8103038:	60b9      	str	r1, [r7, #8]
 810303a:	607a      	str	r2, [r7, #4]
	return 0;
 810303c:	2300      	movs	r3, #0
}
 810303e:	4618      	mov	r0, r3
 8103040:	3714      	adds	r7, #20
 8103042:	46bd      	mov	sp, r7
 8103044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103048:	4770      	bx	lr
	...

0810304c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 810304c:	b580      	push	{r7, lr}
 810304e:	b086      	sub	sp, #24
 8103050:	af00      	add	r7, sp, #0
 8103052:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8103054:	4a14      	ldr	r2, [pc, #80]	; (81030a8 <_sbrk+0x5c>)
 8103056:	4b15      	ldr	r3, [pc, #84]	; (81030ac <_sbrk+0x60>)
 8103058:	1ad3      	subs	r3, r2, r3
 810305a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 810305c:	697b      	ldr	r3, [r7, #20]
 810305e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8103060:	4b13      	ldr	r3, [pc, #76]	; (81030b0 <_sbrk+0x64>)
 8103062:	681b      	ldr	r3, [r3, #0]
 8103064:	2b00      	cmp	r3, #0
 8103066:	d102      	bne.n	810306e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8103068:	4b11      	ldr	r3, [pc, #68]	; (81030b0 <_sbrk+0x64>)
 810306a:	4a12      	ldr	r2, [pc, #72]	; (81030b4 <_sbrk+0x68>)
 810306c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 810306e:	4b10      	ldr	r3, [pc, #64]	; (81030b0 <_sbrk+0x64>)
 8103070:	681a      	ldr	r2, [r3, #0]
 8103072:	687b      	ldr	r3, [r7, #4]
 8103074:	4413      	add	r3, r2
 8103076:	693a      	ldr	r2, [r7, #16]
 8103078:	429a      	cmp	r2, r3
 810307a:	d207      	bcs.n	810308c <_sbrk+0x40>
  {
    errno = ENOMEM;
 810307c:	f005 ff8c 	bl	8108f98 <__errno>
 8103080:	4603      	mov	r3, r0
 8103082:	220c      	movs	r2, #12
 8103084:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8103086:	f04f 33ff 	mov.w	r3, #4294967295
 810308a:	e009      	b.n	81030a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 810308c:	4b08      	ldr	r3, [pc, #32]	; (81030b0 <_sbrk+0x64>)
 810308e:	681b      	ldr	r3, [r3, #0]
 8103090:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8103092:	4b07      	ldr	r3, [pc, #28]	; (81030b0 <_sbrk+0x64>)
 8103094:	681a      	ldr	r2, [r3, #0]
 8103096:	687b      	ldr	r3, [r7, #4]
 8103098:	4413      	add	r3, r2
 810309a:	4a05      	ldr	r2, [pc, #20]	; (81030b0 <_sbrk+0x64>)
 810309c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 810309e:	68fb      	ldr	r3, [r7, #12]
}
 81030a0:	4618      	mov	r0, r3
 81030a2:	3718      	adds	r7, #24
 81030a4:	46bd      	mov	sp, r7
 81030a6:	bd80      	pop	{r7, pc}
 81030a8:	10048000 	.word	0x10048000
 81030ac:	00000400 	.word	0x00000400
 81030b0:	100004ac 	.word	0x100004ac
 81030b4:	100004c8 	.word	0x100004c8

081030b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81030b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 81030f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81030bc:	f7fe f824 	bl	8101108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81030c0:	480c      	ldr	r0, [pc, #48]	; (81030f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81030c2:	490d      	ldr	r1, [pc, #52]	; (81030f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81030c4:	4a0d      	ldr	r2, [pc, #52]	; (81030fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 81030c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81030c8:	e002      	b.n	81030d0 <LoopCopyDataInit>

081030ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81030ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81030cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81030ce:	3304      	adds	r3, #4

081030d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81030d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81030d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81030d4:	d3f9      	bcc.n	81030ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81030d6:	4a0a      	ldr	r2, [pc, #40]	; (8103100 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81030d8:	4c0a      	ldr	r4, [pc, #40]	; (8103104 <LoopFillZerobss+0x22>)
  movs r3, #0
 81030da:	2300      	movs	r3, #0
  b LoopFillZerobss
 81030dc:	e001      	b.n	81030e2 <LoopFillZerobss>

081030de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81030de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81030e0:	3204      	adds	r2, #4

081030e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81030e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81030e4:	d3fb      	bcc.n	81030de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81030e6:	f005 ff5d 	bl	8108fa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81030ea:	f7fe fdd1 	bl	8101c90 <main>
  bx  lr
 81030ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81030f0:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81030f4:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81030f8:	10000200 	.word	0x10000200
  ldr r2, =_sidata
 81030fc:	0810e3f4 	.word	0x0810e3f4
  ldr r2, =_sbss
 8103100:	10000200 	.word	0x10000200
  ldr r4, =_ebss
 8103104:	100004c4 	.word	0x100004c4

08103108 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8103108:	e7fe      	b.n	8103108 <ADC3_IRQHandler>
	...

0810310c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 810310c:	b580      	push	{r7, lr}
 810310e:	b082      	sub	sp, #8
 8103110:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8103112:	4b28      	ldr	r3, [pc, #160]	; (81031b4 <HAL_Init+0xa8>)
 8103114:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8103118:	4a26      	ldr	r2, [pc, #152]	; (81031b4 <HAL_Init+0xa8>)
 810311a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810311e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8103122:	4b24      	ldr	r3, [pc, #144]	; (81031b4 <HAL_Init+0xa8>)
 8103124:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8103128:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810312c:	603b      	str	r3, [r7, #0]
 810312e:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8103130:	4b21      	ldr	r3, [pc, #132]	; (81031b8 <HAL_Init+0xac>)
 8103132:	681b      	ldr	r3, [r3, #0]
 8103134:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8103138:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 810313c:	4a1e      	ldr	r2, [pc, #120]	; (81031b8 <HAL_Init+0xac>)
 810313e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8103142:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8103144:	4b1c      	ldr	r3, [pc, #112]	; (81031b8 <HAL_Init+0xac>)
 8103146:	681b      	ldr	r3, [r3, #0]
 8103148:	4a1b      	ldr	r2, [pc, #108]	; (81031b8 <HAL_Init+0xac>)
 810314a:	f043 0301 	orr.w	r3, r3, #1
 810314e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8103150:	2003      	movs	r0, #3
 8103152:	f000 f983 	bl	810345c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8103156:	f001 f9f7 	bl	8104548 <HAL_RCC_GetSysClockFreq>
 810315a:	4602      	mov	r2, r0
 810315c:	4b15      	ldr	r3, [pc, #84]	; (81031b4 <HAL_Init+0xa8>)
 810315e:	699b      	ldr	r3, [r3, #24]
 8103160:	0a1b      	lsrs	r3, r3, #8
 8103162:	f003 030f 	and.w	r3, r3, #15
 8103166:	4915      	ldr	r1, [pc, #84]	; (81031bc <HAL_Init+0xb0>)
 8103168:	5ccb      	ldrb	r3, [r1, r3]
 810316a:	f003 031f 	and.w	r3, r3, #31
 810316e:	fa22 f303 	lsr.w	r3, r2, r3
 8103172:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103174:	4b0f      	ldr	r3, [pc, #60]	; (81031b4 <HAL_Init+0xa8>)
 8103176:	699b      	ldr	r3, [r3, #24]
 8103178:	f003 030f 	and.w	r3, r3, #15
 810317c:	4a0f      	ldr	r2, [pc, #60]	; (81031bc <HAL_Init+0xb0>)
 810317e:	5cd3      	ldrb	r3, [r2, r3]
 8103180:	f003 031f 	and.w	r3, r3, #31
 8103184:	687a      	ldr	r2, [r7, #4]
 8103186:	fa22 f303 	lsr.w	r3, r2, r3
 810318a:	4a0d      	ldr	r2, [pc, #52]	; (81031c0 <HAL_Init+0xb4>)
 810318c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810318e:	4b0c      	ldr	r3, [pc, #48]	; (81031c0 <HAL_Init+0xb4>)
 8103190:	681b      	ldr	r3, [r3, #0]
 8103192:	4a0c      	ldr	r2, [pc, #48]	; (81031c4 <HAL_Init+0xb8>)
 8103194:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8103196:	2000      	movs	r0, #0
 8103198:	f000 f816 	bl	81031c8 <HAL_InitTick>
 810319c:	4603      	mov	r3, r0
 810319e:	2b00      	cmp	r3, #0
 81031a0:	d001      	beq.n	81031a6 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81031a2:	2301      	movs	r3, #1
 81031a4:	e002      	b.n	81031ac <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81031a6:	f7ff fc91 	bl	8102acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81031aa:	2300      	movs	r3, #0
}
 81031ac:	4618      	mov	r0, r3
 81031ae:	3708      	adds	r7, #8
 81031b0:	46bd      	mov	sp, r7
 81031b2:	bd80      	pop	{r7, pc}
 81031b4:	58024400 	.word	0x58024400
 81031b8:	40024400 	.word	0x40024400
 81031bc:	0810df00 	.word	0x0810df00
 81031c0:	10000004 	.word	0x10000004
 81031c4:	10000000 	.word	0x10000000

081031c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81031c8:	b580      	push	{r7, lr}
 81031ca:	b082      	sub	sp, #8
 81031cc:	af00      	add	r7, sp, #0
 81031ce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81031d0:	4b15      	ldr	r3, [pc, #84]	; (8103228 <HAL_InitTick+0x60>)
 81031d2:	781b      	ldrb	r3, [r3, #0]
 81031d4:	2b00      	cmp	r3, #0
 81031d6:	d101      	bne.n	81031dc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81031d8:	2301      	movs	r3, #1
 81031da:	e021      	b.n	8103220 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81031dc:	4b13      	ldr	r3, [pc, #76]	; (810322c <HAL_InitTick+0x64>)
 81031de:	681a      	ldr	r2, [r3, #0]
 81031e0:	4b11      	ldr	r3, [pc, #68]	; (8103228 <HAL_InitTick+0x60>)
 81031e2:	781b      	ldrb	r3, [r3, #0]
 81031e4:	4619      	mov	r1, r3
 81031e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81031ea:	fbb3 f3f1 	udiv	r3, r3, r1
 81031ee:	fbb2 f3f3 	udiv	r3, r2, r3
 81031f2:	4618      	mov	r0, r3
 81031f4:	f000 f965 	bl	81034c2 <HAL_SYSTICK_Config>
 81031f8:	4603      	mov	r3, r0
 81031fa:	2b00      	cmp	r3, #0
 81031fc:	d001      	beq.n	8103202 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81031fe:	2301      	movs	r3, #1
 8103200:	e00e      	b.n	8103220 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8103202:	687b      	ldr	r3, [r7, #4]
 8103204:	2b0f      	cmp	r3, #15
 8103206:	d80a      	bhi.n	810321e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8103208:	2200      	movs	r2, #0
 810320a:	6879      	ldr	r1, [r7, #4]
 810320c:	f04f 30ff 	mov.w	r0, #4294967295
 8103210:	f000 f92f 	bl	8103472 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8103214:	4a06      	ldr	r2, [pc, #24]	; (8103230 <HAL_InitTick+0x68>)
 8103216:	687b      	ldr	r3, [r7, #4]
 8103218:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 810321a:	2300      	movs	r3, #0
 810321c:	e000      	b.n	8103220 <HAL_InitTick+0x58>
    return HAL_ERROR;
 810321e:	2301      	movs	r3, #1
}
 8103220:	4618      	mov	r0, r3
 8103222:	3708      	adds	r7, #8
 8103224:	46bd      	mov	sp, r7
 8103226:	bd80      	pop	{r7, pc}
 8103228:	10000028 	.word	0x10000028
 810322c:	10000000 	.word	0x10000000
 8103230:	10000024 	.word	0x10000024

08103234 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8103234:	b480      	push	{r7}
 8103236:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8103238:	4b06      	ldr	r3, [pc, #24]	; (8103254 <HAL_IncTick+0x20>)
 810323a:	781b      	ldrb	r3, [r3, #0]
 810323c:	461a      	mov	r2, r3
 810323e:	4b06      	ldr	r3, [pc, #24]	; (8103258 <HAL_IncTick+0x24>)
 8103240:	681b      	ldr	r3, [r3, #0]
 8103242:	4413      	add	r3, r2
 8103244:	4a04      	ldr	r2, [pc, #16]	; (8103258 <HAL_IncTick+0x24>)
 8103246:	6013      	str	r3, [r2, #0]
}
 8103248:	bf00      	nop
 810324a:	46bd      	mov	sp, r7
 810324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103250:	4770      	bx	lr
 8103252:	bf00      	nop
 8103254:	10000028 	.word	0x10000028
 8103258:	100004b0 	.word	0x100004b0

0810325c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 810325c:	b480      	push	{r7}
 810325e:	af00      	add	r7, sp, #0
  return uwTick;
 8103260:	4b03      	ldr	r3, [pc, #12]	; (8103270 <HAL_GetTick+0x14>)
 8103262:	681b      	ldr	r3, [r3, #0]
}
 8103264:	4618      	mov	r0, r3
 8103266:	46bd      	mov	sp, r7
 8103268:	f85d 7b04 	ldr.w	r7, [sp], #4
 810326c:	4770      	bx	lr
 810326e:	bf00      	nop
 8103270:	100004b0 	.word	0x100004b0

08103274 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8103274:	b580      	push	{r7, lr}
 8103276:	b084      	sub	sp, #16
 8103278:	af00      	add	r7, sp, #0
 810327a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 810327c:	f7ff ffee 	bl	810325c <HAL_GetTick>
 8103280:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8103282:	687b      	ldr	r3, [r7, #4]
 8103284:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8103286:	68fb      	ldr	r3, [r7, #12]
 8103288:	f1b3 3fff 	cmp.w	r3, #4294967295
 810328c:	d005      	beq.n	810329a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 810328e:	4b0a      	ldr	r3, [pc, #40]	; (81032b8 <HAL_Delay+0x44>)
 8103290:	781b      	ldrb	r3, [r3, #0]
 8103292:	461a      	mov	r2, r3
 8103294:	68fb      	ldr	r3, [r7, #12]
 8103296:	4413      	add	r3, r2
 8103298:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 810329a:	bf00      	nop
 810329c:	f7ff ffde 	bl	810325c <HAL_GetTick>
 81032a0:	4602      	mov	r2, r0
 81032a2:	68bb      	ldr	r3, [r7, #8]
 81032a4:	1ad3      	subs	r3, r2, r3
 81032a6:	68fa      	ldr	r2, [r7, #12]
 81032a8:	429a      	cmp	r2, r3
 81032aa:	d8f7      	bhi.n	810329c <HAL_Delay+0x28>
  {
  }
}
 81032ac:	bf00      	nop
 81032ae:	bf00      	nop
 81032b0:	3710      	adds	r7, #16
 81032b2:	46bd      	mov	sp, r7
 81032b4:	bd80      	pop	{r7, pc}
 81032b6:	bf00      	nop
 81032b8:	10000028 	.word	0x10000028

081032bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81032bc:	b480      	push	{r7}
 81032be:	b085      	sub	sp, #20
 81032c0:	af00      	add	r7, sp, #0
 81032c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81032c4:	687b      	ldr	r3, [r7, #4]
 81032c6:	f003 0307 	and.w	r3, r3, #7
 81032ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81032cc:	4b0c      	ldr	r3, [pc, #48]	; (8103300 <__NVIC_SetPriorityGrouping+0x44>)
 81032ce:	68db      	ldr	r3, [r3, #12]
 81032d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81032d2:	68ba      	ldr	r2, [r7, #8]
 81032d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81032d8:	4013      	ands	r3, r2
 81032da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81032dc:	68fb      	ldr	r3, [r7, #12]
 81032de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81032e0:	68bb      	ldr	r3, [r7, #8]
 81032e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81032e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81032e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81032ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81032ee:	4a04      	ldr	r2, [pc, #16]	; (8103300 <__NVIC_SetPriorityGrouping+0x44>)
 81032f0:	68bb      	ldr	r3, [r7, #8]
 81032f2:	60d3      	str	r3, [r2, #12]
}
 81032f4:	bf00      	nop
 81032f6:	3714      	adds	r7, #20
 81032f8:	46bd      	mov	sp, r7
 81032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032fe:	4770      	bx	lr
 8103300:	e000ed00 	.word	0xe000ed00

08103304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8103304:	b480      	push	{r7}
 8103306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8103308:	4b04      	ldr	r3, [pc, #16]	; (810331c <__NVIC_GetPriorityGrouping+0x18>)
 810330a:	68db      	ldr	r3, [r3, #12]
 810330c:	0a1b      	lsrs	r3, r3, #8
 810330e:	f003 0307 	and.w	r3, r3, #7
}
 8103312:	4618      	mov	r0, r3
 8103314:	46bd      	mov	sp, r7
 8103316:	f85d 7b04 	ldr.w	r7, [sp], #4
 810331a:	4770      	bx	lr
 810331c:	e000ed00 	.word	0xe000ed00

08103320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8103320:	b480      	push	{r7}
 8103322:	b083      	sub	sp, #12
 8103324:	af00      	add	r7, sp, #0
 8103326:	4603      	mov	r3, r0
 8103328:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810332a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810332e:	2b00      	cmp	r3, #0
 8103330:	db0b      	blt.n	810334a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8103332:	88fb      	ldrh	r3, [r7, #6]
 8103334:	f003 021f 	and.w	r2, r3, #31
 8103338:	4907      	ldr	r1, [pc, #28]	; (8103358 <__NVIC_EnableIRQ+0x38>)
 810333a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810333e:	095b      	lsrs	r3, r3, #5
 8103340:	2001      	movs	r0, #1
 8103342:	fa00 f202 	lsl.w	r2, r0, r2
 8103346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 810334a:	bf00      	nop
 810334c:	370c      	adds	r7, #12
 810334e:	46bd      	mov	sp, r7
 8103350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103354:	4770      	bx	lr
 8103356:	bf00      	nop
 8103358:	e000e100 	.word	0xe000e100

0810335c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 810335c:	b480      	push	{r7}
 810335e:	b083      	sub	sp, #12
 8103360:	af00      	add	r7, sp, #0
 8103362:	4603      	mov	r3, r0
 8103364:	6039      	str	r1, [r7, #0]
 8103366:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103368:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810336c:	2b00      	cmp	r3, #0
 810336e:	db0a      	blt.n	8103386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103370:	683b      	ldr	r3, [r7, #0]
 8103372:	b2da      	uxtb	r2, r3
 8103374:	490c      	ldr	r1, [pc, #48]	; (81033a8 <__NVIC_SetPriority+0x4c>)
 8103376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810337a:	0112      	lsls	r2, r2, #4
 810337c:	b2d2      	uxtb	r2, r2
 810337e:	440b      	add	r3, r1
 8103380:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8103384:	e00a      	b.n	810339c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103386:	683b      	ldr	r3, [r7, #0]
 8103388:	b2da      	uxtb	r2, r3
 810338a:	4908      	ldr	r1, [pc, #32]	; (81033ac <__NVIC_SetPriority+0x50>)
 810338c:	88fb      	ldrh	r3, [r7, #6]
 810338e:	f003 030f 	and.w	r3, r3, #15
 8103392:	3b04      	subs	r3, #4
 8103394:	0112      	lsls	r2, r2, #4
 8103396:	b2d2      	uxtb	r2, r2
 8103398:	440b      	add	r3, r1
 810339a:	761a      	strb	r2, [r3, #24]
}
 810339c:	bf00      	nop
 810339e:	370c      	adds	r7, #12
 81033a0:	46bd      	mov	sp, r7
 81033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033a6:	4770      	bx	lr
 81033a8:	e000e100 	.word	0xe000e100
 81033ac:	e000ed00 	.word	0xe000ed00

081033b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81033b0:	b480      	push	{r7}
 81033b2:	b089      	sub	sp, #36	; 0x24
 81033b4:	af00      	add	r7, sp, #0
 81033b6:	60f8      	str	r0, [r7, #12]
 81033b8:	60b9      	str	r1, [r7, #8]
 81033ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81033bc:	68fb      	ldr	r3, [r7, #12]
 81033be:	f003 0307 	and.w	r3, r3, #7
 81033c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81033c4:	69fb      	ldr	r3, [r7, #28]
 81033c6:	f1c3 0307 	rsb	r3, r3, #7
 81033ca:	2b04      	cmp	r3, #4
 81033cc:	bf28      	it	cs
 81033ce:	2304      	movcs	r3, #4
 81033d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81033d2:	69fb      	ldr	r3, [r7, #28]
 81033d4:	3304      	adds	r3, #4
 81033d6:	2b06      	cmp	r3, #6
 81033d8:	d902      	bls.n	81033e0 <NVIC_EncodePriority+0x30>
 81033da:	69fb      	ldr	r3, [r7, #28]
 81033dc:	3b03      	subs	r3, #3
 81033de:	e000      	b.n	81033e2 <NVIC_EncodePriority+0x32>
 81033e0:	2300      	movs	r3, #0
 81033e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81033e4:	f04f 32ff 	mov.w	r2, #4294967295
 81033e8:	69bb      	ldr	r3, [r7, #24]
 81033ea:	fa02 f303 	lsl.w	r3, r2, r3
 81033ee:	43da      	mvns	r2, r3
 81033f0:	68bb      	ldr	r3, [r7, #8]
 81033f2:	401a      	ands	r2, r3
 81033f4:	697b      	ldr	r3, [r7, #20]
 81033f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81033f8:	f04f 31ff 	mov.w	r1, #4294967295
 81033fc:	697b      	ldr	r3, [r7, #20]
 81033fe:	fa01 f303 	lsl.w	r3, r1, r3
 8103402:	43d9      	mvns	r1, r3
 8103404:	687b      	ldr	r3, [r7, #4]
 8103406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103408:	4313      	orrs	r3, r2
         );
}
 810340a:	4618      	mov	r0, r3
 810340c:	3724      	adds	r7, #36	; 0x24
 810340e:	46bd      	mov	sp, r7
 8103410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103414:	4770      	bx	lr
	...

08103418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8103418:	b580      	push	{r7, lr}
 810341a:	b082      	sub	sp, #8
 810341c:	af00      	add	r7, sp, #0
 810341e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8103420:	687b      	ldr	r3, [r7, #4]
 8103422:	3b01      	subs	r3, #1
 8103424:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8103428:	d301      	bcc.n	810342e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 810342a:	2301      	movs	r3, #1
 810342c:	e00f      	b.n	810344e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 810342e:	4a0a      	ldr	r2, [pc, #40]	; (8103458 <SysTick_Config+0x40>)
 8103430:	687b      	ldr	r3, [r7, #4]
 8103432:	3b01      	subs	r3, #1
 8103434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8103436:	210f      	movs	r1, #15
 8103438:	f04f 30ff 	mov.w	r0, #4294967295
 810343c:	f7ff ff8e 	bl	810335c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8103440:	4b05      	ldr	r3, [pc, #20]	; (8103458 <SysTick_Config+0x40>)
 8103442:	2200      	movs	r2, #0
 8103444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8103446:	4b04      	ldr	r3, [pc, #16]	; (8103458 <SysTick_Config+0x40>)
 8103448:	2207      	movs	r2, #7
 810344a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 810344c:	2300      	movs	r3, #0
}
 810344e:	4618      	mov	r0, r3
 8103450:	3708      	adds	r7, #8
 8103452:	46bd      	mov	sp, r7
 8103454:	bd80      	pop	{r7, pc}
 8103456:	bf00      	nop
 8103458:	e000e010 	.word	0xe000e010

0810345c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810345c:	b580      	push	{r7, lr}
 810345e:	b082      	sub	sp, #8
 8103460:	af00      	add	r7, sp, #0
 8103462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8103464:	6878      	ldr	r0, [r7, #4]
 8103466:	f7ff ff29 	bl	81032bc <__NVIC_SetPriorityGrouping>
}
 810346a:	bf00      	nop
 810346c:	3708      	adds	r7, #8
 810346e:	46bd      	mov	sp, r7
 8103470:	bd80      	pop	{r7, pc}

08103472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103472:	b580      	push	{r7, lr}
 8103474:	b086      	sub	sp, #24
 8103476:	af00      	add	r7, sp, #0
 8103478:	4603      	mov	r3, r0
 810347a:	60b9      	str	r1, [r7, #8]
 810347c:	607a      	str	r2, [r7, #4]
 810347e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8103480:	f7ff ff40 	bl	8103304 <__NVIC_GetPriorityGrouping>
 8103484:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8103486:	687a      	ldr	r2, [r7, #4]
 8103488:	68b9      	ldr	r1, [r7, #8]
 810348a:	6978      	ldr	r0, [r7, #20]
 810348c:	f7ff ff90 	bl	81033b0 <NVIC_EncodePriority>
 8103490:	4602      	mov	r2, r0
 8103492:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8103496:	4611      	mov	r1, r2
 8103498:	4618      	mov	r0, r3
 810349a:	f7ff ff5f 	bl	810335c <__NVIC_SetPriority>
}
 810349e:	bf00      	nop
 81034a0:	3718      	adds	r7, #24
 81034a2:	46bd      	mov	sp, r7
 81034a4:	bd80      	pop	{r7, pc}

081034a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81034a6:	b580      	push	{r7, lr}
 81034a8:	b082      	sub	sp, #8
 81034aa:	af00      	add	r7, sp, #0
 81034ac:	4603      	mov	r3, r0
 81034ae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81034b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81034b4:	4618      	mov	r0, r3
 81034b6:	f7ff ff33 	bl	8103320 <__NVIC_EnableIRQ>
}
 81034ba:	bf00      	nop
 81034bc:	3708      	adds	r7, #8
 81034be:	46bd      	mov	sp, r7
 81034c0:	bd80      	pop	{r7, pc}

081034c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81034c2:	b580      	push	{r7, lr}
 81034c4:	b082      	sub	sp, #8
 81034c6:	af00      	add	r7, sp, #0
 81034c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81034ca:	6878      	ldr	r0, [r7, #4]
 81034cc:	f7ff ffa4 	bl	8103418 <SysTick_Config>
 81034d0:	4603      	mov	r3, r0
}
 81034d2:	4618      	mov	r0, r3
 81034d4:	3708      	adds	r7, #8
 81034d6:	46bd      	mov	sp, r7
 81034d8:	bd80      	pop	{r7, pc}
	...

081034dc <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81034dc:	b480      	push	{r7}
 81034de:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81034e0:	4b07      	ldr	r3, [pc, #28]	; (8103500 <HAL_GetCurrentCPUID+0x24>)
 81034e2:	681b      	ldr	r3, [r3, #0]
 81034e4:	091b      	lsrs	r3, r3, #4
 81034e6:	f003 030f 	and.w	r3, r3, #15
 81034ea:	2b07      	cmp	r3, #7
 81034ec:	d101      	bne.n	81034f2 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81034ee:	2303      	movs	r3, #3
 81034f0:	e000      	b.n	81034f4 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81034f2:	2301      	movs	r3, #1
  }
}
 81034f4:	4618      	mov	r0, r3
 81034f6:	46bd      	mov	sp, r7
 81034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034fc:	4770      	bx	lr
 81034fe:	bf00      	nop
 8103500:	e000ed00 	.word	0xe000ed00

08103504 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8103504:	b480      	push	{r7}
 8103506:	b089      	sub	sp, #36	; 0x24
 8103508:	af00      	add	r7, sp, #0
 810350a:	6078      	str	r0, [r7, #4]
 810350c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810350e:	2300      	movs	r3, #0
 8103510:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8103512:	4b89      	ldr	r3, [pc, #548]	; (8103738 <HAL_GPIO_Init+0x234>)
 8103514:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103516:	e194      	b.n	8103842 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8103518:	683b      	ldr	r3, [r7, #0]
 810351a:	681a      	ldr	r2, [r3, #0]
 810351c:	2101      	movs	r1, #1
 810351e:	69fb      	ldr	r3, [r7, #28]
 8103520:	fa01 f303 	lsl.w	r3, r1, r3
 8103524:	4013      	ands	r3, r2
 8103526:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8103528:	693b      	ldr	r3, [r7, #16]
 810352a:	2b00      	cmp	r3, #0
 810352c:	f000 8186 	beq.w	810383c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8103530:	683b      	ldr	r3, [r7, #0]
 8103532:	685b      	ldr	r3, [r3, #4]
 8103534:	f003 0303 	and.w	r3, r3, #3
 8103538:	2b01      	cmp	r3, #1
 810353a:	d005      	beq.n	8103548 <HAL_GPIO_Init+0x44>
 810353c:	683b      	ldr	r3, [r7, #0]
 810353e:	685b      	ldr	r3, [r3, #4]
 8103540:	f003 0303 	and.w	r3, r3, #3
 8103544:	2b02      	cmp	r3, #2
 8103546:	d130      	bne.n	81035aa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8103548:	687b      	ldr	r3, [r7, #4]
 810354a:	689b      	ldr	r3, [r3, #8]
 810354c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810354e:	69fb      	ldr	r3, [r7, #28]
 8103550:	005b      	lsls	r3, r3, #1
 8103552:	2203      	movs	r2, #3
 8103554:	fa02 f303 	lsl.w	r3, r2, r3
 8103558:	43db      	mvns	r3, r3
 810355a:	69ba      	ldr	r2, [r7, #24]
 810355c:	4013      	ands	r3, r2
 810355e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8103560:	683b      	ldr	r3, [r7, #0]
 8103562:	68da      	ldr	r2, [r3, #12]
 8103564:	69fb      	ldr	r3, [r7, #28]
 8103566:	005b      	lsls	r3, r3, #1
 8103568:	fa02 f303 	lsl.w	r3, r2, r3
 810356c:	69ba      	ldr	r2, [r7, #24]
 810356e:	4313      	orrs	r3, r2
 8103570:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8103572:	687b      	ldr	r3, [r7, #4]
 8103574:	69ba      	ldr	r2, [r7, #24]
 8103576:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8103578:	687b      	ldr	r3, [r7, #4]
 810357a:	685b      	ldr	r3, [r3, #4]
 810357c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810357e:	2201      	movs	r2, #1
 8103580:	69fb      	ldr	r3, [r7, #28]
 8103582:	fa02 f303 	lsl.w	r3, r2, r3
 8103586:	43db      	mvns	r3, r3
 8103588:	69ba      	ldr	r2, [r7, #24]
 810358a:	4013      	ands	r3, r2
 810358c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810358e:	683b      	ldr	r3, [r7, #0]
 8103590:	685b      	ldr	r3, [r3, #4]
 8103592:	091b      	lsrs	r3, r3, #4
 8103594:	f003 0201 	and.w	r2, r3, #1
 8103598:	69fb      	ldr	r3, [r7, #28]
 810359a:	fa02 f303 	lsl.w	r3, r2, r3
 810359e:	69ba      	ldr	r2, [r7, #24]
 81035a0:	4313      	orrs	r3, r2
 81035a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81035a4:	687b      	ldr	r3, [r7, #4]
 81035a6:	69ba      	ldr	r2, [r7, #24]
 81035a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81035aa:	683b      	ldr	r3, [r7, #0]
 81035ac:	685b      	ldr	r3, [r3, #4]
 81035ae:	f003 0303 	and.w	r3, r3, #3
 81035b2:	2b03      	cmp	r3, #3
 81035b4:	d017      	beq.n	81035e6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81035b6:	687b      	ldr	r3, [r7, #4]
 81035b8:	68db      	ldr	r3, [r3, #12]
 81035ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81035bc:	69fb      	ldr	r3, [r7, #28]
 81035be:	005b      	lsls	r3, r3, #1
 81035c0:	2203      	movs	r2, #3
 81035c2:	fa02 f303 	lsl.w	r3, r2, r3
 81035c6:	43db      	mvns	r3, r3
 81035c8:	69ba      	ldr	r2, [r7, #24]
 81035ca:	4013      	ands	r3, r2
 81035cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81035ce:	683b      	ldr	r3, [r7, #0]
 81035d0:	689a      	ldr	r2, [r3, #8]
 81035d2:	69fb      	ldr	r3, [r7, #28]
 81035d4:	005b      	lsls	r3, r3, #1
 81035d6:	fa02 f303 	lsl.w	r3, r2, r3
 81035da:	69ba      	ldr	r2, [r7, #24]
 81035dc:	4313      	orrs	r3, r2
 81035de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81035e0:	687b      	ldr	r3, [r7, #4]
 81035e2:	69ba      	ldr	r2, [r7, #24]
 81035e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81035e6:	683b      	ldr	r3, [r7, #0]
 81035e8:	685b      	ldr	r3, [r3, #4]
 81035ea:	f003 0303 	and.w	r3, r3, #3
 81035ee:	2b02      	cmp	r3, #2
 81035f0:	d123      	bne.n	810363a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81035f2:	69fb      	ldr	r3, [r7, #28]
 81035f4:	08da      	lsrs	r2, r3, #3
 81035f6:	687b      	ldr	r3, [r7, #4]
 81035f8:	3208      	adds	r2, #8
 81035fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81035fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8103600:	69fb      	ldr	r3, [r7, #28]
 8103602:	f003 0307 	and.w	r3, r3, #7
 8103606:	009b      	lsls	r3, r3, #2
 8103608:	220f      	movs	r2, #15
 810360a:	fa02 f303 	lsl.w	r3, r2, r3
 810360e:	43db      	mvns	r3, r3
 8103610:	69ba      	ldr	r2, [r7, #24]
 8103612:	4013      	ands	r3, r2
 8103614:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8103616:	683b      	ldr	r3, [r7, #0]
 8103618:	691a      	ldr	r2, [r3, #16]
 810361a:	69fb      	ldr	r3, [r7, #28]
 810361c:	f003 0307 	and.w	r3, r3, #7
 8103620:	009b      	lsls	r3, r3, #2
 8103622:	fa02 f303 	lsl.w	r3, r2, r3
 8103626:	69ba      	ldr	r2, [r7, #24]
 8103628:	4313      	orrs	r3, r2
 810362a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 810362c:	69fb      	ldr	r3, [r7, #28]
 810362e:	08da      	lsrs	r2, r3, #3
 8103630:	687b      	ldr	r3, [r7, #4]
 8103632:	3208      	adds	r2, #8
 8103634:	69b9      	ldr	r1, [r7, #24]
 8103636:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810363a:	687b      	ldr	r3, [r7, #4]
 810363c:	681b      	ldr	r3, [r3, #0]
 810363e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8103640:	69fb      	ldr	r3, [r7, #28]
 8103642:	005b      	lsls	r3, r3, #1
 8103644:	2203      	movs	r2, #3
 8103646:	fa02 f303 	lsl.w	r3, r2, r3
 810364a:	43db      	mvns	r3, r3
 810364c:	69ba      	ldr	r2, [r7, #24]
 810364e:	4013      	ands	r3, r2
 8103650:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8103652:	683b      	ldr	r3, [r7, #0]
 8103654:	685b      	ldr	r3, [r3, #4]
 8103656:	f003 0203 	and.w	r2, r3, #3
 810365a:	69fb      	ldr	r3, [r7, #28]
 810365c:	005b      	lsls	r3, r3, #1
 810365e:	fa02 f303 	lsl.w	r3, r2, r3
 8103662:	69ba      	ldr	r2, [r7, #24]
 8103664:	4313      	orrs	r3, r2
 8103666:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8103668:	687b      	ldr	r3, [r7, #4]
 810366a:	69ba      	ldr	r2, [r7, #24]
 810366c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 810366e:	683b      	ldr	r3, [r7, #0]
 8103670:	685b      	ldr	r3, [r3, #4]
 8103672:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103676:	2b00      	cmp	r3, #0
 8103678:	f000 80e0 	beq.w	810383c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 810367c:	4b2f      	ldr	r3, [pc, #188]	; (810373c <HAL_GPIO_Init+0x238>)
 810367e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8103682:	4a2e      	ldr	r2, [pc, #184]	; (810373c <HAL_GPIO_Init+0x238>)
 8103684:	f043 0302 	orr.w	r3, r3, #2
 8103688:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810368c:	4b2b      	ldr	r3, [pc, #172]	; (810373c <HAL_GPIO_Init+0x238>)
 810368e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8103692:	f003 0302 	and.w	r3, r3, #2
 8103696:	60fb      	str	r3, [r7, #12]
 8103698:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810369a:	4a29      	ldr	r2, [pc, #164]	; (8103740 <HAL_GPIO_Init+0x23c>)
 810369c:	69fb      	ldr	r3, [r7, #28]
 810369e:	089b      	lsrs	r3, r3, #2
 81036a0:	3302      	adds	r3, #2
 81036a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81036a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81036a8:	69fb      	ldr	r3, [r7, #28]
 81036aa:	f003 0303 	and.w	r3, r3, #3
 81036ae:	009b      	lsls	r3, r3, #2
 81036b0:	220f      	movs	r2, #15
 81036b2:	fa02 f303 	lsl.w	r3, r2, r3
 81036b6:	43db      	mvns	r3, r3
 81036b8:	69ba      	ldr	r2, [r7, #24]
 81036ba:	4013      	ands	r3, r2
 81036bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81036be:	687b      	ldr	r3, [r7, #4]
 81036c0:	4a20      	ldr	r2, [pc, #128]	; (8103744 <HAL_GPIO_Init+0x240>)
 81036c2:	4293      	cmp	r3, r2
 81036c4:	d052      	beq.n	810376c <HAL_GPIO_Init+0x268>
 81036c6:	687b      	ldr	r3, [r7, #4]
 81036c8:	4a1f      	ldr	r2, [pc, #124]	; (8103748 <HAL_GPIO_Init+0x244>)
 81036ca:	4293      	cmp	r3, r2
 81036cc:	d031      	beq.n	8103732 <HAL_GPIO_Init+0x22e>
 81036ce:	687b      	ldr	r3, [r7, #4]
 81036d0:	4a1e      	ldr	r2, [pc, #120]	; (810374c <HAL_GPIO_Init+0x248>)
 81036d2:	4293      	cmp	r3, r2
 81036d4:	d02b      	beq.n	810372e <HAL_GPIO_Init+0x22a>
 81036d6:	687b      	ldr	r3, [r7, #4]
 81036d8:	4a1d      	ldr	r2, [pc, #116]	; (8103750 <HAL_GPIO_Init+0x24c>)
 81036da:	4293      	cmp	r3, r2
 81036dc:	d025      	beq.n	810372a <HAL_GPIO_Init+0x226>
 81036de:	687b      	ldr	r3, [r7, #4]
 81036e0:	4a1c      	ldr	r2, [pc, #112]	; (8103754 <HAL_GPIO_Init+0x250>)
 81036e2:	4293      	cmp	r3, r2
 81036e4:	d01f      	beq.n	8103726 <HAL_GPIO_Init+0x222>
 81036e6:	687b      	ldr	r3, [r7, #4]
 81036e8:	4a1b      	ldr	r2, [pc, #108]	; (8103758 <HAL_GPIO_Init+0x254>)
 81036ea:	4293      	cmp	r3, r2
 81036ec:	d019      	beq.n	8103722 <HAL_GPIO_Init+0x21e>
 81036ee:	687b      	ldr	r3, [r7, #4]
 81036f0:	4a1a      	ldr	r2, [pc, #104]	; (810375c <HAL_GPIO_Init+0x258>)
 81036f2:	4293      	cmp	r3, r2
 81036f4:	d013      	beq.n	810371e <HAL_GPIO_Init+0x21a>
 81036f6:	687b      	ldr	r3, [r7, #4]
 81036f8:	4a19      	ldr	r2, [pc, #100]	; (8103760 <HAL_GPIO_Init+0x25c>)
 81036fa:	4293      	cmp	r3, r2
 81036fc:	d00d      	beq.n	810371a <HAL_GPIO_Init+0x216>
 81036fe:	687b      	ldr	r3, [r7, #4]
 8103700:	4a18      	ldr	r2, [pc, #96]	; (8103764 <HAL_GPIO_Init+0x260>)
 8103702:	4293      	cmp	r3, r2
 8103704:	d007      	beq.n	8103716 <HAL_GPIO_Init+0x212>
 8103706:	687b      	ldr	r3, [r7, #4]
 8103708:	4a17      	ldr	r2, [pc, #92]	; (8103768 <HAL_GPIO_Init+0x264>)
 810370a:	4293      	cmp	r3, r2
 810370c:	d101      	bne.n	8103712 <HAL_GPIO_Init+0x20e>
 810370e:	2309      	movs	r3, #9
 8103710:	e02d      	b.n	810376e <HAL_GPIO_Init+0x26a>
 8103712:	230a      	movs	r3, #10
 8103714:	e02b      	b.n	810376e <HAL_GPIO_Init+0x26a>
 8103716:	2308      	movs	r3, #8
 8103718:	e029      	b.n	810376e <HAL_GPIO_Init+0x26a>
 810371a:	2307      	movs	r3, #7
 810371c:	e027      	b.n	810376e <HAL_GPIO_Init+0x26a>
 810371e:	2306      	movs	r3, #6
 8103720:	e025      	b.n	810376e <HAL_GPIO_Init+0x26a>
 8103722:	2305      	movs	r3, #5
 8103724:	e023      	b.n	810376e <HAL_GPIO_Init+0x26a>
 8103726:	2304      	movs	r3, #4
 8103728:	e021      	b.n	810376e <HAL_GPIO_Init+0x26a>
 810372a:	2303      	movs	r3, #3
 810372c:	e01f      	b.n	810376e <HAL_GPIO_Init+0x26a>
 810372e:	2302      	movs	r3, #2
 8103730:	e01d      	b.n	810376e <HAL_GPIO_Init+0x26a>
 8103732:	2301      	movs	r3, #1
 8103734:	e01b      	b.n	810376e <HAL_GPIO_Init+0x26a>
 8103736:	bf00      	nop
 8103738:	580000c0 	.word	0x580000c0
 810373c:	58024400 	.word	0x58024400
 8103740:	58000400 	.word	0x58000400
 8103744:	58020000 	.word	0x58020000
 8103748:	58020400 	.word	0x58020400
 810374c:	58020800 	.word	0x58020800
 8103750:	58020c00 	.word	0x58020c00
 8103754:	58021000 	.word	0x58021000
 8103758:	58021400 	.word	0x58021400
 810375c:	58021800 	.word	0x58021800
 8103760:	58021c00 	.word	0x58021c00
 8103764:	58022000 	.word	0x58022000
 8103768:	58022400 	.word	0x58022400
 810376c:	2300      	movs	r3, #0
 810376e:	69fa      	ldr	r2, [r7, #28]
 8103770:	f002 0203 	and.w	r2, r2, #3
 8103774:	0092      	lsls	r2, r2, #2
 8103776:	4093      	lsls	r3, r2
 8103778:	69ba      	ldr	r2, [r7, #24]
 810377a:	4313      	orrs	r3, r2
 810377c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810377e:	4938      	ldr	r1, [pc, #224]	; (8103860 <HAL_GPIO_Init+0x35c>)
 8103780:	69fb      	ldr	r3, [r7, #28]
 8103782:	089b      	lsrs	r3, r3, #2
 8103784:	3302      	adds	r3, #2
 8103786:	69ba      	ldr	r2, [r7, #24]
 8103788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 810378c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103790:	681b      	ldr	r3, [r3, #0]
 8103792:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103794:	693b      	ldr	r3, [r7, #16]
 8103796:	43db      	mvns	r3, r3
 8103798:	69ba      	ldr	r2, [r7, #24]
 810379a:	4013      	ands	r3, r2
 810379c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 810379e:	683b      	ldr	r3, [r7, #0]
 81037a0:	685b      	ldr	r3, [r3, #4]
 81037a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81037a6:	2b00      	cmp	r3, #0
 81037a8:	d003      	beq.n	81037b2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81037aa:	69ba      	ldr	r2, [r7, #24]
 81037ac:	693b      	ldr	r3, [r7, #16]
 81037ae:	4313      	orrs	r3, r2
 81037b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81037b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81037b6:	69bb      	ldr	r3, [r7, #24]
 81037b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81037ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81037be:	685b      	ldr	r3, [r3, #4]
 81037c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81037c2:	693b      	ldr	r3, [r7, #16]
 81037c4:	43db      	mvns	r3, r3
 81037c6:	69ba      	ldr	r2, [r7, #24]
 81037c8:	4013      	ands	r3, r2
 81037ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 81037cc:	683b      	ldr	r3, [r7, #0]
 81037ce:	685b      	ldr	r3, [r3, #4]
 81037d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81037d4:	2b00      	cmp	r3, #0
 81037d6:	d003      	beq.n	81037e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 81037d8:	69ba      	ldr	r2, [r7, #24]
 81037da:	693b      	ldr	r3, [r7, #16]
 81037dc:	4313      	orrs	r3, r2
 81037de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81037e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81037e4:	69bb      	ldr	r3, [r7, #24]
 81037e6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 81037e8:	697b      	ldr	r3, [r7, #20]
 81037ea:	685b      	ldr	r3, [r3, #4]
 81037ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81037ee:	693b      	ldr	r3, [r7, #16]
 81037f0:	43db      	mvns	r3, r3
 81037f2:	69ba      	ldr	r2, [r7, #24]
 81037f4:	4013      	ands	r3, r2
 81037f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 81037f8:	683b      	ldr	r3, [r7, #0]
 81037fa:	685b      	ldr	r3, [r3, #4]
 81037fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103800:	2b00      	cmp	r3, #0
 8103802:	d003      	beq.n	810380c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8103804:	69ba      	ldr	r2, [r7, #24]
 8103806:	693b      	ldr	r3, [r7, #16]
 8103808:	4313      	orrs	r3, r2
 810380a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 810380c:	697b      	ldr	r3, [r7, #20]
 810380e:	69ba      	ldr	r2, [r7, #24]
 8103810:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8103812:	697b      	ldr	r3, [r7, #20]
 8103814:	681b      	ldr	r3, [r3, #0]
 8103816:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103818:	693b      	ldr	r3, [r7, #16]
 810381a:	43db      	mvns	r3, r3
 810381c:	69ba      	ldr	r2, [r7, #24]
 810381e:	4013      	ands	r3, r2
 8103820:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8103822:	683b      	ldr	r3, [r7, #0]
 8103824:	685b      	ldr	r3, [r3, #4]
 8103826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810382a:	2b00      	cmp	r3, #0
 810382c:	d003      	beq.n	8103836 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810382e:	69ba      	ldr	r2, [r7, #24]
 8103830:	693b      	ldr	r3, [r7, #16]
 8103832:	4313      	orrs	r3, r2
 8103834:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8103836:	697b      	ldr	r3, [r7, #20]
 8103838:	69ba      	ldr	r2, [r7, #24]
 810383a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 810383c:	69fb      	ldr	r3, [r7, #28]
 810383e:	3301      	adds	r3, #1
 8103840:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103842:	683b      	ldr	r3, [r7, #0]
 8103844:	681a      	ldr	r2, [r3, #0]
 8103846:	69fb      	ldr	r3, [r7, #28]
 8103848:	fa22 f303 	lsr.w	r3, r2, r3
 810384c:	2b00      	cmp	r3, #0
 810384e:	f47f ae63 	bne.w	8103518 <HAL_GPIO_Init+0x14>
  }
}
 8103852:	bf00      	nop
 8103854:	bf00      	nop
 8103856:	3724      	adds	r7, #36	; 0x24
 8103858:	46bd      	mov	sp, r7
 810385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810385e:	4770      	bx	lr
 8103860:	58000400 	.word	0x58000400

08103864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8103864:	b480      	push	{r7}
 8103866:	b083      	sub	sp, #12
 8103868:	af00      	add	r7, sp, #0
 810386a:	6078      	str	r0, [r7, #4]
 810386c:	460b      	mov	r3, r1
 810386e:	807b      	strh	r3, [r7, #2]
 8103870:	4613      	mov	r3, r2
 8103872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8103874:	787b      	ldrb	r3, [r7, #1]
 8103876:	2b00      	cmp	r3, #0
 8103878:	d003      	beq.n	8103882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 810387a:	887a      	ldrh	r2, [r7, #2]
 810387c:	687b      	ldr	r3, [r7, #4]
 810387e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8103880:	e003      	b.n	810388a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8103882:	887b      	ldrh	r3, [r7, #2]
 8103884:	041a      	lsls	r2, r3, #16
 8103886:	687b      	ldr	r3, [r7, #4]
 8103888:	619a      	str	r2, [r3, #24]
}
 810388a:	bf00      	nop
 810388c:	370c      	adds	r7, #12
 810388e:	46bd      	mov	sp, r7
 8103890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103894:	4770      	bx	lr

08103896 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8103896:	b580      	push	{r7, lr}
 8103898:	b082      	sub	sp, #8
 810389a:	af00      	add	r7, sp, #0
 810389c:	4603      	mov	r3, r0
 810389e:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 81038a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81038a4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 81038a8:	88fb      	ldrh	r3, [r7, #6]
 81038aa:	4013      	ands	r3, r2
 81038ac:	2b00      	cmp	r3, #0
 81038ae:	d008      	beq.n	81038c2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 81038b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81038b4:	88fb      	ldrh	r3, [r7, #6]
 81038b6:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 81038ba:	88fb      	ldrh	r3, [r7, #6]
 81038bc:	4618      	mov	r0, r3
 81038be:	f7ff f86b 	bl	8102998 <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 81038c2:	bf00      	nop
 81038c4:	3708      	adds	r7, #8
 81038c6:	46bd      	mov	sp, r7
 81038c8:	bd80      	pop	{r7, pc}
	...

081038cc <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81038cc:	b480      	push	{r7}
 81038ce:	b083      	sub	sp, #12
 81038d0:	af00      	add	r7, sp, #0
 81038d2:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81038d4:	4b05      	ldr	r3, [pc, #20]	; (81038ec <HAL_HSEM_ActivateNotification+0x20>)
 81038d6:	681a      	ldr	r2, [r3, #0]
 81038d8:	4904      	ldr	r1, [pc, #16]	; (81038ec <HAL_HSEM_ActivateNotification+0x20>)
 81038da:	687b      	ldr	r3, [r7, #4]
 81038dc:	4313      	orrs	r3, r2
 81038de:	600b      	str	r3, [r1, #0]
#endif
}
 81038e0:	bf00      	nop
 81038e2:	370c      	adds	r7, #12
 81038e4:	46bd      	mov	sp, r7
 81038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038ea:	4770      	bx	lr
 81038ec:	58026510 	.word	0x58026510

081038f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 81038f0:	b580      	push	{r7, lr}
 81038f2:	b082      	sub	sp, #8
 81038f4:	af00      	add	r7, sp, #0
 81038f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 81038f8:	687b      	ldr	r3, [r7, #4]
 81038fa:	2b00      	cmp	r3, #0
 81038fc:	d101      	bne.n	8103902 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 81038fe:	2301      	movs	r3, #1
 8103900:	e081      	b.n	8103a06 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8103902:	687b      	ldr	r3, [r7, #4]
 8103904:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103908:	b2db      	uxtb	r3, r3
 810390a:	2b00      	cmp	r3, #0
 810390c:	d106      	bne.n	810391c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 810390e:	687b      	ldr	r3, [r7, #4]
 8103910:	2200      	movs	r2, #0
 8103912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8103916:	6878      	ldr	r0, [r7, #4]
 8103918:	f7ff f8f2 	bl	8102b00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 810391c:	687b      	ldr	r3, [r7, #4]
 810391e:	2224      	movs	r2, #36	; 0x24
 8103920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8103924:	687b      	ldr	r3, [r7, #4]
 8103926:	681b      	ldr	r3, [r3, #0]
 8103928:	681a      	ldr	r2, [r3, #0]
 810392a:	687b      	ldr	r3, [r7, #4]
 810392c:	681b      	ldr	r3, [r3, #0]
 810392e:	f022 0201 	bic.w	r2, r2, #1
 8103932:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8103934:	687b      	ldr	r3, [r7, #4]
 8103936:	685a      	ldr	r2, [r3, #4]
 8103938:	687b      	ldr	r3, [r7, #4]
 810393a:	681b      	ldr	r3, [r3, #0]
 810393c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8103940:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8103942:	687b      	ldr	r3, [r7, #4]
 8103944:	681b      	ldr	r3, [r3, #0]
 8103946:	689a      	ldr	r2, [r3, #8]
 8103948:	687b      	ldr	r3, [r7, #4]
 810394a:	681b      	ldr	r3, [r3, #0]
 810394c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8103950:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8103952:	687b      	ldr	r3, [r7, #4]
 8103954:	68db      	ldr	r3, [r3, #12]
 8103956:	2b01      	cmp	r3, #1
 8103958:	d107      	bne.n	810396a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 810395a:	687b      	ldr	r3, [r7, #4]
 810395c:	689a      	ldr	r2, [r3, #8]
 810395e:	687b      	ldr	r3, [r7, #4]
 8103960:	681b      	ldr	r3, [r3, #0]
 8103962:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8103966:	609a      	str	r2, [r3, #8]
 8103968:	e006      	b.n	8103978 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 810396a:	687b      	ldr	r3, [r7, #4]
 810396c:	689a      	ldr	r2, [r3, #8]
 810396e:	687b      	ldr	r3, [r7, #4]
 8103970:	681b      	ldr	r3, [r3, #0]
 8103972:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8103976:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8103978:	687b      	ldr	r3, [r7, #4]
 810397a:	68db      	ldr	r3, [r3, #12]
 810397c:	2b02      	cmp	r3, #2
 810397e:	d104      	bne.n	810398a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8103980:	687b      	ldr	r3, [r7, #4]
 8103982:	681b      	ldr	r3, [r3, #0]
 8103984:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8103988:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 810398a:	687b      	ldr	r3, [r7, #4]
 810398c:	681b      	ldr	r3, [r3, #0]
 810398e:	685b      	ldr	r3, [r3, #4]
 8103990:	687a      	ldr	r2, [r7, #4]
 8103992:	6812      	ldr	r2, [r2, #0]
 8103994:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8103998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 810399c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 810399e:	687b      	ldr	r3, [r7, #4]
 81039a0:	681b      	ldr	r3, [r3, #0]
 81039a2:	68da      	ldr	r2, [r3, #12]
 81039a4:	687b      	ldr	r3, [r7, #4]
 81039a6:	681b      	ldr	r3, [r3, #0]
 81039a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81039ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 81039ae:	687b      	ldr	r3, [r7, #4]
 81039b0:	691a      	ldr	r2, [r3, #16]
 81039b2:	687b      	ldr	r3, [r7, #4]
 81039b4:	695b      	ldr	r3, [r3, #20]
 81039b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 81039ba:	687b      	ldr	r3, [r7, #4]
 81039bc:	699b      	ldr	r3, [r3, #24]
 81039be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 81039c0:	687b      	ldr	r3, [r7, #4]
 81039c2:	681b      	ldr	r3, [r3, #0]
 81039c4:	430a      	orrs	r2, r1
 81039c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 81039c8:	687b      	ldr	r3, [r7, #4]
 81039ca:	69d9      	ldr	r1, [r3, #28]
 81039cc:	687b      	ldr	r3, [r7, #4]
 81039ce:	6a1a      	ldr	r2, [r3, #32]
 81039d0:	687b      	ldr	r3, [r7, #4]
 81039d2:	681b      	ldr	r3, [r3, #0]
 81039d4:	430a      	orrs	r2, r1
 81039d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 81039d8:	687b      	ldr	r3, [r7, #4]
 81039da:	681b      	ldr	r3, [r3, #0]
 81039dc:	681a      	ldr	r2, [r3, #0]
 81039de:	687b      	ldr	r3, [r7, #4]
 81039e0:	681b      	ldr	r3, [r3, #0]
 81039e2:	f042 0201 	orr.w	r2, r2, #1
 81039e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81039e8:	687b      	ldr	r3, [r7, #4]
 81039ea:	2200      	movs	r2, #0
 81039ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 81039ee:	687b      	ldr	r3, [r7, #4]
 81039f0:	2220      	movs	r2, #32
 81039f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 81039f6:	687b      	ldr	r3, [r7, #4]
 81039f8:	2200      	movs	r2, #0
 81039fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 81039fc:	687b      	ldr	r3, [r7, #4]
 81039fe:	2200      	movs	r2, #0
 8103a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8103a04:	2300      	movs	r3, #0
}
 8103a06:	4618      	mov	r0, r3
 8103a08:	3708      	adds	r7, #8
 8103a0a:	46bd      	mov	sp, r7
 8103a0c:	bd80      	pop	{r7, pc}
	...

08103a10 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8103a10:	b580      	push	{r7, lr}
 8103a12:	b088      	sub	sp, #32
 8103a14:	af02      	add	r7, sp, #8
 8103a16:	60f8      	str	r0, [r7, #12]
 8103a18:	607a      	str	r2, [r7, #4]
 8103a1a:	461a      	mov	r2, r3
 8103a1c:	460b      	mov	r3, r1
 8103a1e:	817b      	strh	r3, [r7, #10]
 8103a20:	4613      	mov	r3, r2
 8103a22:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8103a24:	68fb      	ldr	r3, [r7, #12]
 8103a26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103a2a:	b2db      	uxtb	r3, r3
 8103a2c:	2b20      	cmp	r3, #32
 8103a2e:	f040 80da 	bne.w	8103be6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8103a32:	68fb      	ldr	r3, [r7, #12]
 8103a34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8103a38:	2b01      	cmp	r3, #1
 8103a3a:	d101      	bne.n	8103a40 <HAL_I2C_Master_Transmit+0x30>
 8103a3c:	2302      	movs	r3, #2
 8103a3e:	e0d3      	b.n	8103be8 <HAL_I2C_Master_Transmit+0x1d8>
 8103a40:	68fb      	ldr	r3, [r7, #12]
 8103a42:	2201      	movs	r2, #1
 8103a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8103a48:	f7ff fc08 	bl	810325c <HAL_GetTick>
 8103a4c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8103a4e:	697b      	ldr	r3, [r7, #20]
 8103a50:	9300      	str	r3, [sp, #0]
 8103a52:	2319      	movs	r3, #25
 8103a54:	2201      	movs	r2, #1
 8103a56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8103a5a:	68f8      	ldr	r0, [r7, #12]
 8103a5c:	f000 fa00 	bl	8103e60 <I2C_WaitOnFlagUntilTimeout>
 8103a60:	4603      	mov	r3, r0
 8103a62:	2b00      	cmp	r3, #0
 8103a64:	d001      	beq.n	8103a6a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8103a66:	2301      	movs	r3, #1
 8103a68:	e0be      	b.n	8103be8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8103a6a:	68fb      	ldr	r3, [r7, #12]
 8103a6c:	2221      	movs	r2, #33	; 0x21
 8103a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8103a72:	68fb      	ldr	r3, [r7, #12]
 8103a74:	2210      	movs	r2, #16
 8103a76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8103a7a:	68fb      	ldr	r3, [r7, #12]
 8103a7c:	2200      	movs	r2, #0
 8103a7e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8103a80:	68fb      	ldr	r3, [r7, #12]
 8103a82:	687a      	ldr	r2, [r7, #4]
 8103a84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8103a86:	68fb      	ldr	r3, [r7, #12]
 8103a88:	893a      	ldrh	r2, [r7, #8]
 8103a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8103a8c:	68fb      	ldr	r3, [r7, #12]
 8103a8e:	2200      	movs	r2, #0
 8103a90:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103a92:	68fb      	ldr	r3, [r7, #12]
 8103a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103a96:	b29b      	uxth	r3, r3
 8103a98:	2bff      	cmp	r3, #255	; 0xff
 8103a9a:	d90e      	bls.n	8103aba <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8103a9c:	68fb      	ldr	r3, [r7, #12]
 8103a9e:	22ff      	movs	r2, #255	; 0xff
 8103aa0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8103aa2:	68fb      	ldr	r3, [r7, #12]
 8103aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103aa6:	b2da      	uxtb	r2, r3
 8103aa8:	8979      	ldrh	r1, [r7, #10]
 8103aaa:	4b51      	ldr	r3, [pc, #324]	; (8103bf0 <HAL_I2C_Master_Transmit+0x1e0>)
 8103aac:	9300      	str	r3, [sp, #0]
 8103aae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8103ab2:	68f8      	ldr	r0, [r7, #12]
 8103ab4:	f000 fbf6 	bl	81042a4 <I2C_TransferConfig>
 8103ab8:	e06c      	b.n	8103b94 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8103aba:	68fb      	ldr	r3, [r7, #12]
 8103abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103abe:	b29a      	uxth	r2, r3
 8103ac0:	68fb      	ldr	r3, [r7, #12]
 8103ac2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8103ac4:	68fb      	ldr	r3, [r7, #12]
 8103ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103ac8:	b2da      	uxtb	r2, r3
 8103aca:	8979      	ldrh	r1, [r7, #10]
 8103acc:	4b48      	ldr	r3, [pc, #288]	; (8103bf0 <HAL_I2C_Master_Transmit+0x1e0>)
 8103ace:	9300      	str	r3, [sp, #0]
 8103ad0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8103ad4:	68f8      	ldr	r0, [r7, #12]
 8103ad6:	f000 fbe5 	bl	81042a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8103ada:	e05b      	b.n	8103b94 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8103adc:	697a      	ldr	r2, [r7, #20]
 8103ade:	6a39      	ldr	r1, [r7, #32]
 8103ae0:	68f8      	ldr	r0, [r7, #12]
 8103ae2:	f000 f9fd 	bl	8103ee0 <I2C_WaitOnTXISFlagUntilTimeout>
 8103ae6:	4603      	mov	r3, r0
 8103ae8:	2b00      	cmp	r3, #0
 8103aea:	d001      	beq.n	8103af0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8103aec:	2301      	movs	r3, #1
 8103aee:	e07b      	b.n	8103be8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8103af0:	68fb      	ldr	r3, [r7, #12]
 8103af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103af4:	781a      	ldrb	r2, [r3, #0]
 8103af6:	68fb      	ldr	r3, [r7, #12]
 8103af8:	681b      	ldr	r3, [r3, #0]
 8103afa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8103afc:	68fb      	ldr	r3, [r7, #12]
 8103afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103b00:	1c5a      	adds	r2, r3, #1
 8103b02:	68fb      	ldr	r3, [r7, #12]
 8103b04:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8103b06:	68fb      	ldr	r3, [r7, #12]
 8103b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103b0a:	b29b      	uxth	r3, r3
 8103b0c:	3b01      	subs	r3, #1
 8103b0e:	b29a      	uxth	r2, r3
 8103b10:	68fb      	ldr	r3, [r7, #12]
 8103b12:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8103b14:	68fb      	ldr	r3, [r7, #12]
 8103b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103b18:	3b01      	subs	r3, #1
 8103b1a:	b29a      	uxth	r2, r3
 8103b1c:	68fb      	ldr	r3, [r7, #12]
 8103b1e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8103b20:	68fb      	ldr	r3, [r7, #12]
 8103b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103b24:	b29b      	uxth	r3, r3
 8103b26:	2b00      	cmp	r3, #0
 8103b28:	d034      	beq.n	8103b94 <HAL_I2C_Master_Transmit+0x184>
 8103b2a:	68fb      	ldr	r3, [r7, #12]
 8103b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103b2e:	2b00      	cmp	r3, #0
 8103b30:	d130      	bne.n	8103b94 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8103b32:	697b      	ldr	r3, [r7, #20]
 8103b34:	9300      	str	r3, [sp, #0]
 8103b36:	6a3b      	ldr	r3, [r7, #32]
 8103b38:	2200      	movs	r2, #0
 8103b3a:	2180      	movs	r1, #128	; 0x80
 8103b3c:	68f8      	ldr	r0, [r7, #12]
 8103b3e:	f000 f98f 	bl	8103e60 <I2C_WaitOnFlagUntilTimeout>
 8103b42:	4603      	mov	r3, r0
 8103b44:	2b00      	cmp	r3, #0
 8103b46:	d001      	beq.n	8103b4c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8103b48:	2301      	movs	r3, #1
 8103b4a:	e04d      	b.n	8103be8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103b4c:	68fb      	ldr	r3, [r7, #12]
 8103b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103b50:	b29b      	uxth	r3, r3
 8103b52:	2bff      	cmp	r3, #255	; 0xff
 8103b54:	d90e      	bls.n	8103b74 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8103b56:	68fb      	ldr	r3, [r7, #12]
 8103b58:	22ff      	movs	r2, #255	; 0xff
 8103b5a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8103b5c:	68fb      	ldr	r3, [r7, #12]
 8103b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103b60:	b2da      	uxtb	r2, r3
 8103b62:	8979      	ldrh	r1, [r7, #10]
 8103b64:	2300      	movs	r3, #0
 8103b66:	9300      	str	r3, [sp, #0]
 8103b68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8103b6c:	68f8      	ldr	r0, [r7, #12]
 8103b6e:	f000 fb99 	bl	81042a4 <I2C_TransferConfig>
 8103b72:	e00f      	b.n	8103b94 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8103b74:	68fb      	ldr	r3, [r7, #12]
 8103b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103b78:	b29a      	uxth	r2, r3
 8103b7a:	68fb      	ldr	r3, [r7, #12]
 8103b7c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8103b7e:	68fb      	ldr	r3, [r7, #12]
 8103b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103b82:	b2da      	uxtb	r2, r3
 8103b84:	8979      	ldrh	r1, [r7, #10]
 8103b86:	2300      	movs	r3, #0
 8103b88:	9300      	str	r3, [sp, #0]
 8103b8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8103b8e:	68f8      	ldr	r0, [r7, #12]
 8103b90:	f000 fb88 	bl	81042a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8103b94:	68fb      	ldr	r3, [r7, #12]
 8103b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103b98:	b29b      	uxth	r3, r3
 8103b9a:	2b00      	cmp	r3, #0
 8103b9c:	d19e      	bne.n	8103adc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8103b9e:	697a      	ldr	r2, [r7, #20]
 8103ba0:	6a39      	ldr	r1, [r7, #32]
 8103ba2:	68f8      	ldr	r0, [r7, #12]
 8103ba4:	f000 f9dc 	bl	8103f60 <I2C_WaitOnSTOPFlagUntilTimeout>
 8103ba8:	4603      	mov	r3, r0
 8103baa:	2b00      	cmp	r3, #0
 8103bac:	d001      	beq.n	8103bb2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8103bae:	2301      	movs	r3, #1
 8103bb0:	e01a      	b.n	8103be8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8103bb2:	68fb      	ldr	r3, [r7, #12]
 8103bb4:	681b      	ldr	r3, [r3, #0]
 8103bb6:	2220      	movs	r2, #32
 8103bb8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8103bba:	68fb      	ldr	r3, [r7, #12]
 8103bbc:	681b      	ldr	r3, [r3, #0]
 8103bbe:	6859      	ldr	r1, [r3, #4]
 8103bc0:	68fb      	ldr	r3, [r7, #12]
 8103bc2:	681a      	ldr	r2, [r3, #0]
 8103bc4:	4b0b      	ldr	r3, [pc, #44]	; (8103bf4 <HAL_I2C_Master_Transmit+0x1e4>)
 8103bc6:	400b      	ands	r3, r1
 8103bc8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8103bca:	68fb      	ldr	r3, [r7, #12]
 8103bcc:	2220      	movs	r2, #32
 8103bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8103bd2:	68fb      	ldr	r3, [r7, #12]
 8103bd4:	2200      	movs	r2, #0
 8103bd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103bda:	68fb      	ldr	r3, [r7, #12]
 8103bdc:	2200      	movs	r2, #0
 8103bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8103be2:	2300      	movs	r3, #0
 8103be4:	e000      	b.n	8103be8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8103be6:	2302      	movs	r3, #2
  }
}
 8103be8:	4618      	mov	r0, r3
 8103bea:	3718      	adds	r7, #24
 8103bec:	46bd      	mov	sp, r7
 8103bee:	bd80      	pop	{r7, pc}
 8103bf0:	80002000 	.word	0x80002000
 8103bf4:	fe00e800 	.word	0xfe00e800

08103bf8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8103bf8:	b580      	push	{r7, lr}
 8103bfa:	b088      	sub	sp, #32
 8103bfc:	af02      	add	r7, sp, #8
 8103bfe:	60f8      	str	r0, [r7, #12]
 8103c00:	607a      	str	r2, [r7, #4]
 8103c02:	461a      	mov	r2, r3
 8103c04:	460b      	mov	r3, r1
 8103c06:	817b      	strh	r3, [r7, #10]
 8103c08:	4613      	mov	r3, r2
 8103c0a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8103c0c:	68fb      	ldr	r3, [r7, #12]
 8103c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103c12:	b2db      	uxtb	r3, r3
 8103c14:	2b20      	cmp	r3, #32
 8103c16:	f040 80db 	bne.w	8103dd0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8103c1a:	68fb      	ldr	r3, [r7, #12]
 8103c1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8103c20:	2b01      	cmp	r3, #1
 8103c22:	d101      	bne.n	8103c28 <HAL_I2C_Master_Receive+0x30>
 8103c24:	2302      	movs	r3, #2
 8103c26:	e0d4      	b.n	8103dd2 <HAL_I2C_Master_Receive+0x1da>
 8103c28:	68fb      	ldr	r3, [r7, #12]
 8103c2a:	2201      	movs	r2, #1
 8103c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8103c30:	f7ff fb14 	bl	810325c <HAL_GetTick>
 8103c34:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8103c36:	697b      	ldr	r3, [r7, #20]
 8103c38:	9300      	str	r3, [sp, #0]
 8103c3a:	2319      	movs	r3, #25
 8103c3c:	2201      	movs	r2, #1
 8103c3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8103c42:	68f8      	ldr	r0, [r7, #12]
 8103c44:	f000 f90c 	bl	8103e60 <I2C_WaitOnFlagUntilTimeout>
 8103c48:	4603      	mov	r3, r0
 8103c4a:	2b00      	cmp	r3, #0
 8103c4c:	d001      	beq.n	8103c52 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8103c4e:	2301      	movs	r3, #1
 8103c50:	e0bf      	b.n	8103dd2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8103c52:	68fb      	ldr	r3, [r7, #12]
 8103c54:	2222      	movs	r2, #34	; 0x22
 8103c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8103c5a:	68fb      	ldr	r3, [r7, #12]
 8103c5c:	2210      	movs	r2, #16
 8103c5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8103c62:	68fb      	ldr	r3, [r7, #12]
 8103c64:	2200      	movs	r2, #0
 8103c66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8103c68:	68fb      	ldr	r3, [r7, #12]
 8103c6a:	687a      	ldr	r2, [r7, #4]
 8103c6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8103c6e:	68fb      	ldr	r3, [r7, #12]
 8103c70:	893a      	ldrh	r2, [r7, #8]
 8103c72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8103c74:	68fb      	ldr	r3, [r7, #12]
 8103c76:	2200      	movs	r2, #0
 8103c78:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103c7a:	68fb      	ldr	r3, [r7, #12]
 8103c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103c7e:	b29b      	uxth	r3, r3
 8103c80:	2bff      	cmp	r3, #255	; 0xff
 8103c82:	d90e      	bls.n	8103ca2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8103c84:	68fb      	ldr	r3, [r7, #12]
 8103c86:	22ff      	movs	r2, #255	; 0xff
 8103c88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8103c8a:	68fb      	ldr	r3, [r7, #12]
 8103c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103c8e:	b2da      	uxtb	r2, r3
 8103c90:	8979      	ldrh	r1, [r7, #10]
 8103c92:	4b52      	ldr	r3, [pc, #328]	; (8103ddc <HAL_I2C_Master_Receive+0x1e4>)
 8103c94:	9300      	str	r3, [sp, #0]
 8103c96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8103c9a:	68f8      	ldr	r0, [r7, #12]
 8103c9c:	f000 fb02 	bl	81042a4 <I2C_TransferConfig>
 8103ca0:	e06d      	b.n	8103d7e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8103ca2:	68fb      	ldr	r3, [r7, #12]
 8103ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103ca6:	b29a      	uxth	r2, r3
 8103ca8:	68fb      	ldr	r3, [r7, #12]
 8103caa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8103cac:	68fb      	ldr	r3, [r7, #12]
 8103cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103cb0:	b2da      	uxtb	r2, r3
 8103cb2:	8979      	ldrh	r1, [r7, #10]
 8103cb4:	4b49      	ldr	r3, [pc, #292]	; (8103ddc <HAL_I2C_Master_Receive+0x1e4>)
 8103cb6:	9300      	str	r3, [sp, #0]
 8103cb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8103cbc:	68f8      	ldr	r0, [r7, #12]
 8103cbe:	f000 faf1 	bl	81042a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8103cc2:	e05c      	b.n	8103d7e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8103cc4:	697a      	ldr	r2, [r7, #20]
 8103cc6:	6a39      	ldr	r1, [r7, #32]
 8103cc8:	68f8      	ldr	r0, [r7, #12]
 8103cca:	f000 f985 	bl	8103fd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8103cce:	4603      	mov	r3, r0
 8103cd0:	2b00      	cmp	r3, #0
 8103cd2:	d001      	beq.n	8103cd8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8103cd4:	2301      	movs	r3, #1
 8103cd6:	e07c      	b.n	8103dd2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8103cd8:	68fb      	ldr	r3, [r7, #12]
 8103cda:	681b      	ldr	r3, [r3, #0]
 8103cdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8103cde:	68fb      	ldr	r3, [r7, #12]
 8103ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103ce2:	b2d2      	uxtb	r2, r2
 8103ce4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8103ce6:	68fb      	ldr	r3, [r7, #12]
 8103ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103cea:	1c5a      	adds	r2, r3, #1
 8103cec:	68fb      	ldr	r3, [r7, #12]
 8103cee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8103cf0:	68fb      	ldr	r3, [r7, #12]
 8103cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103cf4:	3b01      	subs	r3, #1
 8103cf6:	b29a      	uxth	r2, r3
 8103cf8:	68fb      	ldr	r3, [r7, #12]
 8103cfa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8103cfc:	68fb      	ldr	r3, [r7, #12]
 8103cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103d00:	b29b      	uxth	r3, r3
 8103d02:	3b01      	subs	r3, #1
 8103d04:	b29a      	uxth	r2, r3
 8103d06:	68fb      	ldr	r3, [r7, #12]
 8103d08:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8103d0a:	68fb      	ldr	r3, [r7, #12]
 8103d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103d0e:	b29b      	uxth	r3, r3
 8103d10:	2b00      	cmp	r3, #0
 8103d12:	d034      	beq.n	8103d7e <HAL_I2C_Master_Receive+0x186>
 8103d14:	68fb      	ldr	r3, [r7, #12]
 8103d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103d18:	2b00      	cmp	r3, #0
 8103d1a:	d130      	bne.n	8103d7e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8103d1c:	697b      	ldr	r3, [r7, #20]
 8103d1e:	9300      	str	r3, [sp, #0]
 8103d20:	6a3b      	ldr	r3, [r7, #32]
 8103d22:	2200      	movs	r2, #0
 8103d24:	2180      	movs	r1, #128	; 0x80
 8103d26:	68f8      	ldr	r0, [r7, #12]
 8103d28:	f000 f89a 	bl	8103e60 <I2C_WaitOnFlagUntilTimeout>
 8103d2c:	4603      	mov	r3, r0
 8103d2e:	2b00      	cmp	r3, #0
 8103d30:	d001      	beq.n	8103d36 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8103d32:	2301      	movs	r3, #1
 8103d34:	e04d      	b.n	8103dd2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103d36:	68fb      	ldr	r3, [r7, #12]
 8103d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103d3a:	b29b      	uxth	r3, r3
 8103d3c:	2bff      	cmp	r3, #255	; 0xff
 8103d3e:	d90e      	bls.n	8103d5e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8103d40:	68fb      	ldr	r3, [r7, #12]
 8103d42:	22ff      	movs	r2, #255	; 0xff
 8103d44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8103d46:	68fb      	ldr	r3, [r7, #12]
 8103d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103d4a:	b2da      	uxtb	r2, r3
 8103d4c:	8979      	ldrh	r1, [r7, #10]
 8103d4e:	2300      	movs	r3, #0
 8103d50:	9300      	str	r3, [sp, #0]
 8103d52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8103d56:	68f8      	ldr	r0, [r7, #12]
 8103d58:	f000 faa4 	bl	81042a4 <I2C_TransferConfig>
 8103d5c:	e00f      	b.n	8103d7e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8103d5e:	68fb      	ldr	r3, [r7, #12]
 8103d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103d62:	b29a      	uxth	r2, r3
 8103d64:	68fb      	ldr	r3, [r7, #12]
 8103d66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8103d68:	68fb      	ldr	r3, [r7, #12]
 8103d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103d6c:	b2da      	uxtb	r2, r3
 8103d6e:	8979      	ldrh	r1, [r7, #10]
 8103d70:	2300      	movs	r3, #0
 8103d72:	9300      	str	r3, [sp, #0]
 8103d74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8103d78:	68f8      	ldr	r0, [r7, #12]
 8103d7a:	f000 fa93 	bl	81042a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8103d7e:	68fb      	ldr	r3, [r7, #12]
 8103d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103d82:	b29b      	uxth	r3, r3
 8103d84:	2b00      	cmp	r3, #0
 8103d86:	d19d      	bne.n	8103cc4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8103d88:	697a      	ldr	r2, [r7, #20]
 8103d8a:	6a39      	ldr	r1, [r7, #32]
 8103d8c:	68f8      	ldr	r0, [r7, #12]
 8103d8e:	f000 f8e7 	bl	8103f60 <I2C_WaitOnSTOPFlagUntilTimeout>
 8103d92:	4603      	mov	r3, r0
 8103d94:	2b00      	cmp	r3, #0
 8103d96:	d001      	beq.n	8103d9c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8103d98:	2301      	movs	r3, #1
 8103d9a:	e01a      	b.n	8103dd2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8103d9c:	68fb      	ldr	r3, [r7, #12]
 8103d9e:	681b      	ldr	r3, [r3, #0]
 8103da0:	2220      	movs	r2, #32
 8103da2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8103da4:	68fb      	ldr	r3, [r7, #12]
 8103da6:	681b      	ldr	r3, [r3, #0]
 8103da8:	6859      	ldr	r1, [r3, #4]
 8103daa:	68fb      	ldr	r3, [r7, #12]
 8103dac:	681a      	ldr	r2, [r3, #0]
 8103dae:	4b0c      	ldr	r3, [pc, #48]	; (8103de0 <HAL_I2C_Master_Receive+0x1e8>)
 8103db0:	400b      	ands	r3, r1
 8103db2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8103db4:	68fb      	ldr	r3, [r7, #12]
 8103db6:	2220      	movs	r2, #32
 8103db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8103dbc:	68fb      	ldr	r3, [r7, #12]
 8103dbe:	2200      	movs	r2, #0
 8103dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103dc4:	68fb      	ldr	r3, [r7, #12]
 8103dc6:	2200      	movs	r2, #0
 8103dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8103dcc:	2300      	movs	r3, #0
 8103dce:	e000      	b.n	8103dd2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8103dd0:	2302      	movs	r3, #2
  }
}
 8103dd2:	4618      	mov	r0, r3
 8103dd4:	3718      	adds	r7, #24
 8103dd6:	46bd      	mov	sp, r7
 8103dd8:	bd80      	pop	{r7, pc}
 8103dda:	bf00      	nop
 8103ddc:	80002400 	.word	0x80002400
 8103de0:	fe00e800 	.word	0xfe00e800

08103de4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8103de4:	b480      	push	{r7}
 8103de6:	b083      	sub	sp, #12
 8103de8:	af00      	add	r7, sp, #0
 8103dea:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8103dec:	687b      	ldr	r3, [r7, #4]
 8103dee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103df2:	b2db      	uxtb	r3, r3
}
 8103df4:	4618      	mov	r0, r3
 8103df6:	370c      	adds	r7, #12
 8103df8:	46bd      	mov	sp, r7
 8103dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103dfe:	4770      	bx	lr

08103e00 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8103e00:	b480      	push	{r7}
 8103e02:	b083      	sub	sp, #12
 8103e04:	af00      	add	r7, sp, #0
 8103e06:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8103e08:	687b      	ldr	r3, [r7, #4]
 8103e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8103e0c:	4618      	mov	r0, r3
 8103e0e:	370c      	adds	r7, #12
 8103e10:	46bd      	mov	sp, r7
 8103e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e16:	4770      	bx	lr

08103e18 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8103e18:	b480      	push	{r7}
 8103e1a:	b083      	sub	sp, #12
 8103e1c:	af00      	add	r7, sp, #0
 8103e1e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8103e20:	687b      	ldr	r3, [r7, #4]
 8103e22:	681b      	ldr	r3, [r3, #0]
 8103e24:	699b      	ldr	r3, [r3, #24]
 8103e26:	f003 0302 	and.w	r3, r3, #2
 8103e2a:	2b02      	cmp	r3, #2
 8103e2c:	d103      	bne.n	8103e36 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8103e2e:	687b      	ldr	r3, [r7, #4]
 8103e30:	681b      	ldr	r3, [r3, #0]
 8103e32:	2200      	movs	r2, #0
 8103e34:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8103e36:	687b      	ldr	r3, [r7, #4]
 8103e38:	681b      	ldr	r3, [r3, #0]
 8103e3a:	699b      	ldr	r3, [r3, #24]
 8103e3c:	f003 0301 	and.w	r3, r3, #1
 8103e40:	2b01      	cmp	r3, #1
 8103e42:	d007      	beq.n	8103e54 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8103e44:	687b      	ldr	r3, [r7, #4]
 8103e46:	681b      	ldr	r3, [r3, #0]
 8103e48:	699a      	ldr	r2, [r3, #24]
 8103e4a:	687b      	ldr	r3, [r7, #4]
 8103e4c:	681b      	ldr	r3, [r3, #0]
 8103e4e:	f042 0201 	orr.w	r2, r2, #1
 8103e52:	619a      	str	r2, [r3, #24]
  }
}
 8103e54:	bf00      	nop
 8103e56:	370c      	adds	r7, #12
 8103e58:	46bd      	mov	sp, r7
 8103e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e5e:	4770      	bx	lr

08103e60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8103e60:	b580      	push	{r7, lr}
 8103e62:	b084      	sub	sp, #16
 8103e64:	af00      	add	r7, sp, #0
 8103e66:	60f8      	str	r0, [r7, #12]
 8103e68:	60b9      	str	r1, [r7, #8]
 8103e6a:	603b      	str	r3, [r7, #0]
 8103e6c:	4613      	mov	r3, r2
 8103e6e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8103e70:	e022      	b.n	8103eb8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8103e72:	683b      	ldr	r3, [r7, #0]
 8103e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103e78:	d01e      	beq.n	8103eb8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8103e7a:	f7ff f9ef 	bl	810325c <HAL_GetTick>
 8103e7e:	4602      	mov	r2, r0
 8103e80:	69bb      	ldr	r3, [r7, #24]
 8103e82:	1ad3      	subs	r3, r2, r3
 8103e84:	683a      	ldr	r2, [r7, #0]
 8103e86:	429a      	cmp	r2, r3
 8103e88:	d302      	bcc.n	8103e90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8103e8a:	683b      	ldr	r3, [r7, #0]
 8103e8c:	2b00      	cmp	r3, #0
 8103e8e:	d113      	bne.n	8103eb8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8103e90:	68fb      	ldr	r3, [r7, #12]
 8103e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103e94:	f043 0220 	orr.w	r2, r3, #32
 8103e98:	68fb      	ldr	r3, [r7, #12]
 8103e9a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8103e9c:	68fb      	ldr	r3, [r7, #12]
 8103e9e:	2220      	movs	r2, #32
 8103ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8103ea4:	68fb      	ldr	r3, [r7, #12]
 8103ea6:	2200      	movs	r2, #0
 8103ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8103eac:	68fb      	ldr	r3, [r7, #12]
 8103eae:	2200      	movs	r2, #0
 8103eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8103eb4:	2301      	movs	r3, #1
 8103eb6:	e00f      	b.n	8103ed8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8103eb8:	68fb      	ldr	r3, [r7, #12]
 8103eba:	681b      	ldr	r3, [r3, #0]
 8103ebc:	699a      	ldr	r2, [r3, #24]
 8103ebe:	68bb      	ldr	r3, [r7, #8]
 8103ec0:	4013      	ands	r3, r2
 8103ec2:	68ba      	ldr	r2, [r7, #8]
 8103ec4:	429a      	cmp	r2, r3
 8103ec6:	bf0c      	ite	eq
 8103ec8:	2301      	moveq	r3, #1
 8103eca:	2300      	movne	r3, #0
 8103ecc:	b2db      	uxtb	r3, r3
 8103ece:	461a      	mov	r2, r3
 8103ed0:	79fb      	ldrb	r3, [r7, #7]
 8103ed2:	429a      	cmp	r2, r3
 8103ed4:	d0cd      	beq.n	8103e72 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8103ed6:	2300      	movs	r3, #0
}
 8103ed8:	4618      	mov	r0, r3
 8103eda:	3710      	adds	r7, #16
 8103edc:	46bd      	mov	sp, r7
 8103ede:	bd80      	pop	{r7, pc}

08103ee0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8103ee0:	b580      	push	{r7, lr}
 8103ee2:	b084      	sub	sp, #16
 8103ee4:	af00      	add	r7, sp, #0
 8103ee6:	60f8      	str	r0, [r7, #12]
 8103ee8:	60b9      	str	r1, [r7, #8]
 8103eea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8103eec:	e02c      	b.n	8103f48 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8103eee:	687a      	ldr	r2, [r7, #4]
 8103ef0:	68b9      	ldr	r1, [r7, #8]
 8103ef2:	68f8      	ldr	r0, [r7, #12]
 8103ef4:	f000 f8ea 	bl	81040cc <I2C_IsErrorOccurred>
 8103ef8:	4603      	mov	r3, r0
 8103efa:	2b00      	cmp	r3, #0
 8103efc:	d001      	beq.n	8103f02 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8103efe:	2301      	movs	r3, #1
 8103f00:	e02a      	b.n	8103f58 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8103f02:	68bb      	ldr	r3, [r7, #8]
 8103f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103f08:	d01e      	beq.n	8103f48 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8103f0a:	f7ff f9a7 	bl	810325c <HAL_GetTick>
 8103f0e:	4602      	mov	r2, r0
 8103f10:	687b      	ldr	r3, [r7, #4]
 8103f12:	1ad3      	subs	r3, r2, r3
 8103f14:	68ba      	ldr	r2, [r7, #8]
 8103f16:	429a      	cmp	r2, r3
 8103f18:	d302      	bcc.n	8103f20 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8103f1a:	68bb      	ldr	r3, [r7, #8]
 8103f1c:	2b00      	cmp	r3, #0
 8103f1e:	d113      	bne.n	8103f48 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8103f20:	68fb      	ldr	r3, [r7, #12]
 8103f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103f24:	f043 0220 	orr.w	r2, r3, #32
 8103f28:	68fb      	ldr	r3, [r7, #12]
 8103f2a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8103f2c:	68fb      	ldr	r3, [r7, #12]
 8103f2e:	2220      	movs	r2, #32
 8103f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8103f34:	68fb      	ldr	r3, [r7, #12]
 8103f36:	2200      	movs	r2, #0
 8103f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8103f3c:	68fb      	ldr	r3, [r7, #12]
 8103f3e:	2200      	movs	r2, #0
 8103f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8103f44:	2301      	movs	r3, #1
 8103f46:	e007      	b.n	8103f58 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8103f48:	68fb      	ldr	r3, [r7, #12]
 8103f4a:	681b      	ldr	r3, [r3, #0]
 8103f4c:	699b      	ldr	r3, [r3, #24]
 8103f4e:	f003 0302 	and.w	r3, r3, #2
 8103f52:	2b02      	cmp	r3, #2
 8103f54:	d1cb      	bne.n	8103eee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8103f56:	2300      	movs	r3, #0
}
 8103f58:	4618      	mov	r0, r3
 8103f5a:	3710      	adds	r7, #16
 8103f5c:	46bd      	mov	sp, r7
 8103f5e:	bd80      	pop	{r7, pc}

08103f60 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8103f60:	b580      	push	{r7, lr}
 8103f62:	b084      	sub	sp, #16
 8103f64:	af00      	add	r7, sp, #0
 8103f66:	60f8      	str	r0, [r7, #12]
 8103f68:	60b9      	str	r1, [r7, #8]
 8103f6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8103f6c:	e028      	b.n	8103fc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8103f6e:	687a      	ldr	r2, [r7, #4]
 8103f70:	68b9      	ldr	r1, [r7, #8]
 8103f72:	68f8      	ldr	r0, [r7, #12]
 8103f74:	f000 f8aa 	bl	81040cc <I2C_IsErrorOccurred>
 8103f78:	4603      	mov	r3, r0
 8103f7a:	2b00      	cmp	r3, #0
 8103f7c:	d001      	beq.n	8103f82 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8103f7e:	2301      	movs	r3, #1
 8103f80:	e026      	b.n	8103fd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8103f82:	f7ff f96b 	bl	810325c <HAL_GetTick>
 8103f86:	4602      	mov	r2, r0
 8103f88:	687b      	ldr	r3, [r7, #4]
 8103f8a:	1ad3      	subs	r3, r2, r3
 8103f8c:	68ba      	ldr	r2, [r7, #8]
 8103f8e:	429a      	cmp	r2, r3
 8103f90:	d302      	bcc.n	8103f98 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8103f92:	68bb      	ldr	r3, [r7, #8]
 8103f94:	2b00      	cmp	r3, #0
 8103f96:	d113      	bne.n	8103fc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8103f98:	68fb      	ldr	r3, [r7, #12]
 8103f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103f9c:	f043 0220 	orr.w	r2, r3, #32
 8103fa0:	68fb      	ldr	r3, [r7, #12]
 8103fa2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8103fa4:	68fb      	ldr	r3, [r7, #12]
 8103fa6:	2220      	movs	r2, #32
 8103fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8103fac:	68fb      	ldr	r3, [r7, #12]
 8103fae:	2200      	movs	r2, #0
 8103fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8103fb4:	68fb      	ldr	r3, [r7, #12]
 8103fb6:	2200      	movs	r2, #0
 8103fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8103fbc:	2301      	movs	r3, #1
 8103fbe:	e007      	b.n	8103fd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8103fc0:	68fb      	ldr	r3, [r7, #12]
 8103fc2:	681b      	ldr	r3, [r3, #0]
 8103fc4:	699b      	ldr	r3, [r3, #24]
 8103fc6:	f003 0320 	and.w	r3, r3, #32
 8103fca:	2b20      	cmp	r3, #32
 8103fcc:	d1cf      	bne.n	8103f6e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8103fce:	2300      	movs	r3, #0
}
 8103fd0:	4618      	mov	r0, r3
 8103fd2:	3710      	adds	r7, #16
 8103fd4:	46bd      	mov	sp, r7
 8103fd6:	bd80      	pop	{r7, pc}

08103fd8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8103fd8:	b580      	push	{r7, lr}
 8103fda:	b084      	sub	sp, #16
 8103fdc:	af00      	add	r7, sp, #0
 8103fde:	60f8      	str	r0, [r7, #12]
 8103fe0:	60b9      	str	r1, [r7, #8]
 8103fe2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8103fe4:	e064      	b.n	81040b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8103fe6:	687a      	ldr	r2, [r7, #4]
 8103fe8:	68b9      	ldr	r1, [r7, #8]
 8103fea:	68f8      	ldr	r0, [r7, #12]
 8103fec:	f000 f86e 	bl	81040cc <I2C_IsErrorOccurred>
 8103ff0:	4603      	mov	r3, r0
 8103ff2:	2b00      	cmp	r3, #0
 8103ff4:	d001      	beq.n	8103ffa <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8103ff6:	2301      	movs	r3, #1
 8103ff8:	e062      	b.n	81040c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8103ffa:	68fb      	ldr	r3, [r7, #12]
 8103ffc:	681b      	ldr	r3, [r3, #0]
 8103ffe:	699b      	ldr	r3, [r3, #24]
 8104000:	f003 0320 	and.w	r3, r3, #32
 8104004:	2b20      	cmp	r3, #32
 8104006:	d138      	bne.n	810407a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8104008:	68fb      	ldr	r3, [r7, #12]
 810400a:	681b      	ldr	r3, [r3, #0]
 810400c:	699b      	ldr	r3, [r3, #24]
 810400e:	f003 0304 	and.w	r3, r3, #4
 8104012:	2b04      	cmp	r3, #4
 8104014:	d105      	bne.n	8104022 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8104016:	68fb      	ldr	r3, [r7, #12]
 8104018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810401a:	2b00      	cmp	r3, #0
 810401c:	d001      	beq.n	8104022 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 810401e:	2300      	movs	r3, #0
 8104020:	e04e      	b.n	81040c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8104022:	68fb      	ldr	r3, [r7, #12]
 8104024:	681b      	ldr	r3, [r3, #0]
 8104026:	699b      	ldr	r3, [r3, #24]
 8104028:	f003 0310 	and.w	r3, r3, #16
 810402c:	2b10      	cmp	r3, #16
 810402e:	d107      	bne.n	8104040 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8104030:	68fb      	ldr	r3, [r7, #12]
 8104032:	681b      	ldr	r3, [r3, #0]
 8104034:	2210      	movs	r2, #16
 8104036:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8104038:	68fb      	ldr	r3, [r7, #12]
 810403a:	2204      	movs	r2, #4
 810403c:	645a      	str	r2, [r3, #68]	; 0x44
 810403e:	e002      	b.n	8104046 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104040:	68fb      	ldr	r3, [r7, #12]
 8104042:	2200      	movs	r2, #0
 8104044:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104046:	68fb      	ldr	r3, [r7, #12]
 8104048:	681b      	ldr	r3, [r3, #0]
 810404a:	2220      	movs	r2, #32
 810404c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 810404e:	68fb      	ldr	r3, [r7, #12]
 8104050:	681b      	ldr	r3, [r3, #0]
 8104052:	6859      	ldr	r1, [r3, #4]
 8104054:	68fb      	ldr	r3, [r7, #12]
 8104056:	681a      	ldr	r2, [r3, #0]
 8104058:	4b1b      	ldr	r3, [pc, #108]	; (81040c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 810405a:	400b      	ands	r3, r1
 810405c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 810405e:	68fb      	ldr	r3, [r7, #12]
 8104060:	2220      	movs	r2, #32
 8104062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8104066:	68fb      	ldr	r3, [r7, #12]
 8104068:	2200      	movs	r2, #0
 810406a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 810406e:	68fb      	ldr	r3, [r7, #12]
 8104070:	2200      	movs	r2, #0
 8104072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8104076:	2301      	movs	r3, #1
 8104078:	e022      	b.n	81040c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810407a:	f7ff f8ef 	bl	810325c <HAL_GetTick>
 810407e:	4602      	mov	r2, r0
 8104080:	687b      	ldr	r3, [r7, #4]
 8104082:	1ad3      	subs	r3, r2, r3
 8104084:	68ba      	ldr	r2, [r7, #8]
 8104086:	429a      	cmp	r2, r3
 8104088:	d302      	bcc.n	8104090 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 810408a:	68bb      	ldr	r3, [r7, #8]
 810408c:	2b00      	cmp	r3, #0
 810408e:	d10f      	bne.n	81040b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104090:	68fb      	ldr	r3, [r7, #12]
 8104092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104094:	f043 0220 	orr.w	r2, r3, #32
 8104098:	68fb      	ldr	r3, [r7, #12]
 810409a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 810409c:	68fb      	ldr	r3, [r7, #12]
 810409e:	2220      	movs	r2, #32
 81040a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81040a4:	68fb      	ldr	r3, [r7, #12]
 81040a6:	2200      	movs	r2, #0
 81040a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 81040ac:	2301      	movs	r3, #1
 81040ae:	e007      	b.n	81040c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 81040b0:	68fb      	ldr	r3, [r7, #12]
 81040b2:	681b      	ldr	r3, [r3, #0]
 81040b4:	699b      	ldr	r3, [r3, #24]
 81040b6:	f003 0304 	and.w	r3, r3, #4
 81040ba:	2b04      	cmp	r3, #4
 81040bc:	d193      	bne.n	8103fe6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 81040be:	2300      	movs	r3, #0
}
 81040c0:	4618      	mov	r0, r3
 81040c2:	3710      	adds	r7, #16
 81040c4:	46bd      	mov	sp, r7
 81040c6:	bd80      	pop	{r7, pc}
 81040c8:	fe00e800 	.word	0xfe00e800

081040cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81040cc:	b580      	push	{r7, lr}
 81040ce:	b08a      	sub	sp, #40	; 0x28
 81040d0:	af00      	add	r7, sp, #0
 81040d2:	60f8      	str	r0, [r7, #12]
 81040d4:	60b9      	str	r1, [r7, #8]
 81040d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81040d8:	2300      	movs	r3, #0
 81040da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 81040de:	68fb      	ldr	r3, [r7, #12]
 81040e0:	681b      	ldr	r3, [r3, #0]
 81040e2:	699b      	ldr	r3, [r3, #24]
 81040e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 81040e6:	2300      	movs	r3, #0
 81040e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 81040ea:	687b      	ldr	r3, [r7, #4]
 81040ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 81040ee:	69bb      	ldr	r3, [r7, #24]
 81040f0:	f003 0310 	and.w	r3, r3, #16
 81040f4:	2b00      	cmp	r3, #0
 81040f6:	d075      	beq.n	81041e4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81040f8:	68fb      	ldr	r3, [r7, #12]
 81040fa:	681b      	ldr	r3, [r3, #0]
 81040fc:	2210      	movs	r2, #16
 81040fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8104100:	e056      	b.n	81041b0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8104102:	68bb      	ldr	r3, [r7, #8]
 8104104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104108:	d052      	beq.n	81041b0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 810410a:	f7ff f8a7 	bl	810325c <HAL_GetTick>
 810410e:	4602      	mov	r2, r0
 8104110:	69fb      	ldr	r3, [r7, #28]
 8104112:	1ad3      	subs	r3, r2, r3
 8104114:	68ba      	ldr	r2, [r7, #8]
 8104116:	429a      	cmp	r2, r3
 8104118:	d302      	bcc.n	8104120 <I2C_IsErrorOccurred+0x54>
 810411a:	68bb      	ldr	r3, [r7, #8]
 810411c:	2b00      	cmp	r3, #0
 810411e:	d147      	bne.n	81041b0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8104120:	68fb      	ldr	r3, [r7, #12]
 8104122:	681b      	ldr	r3, [r3, #0]
 8104124:	685b      	ldr	r3, [r3, #4]
 8104126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810412a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 810412c:	68fb      	ldr	r3, [r7, #12]
 810412e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8104132:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8104134:	68fb      	ldr	r3, [r7, #12]
 8104136:	681b      	ldr	r3, [r3, #0]
 8104138:	699b      	ldr	r3, [r3, #24]
 810413a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810413e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8104142:	d12e      	bne.n	81041a2 <I2C_IsErrorOccurred+0xd6>
 8104144:	697b      	ldr	r3, [r7, #20]
 8104146:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810414a:	d02a      	beq.n	81041a2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 810414c:	7cfb      	ldrb	r3, [r7, #19]
 810414e:	2b20      	cmp	r3, #32
 8104150:	d027      	beq.n	81041a2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8104152:	68fb      	ldr	r3, [r7, #12]
 8104154:	681b      	ldr	r3, [r3, #0]
 8104156:	685a      	ldr	r2, [r3, #4]
 8104158:	68fb      	ldr	r3, [r7, #12]
 810415a:	681b      	ldr	r3, [r3, #0]
 810415c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8104160:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8104162:	f7ff f87b 	bl	810325c <HAL_GetTick>
 8104166:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8104168:	e01b      	b.n	81041a2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 810416a:	f7ff f877 	bl	810325c <HAL_GetTick>
 810416e:	4602      	mov	r2, r0
 8104170:	69fb      	ldr	r3, [r7, #28]
 8104172:	1ad3      	subs	r3, r2, r3
 8104174:	2b19      	cmp	r3, #25
 8104176:	d914      	bls.n	81041a2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104178:	68fb      	ldr	r3, [r7, #12]
 810417a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810417c:	f043 0220 	orr.w	r2, r3, #32
 8104180:	68fb      	ldr	r3, [r7, #12]
 8104182:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8104184:	68fb      	ldr	r3, [r7, #12]
 8104186:	2220      	movs	r2, #32
 8104188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 810418c:	68fb      	ldr	r3, [r7, #12]
 810418e:	2200      	movs	r2, #0
 8104190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8104194:	68fb      	ldr	r3, [r7, #12]
 8104196:	2200      	movs	r2, #0
 8104198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 810419c:	2301      	movs	r3, #1
 810419e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81041a2:	68fb      	ldr	r3, [r7, #12]
 81041a4:	681b      	ldr	r3, [r3, #0]
 81041a6:	699b      	ldr	r3, [r3, #24]
 81041a8:	f003 0320 	and.w	r3, r3, #32
 81041ac:	2b20      	cmp	r3, #32
 81041ae:	d1dc      	bne.n	810416a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 81041b0:	68fb      	ldr	r3, [r7, #12]
 81041b2:	681b      	ldr	r3, [r3, #0]
 81041b4:	699b      	ldr	r3, [r3, #24]
 81041b6:	f003 0320 	and.w	r3, r3, #32
 81041ba:	2b20      	cmp	r3, #32
 81041bc:	d003      	beq.n	81041c6 <I2C_IsErrorOccurred+0xfa>
 81041be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81041c2:	2b00      	cmp	r3, #0
 81041c4:	d09d      	beq.n	8104102 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 81041c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81041ca:	2b00      	cmp	r3, #0
 81041cc:	d103      	bne.n	81041d6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81041ce:	68fb      	ldr	r3, [r7, #12]
 81041d0:	681b      	ldr	r3, [r3, #0]
 81041d2:	2220      	movs	r2, #32
 81041d4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 81041d6:	6a3b      	ldr	r3, [r7, #32]
 81041d8:	f043 0304 	orr.w	r3, r3, #4
 81041dc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 81041de:	2301      	movs	r3, #1
 81041e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 81041e4:	68fb      	ldr	r3, [r7, #12]
 81041e6:	681b      	ldr	r3, [r3, #0]
 81041e8:	699b      	ldr	r3, [r3, #24]
 81041ea:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 81041ec:	69bb      	ldr	r3, [r7, #24]
 81041ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81041f2:	2b00      	cmp	r3, #0
 81041f4:	d00b      	beq.n	810420e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 81041f6:	6a3b      	ldr	r3, [r7, #32]
 81041f8:	f043 0301 	orr.w	r3, r3, #1
 81041fc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 81041fe:	68fb      	ldr	r3, [r7, #12]
 8104200:	681b      	ldr	r3, [r3, #0]
 8104202:	f44f 7280 	mov.w	r2, #256	; 0x100
 8104206:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8104208:	2301      	movs	r3, #1
 810420a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 810420e:	69bb      	ldr	r3, [r7, #24]
 8104210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8104214:	2b00      	cmp	r3, #0
 8104216:	d00b      	beq.n	8104230 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8104218:	6a3b      	ldr	r3, [r7, #32]
 810421a:	f043 0308 	orr.w	r3, r3, #8
 810421e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8104220:	68fb      	ldr	r3, [r7, #12]
 8104222:	681b      	ldr	r3, [r3, #0]
 8104224:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8104228:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810422a:	2301      	movs	r3, #1
 810422c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8104230:	69bb      	ldr	r3, [r7, #24]
 8104232:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8104236:	2b00      	cmp	r3, #0
 8104238:	d00b      	beq.n	8104252 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 810423a:	6a3b      	ldr	r3, [r7, #32]
 810423c:	f043 0302 	orr.w	r3, r3, #2
 8104240:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8104242:	68fb      	ldr	r3, [r7, #12]
 8104244:	681b      	ldr	r3, [r3, #0]
 8104246:	f44f 7200 	mov.w	r2, #512	; 0x200
 810424a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810424c:	2301      	movs	r3, #1
 810424e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8104252:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8104256:	2b00      	cmp	r3, #0
 8104258:	d01c      	beq.n	8104294 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 810425a:	68f8      	ldr	r0, [r7, #12]
 810425c:	f7ff fddc 	bl	8103e18 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8104260:	68fb      	ldr	r3, [r7, #12]
 8104262:	681b      	ldr	r3, [r3, #0]
 8104264:	6859      	ldr	r1, [r3, #4]
 8104266:	68fb      	ldr	r3, [r7, #12]
 8104268:	681a      	ldr	r2, [r3, #0]
 810426a:	4b0d      	ldr	r3, [pc, #52]	; (81042a0 <I2C_IsErrorOccurred+0x1d4>)
 810426c:	400b      	ands	r3, r1
 810426e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8104270:	68fb      	ldr	r3, [r7, #12]
 8104272:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8104274:	6a3b      	ldr	r3, [r7, #32]
 8104276:	431a      	orrs	r2, r3
 8104278:	68fb      	ldr	r3, [r7, #12]
 810427a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 810427c:	68fb      	ldr	r3, [r7, #12]
 810427e:	2220      	movs	r2, #32
 8104280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8104284:	68fb      	ldr	r3, [r7, #12]
 8104286:	2200      	movs	r2, #0
 8104288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810428c:	68fb      	ldr	r3, [r7, #12]
 810428e:	2200      	movs	r2, #0
 8104290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8104294:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8104298:	4618      	mov	r0, r3
 810429a:	3728      	adds	r7, #40	; 0x28
 810429c:	46bd      	mov	sp, r7
 810429e:	bd80      	pop	{r7, pc}
 81042a0:	fe00e800 	.word	0xfe00e800

081042a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 81042a4:	b480      	push	{r7}
 81042a6:	b087      	sub	sp, #28
 81042a8:	af00      	add	r7, sp, #0
 81042aa:	60f8      	str	r0, [r7, #12]
 81042ac:	607b      	str	r3, [r7, #4]
 81042ae:	460b      	mov	r3, r1
 81042b0:	817b      	strh	r3, [r7, #10]
 81042b2:	4613      	mov	r3, r2
 81042b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81042b6:	897b      	ldrh	r3, [r7, #10]
 81042b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 81042bc:	7a7b      	ldrb	r3, [r7, #9]
 81042be:	041b      	lsls	r3, r3, #16
 81042c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81042c4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 81042c6:	687b      	ldr	r3, [r7, #4]
 81042c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81042ca:	6a3b      	ldr	r3, [r7, #32]
 81042cc:	4313      	orrs	r3, r2
 81042ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 81042d2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 81042d4:	68fb      	ldr	r3, [r7, #12]
 81042d6:	681b      	ldr	r3, [r3, #0]
 81042d8:	685a      	ldr	r2, [r3, #4]
 81042da:	6a3b      	ldr	r3, [r7, #32]
 81042dc:	0d5b      	lsrs	r3, r3, #21
 81042de:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 81042e2:	4b08      	ldr	r3, [pc, #32]	; (8104304 <I2C_TransferConfig+0x60>)
 81042e4:	430b      	orrs	r3, r1
 81042e6:	43db      	mvns	r3, r3
 81042e8:	ea02 0103 	and.w	r1, r2, r3
 81042ec:	68fb      	ldr	r3, [r7, #12]
 81042ee:	681b      	ldr	r3, [r3, #0]
 81042f0:	697a      	ldr	r2, [r7, #20]
 81042f2:	430a      	orrs	r2, r1
 81042f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 81042f6:	bf00      	nop
 81042f8:	371c      	adds	r7, #28
 81042fa:	46bd      	mov	sp, r7
 81042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104300:	4770      	bx	lr
 8104302:	bf00      	nop
 8104304:	03ff63ff 	.word	0x03ff63ff

08104308 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8104308:	b480      	push	{r7}
 810430a:	b083      	sub	sp, #12
 810430c:	af00      	add	r7, sp, #0
 810430e:	6078      	str	r0, [r7, #4]
 8104310:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104312:	687b      	ldr	r3, [r7, #4]
 8104314:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104318:	b2db      	uxtb	r3, r3
 810431a:	2b20      	cmp	r3, #32
 810431c:	d138      	bne.n	8104390 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810431e:	687b      	ldr	r3, [r7, #4]
 8104320:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104324:	2b01      	cmp	r3, #1
 8104326:	d101      	bne.n	810432c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8104328:	2302      	movs	r3, #2
 810432a:	e032      	b.n	8104392 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 810432c:	687b      	ldr	r3, [r7, #4]
 810432e:	2201      	movs	r2, #1
 8104330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8104334:	687b      	ldr	r3, [r7, #4]
 8104336:	2224      	movs	r2, #36	; 0x24
 8104338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810433c:	687b      	ldr	r3, [r7, #4]
 810433e:	681b      	ldr	r3, [r3, #0]
 8104340:	681a      	ldr	r2, [r3, #0]
 8104342:	687b      	ldr	r3, [r7, #4]
 8104344:	681b      	ldr	r3, [r3, #0]
 8104346:	f022 0201 	bic.w	r2, r2, #1
 810434a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 810434c:	687b      	ldr	r3, [r7, #4]
 810434e:	681b      	ldr	r3, [r3, #0]
 8104350:	681a      	ldr	r2, [r3, #0]
 8104352:	687b      	ldr	r3, [r7, #4]
 8104354:	681b      	ldr	r3, [r3, #0]
 8104356:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 810435a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 810435c:	687b      	ldr	r3, [r7, #4]
 810435e:	681b      	ldr	r3, [r3, #0]
 8104360:	6819      	ldr	r1, [r3, #0]
 8104362:	687b      	ldr	r3, [r7, #4]
 8104364:	681b      	ldr	r3, [r3, #0]
 8104366:	683a      	ldr	r2, [r7, #0]
 8104368:	430a      	orrs	r2, r1
 810436a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 810436c:	687b      	ldr	r3, [r7, #4]
 810436e:	681b      	ldr	r3, [r3, #0]
 8104370:	681a      	ldr	r2, [r3, #0]
 8104372:	687b      	ldr	r3, [r7, #4]
 8104374:	681b      	ldr	r3, [r3, #0]
 8104376:	f042 0201 	orr.w	r2, r2, #1
 810437a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 810437c:	687b      	ldr	r3, [r7, #4]
 810437e:	2220      	movs	r2, #32
 8104380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104384:	687b      	ldr	r3, [r7, #4]
 8104386:	2200      	movs	r2, #0
 8104388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810438c:	2300      	movs	r3, #0
 810438e:	e000      	b.n	8104392 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8104390:	2302      	movs	r3, #2
  }
}
 8104392:	4618      	mov	r0, r3
 8104394:	370c      	adds	r7, #12
 8104396:	46bd      	mov	sp, r7
 8104398:	f85d 7b04 	ldr.w	r7, [sp], #4
 810439c:	4770      	bx	lr

0810439e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 810439e:	b480      	push	{r7}
 81043a0:	b085      	sub	sp, #20
 81043a2:	af00      	add	r7, sp, #0
 81043a4:	6078      	str	r0, [r7, #4]
 81043a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81043a8:	687b      	ldr	r3, [r7, #4]
 81043aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81043ae:	b2db      	uxtb	r3, r3
 81043b0:	2b20      	cmp	r3, #32
 81043b2:	d139      	bne.n	8104428 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81043b4:	687b      	ldr	r3, [r7, #4]
 81043b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81043ba:	2b01      	cmp	r3, #1
 81043bc:	d101      	bne.n	81043c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 81043be:	2302      	movs	r3, #2
 81043c0:	e033      	b.n	810442a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 81043c2:	687b      	ldr	r3, [r7, #4]
 81043c4:	2201      	movs	r2, #1
 81043c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81043ca:	687b      	ldr	r3, [r7, #4]
 81043cc:	2224      	movs	r2, #36	; 0x24
 81043ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81043d2:	687b      	ldr	r3, [r7, #4]
 81043d4:	681b      	ldr	r3, [r3, #0]
 81043d6:	681a      	ldr	r2, [r3, #0]
 81043d8:	687b      	ldr	r3, [r7, #4]
 81043da:	681b      	ldr	r3, [r3, #0]
 81043dc:	f022 0201 	bic.w	r2, r2, #1
 81043e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 81043e2:	687b      	ldr	r3, [r7, #4]
 81043e4:	681b      	ldr	r3, [r3, #0]
 81043e6:	681b      	ldr	r3, [r3, #0]
 81043e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 81043ea:	68fb      	ldr	r3, [r7, #12]
 81043ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81043f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 81043f2:	683b      	ldr	r3, [r7, #0]
 81043f4:	021b      	lsls	r3, r3, #8
 81043f6:	68fa      	ldr	r2, [r7, #12]
 81043f8:	4313      	orrs	r3, r2
 81043fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 81043fc:	687b      	ldr	r3, [r7, #4]
 81043fe:	681b      	ldr	r3, [r3, #0]
 8104400:	68fa      	ldr	r2, [r7, #12]
 8104402:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8104404:	687b      	ldr	r3, [r7, #4]
 8104406:	681b      	ldr	r3, [r3, #0]
 8104408:	681a      	ldr	r2, [r3, #0]
 810440a:	687b      	ldr	r3, [r7, #4]
 810440c:	681b      	ldr	r3, [r3, #0]
 810440e:	f042 0201 	orr.w	r2, r2, #1
 8104412:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8104414:	687b      	ldr	r3, [r7, #4]
 8104416:	2220      	movs	r2, #32
 8104418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810441c:	687b      	ldr	r3, [r7, #4]
 810441e:	2200      	movs	r2, #0
 8104420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8104424:	2300      	movs	r3, #0
 8104426:	e000      	b.n	810442a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8104428:	2302      	movs	r3, #2
  }
}
 810442a:	4618      	mov	r0, r3
 810442c:	3714      	adds	r7, #20
 810442e:	46bd      	mov	sp, r7
 8104430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104434:	4770      	bx	lr
	...

08104438 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8104438:	b580      	push	{r7, lr}
 810443a:	b084      	sub	sp, #16
 810443c:	af00      	add	r7, sp, #0
 810443e:	60f8      	str	r0, [r7, #12]
 8104440:	460b      	mov	r3, r1
 8104442:	607a      	str	r2, [r7, #4]
 8104444:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8104446:	4b37      	ldr	r3, [pc, #220]	; (8104524 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104448:	681b      	ldr	r3, [r3, #0]
 810444a:	f023 0201 	bic.w	r2, r3, #1
 810444e:	4935      	ldr	r1, [pc, #212]	; (8104524 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104450:	68fb      	ldr	r3, [r7, #12]
 8104452:	4313      	orrs	r3, r2
 8104454:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8104456:	687b      	ldr	r3, [r7, #4]
 8104458:	2b00      	cmp	r3, #0
 810445a:	d123      	bne.n	81044a4 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 810445c:	f7ff f83e 	bl	81034dc <HAL_GetCurrentCPUID>
 8104460:	4603      	mov	r3, r0
 8104462:	2b03      	cmp	r3, #3
 8104464:	d158      	bne.n	8104518 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8104466:	4b2f      	ldr	r3, [pc, #188]	; (8104524 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104468:	691b      	ldr	r3, [r3, #16]
 810446a:	4a2e      	ldr	r2, [pc, #184]	; (8104524 <HAL_PWREx_EnterSTOPMode+0xec>)
 810446c:	f023 0301 	bic.w	r3, r3, #1
 8104470:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104472:	4b2d      	ldr	r3, [pc, #180]	; (8104528 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104474:	691b      	ldr	r3, [r3, #16]
 8104476:	4a2c      	ldr	r2, [pc, #176]	; (8104528 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104478:	f043 0304 	orr.w	r3, r3, #4
 810447c:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 810447e:	f3bf 8f4f 	dsb	sy
}
 8104482:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8104484:	f3bf 8f6f 	isb	sy
}
 8104488:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810448a:	7afb      	ldrb	r3, [r7, #11]
 810448c:	2b01      	cmp	r3, #1
 810448e:	d101      	bne.n	8104494 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8104490:	bf30      	wfi
 8104492:	e000      	b.n	8104496 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8104494:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104496:	4b24      	ldr	r3, [pc, #144]	; (8104528 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104498:	691b      	ldr	r3, [r3, #16]
 810449a:	4a23      	ldr	r2, [pc, #140]	; (8104528 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810449c:	f023 0304 	bic.w	r3, r3, #4
 81044a0:	6113      	str	r3, [r2, #16]
 81044a2:	e03c      	b.n	810451e <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81044a4:	687b      	ldr	r3, [r7, #4]
 81044a6:	2b01      	cmp	r3, #1
 81044a8:	d123      	bne.n	81044f2 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81044aa:	f7ff f817 	bl	81034dc <HAL_GetCurrentCPUID>
 81044ae:	4603      	mov	r3, r0
 81044b0:	2b01      	cmp	r3, #1
 81044b2:	d133      	bne.n	810451c <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81044b4:	4b1b      	ldr	r3, [pc, #108]	; (8104524 <HAL_PWREx_EnterSTOPMode+0xec>)
 81044b6:	695b      	ldr	r3, [r3, #20]
 81044b8:	4a1a      	ldr	r2, [pc, #104]	; (8104524 <HAL_PWREx_EnterSTOPMode+0xec>)
 81044ba:	f023 0302 	bic.w	r3, r3, #2
 81044be:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81044c0:	4b19      	ldr	r3, [pc, #100]	; (8104528 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81044c2:	691b      	ldr	r3, [r3, #16]
 81044c4:	4a18      	ldr	r2, [pc, #96]	; (8104528 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81044c6:	f043 0304 	orr.w	r3, r3, #4
 81044ca:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81044cc:	f3bf 8f4f 	dsb	sy
}
 81044d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81044d2:	f3bf 8f6f 	isb	sy
}
 81044d6:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81044d8:	7afb      	ldrb	r3, [r7, #11]
 81044da:	2b01      	cmp	r3, #1
 81044dc:	d101      	bne.n	81044e2 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81044de:	bf30      	wfi
 81044e0:	e000      	b.n	81044e4 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81044e2:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81044e4:	4b10      	ldr	r3, [pc, #64]	; (8104528 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81044e6:	691b      	ldr	r3, [r3, #16]
 81044e8:	4a0f      	ldr	r2, [pc, #60]	; (8104528 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81044ea:	f023 0304 	bic.w	r3, r3, #4
 81044ee:	6113      	str	r3, [r2, #16]
 81044f0:	e015      	b.n	810451e <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81044f2:	f7fe fff3 	bl	81034dc <HAL_GetCurrentCPUID>
 81044f6:	4603      	mov	r3, r0
 81044f8:	2b03      	cmp	r3, #3
 81044fa:	d106      	bne.n	810450a <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81044fc:	4b09      	ldr	r3, [pc, #36]	; (8104524 <HAL_PWREx_EnterSTOPMode+0xec>)
 81044fe:	691b      	ldr	r3, [r3, #16]
 8104500:	4a08      	ldr	r2, [pc, #32]	; (8104524 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104502:	f023 0304 	bic.w	r3, r3, #4
 8104506:	6113      	str	r3, [r2, #16]
 8104508:	e009      	b.n	810451e <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810450a:	4b06      	ldr	r3, [pc, #24]	; (8104524 <HAL_PWREx_EnterSTOPMode+0xec>)
 810450c:	695b      	ldr	r3, [r3, #20]
 810450e:	4a05      	ldr	r2, [pc, #20]	; (8104524 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104510:	f023 0304 	bic.w	r3, r3, #4
 8104514:	6153      	str	r3, [r2, #20]
 8104516:	e002      	b.n	810451e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8104518:	bf00      	nop
 810451a:	e000      	b.n	810451e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810451c:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810451e:	3710      	adds	r7, #16
 8104520:	46bd      	mov	sp, r7
 8104522:	bd80      	pop	{r7, pc}
 8104524:	58024800 	.word	0x58024800
 8104528:	e000ed00 	.word	0xe000ed00

0810452c <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 810452c:	b580      	push	{r7, lr}
 810452e:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104530:	f7fe ffd4 	bl	81034dc <HAL_GetCurrentCPUID>
 8104534:	4603      	mov	r3, r0
 8104536:	2b03      	cmp	r3, #3
 8104538:	d101      	bne.n	810453e <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810453a:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 810453c:	e001      	b.n	8104542 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810453e:	bf40      	sev
    __WFE ();
 8104540:	bf20      	wfe
}
 8104542:	bf00      	nop
 8104544:	bd80      	pop	{r7, pc}
	...

08104548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8104548:	b480      	push	{r7}
 810454a:	b089      	sub	sp, #36	; 0x24
 810454c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810454e:	4bb3      	ldr	r3, [pc, #716]	; (810481c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104550:	691b      	ldr	r3, [r3, #16]
 8104552:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8104556:	2b18      	cmp	r3, #24
 8104558:	f200 8155 	bhi.w	8104806 <HAL_RCC_GetSysClockFreq+0x2be>
 810455c:	a201      	add	r2, pc, #4	; (adr r2, 8104564 <HAL_RCC_GetSysClockFreq+0x1c>)
 810455e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104562:	bf00      	nop
 8104564:	081045c9 	.word	0x081045c9
 8104568:	08104807 	.word	0x08104807
 810456c:	08104807 	.word	0x08104807
 8104570:	08104807 	.word	0x08104807
 8104574:	08104807 	.word	0x08104807
 8104578:	08104807 	.word	0x08104807
 810457c:	08104807 	.word	0x08104807
 8104580:	08104807 	.word	0x08104807
 8104584:	081045ef 	.word	0x081045ef
 8104588:	08104807 	.word	0x08104807
 810458c:	08104807 	.word	0x08104807
 8104590:	08104807 	.word	0x08104807
 8104594:	08104807 	.word	0x08104807
 8104598:	08104807 	.word	0x08104807
 810459c:	08104807 	.word	0x08104807
 81045a0:	08104807 	.word	0x08104807
 81045a4:	081045f5 	.word	0x081045f5
 81045a8:	08104807 	.word	0x08104807
 81045ac:	08104807 	.word	0x08104807
 81045b0:	08104807 	.word	0x08104807
 81045b4:	08104807 	.word	0x08104807
 81045b8:	08104807 	.word	0x08104807
 81045bc:	08104807 	.word	0x08104807
 81045c0:	08104807 	.word	0x08104807
 81045c4:	081045fb 	.word	0x081045fb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81045c8:	4b94      	ldr	r3, [pc, #592]	; (810481c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81045ca:	681b      	ldr	r3, [r3, #0]
 81045cc:	f003 0320 	and.w	r3, r3, #32
 81045d0:	2b00      	cmp	r3, #0
 81045d2:	d009      	beq.n	81045e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81045d4:	4b91      	ldr	r3, [pc, #580]	; (810481c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81045d6:	681b      	ldr	r3, [r3, #0]
 81045d8:	08db      	lsrs	r3, r3, #3
 81045da:	f003 0303 	and.w	r3, r3, #3
 81045de:	4a90      	ldr	r2, [pc, #576]	; (8104820 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81045e0:	fa22 f303 	lsr.w	r3, r2, r3
 81045e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 81045e6:	e111      	b.n	810480c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81045e8:	4b8d      	ldr	r3, [pc, #564]	; (8104820 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81045ea:	61bb      	str	r3, [r7, #24]
    break;
 81045ec:	e10e      	b.n	810480c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81045ee:	4b8d      	ldr	r3, [pc, #564]	; (8104824 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81045f0:	61bb      	str	r3, [r7, #24]
    break;
 81045f2:	e10b      	b.n	810480c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 81045f4:	4b8c      	ldr	r3, [pc, #560]	; (8104828 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81045f6:	61bb      	str	r3, [r7, #24]
    break;
 81045f8:	e108      	b.n	810480c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81045fa:	4b88      	ldr	r3, [pc, #544]	; (810481c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81045fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81045fe:	f003 0303 	and.w	r3, r3, #3
 8104602:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8104604:	4b85      	ldr	r3, [pc, #532]	; (810481c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104608:	091b      	lsrs	r3, r3, #4
 810460a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810460e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8104610:	4b82      	ldr	r3, [pc, #520]	; (810481c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104614:	f003 0301 	and.w	r3, r3, #1
 8104618:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810461a:	4b80      	ldr	r3, [pc, #512]	; (810481c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810461c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810461e:	08db      	lsrs	r3, r3, #3
 8104620:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104624:	68fa      	ldr	r2, [r7, #12]
 8104626:	fb02 f303 	mul.w	r3, r2, r3
 810462a:	ee07 3a90 	vmov	s15, r3
 810462e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104632:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8104636:	693b      	ldr	r3, [r7, #16]
 8104638:	2b00      	cmp	r3, #0
 810463a:	f000 80e1 	beq.w	8104800 <HAL_RCC_GetSysClockFreq+0x2b8>
 810463e:	697b      	ldr	r3, [r7, #20]
 8104640:	2b02      	cmp	r3, #2
 8104642:	f000 8083 	beq.w	810474c <HAL_RCC_GetSysClockFreq+0x204>
 8104646:	697b      	ldr	r3, [r7, #20]
 8104648:	2b02      	cmp	r3, #2
 810464a:	f200 80a1 	bhi.w	8104790 <HAL_RCC_GetSysClockFreq+0x248>
 810464e:	697b      	ldr	r3, [r7, #20]
 8104650:	2b00      	cmp	r3, #0
 8104652:	d003      	beq.n	810465c <HAL_RCC_GetSysClockFreq+0x114>
 8104654:	697b      	ldr	r3, [r7, #20]
 8104656:	2b01      	cmp	r3, #1
 8104658:	d056      	beq.n	8104708 <HAL_RCC_GetSysClockFreq+0x1c0>
 810465a:	e099      	b.n	8104790 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810465c:	4b6f      	ldr	r3, [pc, #444]	; (810481c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810465e:	681b      	ldr	r3, [r3, #0]
 8104660:	f003 0320 	and.w	r3, r3, #32
 8104664:	2b00      	cmp	r3, #0
 8104666:	d02d      	beq.n	81046c4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104668:	4b6c      	ldr	r3, [pc, #432]	; (810481c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810466a:	681b      	ldr	r3, [r3, #0]
 810466c:	08db      	lsrs	r3, r3, #3
 810466e:	f003 0303 	and.w	r3, r3, #3
 8104672:	4a6b      	ldr	r2, [pc, #428]	; (8104820 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8104674:	fa22 f303 	lsr.w	r3, r2, r3
 8104678:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810467a:	687b      	ldr	r3, [r7, #4]
 810467c:	ee07 3a90 	vmov	s15, r3
 8104680:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104684:	693b      	ldr	r3, [r7, #16]
 8104686:	ee07 3a90 	vmov	s15, r3
 810468a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810468e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104692:	4b62      	ldr	r3, [pc, #392]	; (810481c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810469a:	ee07 3a90 	vmov	s15, r3
 810469e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81046a2:	ed97 6a02 	vldr	s12, [r7, #8]
 81046a6:	eddf 5a61 	vldr	s11, [pc, #388]	; 810482c <HAL_RCC_GetSysClockFreq+0x2e4>
 81046aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81046ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81046b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81046b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81046ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 81046be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 81046c2:	e087      	b.n	81047d4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81046c4:	693b      	ldr	r3, [r7, #16]
 81046c6:	ee07 3a90 	vmov	s15, r3
 81046ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81046ce:	eddf 6a58 	vldr	s13, [pc, #352]	; 8104830 <HAL_RCC_GetSysClockFreq+0x2e8>
 81046d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81046d6:	4b51      	ldr	r3, [pc, #324]	; (810481c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81046da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81046de:	ee07 3a90 	vmov	s15, r3
 81046e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81046e6:	ed97 6a02 	vldr	s12, [r7, #8]
 81046ea:	eddf 5a50 	vldr	s11, [pc, #320]	; 810482c <HAL_RCC_GetSysClockFreq+0x2e4>
 81046ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81046f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81046f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81046fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81046fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104702:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104706:	e065      	b.n	81047d4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104708:	693b      	ldr	r3, [r7, #16]
 810470a:	ee07 3a90 	vmov	s15, r3
 810470e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104712:	eddf 6a48 	vldr	s13, [pc, #288]	; 8104834 <HAL_RCC_GetSysClockFreq+0x2ec>
 8104716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810471a:	4b40      	ldr	r3, [pc, #256]	; (810481c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810471c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810471e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104722:	ee07 3a90 	vmov	s15, r3
 8104726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810472a:	ed97 6a02 	vldr	s12, [r7, #8]
 810472e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 810482c <HAL_RCC_GetSysClockFreq+0x2e4>
 8104732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810473a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810473e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104746:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810474a:	e043      	b.n	81047d4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810474c:	693b      	ldr	r3, [r7, #16]
 810474e:	ee07 3a90 	vmov	s15, r3
 8104752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104756:	eddf 6a38 	vldr	s13, [pc, #224]	; 8104838 <HAL_RCC_GetSysClockFreq+0x2f0>
 810475a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810475e:	4b2f      	ldr	r3, [pc, #188]	; (810481c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104766:	ee07 3a90 	vmov	s15, r3
 810476a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810476e:	ed97 6a02 	vldr	s12, [r7, #8]
 8104772:	eddf 5a2e 	vldr	s11, [pc, #184]	; 810482c <HAL_RCC_GetSysClockFreq+0x2e4>
 8104776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810477a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810477e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104786:	ee67 7a27 	vmul.f32	s15, s14, s15
 810478a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810478e:	e021      	b.n	81047d4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104790:	693b      	ldr	r3, [r7, #16]
 8104792:	ee07 3a90 	vmov	s15, r3
 8104796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810479a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8104834 <HAL_RCC_GetSysClockFreq+0x2ec>
 810479e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81047a2:	4b1e      	ldr	r3, [pc, #120]	; (810481c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81047a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81047a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81047aa:	ee07 3a90 	vmov	s15, r3
 81047ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81047b2:	ed97 6a02 	vldr	s12, [r7, #8]
 81047b6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 810482c <HAL_RCC_GetSysClockFreq+0x2e4>
 81047ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81047be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81047c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81047c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81047ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 81047ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81047d2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 81047d4:	4b11      	ldr	r3, [pc, #68]	; (810481c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81047d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81047d8:	0a5b      	lsrs	r3, r3, #9
 81047da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81047de:	3301      	adds	r3, #1
 81047e0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81047e2:	683b      	ldr	r3, [r7, #0]
 81047e4:	ee07 3a90 	vmov	s15, r3
 81047e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81047ec:	edd7 6a07 	vldr	s13, [r7, #28]
 81047f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81047f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81047f8:	ee17 3a90 	vmov	r3, s15
 81047fc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 81047fe:	e005      	b.n	810480c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8104800:	2300      	movs	r3, #0
 8104802:	61bb      	str	r3, [r7, #24]
    break;
 8104804:	e002      	b.n	810480c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8104806:	4b07      	ldr	r3, [pc, #28]	; (8104824 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8104808:	61bb      	str	r3, [r7, #24]
    break;
 810480a:	bf00      	nop
  }

  return sysclockfreq;
 810480c:	69bb      	ldr	r3, [r7, #24]
}
 810480e:	4618      	mov	r0, r3
 8104810:	3724      	adds	r7, #36	; 0x24
 8104812:	46bd      	mov	sp, r7
 8104814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104818:	4770      	bx	lr
 810481a:	bf00      	nop
 810481c:	58024400 	.word	0x58024400
 8104820:	03d09000 	.word	0x03d09000
 8104824:	003d0900 	.word	0x003d0900
 8104828:	007a1200 	.word	0x007a1200
 810482c:	46000000 	.word	0x46000000
 8104830:	4c742400 	.word	0x4c742400
 8104834:	4a742400 	.word	0x4a742400
 8104838:	4af42400 	.word	0x4af42400

0810483c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 810483c:	b580      	push	{r7, lr}
 810483e:	b082      	sub	sp, #8
 8104840:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8104842:	f7ff fe81 	bl	8104548 <HAL_RCC_GetSysClockFreq>
 8104846:	4602      	mov	r2, r0
 8104848:	4b11      	ldr	r3, [pc, #68]	; (8104890 <HAL_RCC_GetHCLKFreq+0x54>)
 810484a:	699b      	ldr	r3, [r3, #24]
 810484c:	0a1b      	lsrs	r3, r3, #8
 810484e:	f003 030f 	and.w	r3, r3, #15
 8104852:	4910      	ldr	r1, [pc, #64]	; (8104894 <HAL_RCC_GetHCLKFreq+0x58>)
 8104854:	5ccb      	ldrb	r3, [r1, r3]
 8104856:	f003 031f 	and.w	r3, r3, #31
 810485a:	fa22 f303 	lsr.w	r3, r2, r3
 810485e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8104860:	4b0b      	ldr	r3, [pc, #44]	; (8104890 <HAL_RCC_GetHCLKFreq+0x54>)
 8104862:	699b      	ldr	r3, [r3, #24]
 8104864:	f003 030f 	and.w	r3, r3, #15
 8104868:	4a0a      	ldr	r2, [pc, #40]	; (8104894 <HAL_RCC_GetHCLKFreq+0x58>)
 810486a:	5cd3      	ldrb	r3, [r2, r3]
 810486c:	f003 031f 	and.w	r3, r3, #31
 8104870:	687a      	ldr	r2, [r7, #4]
 8104872:	fa22 f303 	lsr.w	r3, r2, r3
 8104876:	4a08      	ldr	r2, [pc, #32]	; (8104898 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104878:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810487a:	4b07      	ldr	r3, [pc, #28]	; (8104898 <HAL_RCC_GetHCLKFreq+0x5c>)
 810487c:	681b      	ldr	r3, [r3, #0]
 810487e:	4a07      	ldr	r2, [pc, #28]	; (810489c <HAL_RCC_GetHCLKFreq+0x60>)
 8104880:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8104882:	4b05      	ldr	r3, [pc, #20]	; (8104898 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104884:	681b      	ldr	r3, [r3, #0]
}
 8104886:	4618      	mov	r0, r3
 8104888:	3708      	adds	r7, #8
 810488a:	46bd      	mov	sp, r7
 810488c:	bd80      	pop	{r7, pc}
 810488e:	bf00      	nop
 8104890:	58024400 	.word	0x58024400
 8104894:	0810df00 	.word	0x0810df00
 8104898:	10000004 	.word	0x10000004
 810489c:	10000000 	.word	0x10000000

081048a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81048a0:	b580      	push	{r7, lr}
 81048a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81048a4:	f7ff ffca 	bl	810483c <HAL_RCC_GetHCLKFreq>
 81048a8:	4602      	mov	r2, r0
 81048aa:	4b06      	ldr	r3, [pc, #24]	; (81048c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 81048ac:	69db      	ldr	r3, [r3, #28]
 81048ae:	091b      	lsrs	r3, r3, #4
 81048b0:	f003 0307 	and.w	r3, r3, #7
 81048b4:	4904      	ldr	r1, [pc, #16]	; (81048c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 81048b6:	5ccb      	ldrb	r3, [r1, r3]
 81048b8:	f003 031f 	and.w	r3, r3, #31
 81048bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81048c0:	4618      	mov	r0, r3
 81048c2:	bd80      	pop	{r7, pc}
 81048c4:	58024400 	.word	0x58024400
 81048c8:	0810df00 	.word	0x0810df00

081048cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 81048cc:	b580      	push	{r7, lr}
 81048ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 81048d0:	f7ff ffb4 	bl	810483c <HAL_RCC_GetHCLKFreq>
 81048d4:	4602      	mov	r2, r0
 81048d6:	4b06      	ldr	r3, [pc, #24]	; (81048f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 81048d8:	69db      	ldr	r3, [r3, #28]
 81048da:	0a1b      	lsrs	r3, r3, #8
 81048dc:	f003 0307 	and.w	r3, r3, #7
 81048e0:	4904      	ldr	r1, [pc, #16]	; (81048f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 81048e2:	5ccb      	ldrb	r3, [r1, r3]
 81048e4:	f003 031f 	and.w	r3, r3, #31
 81048e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 81048ec:	4618      	mov	r0, r3
 81048ee:	bd80      	pop	{r7, pc}
 81048f0:	58024400 	.word	0x58024400
 81048f4:	0810df00 	.word	0x0810df00

081048f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81048f8:	b580      	push	{r7, lr}
 81048fa:	b086      	sub	sp, #24
 81048fc:	af00      	add	r7, sp, #0
 81048fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8104900:	2300      	movs	r3, #0
 8104902:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8104904:	2300      	movs	r3, #0
 8104906:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8104908:	687b      	ldr	r3, [r7, #4]
 810490a:	681b      	ldr	r3, [r3, #0]
 810490c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104910:	2b00      	cmp	r3, #0
 8104912:	d03f      	beq.n	8104994 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8104914:	687b      	ldr	r3, [r7, #4]
 8104916:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104918:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810491c:	d02a      	beq.n	8104974 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 810491e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104922:	d824      	bhi.n	810496e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8104924:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104928:	d018      	beq.n	810495c <HAL_RCCEx_PeriphCLKConfig+0x64>
 810492a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810492e:	d81e      	bhi.n	810496e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8104930:	2b00      	cmp	r3, #0
 8104932:	d003      	beq.n	810493c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8104934:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104938:	d007      	beq.n	810494a <HAL_RCCEx_PeriphCLKConfig+0x52>
 810493a:	e018      	b.n	810496e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810493c:	4ba3      	ldr	r3, [pc, #652]	; (8104bcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810493e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104940:	4aa2      	ldr	r2, [pc, #648]	; (8104bcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104942:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104946:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8104948:	e015      	b.n	8104976 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810494a:	687b      	ldr	r3, [r7, #4]
 810494c:	3304      	adds	r3, #4
 810494e:	2102      	movs	r1, #2
 8104950:	4618      	mov	r0, r3
 8104952:	f001 f9d5 	bl	8105d00 <RCCEx_PLL2_Config>
 8104956:	4603      	mov	r3, r0
 8104958:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 810495a:	e00c      	b.n	8104976 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810495c:	687b      	ldr	r3, [r7, #4]
 810495e:	3324      	adds	r3, #36	; 0x24
 8104960:	2102      	movs	r1, #2
 8104962:	4618      	mov	r0, r3
 8104964:	f001 fa7e 	bl	8105e64 <RCCEx_PLL3_Config>
 8104968:	4603      	mov	r3, r0
 810496a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 810496c:	e003      	b.n	8104976 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810496e:	2301      	movs	r3, #1
 8104970:	75fb      	strb	r3, [r7, #23]
      break;
 8104972:	e000      	b.n	8104976 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8104974:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104976:	7dfb      	ldrb	r3, [r7, #23]
 8104978:	2b00      	cmp	r3, #0
 810497a:	d109      	bne.n	8104990 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 810497c:	4b93      	ldr	r3, [pc, #588]	; (8104bcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810497e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104980:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8104984:	687b      	ldr	r3, [r7, #4]
 8104986:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104988:	4990      	ldr	r1, [pc, #576]	; (8104bcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810498a:	4313      	orrs	r3, r2
 810498c:	650b      	str	r3, [r1, #80]	; 0x50
 810498e:	e001      	b.n	8104994 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104990:	7dfb      	ldrb	r3, [r7, #23]
 8104992:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8104994:	687b      	ldr	r3, [r7, #4]
 8104996:	681b      	ldr	r3, [r3, #0]
 8104998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810499c:	2b00      	cmp	r3, #0
 810499e:	d03d      	beq.n	8104a1c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 81049a0:	687b      	ldr	r3, [r7, #4]
 81049a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81049a4:	2b04      	cmp	r3, #4
 81049a6:	d826      	bhi.n	81049f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 81049a8:	a201      	add	r2, pc, #4	; (adr r2, 81049b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 81049aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81049ae:	bf00      	nop
 81049b0:	081049c5 	.word	0x081049c5
 81049b4:	081049d3 	.word	0x081049d3
 81049b8:	081049e5 	.word	0x081049e5
 81049bc:	081049fd 	.word	0x081049fd
 81049c0:	081049fd 	.word	0x081049fd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81049c4:	4b81      	ldr	r3, [pc, #516]	; (8104bcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81049c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81049c8:	4a80      	ldr	r2, [pc, #512]	; (8104bcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81049ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81049ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81049d0:	e015      	b.n	81049fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81049d2:	687b      	ldr	r3, [r7, #4]
 81049d4:	3304      	adds	r3, #4
 81049d6:	2100      	movs	r1, #0
 81049d8:	4618      	mov	r0, r3
 81049da:	f001 f991 	bl	8105d00 <RCCEx_PLL2_Config>
 81049de:	4603      	mov	r3, r0
 81049e0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81049e2:	e00c      	b.n	81049fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81049e4:	687b      	ldr	r3, [r7, #4]
 81049e6:	3324      	adds	r3, #36	; 0x24
 81049e8:	2100      	movs	r1, #0
 81049ea:	4618      	mov	r0, r3
 81049ec:	f001 fa3a 	bl	8105e64 <RCCEx_PLL3_Config>
 81049f0:	4603      	mov	r3, r0
 81049f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81049f4:	e003      	b.n	81049fe <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81049f6:	2301      	movs	r3, #1
 81049f8:	75fb      	strb	r3, [r7, #23]
      break;
 81049fa:	e000      	b.n	81049fe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 81049fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 81049fe:	7dfb      	ldrb	r3, [r7, #23]
 8104a00:	2b00      	cmp	r3, #0
 8104a02:	d109      	bne.n	8104a18 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8104a04:	4b71      	ldr	r3, [pc, #452]	; (8104bcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104a08:	f023 0207 	bic.w	r2, r3, #7
 8104a0c:	687b      	ldr	r3, [r7, #4]
 8104a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104a10:	496e      	ldr	r1, [pc, #440]	; (8104bcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104a12:	4313      	orrs	r3, r2
 8104a14:	650b      	str	r3, [r1, #80]	; 0x50
 8104a16:	e001      	b.n	8104a1c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104a18:	7dfb      	ldrb	r3, [r7, #23]
 8104a1a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8104a1c:	687b      	ldr	r3, [r7, #4]
 8104a1e:	681b      	ldr	r3, [r3, #0]
 8104a20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8104a24:	2b00      	cmp	r3, #0
 8104a26:	d042      	beq.n	8104aae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8104a28:	687b      	ldr	r3, [r7, #4]
 8104a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104a2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104a30:	d02b      	beq.n	8104a8a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8104a32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104a36:	d825      	bhi.n	8104a84 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8104a38:	2bc0      	cmp	r3, #192	; 0xc0
 8104a3a:	d028      	beq.n	8104a8e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8104a3c:	2bc0      	cmp	r3, #192	; 0xc0
 8104a3e:	d821      	bhi.n	8104a84 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8104a40:	2b80      	cmp	r3, #128	; 0x80
 8104a42:	d016      	beq.n	8104a72 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8104a44:	2b80      	cmp	r3, #128	; 0x80
 8104a46:	d81d      	bhi.n	8104a84 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8104a48:	2b00      	cmp	r3, #0
 8104a4a:	d002      	beq.n	8104a52 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8104a4c:	2b40      	cmp	r3, #64	; 0x40
 8104a4e:	d007      	beq.n	8104a60 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8104a50:	e018      	b.n	8104a84 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104a52:	4b5e      	ldr	r3, [pc, #376]	; (8104bcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104a56:	4a5d      	ldr	r2, [pc, #372]	; (8104bcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104a5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8104a5e:	e017      	b.n	8104a90 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104a60:	687b      	ldr	r3, [r7, #4]
 8104a62:	3304      	adds	r3, #4
 8104a64:	2100      	movs	r1, #0
 8104a66:	4618      	mov	r0, r3
 8104a68:	f001 f94a 	bl	8105d00 <RCCEx_PLL2_Config>
 8104a6c:	4603      	mov	r3, r0
 8104a6e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8104a70:	e00e      	b.n	8104a90 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8104a72:	687b      	ldr	r3, [r7, #4]
 8104a74:	3324      	adds	r3, #36	; 0x24
 8104a76:	2100      	movs	r1, #0
 8104a78:	4618      	mov	r0, r3
 8104a7a:	f001 f9f3 	bl	8105e64 <RCCEx_PLL3_Config>
 8104a7e:	4603      	mov	r3, r0
 8104a80:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8104a82:	e005      	b.n	8104a90 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104a84:	2301      	movs	r3, #1
 8104a86:	75fb      	strb	r3, [r7, #23]
      break;
 8104a88:	e002      	b.n	8104a90 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8104a8a:	bf00      	nop
 8104a8c:	e000      	b.n	8104a90 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8104a8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104a90:	7dfb      	ldrb	r3, [r7, #23]
 8104a92:	2b00      	cmp	r3, #0
 8104a94:	d109      	bne.n	8104aaa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8104a96:	4b4d      	ldr	r3, [pc, #308]	; (8104bcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104a9a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8104a9e:	687b      	ldr	r3, [r7, #4]
 8104aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104aa2:	494a      	ldr	r1, [pc, #296]	; (8104bcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104aa4:	4313      	orrs	r3, r2
 8104aa6:	650b      	str	r3, [r1, #80]	; 0x50
 8104aa8:	e001      	b.n	8104aae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104aaa:	7dfb      	ldrb	r3, [r7, #23]
 8104aac:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8104aae:	687b      	ldr	r3, [r7, #4]
 8104ab0:	681b      	ldr	r3, [r3, #0]
 8104ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8104ab6:	2b00      	cmp	r3, #0
 8104ab8:	d049      	beq.n	8104b4e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8104aba:	687b      	ldr	r3, [r7, #4]
 8104abc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8104ac0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8104ac4:	d030      	beq.n	8104b28 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8104ac6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8104aca:	d82a      	bhi.n	8104b22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8104acc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8104ad0:	d02c      	beq.n	8104b2c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8104ad2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8104ad6:	d824      	bhi.n	8104b22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8104ad8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104adc:	d018      	beq.n	8104b10 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8104ade:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104ae2:	d81e      	bhi.n	8104b22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8104ae4:	2b00      	cmp	r3, #0
 8104ae6:	d003      	beq.n	8104af0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8104ae8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104aec:	d007      	beq.n	8104afe <HAL_RCCEx_PeriphCLKConfig+0x206>
 8104aee:	e018      	b.n	8104b22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104af0:	4b36      	ldr	r3, [pc, #216]	; (8104bcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104af4:	4a35      	ldr	r2, [pc, #212]	; (8104bcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104afa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104afc:	e017      	b.n	8104b2e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104afe:	687b      	ldr	r3, [r7, #4]
 8104b00:	3304      	adds	r3, #4
 8104b02:	2100      	movs	r1, #0
 8104b04:	4618      	mov	r0, r3
 8104b06:	f001 f8fb 	bl	8105d00 <RCCEx_PLL2_Config>
 8104b0a:	4603      	mov	r3, r0
 8104b0c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8104b0e:	e00e      	b.n	8104b2e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8104b10:	687b      	ldr	r3, [r7, #4]
 8104b12:	3324      	adds	r3, #36	; 0x24
 8104b14:	2100      	movs	r1, #0
 8104b16:	4618      	mov	r0, r3
 8104b18:	f001 f9a4 	bl	8105e64 <RCCEx_PLL3_Config>
 8104b1c:	4603      	mov	r3, r0
 8104b1e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104b20:	e005      	b.n	8104b2e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8104b22:	2301      	movs	r3, #1
 8104b24:	75fb      	strb	r3, [r7, #23]
      break;
 8104b26:	e002      	b.n	8104b2e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8104b28:	bf00      	nop
 8104b2a:	e000      	b.n	8104b2e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8104b2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104b2e:	7dfb      	ldrb	r3, [r7, #23]
 8104b30:	2b00      	cmp	r3, #0
 8104b32:	d10a      	bne.n	8104b4a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8104b34:	4b25      	ldr	r3, [pc, #148]	; (8104bcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104b38:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8104b3c:	687b      	ldr	r3, [r7, #4]
 8104b3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8104b42:	4922      	ldr	r1, [pc, #136]	; (8104bcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104b44:	4313      	orrs	r3, r2
 8104b46:	658b      	str	r3, [r1, #88]	; 0x58
 8104b48:	e001      	b.n	8104b4e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104b4a:	7dfb      	ldrb	r3, [r7, #23]
 8104b4c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8104b4e:	687b      	ldr	r3, [r7, #4]
 8104b50:	681b      	ldr	r3, [r3, #0]
 8104b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8104b56:	2b00      	cmp	r3, #0
 8104b58:	d04b      	beq.n	8104bf2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8104b5a:	687b      	ldr	r3, [r7, #4]
 8104b5c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8104b60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104b64:	d030      	beq.n	8104bc8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8104b66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104b6a:	d82a      	bhi.n	8104bc2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8104b6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8104b70:	d02e      	beq.n	8104bd0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8104b72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8104b76:	d824      	bhi.n	8104bc2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8104b78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104b7c:	d018      	beq.n	8104bb0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8104b7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104b82:	d81e      	bhi.n	8104bc2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8104b84:	2b00      	cmp	r3, #0
 8104b86:	d003      	beq.n	8104b90 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8104b88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8104b8c:	d007      	beq.n	8104b9e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8104b8e:	e018      	b.n	8104bc2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104b90:	4b0e      	ldr	r3, [pc, #56]	; (8104bcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104b94:	4a0d      	ldr	r2, [pc, #52]	; (8104bcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104b96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104b9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104b9c:	e019      	b.n	8104bd2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104b9e:	687b      	ldr	r3, [r7, #4]
 8104ba0:	3304      	adds	r3, #4
 8104ba2:	2100      	movs	r1, #0
 8104ba4:	4618      	mov	r0, r3
 8104ba6:	f001 f8ab 	bl	8105d00 <RCCEx_PLL2_Config>
 8104baa:	4603      	mov	r3, r0
 8104bac:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8104bae:	e010      	b.n	8104bd2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104bb0:	687b      	ldr	r3, [r7, #4]
 8104bb2:	3324      	adds	r3, #36	; 0x24
 8104bb4:	2100      	movs	r1, #0
 8104bb6:	4618      	mov	r0, r3
 8104bb8:	f001 f954 	bl	8105e64 <RCCEx_PLL3_Config>
 8104bbc:	4603      	mov	r3, r0
 8104bbe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104bc0:	e007      	b.n	8104bd2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8104bc2:	2301      	movs	r3, #1
 8104bc4:	75fb      	strb	r3, [r7, #23]
      break;
 8104bc6:	e004      	b.n	8104bd2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8104bc8:	bf00      	nop
 8104bca:	e002      	b.n	8104bd2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8104bcc:	58024400 	.word	0x58024400
      break;
 8104bd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104bd2:	7dfb      	ldrb	r3, [r7, #23]
 8104bd4:	2b00      	cmp	r3, #0
 8104bd6:	d10a      	bne.n	8104bee <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8104bd8:	4b99      	ldr	r3, [pc, #612]	; (8104e40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104bdc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8104be0:	687b      	ldr	r3, [r7, #4]
 8104be2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8104be6:	4996      	ldr	r1, [pc, #600]	; (8104e40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104be8:	4313      	orrs	r3, r2
 8104bea:	658b      	str	r3, [r1, #88]	; 0x58
 8104bec:	e001      	b.n	8104bf2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104bee:	7dfb      	ldrb	r3, [r7, #23]
 8104bf0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8104bf2:	687b      	ldr	r3, [r7, #4]
 8104bf4:	681b      	ldr	r3, [r3, #0]
 8104bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104bfa:	2b00      	cmp	r3, #0
 8104bfc:	d032      	beq.n	8104c64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8104bfe:	687b      	ldr	r3, [r7, #4]
 8104c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104c02:	2b30      	cmp	r3, #48	; 0x30
 8104c04:	d01c      	beq.n	8104c40 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8104c06:	2b30      	cmp	r3, #48	; 0x30
 8104c08:	d817      	bhi.n	8104c3a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8104c0a:	2b20      	cmp	r3, #32
 8104c0c:	d00c      	beq.n	8104c28 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8104c0e:	2b20      	cmp	r3, #32
 8104c10:	d813      	bhi.n	8104c3a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8104c12:	2b00      	cmp	r3, #0
 8104c14:	d016      	beq.n	8104c44 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8104c16:	2b10      	cmp	r3, #16
 8104c18:	d10f      	bne.n	8104c3a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104c1a:	4b89      	ldr	r3, [pc, #548]	; (8104e40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104c1e:	4a88      	ldr	r2, [pc, #544]	; (8104e40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104c24:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8104c26:	e00e      	b.n	8104c46 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8104c28:	687b      	ldr	r3, [r7, #4]
 8104c2a:	3304      	adds	r3, #4
 8104c2c:	2102      	movs	r1, #2
 8104c2e:	4618      	mov	r0, r3
 8104c30:	f001 f866 	bl	8105d00 <RCCEx_PLL2_Config>
 8104c34:	4603      	mov	r3, r0
 8104c36:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8104c38:	e005      	b.n	8104c46 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8104c3a:	2301      	movs	r3, #1
 8104c3c:	75fb      	strb	r3, [r7, #23]
      break;
 8104c3e:	e002      	b.n	8104c46 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8104c40:	bf00      	nop
 8104c42:	e000      	b.n	8104c46 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8104c44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104c46:	7dfb      	ldrb	r3, [r7, #23]
 8104c48:	2b00      	cmp	r3, #0
 8104c4a:	d109      	bne.n	8104c60 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8104c4c:	4b7c      	ldr	r3, [pc, #496]	; (8104e40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104c50:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8104c54:	687b      	ldr	r3, [r7, #4]
 8104c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104c58:	4979      	ldr	r1, [pc, #484]	; (8104e40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104c5a:	4313      	orrs	r3, r2
 8104c5c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8104c5e:	e001      	b.n	8104c64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104c60:	7dfb      	ldrb	r3, [r7, #23]
 8104c62:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8104c64:	687b      	ldr	r3, [r7, #4]
 8104c66:	681b      	ldr	r3, [r3, #0]
 8104c68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8104c6c:	2b00      	cmp	r3, #0
 8104c6e:	d047      	beq.n	8104d00 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8104c70:	687b      	ldr	r3, [r7, #4]
 8104c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104c74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104c78:	d030      	beq.n	8104cdc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8104c7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104c7e:	d82a      	bhi.n	8104cd6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8104c80:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8104c84:	d02c      	beq.n	8104ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8104c86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8104c8a:	d824      	bhi.n	8104cd6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8104c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104c90:	d018      	beq.n	8104cc4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8104c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104c96:	d81e      	bhi.n	8104cd6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8104c98:	2b00      	cmp	r3, #0
 8104c9a:	d003      	beq.n	8104ca4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8104c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104ca0:	d007      	beq.n	8104cb2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8104ca2:	e018      	b.n	8104cd6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104ca4:	4b66      	ldr	r3, [pc, #408]	; (8104e40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104ca8:	4a65      	ldr	r2, [pc, #404]	; (8104e40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104caa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104cae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8104cb0:	e017      	b.n	8104ce2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104cb2:	687b      	ldr	r3, [r7, #4]
 8104cb4:	3304      	adds	r3, #4
 8104cb6:	2100      	movs	r1, #0
 8104cb8:	4618      	mov	r0, r3
 8104cba:	f001 f821 	bl	8105d00 <RCCEx_PLL2_Config>
 8104cbe:	4603      	mov	r3, r0
 8104cc0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8104cc2:	e00e      	b.n	8104ce2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8104cc4:	687b      	ldr	r3, [r7, #4]
 8104cc6:	3324      	adds	r3, #36	; 0x24
 8104cc8:	2100      	movs	r1, #0
 8104cca:	4618      	mov	r0, r3
 8104ccc:	f001 f8ca 	bl	8105e64 <RCCEx_PLL3_Config>
 8104cd0:	4603      	mov	r3, r0
 8104cd2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8104cd4:	e005      	b.n	8104ce2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104cd6:	2301      	movs	r3, #1
 8104cd8:	75fb      	strb	r3, [r7, #23]
      break;
 8104cda:	e002      	b.n	8104ce2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8104cdc:	bf00      	nop
 8104cde:	e000      	b.n	8104ce2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8104ce0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104ce2:	7dfb      	ldrb	r3, [r7, #23]
 8104ce4:	2b00      	cmp	r3, #0
 8104ce6:	d109      	bne.n	8104cfc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8104ce8:	4b55      	ldr	r3, [pc, #340]	; (8104e40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104cec:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8104cf0:	687b      	ldr	r3, [r7, #4]
 8104cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104cf4:	4952      	ldr	r1, [pc, #328]	; (8104e40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104cf6:	4313      	orrs	r3, r2
 8104cf8:	650b      	str	r3, [r1, #80]	; 0x50
 8104cfa:	e001      	b.n	8104d00 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104cfc:	7dfb      	ldrb	r3, [r7, #23]
 8104cfe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8104d00:	687b      	ldr	r3, [r7, #4]
 8104d02:	681b      	ldr	r3, [r3, #0]
 8104d04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8104d08:	2b00      	cmp	r3, #0
 8104d0a:	d049      	beq.n	8104da0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8104d0c:	687b      	ldr	r3, [r7, #4]
 8104d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104d10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8104d14:	d02e      	beq.n	8104d74 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8104d16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8104d1a:	d828      	bhi.n	8104d6e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8104d1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8104d20:	d02a      	beq.n	8104d78 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8104d22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8104d26:	d822      	bhi.n	8104d6e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8104d28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8104d2c:	d026      	beq.n	8104d7c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8104d2e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8104d32:	d81c      	bhi.n	8104d6e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8104d34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104d38:	d010      	beq.n	8104d5c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8104d3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104d3e:	d816      	bhi.n	8104d6e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8104d40:	2b00      	cmp	r3, #0
 8104d42:	d01d      	beq.n	8104d80 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8104d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104d48:	d111      	bne.n	8104d6e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104d4a:	687b      	ldr	r3, [r7, #4]
 8104d4c:	3304      	adds	r3, #4
 8104d4e:	2101      	movs	r1, #1
 8104d50:	4618      	mov	r0, r3
 8104d52:	f000 ffd5 	bl	8105d00 <RCCEx_PLL2_Config>
 8104d56:	4603      	mov	r3, r0
 8104d58:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8104d5a:	e012      	b.n	8104d82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104d5c:	687b      	ldr	r3, [r7, #4]
 8104d5e:	3324      	adds	r3, #36	; 0x24
 8104d60:	2101      	movs	r1, #1
 8104d62:	4618      	mov	r0, r3
 8104d64:	f001 f87e 	bl	8105e64 <RCCEx_PLL3_Config>
 8104d68:	4603      	mov	r3, r0
 8104d6a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8104d6c:	e009      	b.n	8104d82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104d6e:	2301      	movs	r3, #1
 8104d70:	75fb      	strb	r3, [r7, #23]
      break;
 8104d72:	e006      	b.n	8104d82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8104d74:	bf00      	nop
 8104d76:	e004      	b.n	8104d82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8104d78:	bf00      	nop
 8104d7a:	e002      	b.n	8104d82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8104d7c:	bf00      	nop
 8104d7e:	e000      	b.n	8104d82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8104d80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104d82:	7dfb      	ldrb	r3, [r7, #23]
 8104d84:	2b00      	cmp	r3, #0
 8104d86:	d109      	bne.n	8104d9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8104d88:	4b2d      	ldr	r3, [pc, #180]	; (8104e40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104d8c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8104d90:	687b      	ldr	r3, [r7, #4]
 8104d92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104d94:	492a      	ldr	r1, [pc, #168]	; (8104e40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104d96:	4313      	orrs	r3, r2
 8104d98:	650b      	str	r3, [r1, #80]	; 0x50
 8104d9a:	e001      	b.n	8104da0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104d9c:	7dfb      	ldrb	r3, [r7, #23]
 8104d9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8104da0:	687b      	ldr	r3, [r7, #4]
 8104da2:	681b      	ldr	r3, [r3, #0]
 8104da4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8104da8:	2b00      	cmp	r3, #0
 8104daa:	d04d      	beq.n	8104e48 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8104dac:	687b      	ldr	r3, [r7, #4]
 8104dae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8104db2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104db6:	d02e      	beq.n	8104e16 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8104db8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104dbc:	d828      	bhi.n	8104e10 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8104dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104dc2:	d02a      	beq.n	8104e1a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8104dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104dc8:	d822      	bhi.n	8104e10 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8104dca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104dce:	d026      	beq.n	8104e1e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8104dd0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104dd4:	d81c      	bhi.n	8104e10 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8104dd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104dda:	d010      	beq.n	8104dfe <HAL_RCCEx_PeriphCLKConfig+0x506>
 8104ddc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104de0:	d816      	bhi.n	8104e10 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8104de2:	2b00      	cmp	r3, #0
 8104de4:	d01d      	beq.n	8104e22 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8104de6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104dea:	d111      	bne.n	8104e10 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104dec:	687b      	ldr	r3, [r7, #4]
 8104dee:	3304      	adds	r3, #4
 8104df0:	2101      	movs	r1, #1
 8104df2:	4618      	mov	r0, r3
 8104df4:	f000 ff84 	bl	8105d00 <RCCEx_PLL2_Config>
 8104df8:	4603      	mov	r3, r0
 8104dfa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8104dfc:	e012      	b.n	8104e24 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104dfe:	687b      	ldr	r3, [r7, #4]
 8104e00:	3324      	adds	r3, #36	; 0x24
 8104e02:	2101      	movs	r1, #1
 8104e04:	4618      	mov	r0, r3
 8104e06:	f001 f82d 	bl	8105e64 <RCCEx_PLL3_Config>
 8104e0a:	4603      	mov	r3, r0
 8104e0c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8104e0e:	e009      	b.n	8104e24 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8104e10:	2301      	movs	r3, #1
 8104e12:	75fb      	strb	r3, [r7, #23]
      break;
 8104e14:	e006      	b.n	8104e24 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8104e16:	bf00      	nop
 8104e18:	e004      	b.n	8104e24 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8104e1a:	bf00      	nop
 8104e1c:	e002      	b.n	8104e24 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8104e1e:	bf00      	nop
 8104e20:	e000      	b.n	8104e24 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8104e22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104e24:	7dfb      	ldrb	r3, [r7, #23]
 8104e26:	2b00      	cmp	r3, #0
 8104e28:	d10c      	bne.n	8104e44 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8104e2a:	4b05      	ldr	r3, [pc, #20]	; (8104e40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104e2e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8104e32:	687b      	ldr	r3, [r7, #4]
 8104e34:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8104e38:	4901      	ldr	r1, [pc, #4]	; (8104e40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104e3a:	4313      	orrs	r3, r2
 8104e3c:	658b      	str	r3, [r1, #88]	; 0x58
 8104e3e:	e003      	b.n	8104e48 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8104e40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104e44:	7dfb      	ldrb	r3, [r7, #23]
 8104e46:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8104e48:	687b      	ldr	r3, [r7, #4]
 8104e4a:	681b      	ldr	r3, [r3, #0]
 8104e4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8104e50:	2b00      	cmp	r3, #0
 8104e52:	d02f      	beq.n	8104eb4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8104e54:	687b      	ldr	r3, [r7, #4]
 8104e56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104e58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104e5c:	d00e      	beq.n	8104e7c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8104e5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104e62:	d814      	bhi.n	8104e8e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8104e64:	2b00      	cmp	r3, #0
 8104e66:	d015      	beq.n	8104e94 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8104e68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104e6c:	d10f      	bne.n	8104e8e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104e6e:	4bb0      	ldr	r3, [pc, #704]	; (8105130 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104e72:	4aaf      	ldr	r2, [pc, #700]	; (8105130 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104e78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8104e7a:	e00c      	b.n	8104e96 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104e7c:	687b      	ldr	r3, [r7, #4]
 8104e7e:	3304      	adds	r3, #4
 8104e80:	2101      	movs	r1, #1
 8104e82:	4618      	mov	r0, r3
 8104e84:	f000 ff3c 	bl	8105d00 <RCCEx_PLL2_Config>
 8104e88:	4603      	mov	r3, r0
 8104e8a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8104e8c:	e003      	b.n	8104e96 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104e8e:	2301      	movs	r3, #1
 8104e90:	75fb      	strb	r3, [r7, #23]
      break;
 8104e92:	e000      	b.n	8104e96 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8104e94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104e96:	7dfb      	ldrb	r3, [r7, #23]
 8104e98:	2b00      	cmp	r3, #0
 8104e9a:	d109      	bne.n	8104eb0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8104e9c:	4ba4      	ldr	r3, [pc, #656]	; (8105130 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104ea0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8104ea4:	687b      	ldr	r3, [r7, #4]
 8104ea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104ea8:	49a1      	ldr	r1, [pc, #644]	; (8105130 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104eaa:	4313      	orrs	r3, r2
 8104eac:	650b      	str	r3, [r1, #80]	; 0x50
 8104eae:	e001      	b.n	8104eb4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104eb0:	7dfb      	ldrb	r3, [r7, #23]
 8104eb2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8104eb4:	687b      	ldr	r3, [r7, #4]
 8104eb6:	681b      	ldr	r3, [r3, #0]
 8104eb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8104ebc:	2b00      	cmp	r3, #0
 8104ebe:	d032      	beq.n	8104f26 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8104ec0:	687b      	ldr	r3, [r7, #4]
 8104ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104ec4:	2b03      	cmp	r3, #3
 8104ec6:	d81b      	bhi.n	8104f00 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8104ec8:	a201      	add	r2, pc, #4	; (adr r2, 8104ed0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8104eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104ece:	bf00      	nop
 8104ed0:	08104f07 	.word	0x08104f07
 8104ed4:	08104ee1 	.word	0x08104ee1
 8104ed8:	08104eef 	.word	0x08104eef
 8104edc:	08104f07 	.word	0x08104f07
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104ee0:	4b93      	ldr	r3, [pc, #588]	; (8105130 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104ee4:	4a92      	ldr	r2, [pc, #584]	; (8105130 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104eea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8104eec:	e00c      	b.n	8104f08 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8104eee:	687b      	ldr	r3, [r7, #4]
 8104ef0:	3304      	adds	r3, #4
 8104ef2:	2102      	movs	r1, #2
 8104ef4:	4618      	mov	r0, r3
 8104ef6:	f000 ff03 	bl	8105d00 <RCCEx_PLL2_Config>
 8104efa:	4603      	mov	r3, r0
 8104efc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8104efe:	e003      	b.n	8104f08 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8104f00:	2301      	movs	r3, #1
 8104f02:	75fb      	strb	r3, [r7, #23]
      break;
 8104f04:	e000      	b.n	8104f08 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8104f06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104f08:	7dfb      	ldrb	r3, [r7, #23]
 8104f0a:	2b00      	cmp	r3, #0
 8104f0c:	d109      	bne.n	8104f22 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8104f0e:	4b88      	ldr	r3, [pc, #544]	; (8105130 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104f12:	f023 0203 	bic.w	r2, r3, #3
 8104f16:	687b      	ldr	r3, [r7, #4]
 8104f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104f1a:	4985      	ldr	r1, [pc, #532]	; (8105130 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104f1c:	4313      	orrs	r3, r2
 8104f1e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8104f20:	e001      	b.n	8104f26 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104f22:	7dfb      	ldrb	r3, [r7, #23]
 8104f24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8104f26:	687b      	ldr	r3, [r7, #4]
 8104f28:	681b      	ldr	r3, [r3, #0]
 8104f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8104f2e:	2b00      	cmp	r3, #0
 8104f30:	f000 8088 	beq.w	8105044 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8104f34:	4b7f      	ldr	r3, [pc, #508]	; (8105134 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8104f36:	681b      	ldr	r3, [r3, #0]
 8104f38:	4a7e      	ldr	r2, [pc, #504]	; (8105134 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8104f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8104f3e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8104f40:	f7fe f98c 	bl	810325c <HAL_GetTick>
 8104f44:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8104f46:	e009      	b.n	8104f5c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8104f48:	f7fe f988 	bl	810325c <HAL_GetTick>
 8104f4c:	4602      	mov	r2, r0
 8104f4e:	693b      	ldr	r3, [r7, #16]
 8104f50:	1ad3      	subs	r3, r2, r3
 8104f52:	2b64      	cmp	r3, #100	; 0x64
 8104f54:	d902      	bls.n	8104f5c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8104f56:	2303      	movs	r3, #3
 8104f58:	75fb      	strb	r3, [r7, #23]
        break;
 8104f5a:	e005      	b.n	8104f68 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8104f5c:	4b75      	ldr	r3, [pc, #468]	; (8105134 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8104f5e:	681b      	ldr	r3, [r3, #0]
 8104f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104f64:	2b00      	cmp	r3, #0
 8104f66:	d0ef      	beq.n	8104f48 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8104f68:	7dfb      	ldrb	r3, [r7, #23]
 8104f6a:	2b00      	cmp	r3, #0
 8104f6c:	d168      	bne.n	8105040 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8104f6e:	4b70      	ldr	r3, [pc, #448]	; (8105130 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104f70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8104f72:	687b      	ldr	r3, [r7, #4]
 8104f74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104f78:	4053      	eors	r3, r2
 8104f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8104f7e:	2b00      	cmp	r3, #0
 8104f80:	d013      	beq.n	8104faa <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8104f82:	4b6b      	ldr	r3, [pc, #428]	; (8105130 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8104f8a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8104f8c:	4b68      	ldr	r3, [pc, #416]	; (8105130 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104f90:	4a67      	ldr	r2, [pc, #412]	; (8105130 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8104f96:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8104f98:	4b65      	ldr	r3, [pc, #404]	; (8105130 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104f9c:	4a64      	ldr	r2, [pc, #400]	; (8105130 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8104fa2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8104fa4:	4a62      	ldr	r2, [pc, #392]	; (8105130 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104fa6:	68fb      	ldr	r3, [r7, #12]
 8104fa8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8104faa:	687b      	ldr	r3, [r7, #4]
 8104fac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104fb4:	d115      	bne.n	8104fe2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8104fb6:	f7fe f951 	bl	810325c <HAL_GetTick>
 8104fba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8104fbc:	e00b      	b.n	8104fd6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8104fbe:	f7fe f94d 	bl	810325c <HAL_GetTick>
 8104fc2:	4602      	mov	r2, r0
 8104fc4:	693b      	ldr	r3, [r7, #16]
 8104fc6:	1ad3      	subs	r3, r2, r3
 8104fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8104fcc:	4293      	cmp	r3, r2
 8104fce:	d902      	bls.n	8104fd6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8104fd0:	2303      	movs	r3, #3
 8104fd2:	75fb      	strb	r3, [r7, #23]
            break;
 8104fd4:	e005      	b.n	8104fe2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8104fd6:	4b56      	ldr	r3, [pc, #344]	; (8105130 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104fda:	f003 0302 	and.w	r3, r3, #2
 8104fde:	2b00      	cmp	r3, #0
 8104fe0:	d0ed      	beq.n	8104fbe <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8104fe2:	7dfb      	ldrb	r3, [r7, #23]
 8104fe4:	2b00      	cmp	r3, #0
 8104fe6:	d128      	bne.n	810503a <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8104fe8:	687b      	ldr	r3, [r7, #4]
 8104fea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8104ff2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104ff6:	d10f      	bne.n	8105018 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8104ff8:	4b4d      	ldr	r3, [pc, #308]	; (8105130 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104ffa:	691b      	ldr	r3, [r3, #16]
 8104ffc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8105000:	687b      	ldr	r3, [r7, #4]
 8105002:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8105006:	091b      	lsrs	r3, r3, #4
 8105008:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 810500c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8105010:	4947      	ldr	r1, [pc, #284]	; (8105130 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105012:	4313      	orrs	r3, r2
 8105014:	610b      	str	r3, [r1, #16]
 8105016:	e005      	b.n	8105024 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8105018:	4b45      	ldr	r3, [pc, #276]	; (8105130 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810501a:	691b      	ldr	r3, [r3, #16]
 810501c:	4a44      	ldr	r2, [pc, #272]	; (8105130 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810501e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8105022:	6113      	str	r3, [r2, #16]
 8105024:	4b42      	ldr	r3, [pc, #264]	; (8105130 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105026:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8105028:	687b      	ldr	r3, [r7, #4]
 810502a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810502e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8105032:	493f      	ldr	r1, [pc, #252]	; (8105130 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105034:	4313      	orrs	r3, r2
 8105036:	670b      	str	r3, [r1, #112]	; 0x70
 8105038:	e004      	b.n	8105044 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810503a:	7dfb      	ldrb	r3, [r7, #23]
 810503c:	75bb      	strb	r3, [r7, #22]
 810503e:	e001      	b.n	8105044 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105040:	7dfb      	ldrb	r3, [r7, #23]
 8105042:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8105044:	687b      	ldr	r3, [r7, #4]
 8105046:	681b      	ldr	r3, [r3, #0]
 8105048:	f003 0301 	and.w	r3, r3, #1
 810504c:	2b00      	cmp	r3, #0
 810504e:	f000 8083 	beq.w	8105158 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8105052:	687b      	ldr	r3, [r7, #4]
 8105054:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8105056:	2b28      	cmp	r3, #40	; 0x28
 8105058:	d866      	bhi.n	8105128 <HAL_RCCEx_PeriphCLKConfig+0x830>
 810505a:	a201      	add	r2, pc, #4	; (adr r2, 8105060 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 810505c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105060:	08105139 	.word	0x08105139
 8105064:	08105129 	.word	0x08105129
 8105068:	08105129 	.word	0x08105129
 810506c:	08105129 	.word	0x08105129
 8105070:	08105129 	.word	0x08105129
 8105074:	08105129 	.word	0x08105129
 8105078:	08105129 	.word	0x08105129
 810507c:	08105129 	.word	0x08105129
 8105080:	08105105 	.word	0x08105105
 8105084:	08105129 	.word	0x08105129
 8105088:	08105129 	.word	0x08105129
 810508c:	08105129 	.word	0x08105129
 8105090:	08105129 	.word	0x08105129
 8105094:	08105129 	.word	0x08105129
 8105098:	08105129 	.word	0x08105129
 810509c:	08105129 	.word	0x08105129
 81050a0:	08105117 	.word	0x08105117
 81050a4:	08105129 	.word	0x08105129
 81050a8:	08105129 	.word	0x08105129
 81050ac:	08105129 	.word	0x08105129
 81050b0:	08105129 	.word	0x08105129
 81050b4:	08105129 	.word	0x08105129
 81050b8:	08105129 	.word	0x08105129
 81050bc:	08105129 	.word	0x08105129
 81050c0:	08105139 	.word	0x08105139
 81050c4:	08105129 	.word	0x08105129
 81050c8:	08105129 	.word	0x08105129
 81050cc:	08105129 	.word	0x08105129
 81050d0:	08105129 	.word	0x08105129
 81050d4:	08105129 	.word	0x08105129
 81050d8:	08105129 	.word	0x08105129
 81050dc:	08105129 	.word	0x08105129
 81050e0:	08105139 	.word	0x08105139
 81050e4:	08105129 	.word	0x08105129
 81050e8:	08105129 	.word	0x08105129
 81050ec:	08105129 	.word	0x08105129
 81050f0:	08105129 	.word	0x08105129
 81050f4:	08105129 	.word	0x08105129
 81050f8:	08105129 	.word	0x08105129
 81050fc:	08105129 	.word	0x08105129
 8105100:	08105139 	.word	0x08105139
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105104:	687b      	ldr	r3, [r7, #4]
 8105106:	3304      	adds	r3, #4
 8105108:	2101      	movs	r1, #1
 810510a:	4618      	mov	r0, r3
 810510c:	f000 fdf8 	bl	8105d00 <RCCEx_PLL2_Config>
 8105110:	4603      	mov	r3, r0
 8105112:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8105114:	e011      	b.n	810513a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8105116:	687b      	ldr	r3, [r7, #4]
 8105118:	3324      	adds	r3, #36	; 0x24
 810511a:	2101      	movs	r1, #1
 810511c:	4618      	mov	r0, r3
 810511e:	f000 fea1 	bl	8105e64 <RCCEx_PLL3_Config>
 8105122:	4603      	mov	r3, r0
 8105124:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8105126:	e008      	b.n	810513a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105128:	2301      	movs	r3, #1
 810512a:	75fb      	strb	r3, [r7, #23]
      break;
 810512c:	e005      	b.n	810513a <HAL_RCCEx_PeriphCLKConfig+0x842>
 810512e:	bf00      	nop
 8105130:	58024400 	.word	0x58024400
 8105134:	58024800 	.word	0x58024800
      break;
 8105138:	bf00      	nop
    }

    if(ret == HAL_OK)
 810513a:	7dfb      	ldrb	r3, [r7, #23]
 810513c:	2b00      	cmp	r3, #0
 810513e:	d109      	bne.n	8105154 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8105140:	4b96      	ldr	r3, [pc, #600]	; (810539c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8105142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105144:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8105148:	687b      	ldr	r3, [r7, #4]
 810514a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810514c:	4993      	ldr	r1, [pc, #588]	; (810539c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810514e:	4313      	orrs	r3, r2
 8105150:	654b      	str	r3, [r1, #84]	; 0x54
 8105152:	e001      	b.n	8105158 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105154:	7dfb      	ldrb	r3, [r7, #23]
 8105156:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8105158:	687b      	ldr	r3, [r7, #4]
 810515a:	681b      	ldr	r3, [r3, #0]
 810515c:	f003 0302 	and.w	r3, r3, #2
 8105160:	2b00      	cmp	r3, #0
 8105162:	d038      	beq.n	81051d6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8105164:	687b      	ldr	r3, [r7, #4]
 8105166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8105168:	2b05      	cmp	r3, #5
 810516a:	d821      	bhi.n	81051b0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 810516c:	a201      	add	r2, pc, #4	; (adr r2, 8105174 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 810516e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105172:	bf00      	nop
 8105174:	081051b7 	.word	0x081051b7
 8105178:	0810518d 	.word	0x0810518d
 810517c:	0810519f 	.word	0x0810519f
 8105180:	081051b7 	.word	0x081051b7
 8105184:	081051b7 	.word	0x081051b7
 8105188:	081051b7 	.word	0x081051b7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810518c:	687b      	ldr	r3, [r7, #4]
 810518e:	3304      	adds	r3, #4
 8105190:	2101      	movs	r1, #1
 8105192:	4618      	mov	r0, r3
 8105194:	f000 fdb4 	bl	8105d00 <RCCEx_PLL2_Config>
 8105198:	4603      	mov	r3, r0
 810519a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810519c:	e00c      	b.n	81051b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810519e:	687b      	ldr	r3, [r7, #4]
 81051a0:	3324      	adds	r3, #36	; 0x24
 81051a2:	2101      	movs	r1, #1
 81051a4:	4618      	mov	r0, r3
 81051a6:	f000 fe5d 	bl	8105e64 <RCCEx_PLL3_Config>
 81051aa:	4603      	mov	r3, r0
 81051ac:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81051ae:	e003      	b.n	81051b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81051b0:	2301      	movs	r3, #1
 81051b2:	75fb      	strb	r3, [r7, #23]
      break;
 81051b4:	e000      	b.n	81051b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 81051b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81051b8:	7dfb      	ldrb	r3, [r7, #23]
 81051ba:	2b00      	cmp	r3, #0
 81051bc:	d109      	bne.n	81051d2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81051be:	4b77      	ldr	r3, [pc, #476]	; (810539c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81051c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81051c2:	f023 0207 	bic.w	r2, r3, #7
 81051c6:	687b      	ldr	r3, [r7, #4]
 81051c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81051ca:	4974      	ldr	r1, [pc, #464]	; (810539c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81051cc:	4313      	orrs	r3, r2
 81051ce:	654b      	str	r3, [r1, #84]	; 0x54
 81051d0:	e001      	b.n	81051d6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81051d2:	7dfb      	ldrb	r3, [r7, #23]
 81051d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81051d6:	687b      	ldr	r3, [r7, #4]
 81051d8:	681b      	ldr	r3, [r3, #0]
 81051da:	f003 0304 	and.w	r3, r3, #4
 81051de:	2b00      	cmp	r3, #0
 81051e0:	d03a      	beq.n	8105258 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 81051e2:	687b      	ldr	r3, [r7, #4]
 81051e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81051e8:	2b05      	cmp	r3, #5
 81051ea:	d821      	bhi.n	8105230 <HAL_RCCEx_PeriphCLKConfig+0x938>
 81051ec:	a201      	add	r2, pc, #4	; (adr r2, 81051f4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 81051ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81051f2:	bf00      	nop
 81051f4:	08105237 	.word	0x08105237
 81051f8:	0810520d 	.word	0x0810520d
 81051fc:	0810521f 	.word	0x0810521f
 8105200:	08105237 	.word	0x08105237
 8105204:	08105237 	.word	0x08105237
 8105208:	08105237 	.word	0x08105237
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810520c:	687b      	ldr	r3, [r7, #4]
 810520e:	3304      	adds	r3, #4
 8105210:	2101      	movs	r1, #1
 8105212:	4618      	mov	r0, r3
 8105214:	f000 fd74 	bl	8105d00 <RCCEx_PLL2_Config>
 8105218:	4603      	mov	r3, r0
 810521a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810521c:	e00c      	b.n	8105238 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810521e:	687b      	ldr	r3, [r7, #4]
 8105220:	3324      	adds	r3, #36	; 0x24
 8105222:	2101      	movs	r1, #1
 8105224:	4618      	mov	r0, r3
 8105226:	f000 fe1d 	bl	8105e64 <RCCEx_PLL3_Config>
 810522a:	4603      	mov	r3, r0
 810522c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810522e:	e003      	b.n	8105238 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105230:	2301      	movs	r3, #1
 8105232:	75fb      	strb	r3, [r7, #23]
      break;
 8105234:	e000      	b.n	8105238 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8105236:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105238:	7dfb      	ldrb	r3, [r7, #23]
 810523a:	2b00      	cmp	r3, #0
 810523c:	d10a      	bne.n	8105254 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810523e:	4b57      	ldr	r3, [pc, #348]	; (810539c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8105240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105242:	f023 0207 	bic.w	r2, r3, #7
 8105246:	687b      	ldr	r3, [r7, #4]
 8105248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810524c:	4953      	ldr	r1, [pc, #332]	; (810539c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810524e:	4313      	orrs	r3, r2
 8105250:	658b      	str	r3, [r1, #88]	; 0x58
 8105252:	e001      	b.n	8105258 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105254:	7dfb      	ldrb	r3, [r7, #23]
 8105256:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8105258:	687b      	ldr	r3, [r7, #4]
 810525a:	681b      	ldr	r3, [r3, #0]
 810525c:	f003 0320 	and.w	r3, r3, #32
 8105260:	2b00      	cmp	r3, #0
 8105262:	d04b      	beq.n	81052fc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8105264:	687b      	ldr	r3, [r7, #4]
 8105266:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810526a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810526e:	d02e      	beq.n	81052ce <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8105270:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8105274:	d828      	bhi.n	81052c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8105276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810527a:	d02a      	beq.n	81052d2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 810527c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105280:	d822      	bhi.n	81052c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8105282:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105286:	d026      	beq.n	81052d6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8105288:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810528c:	d81c      	bhi.n	81052c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 810528e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105292:	d010      	beq.n	81052b6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8105294:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105298:	d816      	bhi.n	81052c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 810529a:	2b00      	cmp	r3, #0
 810529c:	d01d      	beq.n	81052da <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 810529e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81052a2:	d111      	bne.n	81052c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81052a4:	687b      	ldr	r3, [r7, #4]
 81052a6:	3304      	adds	r3, #4
 81052a8:	2100      	movs	r1, #0
 81052aa:	4618      	mov	r0, r3
 81052ac:	f000 fd28 	bl	8105d00 <RCCEx_PLL2_Config>
 81052b0:	4603      	mov	r3, r0
 81052b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81052b4:	e012      	b.n	81052dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81052b6:	687b      	ldr	r3, [r7, #4]
 81052b8:	3324      	adds	r3, #36	; 0x24
 81052ba:	2102      	movs	r1, #2
 81052bc:	4618      	mov	r0, r3
 81052be:	f000 fdd1 	bl	8105e64 <RCCEx_PLL3_Config>
 81052c2:	4603      	mov	r3, r0
 81052c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81052c6:	e009      	b.n	81052dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81052c8:	2301      	movs	r3, #1
 81052ca:	75fb      	strb	r3, [r7, #23]
      break;
 81052cc:	e006      	b.n	81052dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81052ce:	bf00      	nop
 81052d0:	e004      	b.n	81052dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81052d2:	bf00      	nop
 81052d4:	e002      	b.n	81052dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81052d6:	bf00      	nop
 81052d8:	e000      	b.n	81052dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81052da:	bf00      	nop
    }

    if(ret == HAL_OK)
 81052dc:	7dfb      	ldrb	r3, [r7, #23]
 81052de:	2b00      	cmp	r3, #0
 81052e0:	d10a      	bne.n	81052f8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81052e2:	4b2e      	ldr	r3, [pc, #184]	; (810539c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81052e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81052e6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81052ea:	687b      	ldr	r3, [r7, #4]
 81052ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81052f0:	492a      	ldr	r1, [pc, #168]	; (810539c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81052f2:	4313      	orrs	r3, r2
 81052f4:	654b      	str	r3, [r1, #84]	; 0x54
 81052f6:	e001      	b.n	81052fc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81052f8:	7dfb      	ldrb	r3, [r7, #23]
 81052fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81052fc:	687b      	ldr	r3, [r7, #4]
 81052fe:	681b      	ldr	r3, [r3, #0]
 8105300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105304:	2b00      	cmp	r3, #0
 8105306:	d04d      	beq.n	81053a4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8105308:	687b      	ldr	r3, [r7, #4]
 810530a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810530e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8105312:	d02e      	beq.n	8105372 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8105314:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8105318:	d828      	bhi.n	810536c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810531a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810531e:	d02a      	beq.n	8105376 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8105320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105324:	d822      	bhi.n	810536c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8105326:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810532a:	d026      	beq.n	810537a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 810532c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8105330:	d81c      	bhi.n	810536c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8105332:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8105336:	d010      	beq.n	810535a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8105338:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810533c:	d816      	bhi.n	810536c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810533e:	2b00      	cmp	r3, #0
 8105340:	d01d      	beq.n	810537e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8105342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8105346:	d111      	bne.n	810536c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105348:	687b      	ldr	r3, [r7, #4]
 810534a:	3304      	adds	r3, #4
 810534c:	2100      	movs	r1, #0
 810534e:	4618      	mov	r0, r3
 8105350:	f000 fcd6 	bl	8105d00 <RCCEx_PLL2_Config>
 8105354:	4603      	mov	r3, r0
 8105356:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8105358:	e012      	b.n	8105380 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810535a:	687b      	ldr	r3, [r7, #4]
 810535c:	3324      	adds	r3, #36	; 0x24
 810535e:	2102      	movs	r1, #2
 8105360:	4618      	mov	r0, r3
 8105362:	f000 fd7f 	bl	8105e64 <RCCEx_PLL3_Config>
 8105366:	4603      	mov	r3, r0
 8105368:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 810536a:	e009      	b.n	8105380 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810536c:	2301      	movs	r3, #1
 810536e:	75fb      	strb	r3, [r7, #23]
      break;
 8105370:	e006      	b.n	8105380 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8105372:	bf00      	nop
 8105374:	e004      	b.n	8105380 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8105376:	bf00      	nop
 8105378:	e002      	b.n	8105380 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 810537a:	bf00      	nop
 810537c:	e000      	b.n	8105380 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 810537e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105380:	7dfb      	ldrb	r3, [r7, #23]
 8105382:	2b00      	cmp	r3, #0
 8105384:	d10c      	bne.n	81053a0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8105386:	4b05      	ldr	r3, [pc, #20]	; (810539c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8105388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810538a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 810538e:	687b      	ldr	r3, [r7, #4]
 8105390:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8105394:	4901      	ldr	r1, [pc, #4]	; (810539c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8105396:	4313      	orrs	r3, r2
 8105398:	658b      	str	r3, [r1, #88]	; 0x58
 810539a:	e003      	b.n	81053a4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 810539c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81053a0:	7dfb      	ldrb	r3, [r7, #23]
 81053a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81053a4:	687b      	ldr	r3, [r7, #4]
 81053a6:	681b      	ldr	r3, [r3, #0]
 81053a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81053ac:	2b00      	cmp	r3, #0
 81053ae:	d04b      	beq.n	8105448 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 81053b0:	687b      	ldr	r3, [r7, #4]
 81053b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81053b6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81053ba:	d02e      	beq.n	810541a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 81053bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81053c0:	d828      	bhi.n	8105414 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81053c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81053c6:	d02a      	beq.n	810541e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 81053c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81053cc:	d822      	bhi.n	8105414 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81053ce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81053d2:	d026      	beq.n	8105422 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 81053d4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81053d8:	d81c      	bhi.n	8105414 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81053da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81053de:	d010      	beq.n	8105402 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 81053e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81053e4:	d816      	bhi.n	8105414 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81053e6:	2b00      	cmp	r3, #0
 81053e8:	d01d      	beq.n	8105426 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 81053ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81053ee:	d111      	bne.n	8105414 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81053f0:	687b      	ldr	r3, [r7, #4]
 81053f2:	3304      	adds	r3, #4
 81053f4:	2100      	movs	r1, #0
 81053f6:	4618      	mov	r0, r3
 81053f8:	f000 fc82 	bl	8105d00 <RCCEx_PLL2_Config>
 81053fc:	4603      	mov	r3, r0
 81053fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8105400:	e012      	b.n	8105428 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8105402:	687b      	ldr	r3, [r7, #4]
 8105404:	3324      	adds	r3, #36	; 0x24
 8105406:	2102      	movs	r1, #2
 8105408:	4618      	mov	r0, r3
 810540a:	f000 fd2b 	bl	8105e64 <RCCEx_PLL3_Config>
 810540e:	4603      	mov	r3, r0
 8105410:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8105412:	e009      	b.n	8105428 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105414:	2301      	movs	r3, #1
 8105416:	75fb      	strb	r3, [r7, #23]
      break;
 8105418:	e006      	b.n	8105428 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810541a:	bf00      	nop
 810541c:	e004      	b.n	8105428 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810541e:	bf00      	nop
 8105420:	e002      	b.n	8105428 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8105422:	bf00      	nop
 8105424:	e000      	b.n	8105428 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8105426:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105428:	7dfb      	ldrb	r3, [r7, #23]
 810542a:	2b00      	cmp	r3, #0
 810542c:	d10a      	bne.n	8105444 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810542e:	4b9d      	ldr	r3, [pc, #628]	; (81056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105432:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8105436:	687b      	ldr	r3, [r7, #4]
 8105438:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810543c:	4999      	ldr	r1, [pc, #612]	; (81056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810543e:	4313      	orrs	r3, r2
 8105440:	658b      	str	r3, [r1, #88]	; 0x58
 8105442:	e001      	b.n	8105448 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105444:	7dfb      	ldrb	r3, [r7, #23]
 8105446:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8105448:	687b      	ldr	r3, [r7, #4]
 810544a:	681b      	ldr	r3, [r3, #0]
 810544c:	f003 0308 	and.w	r3, r3, #8
 8105450:	2b00      	cmp	r3, #0
 8105452:	d01a      	beq.n	810548a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8105454:	687b      	ldr	r3, [r7, #4]
 8105456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810545a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810545e:	d10a      	bne.n	8105476 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8105460:	687b      	ldr	r3, [r7, #4]
 8105462:	3324      	adds	r3, #36	; 0x24
 8105464:	2102      	movs	r1, #2
 8105466:	4618      	mov	r0, r3
 8105468:	f000 fcfc 	bl	8105e64 <RCCEx_PLL3_Config>
 810546c:	4603      	mov	r3, r0
 810546e:	2b00      	cmp	r3, #0
 8105470:	d001      	beq.n	8105476 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8105472:	2301      	movs	r3, #1
 8105474:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8105476:	4b8b      	ldr	r3, [pc, #556]	; (81056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810547a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 810547e:	687b      	ldr	r3, [r7, #4]
 8105480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8105484:	4987      	ldr	r1, [pc, #540]	; (81056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105486:	4313      	orrs	r3, r2
 8105488:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810548a:	687b      	ldr	r3, [r7, #4]
 810548c:	681b      	ldr	r3, [r3, #0]
 810548e:	f003 0310 	and.w	r3, r3, #16
 8105492:	2b00      	cmp	r3, #0
 8105494:	d01a      	beq.n	81054cc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8105496:	687b      	ldr	r3, [r7, #4]
 8105498:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810549c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81054a0:	d10a      	bne.n	81054b8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81054a2:	687b      	ldr	r3, [r7, #4]
 81054a4:	3324      	adds	r3, #36	; 0x24
 81054a6:	2102      	movs	r1, #2
 81054a8:	4618      	mov	r0, r3
 81054aa:	f000 fcdb 	bl	8105e64 <RCCEx_PLL3_Config>
 81054ae:	4603      	mov	r3, r0
 81054b0:	2b00      	cmp	r3, #0
 81054b2:	d001      	beq.n	81054b8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 81054b4:	2301      	movs	r3, #1
 81054b6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81054b8:	4b7a      	ldr	r3, [pc, #488]	; (81056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81054ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81054bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81054c0:	687b      	ldr	r3, [r7, #4]
 81054c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81054c6:	4977      	ldr	r1, [pc, #476]	; (81056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81054c8:	4313      	orrs	r3, r2
 81054ca:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81054cc:	687b      	ldr	r3, [r7, #4]
 81054ce:	681b      	ldr	r3, [r3, #0]
 81054d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81054d4:	2b00      	cmp	r3, #0
 81054d6:	d034      	beq.n	8105542 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 81054d8:	687b      	ldr	r3, [r7, #4]
 81054da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81054de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81054e2:	d01d      	beq.n	8105520 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 81054e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81054e8:	d817      	bhi.n	810551a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 81054ea:	2b00      	cmp	r3, #0
 81054ec:	d003      	beq.n	81054f6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 81054ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81054f2:	d009      	beq.n	8105508 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 81054f4:	e011      	b.n	810551a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81054f6:	687b      	ldr	r3, [r7, #4]
 81054f8:	3304      	adds	r3, #4
 81054fa:	2100      	movs	r1, #0
 81054fc:	4618      	mov	r0, r3
 81054fe:	f000 fbff 	bl	8105d00 <RCCEx_PLL2_Config>
 8105502:	4603      	mov	r3, r0
 8105504:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8105506:	e00c      	b.n	8105522 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8105508:	687b      	ldr	r3, [r7, #4]
 810550a:	3324      	adds	r3, #36	; 0x24
 810550c:	2102      	movs	r1, #2
 810550e:	4618      	mov	r0, r3
 8105510:	f000 fca8 	bl	8105e64 <RCCEx_PLL3_Config>
 8105514:	4603      	mov	r3, r0
 8105516:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8105518:	e003      	b.n	8105522 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810551a:	2301      	movs	r3, #1
 810551c:	75fb      	strb	r3, [r7, #23]
      break;
 810551e:	e000      	b.n	8105522 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8105520:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105522:	7dfb      	ldrb	r3, [r7, #23]
 8105524:	2b00      	cmp	r3, #0
 8105526:	d10a      	bne.n	810553e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8105528:	4b5e      	ldr	r3, [pc, #376]	; (81056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810552a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810552c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8105530:	687b      	ldr	r3, [r7, #4]
 8105532:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8105536:	495b      	ldr	r1, [pc, #364]	; (81056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105538:	4313      	orrs	r3, r2
 810553a:	658b      	str	r3, [r1, #88]	; 0x58
 810553c:	e001      	b.n	8105542 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810553e:	7dfb      	ldrb	r3, [r7, #23]
 8105540:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8105542:	687b      	ldr	r3, [r7, #4]
 8105544:	681b      	ldr	r3, [r3, #0]
 8105546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810554a:	2b00      	cmp	r3, #0
 810554c:	d033      	beq.n	81055b6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 810554e:	687b      	ldr	r3, [r7, #4]
 8105550:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105554:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8105558:	d01c      	beq.n	8105594 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 810555a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810555e:	d816      	bhi.n	810558e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8105560:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105564:	d003      	beq.n	810556e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8105566:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810556a:	d007      	beq.n	810557c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 810556c:	e00f      	b.n	810558e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810556e:	4b4d      	ldr	r3, [pc, #308]	; (81056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105572:	4a4c      	ldr	r2, [pc, #304]	; (81056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105578:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 810557a:	e00c      	b.n	8105596 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810557c:	687b      	ldr	r3, [r7, #4]
 810557e:	3324      	adds	r3, #36	; 0x24
 8105580:	2101      	movs	r1, #1
 8105582:	4618      	mov	r0, r3
 8105584:	f000 fc6e 	bl	8105e64 <RCCEx_PLL3_Config>
 8105588:	4603      	mov	r3, r0
 810558a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 810558c:	e003      	b.n	8105596 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810558e:	2301      	movs	r3, #1
 8105590:	75fb      	strb	r3, [r7, #23]
      break;
 8105592:	e000      	b.n	8105596 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8105594:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105596:	7dfb      	ldrb	r3, [r7, #23]
 8105598:	2b00      	cmp	r3, #0
 810559a:	d10a      	bne.n	81055b2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810559c:	4b41      	ldr	r3, [pc, #260]	; (81056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810559e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81055a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81055a4:	687b      	ldr	r3, [r7, #4]
 81055a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81055aa:	493e      	ldr	r1, [pc, #248]	; (81056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81055ac:	4313      	orrs	r3, r2
 81055ae:	654b      	str	r3, [r1, #84]	; 0x54
 81055b0:	e001      	b.n	81055b6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81055b2:	7dfb      	ldrb	r3, [r7, #23]
 81055b4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81055b6:	687b      	ldr	r3, [r7, #4]
 81055b8:	681b      	ldr	r3, [r3, #0]
 81055ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81055be:	2b00      	cmp	r3, #0
 81055c0:	d029      	beq.n	8105616 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 81055c2:	687b      	ldr	r3, [r7, #4]
 81055c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81055c6:	2b00      	cmp	r3, #0
 81055c8:	d003      	beq.n	81055d2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 81055ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81055ce:	d007      	beq.n	81055e0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 81055d0:	e00f      	b.n	81055f2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81055d2:	4b34      	ldr	r3, [pc, #208]	; (81056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81055d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81055d6:	4a33      	ldr	r2, [pc, #204]	; (81056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81055d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81055dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81055de:	e00b      	b.n	81055f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81055e0:	687b      	ldr	r3, [r7, #4]
 81055e2:	3304      	adds	r3, #4
 81055e4:	2102      	movs	r1, #2
 81055e6:	4618      	mov	r0, r3
 81055e8:	f000 fb8a 	bl	8105d00 <RCCEx_PLL2_Config>
 81055ec:	4603      	mov	r3, r0
 81055ee:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81055f0:	e002      	b.n	81055f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 81055f2:	2301      	movs	r3, #1
 81055f4:	75fb      	strb	r3, [r7, #23]
      break;
 81055f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81055f8:	7dfb      	ldrb	r3, [r7, #23]
 81055fa:	2b00      	cmp	r3, #0
 81055fc:	d109      	bne.n	8105612 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81055fe:	4b29      	ldr	r3, [pc, #164]	; (81056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105602:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8105606:	687b      	ldr	r3, [r7, #4]
 8105608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810560a:	4926      	ldr	r1, [pc, #152]	; (81056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810560c:	4313      	orrs	r3, r2
 810560e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8105610:	e001      	b.n	8105616 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105612:	7dfb      	ldrb	r3, [r7, #23]
 8105614:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8105616:	687b      	ldr	r3, [r7, #4]
 8105618:	681b      	ldr	r3, [r3, #0]
 810561a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810561e:	2b00      	cmp	r3, #0
 8105620:	d00a      	beq.n	8105638 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8105622:	687b      	ldr	r3, [r7, #4]
 8105624:	3324      	adds	r3, #36	; 0x24
 8105626:	2102      	movs	r1, #2
 8105628:	4618      	mov	r0, r3
 810562a:	f000 fc1b 	bl	8105e64 <RCCEx_PLL3_Config>
 810562e:	4603      	mov	r3, r0
 8105630:	2b00      	cmp	r3, #0
 8105632:	d001      	beq.n	8105638 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8105634:	2301      	movs	r3, #1
 8105636:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8105638:	687b      	ldr	r3, [r7, #4]
 810563a:	681b      	ldr	r3, [r3, #0]
 810563c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105640:	2b00      	cmp	r3, #0
 8105642:	d033      	beq.n	81056ac <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8105644:	687b      	ldr	r3, [r7, #4]
 8105646:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105648:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810564c:	d017      	beq.n	810567e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 810564e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8105652:	d811      	bhi.n	8105678 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8105654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8105658:	d013      	beq.n	8105682 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 810565a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810565e:	d80b      	bhi.n	8105678 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8105660:	2b00      	cmp	r3, #0
 8105662:	d010      	beq.n	8105686 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8105664:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105668:	d106      	bne.n	8105678 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810566a:	4b0e      	ldr	r3, [pc, #56]	; (81056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810566c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810566e:	4a0d      	ldr	r2, [pc, #52]	; (81056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105674:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8105676:	e007      	b.n	8105688 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105678:	2301      	movs	r3, #1
 810567a:	75fb      	strb	r3, [r7, #23]
      break;
 810567c:	e004      	b.n	8105688 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 810567e:	bf00      	nop
 8105680:	e002      	b.n	8105688 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8105682:	bf00      	nop
 8105684:	e000      	b.n	8105688 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8105686:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105688:	7dfb      	ldrb	r3, [r7, #23]
 810568a:	2b00      	cmp	r3, #0
 810568c:	d10c      	bne.n	81056a8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810568e:	4b05      	ldr	r3, [pc, #20]	; (81056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105692:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8105696:	687b      	ldr	r3, [r7, #4]
 8105698:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810569a:	4902      	ldr	r1, [pc, #8]	; (81056a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810569c:	4313      	orrs	r3, r2
 810569e:	654b      	str	r3, [r1, #84]	; 0x54
 81056a0:	e004      	b.n	81056ac <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 81056a2:	bf00      	nop
 81056a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81056a8:	7dfb      	ldrb	r3, [r7, #23]
 81056aa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81056ac:	687b      	ldr	r3, [r7, #4]
 81056ae:	681b      	ldr	r3, [r3, #0]
 81056b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81056b4:	2b00      	cmp	r3, #0
 81056b6:	d008      	beq.n	81056ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81056b8:	4b31      	ldr	r3, [pc, #196]	; (8105780 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81056ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81056bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 81056c0:	687b      	ldr	r3, [r7, #4]
 81056c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81056c4:	492e      	ldr	r1, [pc, #184]	; (8105780 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81056c6:	4313      	orrs	r3, r2
 81056c8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81056ca:	687b      	ldr	r3, [r7, #4]
 81056cc:	681b      	ldr	r3, [r3, #0]
 81056ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81056d2:	2b00      	cmp	r3, #0
 81056d4:	d009      	beq.n	81056ea <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81056d6:	4b2a      	ldr	r3, [pc, #168]	; (8105780 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81056d8:	691b      	ldr	r3, [r3, #16]
 81056da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 81056de:	687b      	ldr	r3, [r7, #4]
 81056e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81056e4:	4926      	ldr	r1, [pc, #152]	; (8105780 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81056e6:	4313      	orrs	r3, r2
 81056e8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81056ea:	687b      	ldr	r3, [r7, #4]
 81056ec:	681b      	ldr	r3, [r3, #0]
 81056ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81056f2:	2b00      	cmp	r3, #0
 81056f4:	d008      	beq.n	8105708 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81056f6:	4b22      	ldr	r3, [pc, #136]	; (8105780 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81056f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81056fa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 81056fe:	687b      	ldr	r3, [r7, #4]
 8105700:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8105702:	491f      	ldr	r1, [pc, #124]	; (8105780 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105704:	4313      	orrs	r3, r2
 8105706:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8105708:	687b      	ldr	r3, [r7, #4]
 810570a:	681b      	ldr	r3, [r3, #0]
 810570c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8105710:	2b00      	cmp	r3, #0
 8105712:	d00d      	beq.n	8105730 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8105714:	4b1a      	ldr	r3, [pc, #104]	; (8105780 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105716:	691b      	ldr	r3, [r3, #16]
 8105718:	4a19      	ldr	r2, [pc, #100]	; (8105780 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810571a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 810571e:	6113      	str	r3, [r2, #16]
 8105720:	4b17      	ldr	r3, [pc, #92]	; (8105780 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105722:	691a      	ldr	r2, [r3, #16]
 8105724:	687b      	ldr	r3, [r7, #4]
 8105726:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 810572a:	4915      	ldr	r1, [pc, #84]	; (8105780 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810572c:	4313      	orrs	r3, r2
 810572e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8105730:	687b      	ldr	r3, [r7, #4]
 8105732:	681b      	ldr	r3, [r3, #0]
 8105734:	2b00      	cmp	r3, #0
 8105736:	da08      	bge.n	810574a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8105738:	4b11      	ldr	r3, [pc, #68]	; (8105780 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810573a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810573c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8105740:	687b      	ldr	r3, [r7, #4]
 8105742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105744:	490e      	ldr	r1, [pc, #56]	; (8105780 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105746:	4313      	orrs	r3, r2
 8105748:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810574a:	687b      	ldr	r3, [r7, #4]
 810574c:	681b      	ldr	r3, [r3, #0]
 810574e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8105752:	2b00      	cmp	r3, #0
 8105754:	d009      	beq.n	810576a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8105756:	4b0a      	ldr	r3, [pc, #40]	; (8105780 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810575a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 810575e:	687b      	ldr	r3, [r7, #4]
 8105760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8105764:	4906      	ldr	r1, [pc, #24]	; (8105780 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105766:	4313      	orrs	r3, r2
 8105768:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 810576a:	7dbb      	ldrb	r3, [r7, #22]
 810576c:	2b00      	cmp	r3, #0
 810576e:	d101      	bne.n	8105774 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8105770:	2300      	movs	r3, #0
 8105772:	e000      	b.n	8105776 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8105774:	2301      	movs	r3, #1
}
 8105776:	4618      	mov	r0, r3
 8105778:	3718      	adds	r7, #24
 810577a:	46bd      	mov	sp, r7
 810577c:	bd80      	pop	{r7, pc}
 810577e:	bf00      	nop
 8105780:	58024400 	.word	0x58024400

08105784 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8105784:	b580      	push	{r7, lr}
 8105786:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8105788:	f7ff f858 	bl	810483c <HAL_RCC_GetHCLKFreq>
 810578c:	4602      	mov	r2, r0
 810578e:	4b06      	ldr	r3, [pc, #24]	; (81057a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8105790:	6a1b      	ldr	r3, [r3, #32]
 8105792:	091b      	lsrs	r3, r3, #4
 8105794:	f003 0307 	and.w	r3, r3, #7
 8105798:	4904      	ldr	r1, [pc, #16]	; (81057ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810579a:	5ccb      	ldrb	r3, [r1, r3]
 810579c:	f003 031f 	and.w	r3, r3, #31
 81057a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81057a4:	4618      	mov	r0, r3
 81057a6:	bd80      	pop	{r7, pc}
 81057a8:	58024400 	.word	0x58024400
 81057ac:	0810df00 	.word	0x0810df00

081057b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 81057b0:	b480      	push	{r7}
 81057b2:	b089      	sub	sp, #36	; 0x24
 81057b4:	af00      	add	r7, sp, #0
 81057b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81057b8:	4ba1      	ldr	r3, [pc, #644]	; (8105a40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81057ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81057bc:	f003 0303 	and.w	r3, r3, #3
 81057c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 81057c2:	4b9f      	ldr	r3, [pc, #636]	; (8105a40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81057c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81057c6:	0b1b      	lsrs	r3, r3, #12
 81057c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81057cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81057ce:	4b9c      	ldr	r3, [pc, #624]	; (8105a40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81057d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81057d2:	091b      	lsrs	r3, r3, #4
 81057d4:	f003 0301 	and.w	r3, r3, #1
 81057d8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 81057da:	4b99      	ldr	r3, [pc, #612]	; (8105a40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81057dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81057de:	08db      	lsrs	r3, r3, #3
 81057e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81057e4:	693a      	ldr	r2, [r7, #16]
 81057e6:	fb02 f303 	mul.w	r3, r2, r3
 81057ea:	ee07 3a90 	vmov	s15, r3
 81057ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81057f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 81057f6:	697b      	ldr	r3, [r7, #20]
 81057f8:	2b00      	cmp	r3, #0
 81057fa:	f000 8111 	beq.w	8105a20 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 81057fe:	69bb      	ldr	r3, [r7, #24]
 8105800:	2b02      	cmp	r3, #2
 8105802:	f000 8083 	beq.w	810590c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8105806:	69bb      	ldr	r3, [r7, #24]
 8105808:	2b02      	cmp	r3, #2
 810580a:	f200 80a1 	bhi.w	8105950 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810580e:	69bb      	ldr	r3, [r7, #24]
 8105810:	2b00      	cmp	r3, #0
 8105812:	d003      	beq.n	810581c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8105814:	69bb      	ldr	r3, [r7, #24]
 8105816:	2b01      	cmp	r3, #1
 8105818:	d056      	beq.n	81058c8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810581a:	e099      	b.n	8105950 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810581c:	4b88      	ldr	r3, [pc, #544]	; (8105a40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810581e:	681b      	ldr	r3, [r3, #0]
 8105820:	f003 0320 	and.w	r3, r3, #32
 8105824:	2b00      	cmp	r3, #0
 8105826:	d02d      	beq.n	8105884 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105828:	4b85      	ldr	r3, [pc, #532]	; (8105a40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810582a:	681b      	ldr	r3, [r3, #0]
 810582c:	08db      	lsrs	r3, r3, #3
 810582e:	f003 0303 	and.w	r3, r3, #3
 8105832:	4a84      	ldr	r2, [pc, #528]	; (8105a44 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8105834:	fa22 f303 	lsr.w	r3, r2, r3
 8105838:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810583a:	68bb      	ldr	r3, [r7, #8]
 810583c:	ee07 3a90 	vmov	s15, r3
 8105840:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105844:	697b      	ldr	r3, [r7, #20]
 8105846:	ee07 3a90 	vmov	s15, r3
 810584a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810584e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105852:	4b7b      	ldr	r3, [pc, #492]	; (8105a40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810585a:	ee07 3a90 	vmov	s15, r3
 810585e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105862:	ed97 6a03 	vldr	s12, [r7, #12]
 8105866:	eddf 5a78 	vldr	s11, [pc, #480]	; 8105a48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810586a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810586e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810587a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810587e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8105882:	e087      	b.n	8105994 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8105884:	697b      	ldr	r3, [r7, #20]
 8105886:	ee07 3a90 	vmov	s15, r3
 810588a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810588e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8105a4c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8105892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105896:	4b6a      	ldr	r3, [pc, #424]	; (8105a40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810589a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810589e:	ee07 3a90 	vmov	s15, r3
 81058a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81058a6:	ed97 6a03 	vldr	s12, [r7, #12]
 81058aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8105a48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81058ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81058b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81058b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81058ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81058be:	ee67 7a27 	vmul.f32	s15, s14, s15
 81058c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81058c6:	e065      	b.n	8105994 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81058c8:	697b      	ldr	r3, [r7, #20]
 81058ca:	ee07 3a90 	vmov	s15, r3
 81058ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81058d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8105a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81058d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81058da:	4b59      	ldr	r3, [pc, #356]	; (8105a40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81058dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81058de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81058e2:	ee07 3a90 	vmov	s15, r3
 81058e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81058ea:	ed97 6a03 	vldr	s12, [r7, #12]
 81058ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8105a48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81058f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81058f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81058fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81058fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105906:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810590a:	e043      	b.n	8105994 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810590c:	697b      	ldr	r3, [r7, #20]
 810590e:	ee07 3a90 	vmov	s15, r3
 8105912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105916:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8105a54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810591a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810591e:	4b48      	ldr	r3, [pc, #288]	; (8105a40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105926:	ee07 3a90 	vmov	s15, r3
 810592a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810592e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105932:	eddf 5a45 	vldr	s11, [pc, #276]	; 8105a48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810593a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810593e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105946:	ee67 7a27 	vmul.f32	s15, s14, s15
 810594a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810594e:	e021      	b.n	8105994 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8105950:	697b      	ldr	r3, [r7, #20]
 8105952:	ee07 3a90 	vmov	s15, r3
 8105956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810595a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8105a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810595e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105962:	4b37      	ldr	r3, [pc, #220]	; (8105a40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810596a:	ee07 3a90 	vmov	s15, r3
 810596e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105972:	ed97 6a03 	vldr	s12, [r7, #12]
 8105976:	eddf 5a34 	vldr	s11, [pc, #208]	; 8105a48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810597a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810597e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810598a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810598e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105992:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8105994:	4b2a      	ldr	r3, [pc, #168]	; (8105a40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105998:	0a5b      	lsrs	r3, r3, #9
 810599a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810599e:	ee07 3a90 	vmov	s15, r3
 81059a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81059a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81059aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 81059ae:	edd7 6a07 	vldr	s13, [r7, #28]
 81059b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81059b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81059ba:	ee17 2a90 	vmov	r2, s15
 81059be:	687b      	ldr	r3, [r7, #4]
 81059c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 81059c2:	4b1f      	ldr	r3, [pc, #124]	; (8105a40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81059c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81059c6:	0c1b      	lsrs	r3, r3, #16
 81059c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81059cc:	ee07 3a90 	vmov	s15, r3
 81059d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81059d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81059d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 81059dc:	edd7 6a07 	vldr	s13, [r7, #28]
 81059e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81059e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81059e8:	ee17 2a90 	vmov	r2, s15
 81059ec:	687b      	ldr	r3, [r7, #4]
 81059ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 81059f0:	4b13      	ldr	r3, [pc, #76]	; (8105a40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81059f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81059f4:	0e1b      	lsrs	r3, r3, #24
 81059f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81059fa:	ee07 3a90 	vmov	s15, r3
 81059fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105a02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105a06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105a0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8105a0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105a12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105a16:	ee17 2a90 	vmov	r2, s15
 8105a1a:	687b      	ldr	r3, [r7, #4]
 8105a1c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8105a1e:	e008      	b.n	8105a32 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8105a20:	687b      	ldr	r3, [r7, #4]
 8105a22:	2200      	movs	r2, #0
 8105a24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8105a26:	687b      	ldr	r3, [r7, #4]
 8105a28:	2200      	movs	r2, #0
 8105a2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8105a2c:	687b      	ldr	r3, [r7, #4]
 8105a2e:	2200      	movs	r2, #0
 8105a30:	609a      	str	r2, [r3, #8]
}
 8105a32:	bf00      	nop
 8105a34:	3724      	adds	r7, #36	; 0x24
 8105a36:	46bd      	mov	sp, r7
 8105a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a3c:	4770      	bx	lr
 8105a3e:	bf00      	nop
 8105a40:	58024400 	.word	0x58024400
 8105a44:	03d09000 	.word	0x03d09000
 8105a48:	46000000 	.word	0x46000000
 8105a4c:	4c742400 	.word	0x4c742400
 8105a50:	4a742400 	.word	0x4a742400
 8105a54:	4af42400 	.word	0x4af42400

08105a58 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8105a58:	b480      	push	{r7}
 8105a5a:	b089      	sub	sp, #36	; 0x24
 8105a5c:	af00      	add	r7, sp, #0
 8105a5e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105a60:	4ba1      	ldr	r3, [pc, #644]	; (8105ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105a64:	f003 0303 	and.w	r3, r3, #3
 8105a68:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8105a6a:	4b9f      	ldr	r3, [pc, #636]	; (8105ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105a6e:	0d1b      	lsrs	r3, r3, #20
 8105a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8105a74:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8105a76:	4b9c      	ldr	r3, [pc, #624]	; (8105ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105a7a:	0a1b      	lsrs	r3, r3, #8
 8105a7c:	f003 0301 	and.w	r3, r3, #1
 8105a80:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8105a82:	4b99      	ldr	r3, [pc, #612]	; (8105ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105a86:	08db      	lsrs	r3, r3, #3
 8105a88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105a8c:	693a      	ldr	r2, [r7, #16]
 8105a8e:	fb02 f303 	mul.w	r3, r2, r3
 8105a92:	ee07 3a90 	vmov	s15, r3
 8105a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105a9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8105a9e:	697b      	ldr	r3, [r7, #20]
 8105aa0:	2b00      	cmp	r3, #0
 8105aa2:	f000 8111 	beq.w	8105cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8105aa6:	69bb      	ldr	r3, [r7, #24]
 8105aa8:	2b02      	cmp	r3, #2
 8105aaa:	f000 8083 	beq.w	8105bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8105aae:	69bb      	ldr	r3, [r7, #24]
 8105ab0:	2b02      	cmp	r3, #2
 8105ab2:	f200 80a1 	bhi.w	8105bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8105ab6:	69bb      	ldr	r3, [r7, #24]
 8105ab8:	2b00      	cmp	r3, #0
 8105aba:	d003      	beq.n	8105ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8105abc:	69bb      	ldr	r3, [r7, #24]
 8105abe:	2b01      	cmp	r3, #1
 8105ac0:	d056      	beq.n	8105b70 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8105ac2:	e099      	b.n	8105bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105ac4:	4b88      	ldr	r3, [pc, #544]	; (8105ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105ac6:	681b      	ldr	r3, [r3, #0]
 8105ac8:	f003 0320 	and.w	r3, r3, #32
 8105acc:	2b00      	cmp	r3, #0
 8105ace:	d02d      	beq.n	8105b2c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105ad0:	4b85      	ldr	r3, [pc, #532]	; (8105ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105ad2:	681b      	ldr	r3, [r3, #0]
 8105ad4:	08db      	lsrs	r3, r3, #3
 8105ad6:	f003 0303 	and.w	r3, r3, #3
 8105ada:	4a84      	ldr	r2, [pc, #528]	; (8105cec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8105adc:	fa22 f303 	lsr.w	r3, r2, r3
 8105ae0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105ae2:	68bb      	ldr	r3, [r7, #8]
 8105ae4:	ee07 3a90 	vmov	s15, r3
 8105ae8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105aec:	697b      	ldr	r3, [r7, #20]
 8105aee:	ee07 3a90 	vmov	s15, r3
 8105af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105afa:	4b7b      	ldr	r3, [pc, #492]	; (8105ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105b02:	ee07 3a90 	vmov	s15, r3
 8105b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105b0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8105b0e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8105cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105b1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105b26:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8105b2a:	e087      	b.n	8105c3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105b2c:	697b      	ldr	r3, [r7, #20]
 8105b2e:	ee07 3a90 	vmov	s15, r3
 8105b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b36:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8105cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8105b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105b3e:	4b6a      	ldr	r3, [pc, #424]	; (8105ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105b46:	ee07 3a90 	vmov	s15, r3
 8105b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105b4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105b52:	eddf 5a67 	vldr	s11, [pc, #412]	; 8105cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105b5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105b6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105b6e:	e065      	b.n	8105c3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105b70:	697b      	ldr	r3, [r7, #20]
 8105b72:	ee07 3a90 	vmov	s15, r3
 8105b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b7a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8105cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8105b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105b82:	4b59      	ldr	r3, [pc, #356]	; (8105ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105b8a:	ee07 3a90 	vmov	s15, r3
 8105b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105b92:	ed97 6a03 	vldr	s12, [r7, #12]
 8105b96:	eddf 5a56 	vldr	s11, [pc, #344]	; 8105cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105ba2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105bae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105bb2:	e043      	b.n	8105c3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105bb4:	697b      	ldr	r3, [r7, #20]
 8105bb6:	ee07 3a90 	vmov	s15, r3
 8105bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105bbe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8105cfc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8105bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105bc6:	4b48      	ldr	r3, [pc, #288]	; (8105ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105bce:	ee07 3a90 	vmov	s15, r3
 8105bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105bd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8105bda:	eddf 5a45 	vldr	s11, [pc, #276]	; 8105cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105be6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105bf2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105bf6:	e021      	b.n	8105c3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105bf8:	697b      	ldr	r3, [r7, #20]
 8105bfa:	ee07 3a90 	vmov	s15, r3
 8105bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105c02:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8105cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8105c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105c0a:	4b37      	ldr	r3, [pc, #220]	; (8105ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105c12:	ee07 3a90 	vmov	s15, r3
 8105c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105c1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8105c1e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8105cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105c2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105c36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105c3a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8105c3c:	4b2a      	ldr	r3, [pc, #168]	; (8105ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105c40:	0a5b      	lsrs	r3, r3, #9
 8105c42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105c46:	ee07 3a90 	vmov	s15, r3
 8105c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105c4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105c52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105c56:	edd7 6a07 	vldr	s13, [r7, #28]
 8105c5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105c5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105c62:	ee17 2a90 	vmov	r2, s15
 8105c66:	687b      	ldr	r3, [r7, #4]
 8105c68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8105c6a:	4b1f      	ldr	r3, [pc, #124]	; (8105ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105c6e:	0c1b      	lsrs	r3, r3, #16
 8105c70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105c74:	ee07 3a90 	vmov	s15, r3
 8105c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105c7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105c80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105c84:	edd7 6a07 	vldr	s13, [r7, #28]
 8105c88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105c8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105c90:	ee17 2a90 	vmov	r2, s15
 8105c94:	687b      	ldr	r3, [r7, #4]
 8105c96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8105c98:	4b13      	ldr	r3, [pc, #76]	; (8105ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105c9c:	0e1b      	lsrs	r3, r3, #24
 8105c9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105ca2:	ee07 3a90 	vmov	s15, r3
 8105ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105caa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105cae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105cb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8105cb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105cba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105cbe:	ee17 2a90 	vmov	r2, s15
 8105cc2:	687b      	ldr	r3, [r7, #4]
 8105cc4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8105cc6:	e008      	b.n	8105cda <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8105cc8:	687b      	ldr	r3, [r7, #4]
 8105cca:	2200      	movs	r2, #0
 8105ccc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8105cce:	687b      	ldr	r3, [r7, #4]
 8105cd0:	2200      	movs	r2, #0
 8105cd2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8105cd4:	687b      	ldr	r3, [r7, #4]
 8105cd6:	2200      	movs	r2, #0
 8105cd8:	609a      	str	r2, [r3, #8]
}
 8105cda:	bf00      	nop
 8105cdc:	3724      	adds	r7, #36	; 0x24
 8105cde:	46bd      	mov	sp, r7
 8105ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ce4:	4770      	bx	lr
 8105ce6:	bf00      	nop
 8105ce8:	58024400 	.word	0x58024400
 8105cec:	03d09000 	.word	0x03d09000
 8105cf0:	46000000 	.word	0x46000000
 8105cf4:	4c742400 	.word	0x4c742400
 8105cf8:	4a742400 	.word	0x4a742400
 8105cfc:	4af42400 	.word	0x4af42400

08105d00 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8105d00:	b580      	push	{r7, lr}
 8105d02:	b084      	sub	sp, #16
 8105d04:	af00      	add	r7, sp, #0
 8105d06:	6078      	str	r0, [r7, #4]
 8105d08:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8105d0a:	2300      	movs	r3, #0
 8105d0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8105d0e:	4b54      	ldr	r3, [pc, #336]	; (8105e60 <RCCEx_PLL2_Config+0x160>)
 8105d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105d12:	f003 0303 	and.w	r3, r3, #3
 8105d16:	2b03      	cmp	r3, #3
 8105d18:	d101      	bne.n	8105d1e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8105d1a:	2301      	movs	r3, #1
 8105d1c:	e09b      	b.n	8105e56 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8105d1e:	4b50      	ldr	r3, [pc, #320]	; (8105e60 <RCCEx_PLL2_Config+0x160>)
 8105d20:	681b      	ldr	r3, [r3, #0]
 8105d22:	4a4f      	ldr	r2, [pc, #316]	; (8105e60 <RCCEx_PLL2_Config+0x160>)
 8105d24:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8105d28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105d2a:	f7fd fa97 	bl	810325c <HAL_GetTick>
 8105d2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8105d30:	e008      	b.n	8105d44 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8105d32:	f7fd fa93 	bl	810325c <HAL_GetTick>
 8105d36:	4602      	mov	r2, r0
 8105d38:	68bb      	ldr	r3, [r7, #8]
 8105d3a:	1ad3      	subs	r3, r2, r3
 8105d3c:	2b02      	cmp	r3, #2
 8105d3e:	d901      	bls.n	8105d44 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8105d40:	2303      	movs	r3, #3
 8105d42:	e088      	b.n	8105e56 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8105d44:	4b46      	ldr	r3, [pc, #280]	; (8105e60 <RCCEx_PLL2_Config+0x160>)
 8105d46:	681b      	ldr	r3, [r3, #0]
 8105d48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105d4c:	2b00      	cmp	r3, #0
 8105d4e:	d1f0      	bne.n	8105d32 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8105d50:	4b43      	ldr	r3, [pc, #268]	; (8105e60 <RCCEx_PLL2_Config+0x160>)
 8105d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105d54:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8105d58:	687b      	ldr	r3, [r7, #4]
 8105d5a:	681b      	ldr	r3, [r3, #0]
 8105d5c:	031b      	lsls	r3, r3, #12
 8105d5e:	4940      	ldr	r1, [pc, #256]	; (8105e60 <RCCEx_PLL2_Config+0x160>)
 8105d60:	4313      	orrs	r3, r2
 8105d62:	628b      	str	r3, [r1, #40]	; 0x28
 8105d64:	687b      	ldr	r3, [r7, #4]
 8105d66:	685b      	ldr	r3, [r3, #4]
 8105d68:	3b01      	subs	r3, #1
 8105d6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8105d6e:	687b      	ldr	r3, [r7, #4]
 8105d70:	689b      	ldr	r3, [r3, #8]
 8105d72:	3b01      	subs	r3, #1
 8105d74:	025b      	lsls	r3, r3, #9
 8105d76:	b29b      	uxth	r3, r3
 8105d78:	431a      	orrs	r2, r3
 8105d7a:	687b      	ldr	r3, [r7, #4]
 8105d7c:	68db      	ldr	r3, [r3, #12]
 8105d7e:	3b01      	subs	r3, #1
 8105d80:	041b      	lsls	r3, r3, #16
 8105d82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8105d86:	431a      	orrs	r2, r3
 8105d88:	687b      	ldr	r3, [r7, #4]
 8105d8a:	691b      	ldr	r3, [r3, #16]
 8105d8c:	3b01      	subs	r3, #1
 8105d8e:	061b      	lsls	r3, r3, #24
 8105d90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8105d94:	4932      	ldr	r1, [pc, #200]	; (8105e60 <RCCEx_PLL2_Config+0x160>)
 8105d96:	4313      	orrs	r3, r2
 8105d98:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8105d9a:	4b31      	ldr	r3, [pc, #196]	; (8105e60 <RCCEx_PLL2_Config+0x160>)
 8105d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105d9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8105da2:	687b      	ldr	r3, [r7, #4]
 8105da4:	695b      	ldr	r3, [r3, #20]
 8105da6:	492e      	ldr	r1, [pc, #184]	; (8105e60 <RCCEx_PLL2_Config+0x160>)
 8105da8:	4313      	orrs	r3, r2
 8105daa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8105dac:	4b2c      	ldr	r3, [pc, #176]	; (8105e60 <RCCEx_PLL2_Config+0x160>)
 8105dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105db0:	f023 0220 	bic.w	r2, r3, #32
 8105db4:	687b      	ldr	r3, [r7, #4]
 8105db6:	699b      	ldr	r3, [r3, #24]
 8105db8:	4929      	ldr	r1, [pc, #164]	; (8105e60 <RCCEx_PLL2_Config+0x160>)
 8105dba:	4313      	orrs	r3, r2
 8105dbc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8105dbe:	4b28      	ldr	r3, [pc, #160]	; (8105e60 <RCCEx_PLL2_Config+0x160>)
 8105dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105dc2:	4a27      	ldr	r2, [pc, #156]	; (8105e60 <RCCEx_PLL2_Config+0x160>)
 8105dc4:	f023 0310 	bic.w	r3, r3, #16
 8105dc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8105dca:	4b25      	ldr	r3, [pc, #148]	; (8105e60 <RCCEx_PLL2_Config+0x160>)
 8105dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105dce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105dd2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8105dd6:	687a      	ldr	r2, [r7, #4]
 8105dd8:	69d2      	ldr	r2, [r2, #28]
 8105dda:	00d2      	lsls	r2, r2, #3
 8105ddc:	4920      	ldr	r1, [pc, #128]	; (8105e60 <RCCEx_PLL2_Config+0x160>)
 8105dde:	4313      	orrs	r3, r2
 8105de0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8105de2:	4b1f      	ldr	r3, [pc, #124]	; (8105e60 <RCCEx_PLL2_Config+0x160>)
 8105de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105de6:	4a1e      	ldr	r2, [pc, #120]	; (8105e60 <RCCEx_PLL2_Config+0x160>)
 8105de8:	f043 0310 	orr.w	r3, r3, #16
 8105dec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8105dee:	683b      	ldr	r3, [r7, #0]
 8105df0:	2b00      	cmp	r3, #0
 8105df2:	d106      	bne.n	8105e02 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8105df4:	4b1a      	ldr	r3, [pc, #104]	; (8105e60 <RCCEx_PLL2_Config+0x160>)
 8105df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105df8:	4a19      	ldr	r2, [pc, #100]	; (8105e60 <RCCEx_PLL2_Config+0x160>)
 8105dfa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8105dfe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105e00:	e00f      	b.n	8105e22 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8105e02:	683b      	ldr	r3, [r7, #0]
 8105e04:	2b01      	cmp	r3, #1
 8105e06:	d106      	bne.n	8105e16 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8105e08:	4b15      	ldr	r3, [pc, #84]	; (8105e60 <RCCEx_PLL2_Config+0x160>)
 8105e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105e0c:	4a14      	ldr	r2, [pc, #80]	; (8105e60 <RCCEx_PLL2_Config+0x160>)
 8105e0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8105e12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105e14:	e005      	b.n	8105e22 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8105e16:	4b12      	ldr	r3, [pc, #72]	; (8105e60 <RCCEx_PLL2_Config+0x160>)
 8105e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105e1a:	4a11      	ldr	r2, [pc, #68]	; (8105e60 <RCCEx_PLL2_Config+0x160>)
 8105e1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8105e20:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8105e22:	4b0f      	ldr	r3, [pc, #60]	; (8105e60 <RCCEx_PLL2_Config+0x160>)
 8105e24:	681b      	ldr	r3, [r3, #0]
 8105e26:	4a0e      	ldr	r2, [pc, #56]	; (8105e60 <RCCEx_PLL2_Config+0x160>)
 8105e28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8105e2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105e2e:	f7fd fa15 	bl	810325c <HAL_GetTick>
 8105e32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8105e34:	e008      	b.n	8105e48 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8105e36:	f7fd fa11 	bl	810325c <HAL_GetTick>
 8105e3a:	4602      	mov	r2, r0
 8105e3c:	68bb      	ldr	r3, [r7, #8]
 8105e3e:	1ad3      	subs	r3, r2, r3
 8105e40:	2b02      	cmp	r3, #2
 8105e42:	d901      	bls.n	8105e48 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8105e44:	2303      	movs	r3, #3
 8105e46:	e006      	b.n	8105e56 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8105e48:	4b05      	ldr	r3, [pc, #20]	; (8105e60 <RCCEx_PLL2_Config+0x160>)
 8105e4a:	681b      	ldr	r3, [r3, #0]
 8105e4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105e50:	2b00      	cmp	r3, #0
 8105e52:	d0f0      	beq.n	8105e36 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8105e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8105e56:	4618      	mov	r0, r3
 8105e58:	3710      	adds	r7, #16
 8105e5a:	46bd      	mov	sp, r7
 8105e5c:	bd80      	pop	{r7, pc}
 8105e5e:	bf00      	nop
 8105e60:	58024400 	.word	0x58024400

08105e64 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8105e64:	b580      	push	{r7, lr}
 8105e66:	b084      	sub	sp, #16
 8105e68:	af00      	add	r7, sp, #0
 8105e6a:	6078      	str	r0, [r7, #4]
 8105e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8105e6e:	2300      	movs	r3, #0
 8105e70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8105e72:	4b54      	ldr	r3, [pc, #336]	; (8105fc4 <RCCEx_PLL3_Config+0x160>)
 8105e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105e76:	f003 0303 	and.w	r3, r3, #3
 8105e7a:	2b03      	cmp	r3, #3
 8105e7c:	d101      	bne.n	8105e82 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8105e7e:	2301      	movs	r3, #1
 8105e80:	e09b      	b.n	8105fba <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8105e82:	4b50      	ldr	r3, [pc, #320]	; (8105fc4 <RCCEx_PLL3_Config+0x160>)
 8105e84:	681b      	ldr	r3, [r3, #0]
 8105e86:	4a4f      	ldr	r2, [pc, #316]	; (8105fc4 <RCCEx_PLL3_Config+0x160>)
 8105e88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8105e8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105e8e:	f7fd f9e5 	bl	810325c <HAL_GetTick>
 8105e92:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8105e94:	e008      	b.n	8105ea8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8105e96:	f7fd f9e1 	bl	810325c <HAL_GetTick>
 8105e9a:	4602      	mov	r2, r0
 8105e9c:	68bb      	ldr	r3, [r7, #8]
 8105e9e:	1ad3      	subs	r3, r2, r3
 8105ea0:	2b02      	cmp	r3, #2
 8105ea2:	d901      	bls.n	8105ea8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8105ea4:	2303      	movs	r3, #3
 8105ea6:	e088      	b.n	8105fba <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8105ea8:	4b46      	ldr	r3, [pc, #280]	; (8105fc4 <RCCEx_PLL3_Config+0x160>)
 8105eaa:	681b      	ldr	r3, [r3, #0]
 8105eac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105eb0:	2b00      	cmp	r3, #0
 8105eb2:	d1f0      	bne.n	8105e96 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8105eb4:	4b43      	ldr	r3, [pc, #268]	; (8105fc4 <RCCEx_PLL3_Config+0x160>)
 8105eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105eb8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8105ebc:	687b      	ldr	r3, [r7, #4]
 8105ebe:	681b      	ldr	r3, [r3, #0]
 8105ec0:	051b      	lsls	r3, r3, #20
 8105ec2:	4940      	ldr	r1, [pc, #256]	; (8105fc4 <RCCEx_PLL3_Config+0x160>)
 8105ec4:	4313      	orrs	r3, r2
 8105ec6:	628b      	str	r3, [r1, #40]	; 0x28
 8105ec8:	687b      	ldr	r3, [r7, #4]
 8105eca:	685b      	ldr	r3, [r3, #4]
 8105ecc:	3b01      	subs	r3, #1
 8105ece:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8105ed2:	687b      	ldr	r3, [r7, #4]
 8105ed4:	689b      	ldr	r3, [r3, #8]
 8105ed6:	3b01      	subs	r3, #1
 8105ed8:	025b      	lsls	r3, r3, #9
 8105eda:	b29b      	uxth	r3, r3
 8105edc:	431a      	orrs	r2, r3
 8105ede:	687b      	ldr	r3, [r7, #4]
 8105ee0:	68db      	ldr	r3, [r3, #12]
 8105ee2:	3b01      	subs	r3, #1
 8105ee4:	041b      	lsls	r3, r3, #16
 8105ee6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8105eea:	431a      	orrs	r2, r3
 8105eec:	687b      	ldr	r3, [r7, #4]
 8105eee:	691b      	ldr	r3, [r3, #16]
 8105ef0:	3b01      	subs	r3, #1
 8105ef2:	061b      	lsls	r3, r3, #24
 8105ef4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8105ef8:	4932      	ldr	r1, [pc, #200]	; (8105fc4 <RCCEx_PLL3_Config+0x160>)
 8105efa:	4313      	orrs	r3, r2
 8105efc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8105efe:	4b31      	ldr	r3, [pc, #196]	; (8105fc4 <RCCEx_PLL3_Config+0x160>)
 8105f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105f02:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8105f06:	687b      	ldr	r3, [r7, #4]
 8105f08:	695b      	ldr	r3, [r3, #20]
 8105f0a:	492e      	ldr	r1, [pc, #184]	; (8105fc4 <RCCEx_PLL3_Config+0x160>)
 8105f0c:	4313      	orrs	r3, r2
 8105f0e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8105f10:	4b2c      	ldr	r3, [pc, #176]	; (8105fc4 <RCCEx_PLL3_Config+0x160>)
 8105f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105f14:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8105f18:	687b      	ldr	r3, [r7, #4]
 8105f1a:	699b      	ldr	r3, [r3, #24]
 8105f1c:	4929      	ldr	r1, [pc, #164]	; (8105fc4 <RCCEx_PLL3_Config+0x160>)
 8105f1e:	4313      	orrs	r3, r2
 8105f20:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8105f22:	4b28      	ldr	r3, [pc, #160]	; (8105fc4 <RCCEx_PLL3_Config+0x160>)
 8105f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105f26:	4a27      	ldr	r2, [pc, #156]	; (8105fc4 <RCCEx_PLL3_Config+0x160>)
 8105f28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8105f2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8105f2e:	4b25      	ldr	r3, [pc, #148]	; (8105fc4 <RCCEx_PLL3_Config+0x160>)
 8105f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105f32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105f36:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8105f3a:	687a      	ldr	r2, [r7, #4]
 8105f3c:	69d2      	ldr	r2, [r2, #28]
 8105f3e:	00d2      	lsls	r2, r2, #3
 8105f40:	4920      	ldr	r1, [pc, #128]	; (8105fc4 <RCCEx_PLL3_Config+0x160>)
 8105f42:	4313      	orrs	r3, r2
 8105f44:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8105f46:	4b1f      	ldr	r3, [pc, #124]	; (8105fc4 <RCCEx_PLL3_Config+0x160>)
 8105f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105f4a:	4a1e      	ldr	r2, [pc, #120]	; (8105fc4 <RCCEx_PLL3_Config+0x160>)
 8105f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8105f50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8105f52:	683b      	ldr	r3, [r7, #0]
 8105f54:	2b00      	cmp	r3, #0
 8105f56:	d106      	bne.n	8105f66 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8105f58:	4b1a      	ldr	r3, [pc, #104]	; (8105fc4 <RCCEx_PLL3_Config+0x160>)
 8105f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105f5c:	4a19      	ldr	r2, [pc, #100]	; (8105fc4 <RCCEx_PLL3_Config+0x160>)
 8105f5e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8105f62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105f64:	e00f      	b.n	8105f86 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8105f66:	683b      	ldr	r3, [r7, #0]
 8105f68:	2b01      	cmp	r3, #1
 8105f6a:	d106      	bne.n	8105f7a <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8105f6c:	4b15      	ldr	r3, [pc, #84]	; (8105fc4 <RCCEx_PLL3_Config+0x160>)
 8105f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105f70:	4a14      	ldr	r2, [pc, #80]	; (8105fc4 <RCCEx_PLL3_Config+0x160>)
 8105f72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8105f76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105f78:	e005      	b.n	8105f86 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8105f7a:	4b12      	ldr	r3, [pc, #72]	; (8105fc4 <RCCEx_PLL3_Config+0x160>)
 8105f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105f7e:	4a11      	ldr	r2, [pc, #68]	; (8105fc4 <RCCEx_PLL3_Config+0x160>)
 8105f80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8105f84:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8105f86:	4b0f      	ldr	r3, [pc, #60]	; (8105fc4 <RCCEx_PLL3_Config+0x160>)
 8105f88:	681b      	ldr	r3, [r3, #0]
 8105f8a:	4a0e      	ldr	r2, [pc, #56]	; (8105fc4 <RCCEx_PLL3_Config+0x160>)
 8105f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8105f90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105f92:	f7fd f963 	bl	810325c <HAL_GetTick>
 8105f96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8105f98:	e008      	b.n	8105fac <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8105f9a:	f7fd f95f 	bl	810325c <HAL_GetTick>
 8105f9e:	4602      	mov	r2, r0
 8105fa0:	68bb      	ldr	r3, [r7, #8]
 8105fa2:	1ad3      	subs	r3, r2, r3
 8105fa4:	2b02      	cmp	r3, #2
 8105fa6:	d901      	bls.n	8105fac <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8105fa8:	2303      	movs	r3, #3
 8105faa:	e006      	b.n	8105fba <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8105fac:	4b05      	ldr	r3, [pc, #20]	; (8105fc4 <RCCEx_PLL3_Config+0x160>)
 8105fae:	681b      	ldr	r3, [r3, #0]
 8105fb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105fb4:	2b00      	cmp	r3, #0
 8105fb6:	d0f0      	beq.n	8105f9a <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8105fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8105fba:	4618      	mov	r0, r3
 8105fbc:	3710      	adds	r7, #16
 8105fbe:	46bd      	mov	sp, r7
 8105fc0:	bd80      	pop	{r7, pc}
 8105fc2:	bf00      	nop
 8105fc4:	58024400 	.word	0x58024400

08105fc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8105fc8:	b580      	push	{r7, lr}
 8105fca:	b082      	sub	sp, #8
 8105fcc:	af00      	add	r7, sp, #0
 8105fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8105fd0:	687b      	ldr	r3, [r7, #4]
 8105fd2:	2b00      	cmp	r3, #0
 8105fd4:	d101      	bne.n	8105fda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8105fd6:	2301      	movs	r3, #1
 8105fd8:	e049      	b.n	810606e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8105fda:	687b      	ldr	r3, [r7, #4]
 8105fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8105fe0:	b2db      	uxtb	r3, r3
 8105fe2:	2b00      	cmp	r3, #0
 8105fe4:	d106      	bne.n	8105ff4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8105fe6:	687b      	ldr	r3, [r7, #4]
 8105fe8:	2200      	movs	r2, #0
 8105fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8105fee:	6878      	ldr	r0, [r7, #4]
 8105ff0:	f7fc fdea 	bl	8102bc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8105ff4:	687b      	ldr	r3, [r7, #4]
 8105ff6:	2202      	movs	r2, #2
 8105ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8105ffc:	687b      	ldr	r3, [r7, #4]
 8105ffe:	681a      	ldr	r2, [r3, #0]
 8106000:	687b      	ldr	r3, [r7, #4]
 8106002:	3304      	adds	r3, #4
 8106004:	4619      	mov	r1, r3
 8106006:	4610      	mov	r0, r2
 8106008:	f001 f8b8 	bl	810717c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810600c:	687b      	ldr	r3, [r7, #4]
 810600e:	2201      	movs	r2, #1
 8106010:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106014:	687b      	ldr	r3, [r7, #4]
 8106016:	2201      	movs	r2, #1
 8106018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 810601c:	687b      	ldr	r3, [r7, #4]
 810601e:	2201      	movs	r2, #1
 8106020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8106024:	687b      	ldr	r3, [r7, #4]
 8106026:	2201      	movs	r2, #1
 8106028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 810602c:	687b      	ldr	r3, [r7, #4]
 810602e:	2201      	movs	r2, #1
 8106030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8106034:	687b      	ldr	r3, [r7, #4]
 8106036:	2201      	movs	r2, #1
 8106038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 810603c:	687b      	ldr	r3, [r7, #4]
 810603e:	2201      	movs	r2, #1
 8106040:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106044:	687b      	ldr	r3, [r7, #4]
 8106046:	2201      	movs	r2, #1
 8106048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810604c:	687b      	ldr	r3, [r7, #4]
 810604e:	2201      	movs	r2, #1
 8106050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8106054:	687b      	ldr	r3, [r7, #4]
 8106056:	2201      	movs	r2, #1
 8106058:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 810605c:	687b      	ldr	r3, [r7, #4]
 810605e:	2201      	movs	r2, #1
 8106060:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8106064:	687b      	ldr	r3, [r7, #4]
 8106066:	2201      	movs	r2, #1
 8106068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 810606c:	2300      	movs	r3, #0
}
 810606e:	4618      	mov	r0, r3
 8106070:	3708      	adds	r7, #8
 8106072:	46bd      	mov	sp, r7
 8106074:	bd80      	pop	{r7, pc}
	...

08106078 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8106078:	b480      	push	{r7}
 810607a:	b085      	sub	sp, #20
 810607c:	af00      	add	r7, sp, #0
 810607e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8106080:	687b      	ldr	r3, [r7, #4]
 8106082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8106086:	b2db      	uxtb	r3, r3
 8106088:	2b01      	cmp	r3, #1
 810608a:	d001      	beq.n	8106090 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 810608c:	2301      	movs	r3, #1
 810608e:	e054      	b.n	810613a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106090:	687b      	ldr	r3, [r7, #4]
 8106092:	2202      	movs	r2, #2
 8106094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8106098:	687b      	ldr	r3, [r7, #4]
 810609a:	681b      	ldr	r3, [r3, #0]
 810609c:	68da      	ldr	r2, [r3, #12]
 810609e:	687b      	ldr	r3, [r7, #4]
 81060a0:	681b      	ldr	r3, [r3, #0]
 81060a2:	f042 0201 	orr.w	r2, r2, #1
 81060a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81060a8:	687b      	ldr	r3, [r7, #4]
 81060aa:	681b      	ldr	r3, [r3, #0]
 81060ac:	4a26      	ldr	r2, [pc, #152]	; (8106148 <HAL_TIM_Base_Start_IT+0xd0>)
 81060ae:	4293      	cmp	r3, r2
 81060b0:	d022      	beq.n	81060f8 <HAL_TIM_Base_Start_IT+0x80>
 81060b2:	687b      	ldr	r3, [r7, #4]
 81060b4:	681b      	ldr	r3, [r3, #0]
 81060b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81060ba:	d01d      	beq.n	81060f8 <HAL_TIM_Base_Start_IT+0x80>
 81060bc:	687b      	ldr	r3, [r7, #4]
 81060be:	681b      	ldr	r3, [r3, #0]
 81060c0:	4a22      	ldr	r2, [pc, #136]	; (810614c <HAL_TIM_Base_Start_IT+0xd4>)
 81060c2:	4293      	cmp	r3, r2
 81060c4:	d018      	beq.n	81060f8 <HAL_TIM_Base_Start_IT+0x80>
 81060c6:	687b      	ldr	r3, [r7, #4]
 81060c8:	681b      	ldr	r3, [r3, #0]
 81060ca:	4a21      	ldr	r2, [pc, #132]	; (8106150 <HAL_TIM_Base_Start_IT+0xd8>)
 81060cc:	4293      	cmp	r3, r2
 81060ce:	d013      	beq.n	81060f8 <HAL_TIM_Base_Start_IT+0x80>
 81060d0:	687b      	ldr	r3, [r7, #4]
 81060d2:	681b      	ldr	r3, [r3, #0]
 81060d4:	4a1f      	ldr	r2, [pc, #124]	; (8106154 <HAL_TIM_Base_Start_IT+0xdc>)
 81060d6:	4293      	cmp	r3, r2
 81060d8:	d00e      	beq.n	81060f8 <HAL_TIM_Base_Start_IT+0x80>
 81060da:	687b      	ldr	r3, [r7, #4]
 81060dc:	681b      	ldr	r3, [r3, #0]
 81060de:	4a1e      	ldr	r2, [pc, #120]	; (8106158 <HAL_TIM_Base_Start_IT+0xe0>)
 81060e0:	4293      	cmp	r3, r2
 81060e2:	d009      	beq.n	81060f8 <HAL_TIM_Base_Start_IT+0x80>
 81060e4:	687b      	ldr	r3, [r7, #4]
 81060e6:	681b      	ldr	r3, [r3, #0]
 81060e8:	4a1c      	ldr	r2, [pc, #112]	; (810615c <HAL_TIM_Base_Start_IT+0xe4>)
 81060ea:	4293      	cmp	r3, r2
 81060ec:	d004      	beq.n	81060f8 <HAL_TIM_Base_Start_IT+0x80>
 81060ee:	687b      	ldr	r3, [r7, #4]
 81060f0:	681b      	ldr	r3, [r3, #0]
 81060f2:	4a1b      	ldr	r2, [pc, #108]	; (8106160 <HAL_TIM_Base_Start_IT+0xe8>)
 81060f4:	4293      	cmp	r3, r2
 81060f6:	d115      	bne.n	8106124 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81060f8:	687b      	ldr	r3, [r7, #4]
 81060fa:	681b      	ldr	r3, [r3, #0]
 81060fc:	689a      	ldr	r2, [r3, #8]
 81060fe:	4b19      	ldr	r3, [pc, #100]	; (8106164 <HAL_TIM_Base_Start_IT+0xec>)
 8106100:	4013      	ands	r3, r2
 8106102:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106104:	68fb      	ldr	r3, [r7, #12]
 8106106:	2b06      	cmp	r3, #6
 8106108:	d015      	beq.n	8106136 <HAL_TIM_Base_Start_IT+0xbe>
 810610a:	68fb      	ldr	r3, [r7, #12]
 810610c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106110:	d011      	beq.n	8106136 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8106112:	687b      	ldr	r3, [r7, #4]
 8106114:	681b      	ldr	r3, [r3, #0]
 8106116:	681a      	ldr	r2, [r3, #0]
 8106118:	687b      	ldr	r3, [r7, #4]
 810611a:	681b      	ldr	r3, [r3, #0]
 810611c:	f042 0201 	orr.w	r2, r2, #1
 8106120:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106122:	e008      	b.n	8106136 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8106124:	687b      	ldr	r3, [r7, #4]
 8106126:	681b      	ldr	r3, [r3, #0]
 8106128:	681a      	ldr	r2, [r3, #0]
 810612a:	687b      	ldr	r3, [r7, #4]
 810612c:	681b      	ldr	r3, [r3, #0]
 810612e:	f042 0201 	orr.w	r2, r2, #1
 8106132:	601a      	str	r2, [r3, #0]
 8106134:	e000      	b.n	8106138 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106136:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8106138:	2300      	movs	r3, #0
}
 810613a:	4618      	mov	r0, r3
 810613c:	3714      	adds	r7, #20
 810613e:	46bd      	mov	sp, r7
 8106140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106144:	4770      	bx	lr
 8106146:	bf00      	nop
 8106148:	40010000 	.word	0x40010000
 810614c:	40000400 	.word	0x40000400
 8106150:	40000800 	.word	0x40000800
 8106154:	40000c00 	.word	0x40000c00
 8106158:	40010400 	.word	0x40010400
 810615c:	40001800 	.word	0x40001800
 8106160:	40014000 	.word	0x40014000
 8106164:	00010007 	.word	0x00010007

08106168 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8106168:	b580      	push	{r7, lr}
 810616a:	b082      	sub	sp, #8
 810616c:	af00      	add	r7, sp, #0
 810616e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8106170:	687b      	ldr	r3, [r7, #4]
 8106172:	2b00      	cmp	r3, #0
 8106174:	d101      	bne.n	810617a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8106176:	2301      	movs	r3, #1
 8106178:	e049      	b.n	810620e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810617a:	687b      	ldr	r3, [r7, #4]
 810617c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8106180:	b2db      	uxtb	r3, r3
 8106182:	2b00      	cmp	r3, #0
 8106184:	d106      	bne.n	8106194 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8106186:	687b      	ldr	r3, [r7, #4]
 8106188:	2200      	movs	r2, #0
 810618a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 810618e:	6878      	ldr	r0, [r7, #4]
 8106190:	f000 f841 	bl	8106216 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106194:	687b      	ldr	r3, [r7, #4]
 8106196:	2202      	movs	r2, #2
 8106198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810619c:	687b      	ldr	r3, [r7, #4]
 810619e:	681a      	ldr	r2, [r3, #0]
 81061a0:	687b      	ldr	r3, [r7, #4]
 81061a2:	3304      	adds	r3, #4
 81061a4:	4619      	mov	r1, r3
 81061a6:	4610      	mov	r0, r2
 81061a8:	f000 ffe8 	bl	810717c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81061ac:	687b      	ldr	r3, [r7, #4]
 81061ae:	2201      	movs	r2, #1
 81061b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81061b4:	687b      	ldr	r3, [r7, #4]
 81061b6:	2201      	movs	r2, #1
 81061b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81061bc:	687b      	ldr	r3, [r7, #4]
 81061be:	2201      	movs	r2, #1
 81061c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81061c4:	687b      	ldr	r3, [r7, #4]
 81061c6:	2201      	movs	r2, #1
 81061c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81061cc:	687b      	ldr	r3, [r7, #4]
 81061ce:	2201      	movs	r2, #1
 81061d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81061d4:	687b      	ldr	r3, [r7, #4]
 81061d6:	2201      	movs	r2, #1
 81061d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81061dc:	687b      	ldr	r3, [r7, #4]
 81061de:	2201      	movs	r2, #1
 81061e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81061e4:	687b      	ldr	r3, [r7, #4]
 81061e6:	2201      	movs	r2, #1
 81061e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81061ec:	687b      	ldr	r3, [r7, #4]
 81061ee:	2201      	movs	r2, #1
 81061f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81061f4:	687b      	ldr	r3, [r7, #4]
 81061f6:	2201      	movs	r2, #1
 81061f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81061fc:	687b      	ldr	r3, [r7, #4]
 81061fe:	2201      	movs	r2, #1
 8106200:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8106204:	687b      	ldr	r3, [r7, #4]
 8106206:	2201      	movs	r2, #1
 8106208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 810620c:	2300      	movs	r3, #0
}
 810620e:	4618      	mov	r0, r3
 8106210:	3708      	adds	r7, #8
 8106212:	46bd      	mov	sp, r7
 8106214:	bd80      	pop	{r7, pc}

08106216 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8106216:	b480      	push	{r7}
 8106218:	b083      	sub	sp, #12
 810621a:	af00      	add	r7, sp, #0
 810621c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 810621e:	bf00      	nop
 8106220:	370c      	adds	r7, #12
 8106222:	46bd      	mov	sp, r7
 8106224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106228:	4770      	bx	lr
	...

0810622c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 810622c:	b580      	push	{r7, lr}
 810622e:	b084      	sub	sp, #16
 8106230:	af00      	add	r7, sp, #0
 8106232:	6078      	str	r0, [r7, #4]
 8106234:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8106236:	683b      	ldr	r3, [r7, #0]
 8106238:	2b00      	cmp	r3, #0
 810623a:	d109      	bne.n	8106250 <HAL_TIM_PWM_Start+0x24>
 810623c:	687b      	ldr	r3, [r7, #4]
 810623e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8106242:	b2db      	uxtb	r3, r3
 8106244:	2b01      	cmp	r3, #1
 8106246:	bf14      	ite	ne
 8106248:	2301      	movne	r3, #1
 810624a:	2300      	moveq	r3, #0
 810624c:	b2db      	uxtb	r3, r3
 810624e:	e03c      	b.n	81062ca <HAL_TIM_PWM_Start+0x9e>
 8106250:	683b      	ldr	r3, [r7, #0]
 8106252:	2b04      	cmp	r3, #4
 8106254:	d109      	bne.n	810626a <HAL_TIM_PWM_Start+0x3e>
 8106256:	687b      	ldr	r3, [r7, #4]
 8106258:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 810625c:	b2db      	uxtb	r3, r3
 810625e:	2b01      	cmp	r3, #1
 8106260:	bf14      	ite	ne
 8106262:	2301      	movne	r3, #1
 8106264:	2300      	moveq	r3, #0
 8106266:	b2db      	uxtb	r3, r3
 8106268:	e02f      	b.n	81062ca <HAL_TIM_PWM_Start+0x9e>
 810626a:	683b      	ldr	r3, [r7, #0]
 810626c:	2b08      	cmp	r3, #8
 810626e:	d109      	bne.n	8106284 <HAL_TIM_PWM_Start+0x58>
 8106270:	687b      	ldr	r3, [r7, #4]
 8106272:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8106276:	b2db      	uxtb	r3, r3
 8106278:	2b01      	cmp	r3, #1
 810627a:	bf14      	ite	ne
 810627c:	2301      	movne	r3, #1
 810627e:	2300      	moveq	r3, #0
 8106280:	b2db      	uxtb	r3, r3
 8106282:	e022      	b.n	81062ca <HAL_TIM_PWM_Start+0x9e>
 8106284:	683b      	ldr	r3, [r7, #0]
 8106286:	2b0c      	cmp	r3, #12
 8106288:	d109      	bne.n	810629e <HAL_TIM_PWM_Start+0x72>
 810628a:	687b      	ldr	r3, [r7, #4]
 810628c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8106290:	b2db      	uxtb	r3, r3
 8106292:	2b01      	cmp	r3, #1
 8106294:	bf14      	ite	ne
 8106296:	2301      	movne	r3, #1
 8106298:	2300      	moveq	r3, #0
 810629a:	b2db      	uxtb	r3, r3
 810629c:	e015      	b.n	81062ca <HAL_TIM_PWM_Start+0x9e>
 810629e:	683b      	ldr	r3, [r7, #0]
 81062a0:	2b10      	cmp	r3, #16
 81062a2:	d109      	bne.n	81062b8 <HAL_TIM_PWM_Start+0x8c>
 81062a4:	687b      	ldr	r3, [r7, #4]
 81062a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 81062aa:	b2db      	uxtb	r3, r3
 81062ac:	2b01      	cmp	r3, #1
 81062ae:	bf14      	ite	ne
 81062b0:	2301      	movne	r3, #1
 81062b2:	2300      	moveq	r3, #0
 81062b4:	b2db      	uxtb	r3, r3
 81062b6:	e008      	b.n	81062ca <HAL_TIM_PWM_Start+0x9e>
 81062b8:	687b      	ldr	r3, [r7, #4]
 81062ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 81062be:	b2db      	uxtb	r3, r3
 81062c0:	2b01      	cmp	r3, #1
 81062c2:	bf14      	ite	ne
 81062c4:	2301      	movne	r3, #1
 81062c6:	2300      	moveq	r3, #0
 81062c8:	b2db      	uxtb	r3, r3
 81062ca:	2b00      	cmp	r3, #0
 81062cc:	d001      	beq.n	81062d2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 81062ce:	2301      	movs	r3, #1
 81062d0:	e0a1      	b.n	8106416 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 81062d2:	683b      	ldr	r3, [r7, #0]
 81062d4:	2b00      	cmp	r3, #0
 81062d6:	d104      	bne.n	81062e2 <HAL_TIM_PWM_Start+0xb6>
 81062d8:	687b      	ldr	r3, [r7, #4]
 81062da:	2202      	movs	r2, #2
 81062dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81062e0:	e023      	b.n	810632a <HAL_TIM_PWM_Start+0xfe>
 81062e2:	683b      	ldr	r3, [r7, #0]
 81062e4:	2b04      	cmp	r3, #4
 81062e6:	d104      	bne.n	81062f2 <HAL_TIM_PWM_Start+0xc6>
 81062e8:	687b      	ldr	r3, [r7, #4]
 81062ea:	2202      	movs	r2, #2
 81062ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81062f0:	e01b      	b.n	810632a <HAL_TIM_PWM_Start+0xfe>
 81062f2:	683b      	ldr	r3, [r7, #0]
 81062f4:	2b08      	cmp	r3, #8
 81062f6:	d104      	bne.n	8106302 <HAL_TIM_PWM_Start+0xd6>
 81062f8:	687b      	ldr	r3, [r7, #4]
 81062fa:	2202      	movs	r2, #2
 81062fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8106300:	e013      	b.n	810632a <HAL_TIM_PWM_Start+0xfe>
 8106302:	683b      	ldr	r3, [r7, #0]
 8106304:	2b0c      	cmp	r3, #12
 8106306:	d104      	bne.n	8106312 <HAL_TIM_PWM_Start+0xe6>
 8106308:	687b      	ldr	r3, [r7, #4]
 810630a:	2202      	movs	r2, #2
 810630c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8106310:	e00b      	b.n	810632a <HAL_TIM_PWM_Start+0xfe>
 8106312:	683b      	ldr	r3, [r7, #0]
 8106314:	2b10      	cmp	r3, #16
 8106316:	d104      	bne.n	8106322 <HAL_TIM_PWM_Start+0xf6>
 8106318:	687b      	ldr	r3, [r7, #4]
 810631a:	2202      	movs	r2, #2
 810631c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8106320:	e003      	b.n	810632a <HAL_TIM_PWM_Start+0xfe>
 8106322:	687b      	ldr	r3, [r7, #4]
 8106324:	2202      	movs	r2, #2
 8106326:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 810632a:	687b      	ldr	r3, [r7, #4]
 810632c:	681b      	ldr	r3, [r3, #0]
 810632e:	2201      	movs	r2, #1
 8106330:	6839      	ldr	r1, [r7, #0]
 8106332:	4618      	mov	r0, r3
 8106334:	f001 fc58 	bl	8107be8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8106338:	687b      	ldr	r3, [r7, #4]
 810633a:	681b      	ldr	r3, [r3, #0]
 810633c:	4a38      	ldr	r2, [pc, #224]	; (8106420 <HAL_TIM_PWM_Start+0x1f4>)
 810633e:	4293      	cmp	r3, r2
 8106340:	d013      	beq.n	810636a <HAL_TIM_PWM_Start+0x13e>
 8106342:	687b      	ldr	r3, [r7, #4]
 8106344:	681b      	ldr	r3, [r3, #0]
 8106346:	4a37      	ldr	r2, [pc, #220]	; (8106424 <HAL_TIM_PWM_Start+0x1f8>)
 8106348:	4293      	cmp	r3, r2
 810634a:	d00e      	beq.n	810636a <HAL_TIM_PWM_Start+0x13e>
 810634c:	687b      	ldr	r3, [r7, #4]
 810634e:	681b      	ldr	r3, [r3, #0]
 8106350:	4a35      	ldr	r2, [pc, #212]	; (8106428 <HAL_TIM_PWM_Start+0x1fc>)
 8106352:	4293      	cmp	r3, r2
 8106354:	d009      	beq.n	810636a <HAL_TIM_PWM_Start+0x13e>
 8106356:	687b      	ldr	r3, [r7, #4]
 8106358:	681b      	ldr	r3, [r3, #0]
 810635a:	4a34      	ldr	r2, [pc, #208]	; (810642c <HAL_TIM_PWM_Start+0x200>)
 810635c:	4293      	cmp	r3, r2
 810635e:	d004      	beq.n	810636a <HAL_TIM_PWM_Start+0x13e>
 8106360:	687b      	ldr	r3, [r7, #4]
 8106362:	681b      	ldr	r3, [r3, #0]
 8106364:	4a32      	ldr	r2, [pc, #200]	; (8106430 <HAL_TIM_PWM_Start+0x204>)
 8106366:	4293      	cmp	r3, r2
 8106368:	d101      	bne.n	810636e <HAL_TIM_PWM_Start+0x142>
 810636a:	2301      	movs	r3, #1
 810636c:	e000      	b.n	8106370 <HAL_TIM_PWM_Start+0x144>
 810636e:	2300      	movs	r3, #0
 8106370:	2b00      	cmp	r3, #0
 8106372:	d007      	beq.n	8106384 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8106374:	687b      	ldr	r3, [r7, #4]
 8106376:	681b      	ldr	r3, [r3, #0]
 8106378:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810637a:	687b      	ldr	r3, [r7, #4]
 810637c:	681b      	ldr	r3, [r3, #0]
 810637e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8106382:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8106384:	687b      	ldr	r3, [r7, #4]
 8106386:	681b      	ldr	r3, [r3, #0]
 8106388:	4a25      	ldr	r2, [pc, #148]	; (8106420 <HAL_TIM_PWM_Start+0x1f4>)
 810638a:	4293      	cmp	r3, r2
 810638c:	d022      	beq.n	81063d4 <HAL_TIM_PWM_Start+0x1a8>
 810638e:	687b      	ldr	r3, [r7, #4]
 8106390:	681b      	ldr	r3, [r3, #0]
 8106392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106396:	d01d      	beq.n	81063d4 <HAL_TIM_PWM_Start+0x1a8>
 8106398:	687b      	ldr	r3, [r7, #4]
 810639a:	681b      	ldr	r3, [r3, #0]
 810639c:	4a25      	ldr	r2, [pc, #148]	; (8106434 <HAL_TIM_PWM_Start+0x208>)
 810639e:	4293      	cmp	r3, r2
 81063a0:	d018      	beq.n	81063d4 <HAL_TIM_PWM_Start+0x1a8>
 81063a2:	687b      	ldr	r3, [r7, #4]
 81063a4:	681b      	ldr	r3, [r3, #0]
 81063a6:	4a24      	ldr	r2, [pc, #144]	; (8106438 <HAL_TIM_PWM_Start+0x20c>)
 81063a8:	4293      	cmp	r3, r2
 81063aa:	d013      	beq.n	81063d4 <HAL_TIM_PWM_Start+0x1a8>
 81063ac:	687b      	ldr	r3, [r7, #4]
 81063ae:	681b      	ldr	r3, [r3, #0]
 81063b0:	4a22      	ldr	r2, [pc, #136]	; (810643c <HAL_TIM_PWM_Start+0x210>)
 81063b2:	4293      	cmp	r3, r2
 81063b4:	d00e      	beq.n	81063d4 <HAL_TIM_PWM_Start+0x1a8>
 81063b6:	687b      	ldr	r3, [r7, #4]
 81063b8:	681b      	ldr	r3, [r3, #0]
 81063ba:	4a1a      	ldr	r2, [pc, #104]	; (8106424 <HAL_TIM_PWM_Start+0x1f8>)
 81063bc:	4293      	cmp	r3, r2
 81063be:	d009      	beq.n	81063d4 <HAL_TIM_PWM_Start+0x1a8>
 81063c0:	687b      	ldr	r3, [r7, #4]
 81063c2:	681b      	ldr	r3, [r3, #0]
 81063c4:	4a1e      	ldr	r2, [pc, #120]	; (8106440 <HAL_TIM_PWM_Start+0x214>)
 81063c6:	4293      	cmp	r3, r2
 81063c8:	d004      	beq.n	81063d4 <HAL_TIM_PWM_Start+0x1a8>
 81063ca:	687b      	ldr	r3, [r7, #4]
 81063cc:	681b      	ldr	r3, [r3, #0]
 81063ce:	4a16      	ldr	r2, [pc, #88]	; (8106428 <HAL_TIM_PWM_Start+0x1fc>)
 81063d0:	4293      	cmp	r3, r2
 81063d2:	d115      	bne.n	8106400 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81063d4:	687b      	ldr	r3, [r7, #4]
 81063d6:	681b      	ldr	r3, [r3, #0]
 81063d8:	689a      	ldr	r2, [r3, #8]
 81063da:	4b1a      	ldr	r3, [pc, #104]	; (8106444 <HAL_TIM_PWM_Start+0x218>)
 81063dc:	4013      	ands	r3, r2
 81063de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81063e0:	68fb      	ldr	r3, [r7, #12]
 81063e2:	2b06      	cmp	r3, #6
 81063e4:	d015      	beq.n	8106412 <HAL_TIM_PWM_Start+0x1e6>
 81063e6:	68fb      	ldr	r3, [r7, #12]
 81063e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81063ec:	d011      	beq.n	8106412 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 81063ee:	687b      	ldr	r3, [r7, #4]
 81063f0:	681b      	ldr	r3, [r3, #0]
 81063f2:	681a      	ldr	r2, [r3, #0]
 81063f4:	687b      	ldr	r3, [r7, #4]
 81063f6:	681b      	ldr	r3, [r3, #0]
 81063f8:	f042 0201 	orr.w	r2, r2, #1
 81063fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81063fe:	e008      	b.n	8106412 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8106400:	687b      	ldr	r3, [r7, #4]
 8106402:	681b      	ldr	r3, [r3, #0]
 8106404:	681a      	ldr	r2, [r3, #0]
 8106406:	687b      	ldr	r3, [r7, #4]
 8106408:	681b      	ldr	r3, [r3, #0]
 810640a:	f042 0201 	orr.w	r2, r2, #1
 810640e:	601a      	str	r2, [r3, #0]
 8106410:	e000      	b.n	8106414 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106412:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8106414:	2300      	movs	r3, #0
}
 8106416:	4618      	mov	r0, r3
 8106418:	3710      	adds	r7, #16
 810641a:	46bd      	mov	sp, r7
 810641c:	bd80      	pop	{r7, pc}
 810641e:	bf00      	nop
 8106420:	40010000 	.word	0x40010000
 8106424:	40010400 	.word	0x40010400
 8106428:	40014000 	.word	0x40014000
 810642c:	40014400 	.word	0x40014400
 8106430:	40014800 	.word	0x40014800
 8106434:	40000400 	.word	0x40000400
 8106438:	40000800 	.word	0x40000800
 810643c:	40000c00 	.word	0x40000c00
 8106440:	40001800 	.word	0x40001800
 8106444:	00010007 	.word	0x00010007

08106448 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8106448:	b580      	push	{r7, lr}
 810644a:	b082      	sub	sp, #8
 810644c:	af00      	add	r7, sp, #0
 810644e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8106450:	687b      	ldr	r3, [r7, #4]
 8106452:	2b00      	cmp	r3, #0
 8106454:	d101      	bne.n	810645a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8106456:	2301      	movs	r3, #1
 8106458:	e049      	b.n	81064ee <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810645a:	687b      	ldr	r3, [r7, #4]
 810645c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8106460:	b2db      	uxtb	r3, r3
 8106462:	2b00      	cmp	r3, #0
 8106464:	d106      	bne.n	8106474 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8106466:	687b      	ldr	r3, [r7, #4]
 8106468:	2200      	movs	r2, #0
 810646a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 810646e:	6878      	ldr	r0, [r7, #4]
 8106470:	f000 f841 	bl	81064f6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106474:	687b      	ldr	r3, [r7, #4]
 8106476:	2202      	movs	r2, #2
 8106478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810647c:	687b      	ldr	r3, [r7, #4]
 810647e:	681a      	ldr	r2, [r3, #0]
 8106480:	687b      	ldr	r3, [r7, #4]
 8106482:	3304      	adds	r3, #4
 8106484:	4619      	mov	r1, r3
 8106486:	4610      	mov	r0, r2
 8106488:	f000 fe78 	bl	810717c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810648c:	687b      	ldr	r3, [r7, #4]
 810648e:	2201      	movs	r2, #1
 8106490:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106494:	687b      	ldr	r3, [r7, #4]
 8106496:	2201      	movs	r2, #1
 8106498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 810649c:	687b      	ldr	r3, [r7, #4]
 810649e:	2201      	movs	r2, #1
 81064a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81064a4:	687b      	ldr	r3, [r7, #4]
 81064a6:	2201      	movs	r2, #1
 81064a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81064ac:	687b      	ldr	r3, [r7, #4]
 81064ae:	2201      	movs	r2, #1
 81064b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81064b4:	687b      	ldr	r3, [r7, #4]
 81064b6:	2201      	movs	r2, #1
 81064b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81064bc:	687b      	ldr	r3, [r7, #4]
 81064be:	2201      	movs	r2, #1
 81064c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81064c4:	687b      	ldr	r3, [r7, #4]
 81064c6:	2201      	movs	r2, #1
 81064c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81064cc:	687b      	ldr	r3, [r7, #4]
 81064ce:	2201      	movs	r2, #1
 81064d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81064d4:	687b      	ldr	r3, [r7, #4]
 81064d6:	2201      	movs	r2, #1
 81064d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81064dc:	687b      	ldr	r3, [r7, #4]
 81064de:	2201      	movs	r2, #1
 81064e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81064e4:	687b      	ldr	r3, [r7, #4]
 81064e6:	2201      	movs	r2, #1
 81064e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81064ec:	2300      	movs	r3, #0
}
 81064ee:	4618      	mov	r0, r3
 81064f0:	3708      	adds	r7, #8
 81064f2:	46bd      	mov	sp, r7
 81064f4:	bd80      	pop	{r7, pc}

081064f6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 81064f6:	b480      	push	{r7}
 81064f8:	b083      	sub	sp, #12
 81064fa:	af00      	add	r7, sp, #0
 81064fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 81064fe:	bf00      	nop
 8106500:	370c      	adds	r7, #12
 8106502:	46bd      	mov	sp, r7
 8106504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106508:	4770      	bx	lr
	...

0810650c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 810650c:	b580      	push	{r7, lr}
 810650e:	b084      	sub	sp, #16
 8106510:	af00      	add	r7, sp, #0
 8106512:	6078      	str	r0, [r7, #4]
 8106514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8106516:	2300      	movs	r3, #0
 8106518:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 810651a:	683b      	ldr	r3, [r7, #0]
 810651c:	2b00      	cmp	r3, #0
 810651e:	d104      	bne.n	810652a <HAL_TIM_IC_Start_IT+0x1e>
 8106520:	687b      	ldr	r3, [r7, #4]
 8106522:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8106526:	b2db      	uxtb	r3, r3
 8106528:	e023      	b.n	8106572 <HAL_TIM_IC_Start_IT+0x66>
 810652a:	683b      	ldr	r3, [r7, #0]
 810652c:	2b04      	cmp	r3, #4
 810652e:	d104      	bne.n	810653a <HAL_TIM_IC_Start_IT+0x2e>
 8106530:	687b      	ldr	r3, [r7, #4]
 8106532:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8106536:	b2db      	uxtb	r3, r3
 8106538:	e01b      	b.n	8106572 <HAL_TIM_IC_Start_IT+0x66>
 810653a:	683b      	ldr	r3, [r7, #0]
 810653c:	2b08      	cmp	r3, #8
 810653e:	d104      	bne.n	810654a <HAL_TIM_IC_Start_IT+0x3e>
 8106540:	687b      	ldr	r3, [r7, #4]
 8106542:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8106546:	b2db      	uxtb	r3, r3
 8106548:	e013      	b.n	8106572 <HAL_TIM_IC_Start_IT+0x66>
 810654a:	683b      	ldr	r3, [r7, #0]
 810654c:	2b0c      	cmp	r3, #12
 810654e:	d104      	bne.n	810655a <HAL_TIM_IC_Start_IT+0x4e>
 8106550:	687b      	ldr	r3, [r7, #4]
 8106552:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8106556:	b2db      	uxtb	r3, r3
 8106558:	e00b      	b.n	8106572 <HAL_TIM_IC_Start_IT+0x66>
 810655a:	683b      	ldr	r3, [r7, #0]
 810655c:	2b10      	cmp	r3, #16
 810655e:	d104      	bne.n	810656a <HAL_TIM_IC_Start_IT+0x5e>
 8106560:	687b      	ldr	r3, [r7, #4]
 8106562:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8106566:	b2db      	uxtb	r3, r3
 8106568:	e003      	b.n	8106572 <HAL_TIM_IC_Start_IT+0x66>
 810656a:	687b      	ldr	r3, [r7, #4]
 810656c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8106570:	b2db      	uxtb	r3, r3
 8106572:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8106574:	683b      	ldr	r3, [r7, #0]
 8106576:	2b00      	cmp	r3, #0
 8106578:	d104      	bne.n	8106584 <HAL_TIM_IC_Start_IT+0x78>
 810657a:	687b      	ldr	r3, [r7, #4]
 810657c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8106580:	b2db      	uxtb	r3, r3
 8106582:	e013      	b.n	81065ac <HAL_TIM_IC_Start_IT+0xa0>
 8106584:	683b      	ldr	r3, [r7, #0]
 8106586:	2b04      	cmp	r3, #4
 8106588:	d104      	bne.n	8106594 <HAL_TIM_IC_Start_IT+0x88>
 810658a:	687b      	ldr	r3, [r7, #4]
 810658c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8106590:	b2db      	uxtb	r3, r3
 8106592:	e00b      	b.n	81065ac <HAL_TIM_IC_Start_IT+0xa0>
 8106594:	683b      	ldr	r3, [r7, #0]
 8106596:	2b08      	cmp	r3, #8
 8106598:	d104      	bne.n	81065a4 <HAL_TIM_IC_Start_IT+0x98>
 810659a:	687b      	ldr	r3, [r7, #4]
 810659c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 81065a0:	b2db      	uxtb	r3, r3
 81065a2:	e003      	b.n	81065ac <HAL_TIM_IC_Start_IT+0xa0>
 81065a4:	687b      	ldr	r3, [r7, #4]
 81065a6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 81065aa:	b2db      	uxtb	r3, r3
 81065ac:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 81065ae:	7bbb      	ldrb	r3, [r7, #14]
 81065b0:	2b01      	cmp	r3, #1
 81065b2:	d102      	bne.n	81065ba <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 81065b4:	7b7b      	ldrb	r3, [r7, #13]
 81065b6:	2b01      	cmp	r3, #1
 81065b8:	d001      	beq.n	81065be <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 81065ba:	2301      	movs	r3, #1
 81065bc:	e0e2      	b.n	8106784 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 81065be:	683b      	ldr	r3, [r7, #0]
 81065c0:	2b00      	cmp	r3, #0
 81065c2:	d104      	bne.n	81065ce <HAL_TIM_IC_Start_IT+0xc2>
 81065c4:	687b      	ldr	r3, [r7, #4]
 81065c6:	2202      	movs	r2, #2
 81065c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81065cc:	e023      	b.n	8106616 <HAL_TIM_IC_Start_IT+0x10a>
 81065ce:	683b      	ldr	r3, [r7, #0]
 81065d0:	2b04      	cmp	r3, #4
 81065d2:	d104      	bne.n	81065de <HAL_TIM_IC_Start_IT+0xd2>
 81065d4:	687b      	ldr	r3, [r7, #4]
 81065d6:	2202      	movs	r2, #2
 81065d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81065dc:	e01b      	b.n	8106616 <HAL_TIM_IC_Start_IT+0x10a>
 81065de:	683b      	ldr	r3, [r7, #0]
 81065e0:	2b08      	cmp	r3, #8
 81065e2:	d104      	bne.n	81065ee <HAL_TIM_IC_Start_IT+0xe2>
 81065e4:	687b      	ldr	r3, [r7, #4]
 81065e6:	2202      	movs	r2, #2
 81065e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81065ec:	e013      	b.n	8106616 <HAL_TIM_IC_Start_IT+0x10a>
 81065ee:	683b      	ldr	r3, [r7, #0]
 81065f0:	2b0c      	cmp	r3, #12
 81065f2:	d104      	bne.n	81065fe <HAL_TIM_IC_Start_IT+0xf2>
 81065f4:	687b      	ldr	r3, [r7, #4]
 81065f6:	2202      	movs	r2, #2
 81065f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81065fc:	e00b      	b.n	8106616 <HAL_TIM_IC_Start_IT+0x10a>
 81065fe:	683b      	ldr	r3, [r7, #0]
 8106600:	2b10      	cmp	r3, #16
 8106602:	d104      	bne.n	810660e <HAL_TIM_IC_Start_IT+0x102>
 8106604:	687b      	ldr	r3, [r7, #4]
 8106606:	2202      	movs	r2, #2
 8106608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 810660c:	e003      	b.n	8106616 <HAL_TIM_IC_Start_IT+0x10a>
 810660e:	687b      	ldr	r3, [r7, #4]
 8106610:	2202      	movs	r2, #2
 8106612:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8106616:	683b      	ldr	r3, [r7, #0]
 8106618:	2b00      	cmp	r3, #0
 810661a:	d104      	bne.n	8106626 <HAL_TIM_IC_Start_IT+0x11a>
 810661c:	687b      	ldr	r3, [r7, #4]
 810661e:	2202      	movs	r2, #2
 8106620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8106624:	e013      	b.n	810664e <HAL_TIM_IC_Start_IT+0x142>
 8106626:	683b      	ldr	r3, [r7, #0]
 8106628:	2b04      	cmp	r3, #4
 810662a:	d104      	bne.n	8106636 <HAL_TIM_IC_Start_IT+0x12a>
 810662c:	687b      	ldr	r3, [r7, #4]
 810662e:	2202      	movs	r2, #2
 8106630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8106634:	e00b      	b.n	810664e <HAL_TIM_IC_Start_IT+0x142>
 8106636:	683b      	ldr	r3, [r7, #0]
 8106638:	2b08      	cmp	r3, #8
 810663a:	d104      	bne.n	8106646 <HAL_TIM_IC_Start_IT+0x13a>
 810663c:	687b      	ldr	r3, [r7, #4]
 810663e:	2202      	movs	r2, #2
 8106640:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8106644:	e003      	b.n	810664e <HAL_TIM_IC_Start_IT+0x142>
 8106646:	687b      	ldr	r3, [r7, #4]
 8106648:	2202      	movs	r2, #2
 810664a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 810664e:	683b      	ldr	r3, [r7, #0]
 8106650:	2b0c      	cmp	r3, #12
 8106652:	d841      	bhi.n	81066d8 <HAL_TIM_IC_Start_IT+0x1cc>
 8106654:	a201      	add	r2, pc, #4	; (adr r2, 810665c <HAL_TIM_IC_Start_IT+0x150>)
 8106656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810665a:	bf00      	nop
 810665c:	08106691 	.word	0x08106691
 8106660:	081066d9 	.word	0x081066d9
 8106664:	081066d9 	.word	0x081066d9
 8106668:	081066d9 	.word	0x081066d9
 810666c:	081066a3 	.word	0x081066a3
 8106670:	081066d9 	.word	0x081066d9
 8106674:	081066d9 	.word	0x081066d9
 8106678:	081066d9 	.word	0x081066d9
 810667c:	081066b5 	.word	0x081066b5
 8106680:	081066d9 	.word	0x081066d9
 8106684:	081066d9 	.word	0x081066d9
 8106688:	081066d9 	.word	0x081066d9
 810668c:	081066c7 	.word	0x081066c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8106690:	687b      	ldr	r3, [r7, #4]
 8106692:	681b      	ldr	r3, [r3, #0]
 8106694:	68da      	ldr	r2, [r3, #12]
 8106696:	687b      	ldr	r3, [r7, #4]
 8106698:	681b      	ldr	r3, [r3, #0]
 810669a:	f042 0202 	orr.w	r2, r2, #2
 810669e:	60da      	str	r2, [r3, #12]
      break;
 81066a0:	e01d      	b.n	81066de <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 81066a2:	687b      	ldr	r3, [r7, #4]
 81066a4:	681b      	ldr	r3, [r3, #0]
 81066a6:	68da      	ldr	r2, [r3, #12]
 81066a8:	687b      	ldr	r3, [r7, #4]
 81066aa:	681b      	ldr	r3, [r3, #0]
 81066ac:	f042 0204 	orr.w	r2, r2, #4
 81066b0:	60da      	str	r2, [r3, #12]
      break;
 81066b2:	e014      	b.n	81066de <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 81066b4:	687b      	ldr	r3, [r7, #4]
 81066b6:	681b      	ldr	r3, [r3, #0]
 81066b8:	68da      	ldr	r2, [r3, #12]
 81066ba:	687b      	ldr	r3, [r7, #4]
 81066bc:	681b      	ldr	r3, [r3, #0]
 81066be:	f042 0208 	orr.w	r2, r2, #8
 81066c2:	60da      	str	r2, [r3, #12]
      break;
 81066c4:	e00b      	b.n	81066de <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 81066c6:	687b      	ldr	r3, [r7, #4]
 81066c8:	681b      	ldr	r3, [r3, #0]
 81066ca:	68da      	ldr	r2, [r3, #12]
 81066cc:	687b      	ldr	r3, [r7, #4]
 81066ce:	681b      	ldr	r3, [r3, #0]
 81066d0:	f042 0210 	orr.w	r2, r2, #16
 81066d4:	60da      	str	r2, [r3, #12]
      break;
 81066d6:	e002      	b.n	81066de <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 81066d8:	2301      	movs	r3, #1
 81066da:	73fb      	strb	r3, [r7, #15]
      break;
 81066dc:	bf00      	nop
  }

  if (status == HAL_OK)
 81066de:	7bfb      	ldrb	r3, [r7, #15]
 81066e0:	2b00      	cmp	r3, #0
 81066e2:	d14e      	bne.n	8106782 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 81066e4:	687b      	ldr	r3, [r7, #4]
 81066e6:	681b      	ldr	r3, [r3, #0]
 81066e8:	2201      	movs	r2, #1
 81066ea:	6839      	ldr	r1, [r7, #0]
 81066ec:	4618      	mov	r0, r3
 81066ee:	f001 fa7b 	bl	8107be8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81066f2:	687b      	ldr	r3, [r7, #4]
 81066f4:	681b      	ldr	r3, [r3, #0]
 81066f6:	4a25      	ldr	r2, [pc, #148]	; (810678c <HAL_TIM_IC_Start_IT+0x280>)
 81066f8:	4293      	cmp	r3, r2
 81066fa:	d022      	beq.n	8106742 <HAL_TIM_IC_Start_IT+0x236>
 81066fc:	687b      	ldr	r3, [r7, #4]
 81066fe:	681b      	ldr	r3, [r3, #0]
 8106700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106704:	d01d      	beq.n	8106742 <HAL_TIM_IC_Start_IT+0x236>
 8106706:	687b      	ldr	r3, [r7, #4]
 8106708:	681b      	ldr	r3, [r3, #0]
 810670a:	4a21      	ldr	r2, [pc, #132]	; (8106790 <HAL_TIM_IC_Start_IT+0x284>)
 810670c:	4293      	cmp	r3, r2
 810670e:	d018      	beq.n	8106742 <HAL_TIM_IC_Start_IT+0x236>
 8106710:	687b      	ldr	r3, [r7, #4]
 8106712:	681b      	ldr	r3, [r3, #0]
 8106714:	4a1f      	ldr	r2, [pc, #124]	; (8106794 <HAL_TIM_IC_Start_IT+0x288>)
 8106716:	4293      	cmp	r3, r2
 8106718:	d013      	beq.n	8106742 <HAL_TIM_IC_Start_IT+0x236>
 810671a:	687b      	ldr	r3, [r7, #4]
 810671c:	681b      	ldr	r3, [r3, #0]
 810671e:	4a1e      	ldr	r2, [pc, #120]	; (8106798 <HAL_TIM_IC_Start_IT+0x28c>)
 8106720:	4293      	cmp	r3, r2
 8106722:	d00e      	beq.n	8106742 <HAL_TIM_IC_Start_IT+0x236>
 8106724:	687b      	ldr	r3, [r7, #4]
 8106726:	681b      	ldr	r3, [r3, #0]
 8106728:	4a1c      	ldr	r2, [pc, #112]	; (810679c <HAL_TIM_IC_Start_IT+0x290>)
 810672a:	4293      	cmp	r3, r2
 810672c:	d009      	beq.n	8106742 <HAL_TIM_IC_Start_IT+0x236>
 810672e:	687b      	ldr	r3, [r7, #4]
 8106730:	681b      	ldr	r3, [r3, #0]
 8106732:	4a1b      	ldr	r2, [pc, #108]	; (81067a0 <HAL_TIM_IC_Start_IT+0x294>)
 8106734:	4293      	cmp	r3, r2
 8106736:	d004      	beq.n	8106742 <HAL_TIM_IC_Start_IT+0x236>
 8106738:	687b      	ldr	r3, [r7, #4]
 810673a:	681b      	ldr	r3, [r3, #0]
 810673c:	4a19      	ldr	r2, [pc, #100]	; (81067a4 <HAL_TIM_IC_Start_IT+0x298>)
 810673e:	4293      	cmp	r3, r2
 8106740:	d115      	bne.n	810676e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8106742:	687b      	ldr	r3, [r7, #4]
 8106744:	681b      	ldr	r3, [r3, #0]
 8106746:	689a      	ldr	r2, [r3, #8]
 8106748:	4b17      	ldr	r3, [pc, #92]	; (81067a8 <HAL_TIM_IC_Start_IT+0x29c>)
 810674a:	4013      	ands	r3, r2
 810674c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810674e:	68bb      	ldr	r3, [r7, #8]
 8106750:	2b06      	cmp	r3, #6
 8106752:	d015      	beq.n	8106780 <HAL_TIM_IC_Start_IT+0x274>
 8106754:	68bb      	ldr	r3, [r7, #8]
 8106756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810675a:	d011      	beq.n	8106780 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 810675c:	687b      	ldr	r3, [r7, #4]
 810675e:	681b      	ldr	r3, [r3, #0]
 8106760:	681a      	ldr	r2, [r3, #0]
 8106762:	687b      	ldr	r3, [r7, #4]
 8106764:	681b      	ldr	r3, [r3, #0]
 8106766:	f042 0201 	orr.w	r2, r2, #1
 810676a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810676c:	e008      	b.n	8106780 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 810676e:	687b      	ldr	r3, [r7, #4]
 8106770:	681b      	ldr	r3, [r3, #0]
 8106772:	681a      	ldr	r2, [r3, #0]
 8106774:	687b      	ldr	r3, [r7, #4]
 8106776:	681b      	ldr	r3, [r3, #0]
 8106778:	f042 0201 	orr.w	r2, r2, #1
 810677c:	601a      	str	r2, [r3, #0]
 810677e:	e000      	b.n	8106782 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106780:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8106782:	7bfb      	ldrb	r3, [r7, #15]
}
 8106784:	4618      	mov	r0, r3
 8106786:	3710      	adds	r7, #16
 8106788:	46bd      	mov	sp, r7
 810678a:	bd80      	pop	{r7, pc}
 810678c:	40010000 	.word	0x40010000
 8106790:	40000400 	.word	0x40000400
 8106794:	40000800 	.word	0x40000800
 8106798:	40000c00 	.word	0x40000c00
 810679c:	40010400 	.word	0x40010400
 81067a0:	40001800 	.word	0x40001800
 81067a4:	40014000 	.word	0x40014000
 81067a8:	00010007 	.word	0x00010007

081067ac <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 81067ac:	b580      	push	{r7, lr}
 81067ae:	b084      	sub	sp, #16
 81067b0:	af00      	add	r7, sp, #0
 81067b2:	6078      	str	r0, [r7, #4]
 81067b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 81067b6:	2300      	movs	r3, #0
 81067b8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 81067ba:	683b      	ldr	r3, [r7, #0]
 81067bc:	2b0c      	cmp	r3, #12
 81067be:	d841      	bhi.n	8106844 <HAL_TIM_IC_Stop_IT+0x98>
 81067c0:	a201      	add	r2, pc, #4	; (adr r2, 81067c8 <HAL_TIM_IC_Stop_IT+0x1c>)
 81067c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81067c6:	bf00      	nop
 81067c8:	081067fd 	.word	0x081067fd
 81067cc:	08106845 	.word	0x08106845
 81067d0:	08106845 	.word	0x08106845
 81067d4:	08106845 	.word	0x08106845
 81067d8:	0810680f 	.word	0x0810680f
 81067dc:	08106845 	.word	0x08106845
 81067e0:	08106845 	.word	0x08106845
 81067e4:	08106845 	.word	0x08106845
 81067e8:	08106821 	.word	0x08106821
 81067ec:	08106845 	.word	0x08106845
 81067f0:	08106845 	.word	0x08106845
 81067f4:	08106845 	.word	0x08106845
 81067f8:	08106833 	.word	0x08106833
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 81067fc:	687b      	ldr	r3, [r7, #4]
 81067fe:	681b      	ldr	r3, [r3, #0]
 8106800:	68da      	ldr	r2, [r3, #12]
 8106802:	687b      	ldr	r3, [r7, #4]
 8106804:	681b      	ldr	r3, [r3, #0]
 8106806:	f022 0202 	bic.w	r2, r2, #2
 810680a:	60da      	str	r2, [r3, #12]
      break;
 810680c:	e01d      	b.n	810684a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 810680e:	687b      	ldr	r3, [r7, #4]
 8106810:	681b      	ldr	r3, [r3, #0]
 8106812:	68da      	ldr	r2, [r3, #12]
 8106814:	687b      	ldr	r3, [r7, #4]
 8106816:	681b      	ldr	r3, [r3, #0]
 8106818:	f022 0204 	bic.w	r2, r2, #4
 810681c:	60da      	str	r2, [r3, #12]
      break;
 810681e:	e014      	b.n	810684a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8106820:	687b      	ldr	r3, [r7, #4]
 8106822:	681b      	ldr	r3, [r3, #0]
 8106824:	68da      	ldr	r2, [r3, #12]
 8106826:	687b      	ldr	r3, [r7, #4]
 8106828:	681b      	ldr	r3, [r3, #0]
 810682a:	f022 0208 	bic.w	r2, r2, #8
 810682e:	60da      	str	r2, [r3, #12]
      break;
 8106830:	e00b      	b.n	810684a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8106832:	687b      	ldr	r3, [r7, #4]
 8106834:	681b      	ldr	r3, [r3, #0]
 8106836:	68da      	ldr	r2, [r3, #12]
 8106838:	687b      	ldr	r3, [r7, #4]
 810683a:	681b      	ldr	r3, [r3, #0]
 810683c:	f022 0210 	bic.w	r2, r2, #16
 8106840:	60da      	str	r2, [r3, #12]
      break;
 8106842:	e002      	b.n	810684a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8106844:	2301      	movs	r3, #1
 8106846:	73fb      	strb	r3, [r7, #15]
      break;
 8106848:	bf00      	nop
  }

  if (status == HAL_OK)
 810684a:	7bfb      	ldrb	r3, [r7, #15]
 810684c:	2b00      	cmp	r3, #0
 810684e:	d166      	bne.n	810691e <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8106850:	687b      	ldr	r3, [r7, #4]
 8106852:	681b      	ldr	r3, [r3, #0]
 8106854:	2200      	movs	r2, #0
 8106856:	6839      	ldr	r1, [r7, #0]
 8106858:	4618      	mov	r0, r3
 810685a:	f001 f9c5 	bl	8107be8 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 810685e:	687b      	ldr	r3, [r7, #4]
 8106860:	681b      	ldr	r3, [r3, #0]
 8106862:	6a1a      	ldr	r2, [r3, #32]
 8106864:	f241 1311 	movw	r3, #4369	; 0x1111
 8106868:	4013      	ands	r3, r2
 810686a:	2b00      	cmp	r3, #0
 810686c:	d10f      	bne.n	810688e <HAL_TIM_IC_Stop_IT+0xe2>
 810686e:	687b      	ldr	r3, [r7, #4]
 8106870:	681b      	ldr	r3, [r3, #0]
 8106872:	6a1a      	ldr	r2, [r3, #32]
 8106874:	f240 4344 	movw	r3, #1092	; 0x444
 8106878:	4013      	ands	r3, r2
 810687a:	2b00      	cmp	r3, #0
 810687c:	d107      	bne.n	810688e <HAL_TIM_IC_Stop_IT+0xe2>
 810687e:	687b      	ldr	r3, [r7, #4]
 8106880:	681b      	ldr	r3, [r3, #0]
 8106882:	681a      	ldr	r2, [r3, #0]
 8106884:	687b      	ldr	r3, [r7, #4]
 8106886:	681b      	ldr	r3, [r3, #0]
 8106888:	f022 0201 	bic.w	r2, r2, #1
 810688c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 810688e:	683b      	ldr	r3, [r7, #0]
 8106890:	2b00      	cmp	r3, #0
 8106892:	d104      	bne.n	810689e <HAL_TIM_IC_Stop_IT+0xf2>
 8106894:	687b      	ldr	r3, [r7, #4]
 8106896:	2201      	movs	r2, #1
 8106898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 810689c:	e023      	b.n	81068e6 <HAL_TIM_IC_Stop_IT+0x13a>
 810689e:	683b      	ldr	r3, [r7, #0]
 81068a0:	2b04      	cmp	r3, #4
 81068a2:	d104      	bne.n	81068ae <HAL_TIM_IC_Stop_IT+0x102>
 81068a4:	687b      	ldr	r3, [r7, #4]
 81068a6:	2201      	movs	r2, #1
 81068a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81068ac:	e01b      	b.n	81068e6 <HAL_TIM_IC_Stop_IT+0x13a>
 81068ae:	683b      	ldr	r3, [r7, #0]
 81068b0:	2b08      	cmp	r3, #8
 81068b2:	d104      	bne.n	81068be <HAL_TIM_IC_Stop_IT+0x112>
 81068b4:	687b      	ldr	r3, [r7, #4]
 81068b6:	2201      	movs	r2, #1
 81068b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81068bc:	e013      	b.n	81068e6 <HAL_TIM_IC_Stop_IT+0x13a>
 81068be:	683b      	ldr	r3, [r7, #0]
 81068c0:	2b0c      	cmp	r3, #12
 81068c2:	d104      	bne.n	81068ce <HAL_TIM_IC_Stop_IT+0x122>
 81068c4:	687b      	ldr	r3, [r7, #4]
 81068c6:	2201      	movs	r2, #1
 81068c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81068cc:	e00b      	b.n	81068e6 <HAL_TIM_IC_Stop_IT+0x13a>
 81068ce:	683b      	ldr	r3, [r7, #0]
 81068d0:	2b10      	cmp	r3, #16
 81068d2:	d104      	bne.n	81068de <HAL_TIM_IC_Stop_IT+0x132>
 81068d4:	687b      	ldr	r3, [r7, #4]
 81068d6:	2201      	movs	r2, #1
 81068d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81068dc:	e003      	b.n	81068e6 <HAL_TIM_IC_Stop_IT+0x13a>
 81068de:	687b      	ldr	r3, [r7, #4]
 81068e0:	2201      	movs	r2, #1
 81068e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 81068e6:	683b      	ldr	r3, [r7, #0]
 81068e8:	2b00      	cmp	r3, #0
 81068ea:	d104      	bne.n	81068f6 <HAL_TIM_IC_Stop_IT+0x14a>
 81068ec:	687b      	ldr	r3, [r7, #4]
 81068ee:	2201      	movs	r2, #1
 81068f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81068f4:	e013      	b.n	810691e <HAL_TIM_IC_Stop_IT+0x172>
 81068f6:	683b      	ldr	r3, [r7, #0]
 81068f8:	2b04      	cmp	r3, #4
 81068fa:	d104      	bne.n	8106906 <HAL_TIM_IC_Stop_IT+0x15a>
 81068fc:	687b      	ldr	r3, [r7, #4]
 81068fe:	2201      	movs	r2, #1
 8106900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8106904:	e00b      	b.n	810691e <HAL_TIM_IC_Stop_IT+0x172>
 8106906:	683b      	ldr	r3, [r7, #0]
 8106908:	2b08      	cmp	r3, #8
 810690a:	d104      	bne.n	8106916 <HAL_TIM_IC_Stop_IT+0x16a>
 810690c:	687b      	ldr	r3, [r7, #4]
 810690e:	2201      	movs	r2, #1
 8106910:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8106914:	e003      	b.n	810691e <HAL_TIM_IC_Stop_IT+0x172>
 8106916:	687b      	ldr	r3, [r7, #4]
 8106918:	2201      	movs	r2, #1
 810691a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 810691e:	7bfb      	ldrb	r3, [r7, #15]
}
 8106920:	4618      	mov	r0, r3
 8106922:	3710      	adds	r7, #16
 8106924:	46bd      	mov	sp, r7
 8106926:	bd80      	pop	{r7, pc}

08106928 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8106928:	b580      	push	{r7, lr}
 810692a:	b082      	sub	sp, #8
 810692c:	af00      	add	r7, sp, #0
 810692e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8106930:	687b      	ldr	r3, [r7, #4]
 8106932:	681b      	ldr	r3, [r3, #0]
 8106934:	691b      	ldr	r3, [r3, #16]
 8106936:	f003 0302 	and.w	r3, r3, #2
 810693a:	2b02      	cmp	r3, #2
 810693c:	d122      	bne.n	8106984 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 810693e:	687b      	ldr	r3, [r7, #4]
 8106940:	681b      	ldr	r3, [r3, #0]
 8106942:	68db      	ldr	r3, [r3, #12]
 8106944:	f003 0302 	and.w	r3, r3, #2
 8106948:	2b02      	cmp	r3, #2
 810694a:	d11b      	bne.n	8106984 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 810694c:	687b      	ldr	r3, [r7, #4]
 810694e:	681b      	ldr	r3, [r3, #0]
 8106950:	f06f 0202 	mvn.w	r2, #2
 8106954:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8106956:	687b      	ldr	r3, [r7, #4]
 8106958:	2201      	movs	r2, #1
 810695a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 810695c:	687b      	ldr	r3, [r7, #4]
 810695e:	681b      	ldr	r3, [r3, #0]
 8106960:	699b      	ldr	r3, [r3, #24]
 8106962:	f003 0303 	and.w	r3, r3, #3
 8106966:	2b00      	cmp	r3, #0
 8106968:	d003      	beq.n	8106972 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 810696a:	6878      	ldr	r0, [r7, #4]
 810696c:	f7fb ff5e 	bl	810282c <HAL_TIM_IC_CaptureCallback>
 8106970:	e005      	b.n	810697e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8106972:	6878      	ldr	r0, [r7, #4]
 8106974:	f000 fbe4 	bl	8107140 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106978:	6878      	ldr	r0, [r7, #4]
 810697a:	f000 fbeb 	bl	8107154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810697e:	687b      	ldr	r3, [r7, #4]
 8106980:	2200      	movs	r2, #0
 8106982:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8106984:	687b      	ldr	r3, [r7, #4]
 8106986:	681b      	ldr	r3, [r3, #0]
 8106988:	691b      	ldr	r3, [r3, #16]
 810698a:	f003 0304 	and.w	r3, r3, #4
 810698e:	2b04      	cmp	r3, #4
 8106990:	d122      	bne.n	81069d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8106992:	687b      	ldr	r3, [r7, #4]
 8106994:	681b      	ldr	r3, [r3, #0]
 8106996:	68db      	ldr	r3, [r3, #12]
 8106998:	f003 0304 	and.w	r3, r3, #4
 810699c:	2b04      	cmp	r3, #4
 810699e:	d11b      	bne.n	81069d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 81069a0:	687b      	ldr	r3, [r7, #4]
 81069a2:	681b      	ldr	r3, [r3, #0]
 81069a4:	f06f 0204 	mvn.w	r2, #4
 81069a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 81069aa:	687b      	ldr	r3, [r7, #4]
 81069ac:	2202      	movs	r2, #2
 81069ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 81069b0:	687b      	ldr	r3, [r7, #4]
 81069b2:	681b      	ldr	r3, [r3, #0]
 81069b4:	699b      	ldr	r3, [r3, #24]
 81069b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81069ba:	2b00      	cmp	r3, #0
 81069bc:	d003      	beq.n	81069c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81069be:	6878      	ldr	r0, [r7, #4]
 81069c0:	f7fb ff34 	bl	810282c <HAL_TIM_IC_CaptureCallback>
 81069c4:	e005      	b.n	81069d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81069c6:	6878      	ldr	r0, [r7, #4]
 81069c8:	f000 fbba 	bl	8107140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81069cc:	6878      	ldr	r0, [r7, #4]
 81069ce:	f000 fbc1 	bl	8107154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81069d2:	687b      	ldr	r3, [r7, #4]
 81069d4:	2200      	movs	r2, #0
 81069d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 81069d8:	687b      	ldr	r3, [r7, #4]
 81069da:	681b      	ldr	r3, [r3, #0]
 81069dc:	691b      	ldr	r3, [r3, #16]
 81069de:	f003 0308 	and.w	r3, r3, #8
 81069e2:	2b08      	cmp	r3, #8
 81069e4:	d122      	bne.n	8106a2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 81069e6:	687b      	ldr	r3, [r7, #4]
 81069e8:	681b      	ldr	r3, [r3, #0]
 81069ea:	68db      	ldr	r3, [r3, #12]
 81069ec:	f003 0308 	and.w	r3, r3, #8
 81069f0:	2b08      	cmp	r3, #8
 81069f2:	d11b      	bne.n	8106a2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 81069f4:	687b      	ldr	r3, [r7, #4]
 81069f6:	681b      	ldr	r3, [r3, #0]
 81069f8:	f06f 0208 	mvn.w	r2, #8
 81069fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 81069fe:	687b      	ldr	r3, [r7, #4]
 8106a00:	2204      	movs	r2, #4
 8106a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8106a04:	687b      	ldr	r3, [r7, #4]
 8106a06:	681b      	ldr	r3, [r3, #0]
 8106a08:	69db      	ldr	r3, [r3, #28]
 8106a0a:	f003 0303 	and.w	r3, r3, #3
 8106a0e:	2b00      	cmp	r3, #0
 8106a10:	d003      	beq.n	8106a1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8106a12:	6878      	ldr	r0, [r7, #4]
 8106a14:	f7fb ff0a 	bl	810282c <HAL_TIM_IC_CaptureCallback>
 8106a18:	e005      	b.n	8106a26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8106a1a:	6878      	ldr	r0, [r7, #4]
 8106a1c:	f000 fb90 	bl	8107140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106a20:	6878      	ldr	r0, [r7, #4]
 8106a22:	f000 fb97 	bl	8107154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106a26:	687b      	ldr	r3, [r7, #4]
 8106a28:	2200      	movs	r2, #0
 8106a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8106a2c:	687b      	ldr	r3, [r7, #4]
 8106a2e:	681b      	ldr	r3, [r3, #0]
 8106a30:	691b      	ldr	r3, [r3, #16]
 8106a32:	f003 0310 	and.w	r3, r3, #16
 8106a36:	2b10      	cmp	r3, #16
 8106a38:	d122      	bne.n	8106a80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8106a3a:	687b      	ldr	r3, [r7, #4]
 8106a3c:	681b      	ldr	r3, [r3, #0]
 8106a3e:	68db      	ldr	r3, [r3, #12]
 8106a40:	f003 0310 	and.w	r3, r3, #16
 8106a44:	2b10      	cmp	r3, #16
 8106a46:	d11b      	bne.n	8106a80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8106a48:	687b      	ldr	r3, [r7, #4]
 8106a4a:	681b      	ldr	r3, [r3, #0]
 8106a4c:	f06f 0210 	mvn.w	r2, #16
 8106a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8106a52:	687b      	ldr	r3, [r7, #4]
 8106a54:	2208      	movs	r2, #8
 8106a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8106a58:	687b      	ldr	r3, [r7, #4]
 8106a5a:	681b      	ldr	r3, [r3, #0]
 8106a5c:	69db      	ldr	r3, [r3, #28]
 8106a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8106a62:	2b00      	cmp	r3, #0
 8106a64:	d003      	beq.n	8106a6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8106a66:	6878      	ldr	r0, [r7, #4]
 8106a68:	f7fb fee0 	bl	810282c <HAL_TIM_IC_CaptureCallback>
 8106a6c:	e005      	b.n	8106a7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8106a6e:	6878      	ldr	r0, [r7, #4]
 8106a70:	f000 fb66 	bl	8107140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106a74:	6878      	ldr	r0, [r7, #4]
 8106a76:	f000 fb6d 	bl	8107154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106a7a:	687b      	ldr	r3, [r7, #4]
 8106a7c:	2200      	movs	r2, #0
 8106a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8106a80:	687b      	ldr	r3, [r7, #4]
 8106a82:	681b      	ldr	r3, [r3, #0]
 8106a84:	691b      	ldr	r3, [r3, #16]
 8106a86:	f003 0301 	and.w	r3, r3, #1
 8106a8a:	2b01      	cmp	r3, #1
 8106a8c:	d10e      	bne.n	8106aac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8106a8e:	687b      	ldr	r3, [r7, #4]
 8106a90:	681b      	ldr	r3, [r3, #0]
 8106a92:	68db      	ldr	r3, [r3, #12]
 8106a94:	f003 0301 	and.w	r3, r3, #1
 8106a98:	2b01      	cmp	r3, #1
 8106a9a:	d107      	bne.n	8106aac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8106a9c:	687b      	ldr	r3, [r7, #4]
 8106a9e:	681b      	ldr	r3, [r3, #0]
 8106aa0:	f06f 0201 	mvn.w	r2, #1
 8106aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8106aa6:	6878      	ldr	r0, [r7, #4]
 8106aa8:	f7fb ff9c 	bl	81029e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8106aac:	687b      	ldr	r3, [r7, #4]
 8106aae:	681b      	ldr	r3, [r3, #0]
 8106ab0:	691b      	ldr	r3, [r3, #16]
 8106ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8106ab6:	2b80      	cmp	r3, #128	; 0x80
 8106ab8:	d10e      	bne.n	8106ad8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8106aba:	687b      	ldr	r3, [r7, #4]
 8106abc:	681b      	ldr	r3, [r3, #0]
 8106abe:	68db      	ldr	r3, [r3, #12]
 8106ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8106ac4:	2b80      	cmp	r3, #128	; 0x80
 8106ac6:	d107      	bne.n	8106ad8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8106ac8:	687b      	ldr	r3, [r7, #4]
 8106aca:	681b      	ldr	r3, [r3, #0]
 8106acc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8106ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8106ad2:	6878      	ldr	r0, [r7, #4]
 8106ad4:	f001 f946 	bl	8107d64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8106ad8:	687b      	ldr	r3, [r7, #4]
 8106ada:	681b      	ldr	r3, [r3, #0]
 8106adc:	691b      	ldr	r3, [r3, #16]
 8106ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106ae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106ae6:	d10e      	bne.n	8106b06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8106ae8:	687b      	ldr	r3, [r7, #4]
 8106aea:	681b      	ldr	r3, [r3, #0]
 8106aec:	68db      	ldr	r3, [r3, #12]
 8106aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8106af2:	2b80      	cmp	r3, #128	; 0x80
 8106af4:	d107      	bne.n	8106b06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8106af6:	687b      	ldr	r3, [r7, #4]
 8106af8:	681b      	ldr	r3, [r3, #0]
 8106afa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8106afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8106b00:	6878      	ldr	r0, [r7, #4]
 8106b02:	f001 f939 	bl	8107d78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8106b06:	687b      	ldr	r3, [r7, #4]
 8106b08:	681b      	ldr	r3, [r3, #0]
 8106b0a:	691b      	ldr	r3, [r3, #16]
 8106b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106b10:	2b40      	cmp	r3, #64	; 0x40
 8106b12:	d10e      	bne.n	8106b32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8106b14:	687b      	ldr	r3, [r7, #4]
 8106b16:	681b      	ldr	r3, [r3, #0]
 8106b18:	68db      	ldr	r3, [r3, #12]
 8106b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106b1e:	2b40      	cmp	r3, #64	; 0x40
 8106b20:	d107      	bne.n	8106b32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8106b22:	687b      	ldr	r3, [r7, #4]
 8106b24:	681b      	ldr	r3, [r3, #0]
 8106b26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8106b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8106b2c:	6878      	ldr	r0, [r7, #4]
 8106b2e:	f000 fb1b 	bl	8107168 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8106b32:	687b      	ldr	r3, [r7, #4]
 8106b34:	681b      	ldr	r3, [r3, #0]
 8106b36:	691b      	ldr	r3, [r3, #16]
 8106b38:	f003 0320 	and.w	r3, r3, #32
 8106b3c:	2b20      	cmp	r3, #32
 8106b3e:	d10e      	bne.n	8106b5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8106b40:	687b      	ldr	r3, [r7, #4]
 8106b42:	681b      	ldr	r3, [r3, #0]
 8106b44:	68db      	ldr	r3, [r3, #12]
 8106b46:	f003 0320 	and.w	r3, r3, #32
 8106b4a:	2b20      	cmp	r3, #32
 8106b4c:	d107      	bne.n	8106b5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8106b4e:	687b      	ldr	r3, [r7, #4]
 8106b50:	681b      	ldr	r3, [r3, #0]
 8106b52:	f06f 0220 	mvn.w	r2, #32
 8106b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8106b58:	6878      	ldr	r0, [r7, #4]
 8106b5a:	f001 f8f9 	bl	8107d50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8106b5e:	bf00      	nop
 8106b60:	3708      	adds	r7, #8
 8106b62:	46bd      	mov	sp, r7
 8106b64:	bd80      	pop	{r7, pc}

08106b66 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8106b66:	b580      	push	{r7, lr}
 8106b68:	b086      	sub	sp, #24
 8106b6a:	af00      	add	r7, sp, #0
 8106b6c:	60f8      	str	r0, [r7, #12]
 8106b6e:	60b9      	str	r1, [r7, #8]
 8106b70:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8106b72:	2300      	movs	r3, #0
 8106b74:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8106b76:	68fb      	ldr	r3, [r7, #12]
 8106b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8106b7c:	2b01      	cmp	r3, #1
 8106b7e:	d101      	bne.n	8106b84 <HAL_TIM_IC_ConfigChannel+0x1e>
 8106b80:	2302      	movs	r3, #2
 8106b82:	e088      	b.n	8106c96 <HAL_TIM_IC_ConfigChannel+0x130>
 8106b84:	68fb      	ldr	r3, [r7, #12]
 8106b86:	2201      	movs	r2, #1
 8106b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8106b8c:	687b      	ldr	r3, [r7, #4]
 8106b8e:	2b00      	cmp	r3, #0
 8106b90:	d11b      	bne.n	8106bca <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8106b92:	68fb      	ldr	r3, [r7, #12]
 8106b94:	6818      	ldr	r0, [r3, #0]
 8106b96:	68bb      	ldr	r3, [r7, #8]
 8106b98:	6819      	ldr	r1, [r3, #0]
 8106b9a:	68bb      	ldr	r3, [r7, #8]
 8106b9c:	685a      	ldr	r2, [r3, #4]
 8106b9e:	68bb      	ldr	r3, [r7, #8]
 8106ba0:	68db      	ldr	r3, [r3, #12]
 8106ba2:	f000 fe5b 	bl	810785c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8106ba6:	68fb      	ldr	r3, [r7, #12]
 8106ba8:	681b      	ldr	r3, [r3, #0]
 8106baa:	699a      	ldr	r2, [r3, #24]
 8106bac:	68fb      	ldr	r3, [r7, #12]
 8106bae:	681b      	ldr	r3, [r3, #0]
 8106bb0:	f022 020c 	bic.w	r2, r2, #12
 8106bb4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8106bb6:	68fb      	ldr	r3, [r7, #12]
 8106bb8:	681b      	ldr	r3, [r3, #0]
 8106bba:	6999      	ldr	r1, [r3, #24]
 8106bbc:	68bb      	ldr	r3, [r7, #8]
 8106bbe:	689a      	ldr	r2, [r3, #8]
 8106bc0:	68fb      	ldr	r3, [r7, #12]
 8106bc2:	681b      	ldr	r3, [r3, #0]
 8106bc4:	430a      	orrs	r2, r1
 8106bc6:	619a      	str	r2, [r3, #24]
 8106bc8:	e060      	b.n	8106c8c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8106bca:	687b      	ldr	r3, [r7, #4]
 8106bcc:	2b04      	cmp	r3, #4
 8106bce:	d11c      	bne.n	8106c0a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8106bd0:	68fb      	ldr	r3, [r7, #12]
 8106bd2:	6818      	ldr	r0, [r3, #0]
 8106bd4:	68bb      	ldr	r3, [r7, #8]
 8106bd6:	6819      	ldr	r1, [r3, #0]
 8106bd8:	68bb      	ldr	r3, [r7, #8]
 8106bda:	685a      	ldr	r2, [r3, #4]
 8106bdc:	68bb      	ldr	r3, [r7, #8]
 8106bde:	68db      	ldr	r3, [r3, #12]
 8106be0:	f000 fedf 	bl	81079a2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8106be4:	68fb      	ldr	r3, [r7, #12]
 8106be6:	681b      	ldr	r3, [r3, #0]
 8106be8:	699a      	ldr	r2, [r3, #24]
 8106bea:	68fb      	ldr	r3, [r7, #12]
 8106bec:	681b      	ldr	r3, [r3, #0]
 8106bee:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8106bf2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8106bf4:	68fb      	ldr	r3, [r7, #12]
 8106bf6:	681b      	ldr	r3, [r3, #0]
 8106bf8:	6999      	ldr	r1, [r3, #24]
 8106bfa:	68bb      	ldr	r3, [r7, #8]
 8106bfc:	689b      	ldr	r3, [r3, #8]
 8106bfe:	021a      	lsls	r2, r3, #8
 8106c00:	68fb      	ldr	r3, [r7, #12]
 8106c02:	681b      	ldr	r3, [r3, #0]
 8106c04:	430a      	orrs	r2, r1
 8106c06:	619a      	str	r2, [r3, #24]
 8106c08:	e040      	b.n	8106c8c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8106c0a:	687b      	ldr	r3, [r7, #4]
 8106c0c:	2b08      	cmp	r3, #8
 8106c0e:	d11b      	bne.n	8106c48 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8106c10:	68fb      	ldr	r3, [r7, #12]
 8106c12:	6818      	ldr	r0, [r3, #0]
 8106c14:	68bb      	ldr	r3, [r7, #8]
 8106c16:	6819      	ldr	r1, [r3, #0]
 8106c18:	68bb      	ldr	r3, [r7, #8]
 8106c1a:	685a      	ldr	r2, [r3, #4]
 8106c1c:	68bb      	ldr	r3, [r7, #8]
 8106c1e:	68db      	ldr	r3, [r3, #12]
 8106c20:	f000 ff2c 	bl	8107a7c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8106c24:	68fb      	ldr	r3, [r7, #12]
 8106c26:	681b      	ldr	r3, [r3, #0]
 8106c28:	69da      	ldr	r2, [r3, #28]
 8106c2a:	68fb      	ldr	r3, [r7, #12]
 8106c2c:	681b      	ldr	r3, [r3, #0]
 8106c2e:	f022 020c 	bic.w	r2, r2, #12
 8106c32:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8106c34:	68fb      	ldr	r3, [r7, #12]
 8106c36:	681b      	ldr	r3, [r3, #0]
 8106c38:	69d9      	ldr	r1, [r3, #28]
 8106c3a:	68bb      	ldr	r3, [r7, #8]
 8106c3c:	689a      	ldr	r2, [r3, #8]
 8106c3e:	68fb      	ldr	r3, [r7, #12]
 8106c40:	681b      	ldr	r3, [r3, #0]
 8106c42:	430a      	orrs	r2, r1
 8106c44:	61da      	str	r2, [r3, #28]
 8106c46:	e021      	b.n	8106c8c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8106c48:	687b      	ldr	r3, [r7, #4]
 8106c4a:	2b0c      	cmp	r3, #12
 8106c4c:	d11c      	bne.n	8106c88 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8106c4e:	68fb      	ldr	r3, [r7, #12]
 8106c50:	6818      	ldr	r0, [r3, #0]
 8106c52:	68bb      	ldr	r3, [r7, #8]
 8106c54:	6819      	ldr	r1, [r3, #0]
 8106c56:	68bb      	ldr	r3, [r7, #8]
 8106c58:	685a      	ldr	r2, [r3, #4]
 8106c5a:	68bb      	ldr	r3, [r7, #8]
 8106c5c:	68db      	ldr	r3, [r3, #12]
 8106c5e:	f000 ff49 	bl	8107af4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8106c62:	68fb      	ldr	r3, [r7, #12]
 8106c64:	681b      	ldr	r3, [r3, #0]
 8106c66:	69da      	ldr	r2, [r3, #28]
 8106c68:	68fb      	ldr	r3, [r7, #12]
 8106c6a:	681b      	ldr	r3, [r3, #0]
 8106c6c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8106c70:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8106c72:	68fb      	ldr	r3, [r7, #12]
 8106c74:	681b      	ldr	r3, [r3, #0]
 8106c76:	69d9      	ldr	r1, [r3, #28]
 8106c78:	68bb      	ldr	r3, [r7, #8]
 8106c7a:	689b      	ldr	r3, [r3, #8]
 8106c7c:	021a      	lsls	r2, r3, #8
 8106c7e:	68fb      	ldr	r3, [r7, #12]
 8106c80:	681b      	ldr	r3, [r3, #0]
 8106c82:	430a      	orrs	r2, r1
 8106c84:	61da      	str	r2, [r3, #28]
 8106c86:	e001      	b.n	8106c8c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8106c88:	2301      	movs	r3, #1
 8106c8a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8106c8c:	68fb      	ldr	r3, [r7, #12]
 8106c8e:	2200      	movs	r2, #0
 8106c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8106c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8106c96:	4618      	mov	r0, r3
 8106c98:	3718      	adds	r7, #24
 8106c9a:	46bd      	mov	sp, r7
 8106c9c:	bd80      	pop	{r7, pc}
	...

08106ca0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8106ca0:	b580      	push	{r7, lr}
 8106ca2:	b086      	sub	sp, #24
 8106ca4:	af00      	add	r7, sp, #0
 8106ca6:	60f8      	str	r0, [r7, #12]
 8106ca8:	60b9      	str	r1, [r7, #8]
 8106caa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8106cac:	2300      	movs	r3, #0
 8106cae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8106cb0:	68fb      	ldr	r3, [r7, #12]
 8106cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8106cb6:	2b01      	cmp	r3, #1
 8106cb8:	d101      	bne.n	8106cbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8106cba:	2302      	movs	r3, #2
 8106cbc:	e0ff      	b.n	8106ebe <HAL_TIM_PWM_ConfigChannel+0x21e>
 8106cbe:	68fb      	ldr	r3, [r7, #12]
 8106cc0:	2201      	movs	r2, #1
 8106cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8106cc6:	687b      	ldr	r3, [r7, #4]
 8106cc8:	2b14      	cmp	r3, #20
 8106cca:	f200 80f0 	bhi.w	8106eae <HAL_TIM_PWM_ConfigChannel+0x20e>
 8106cce:	a201      	add	r2, pc, #4	; (adr r2, 8106cd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8106cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106cd4:	08106d29 	.word	0x08106d29
 8106cd8:	08106eaf 	.word	0x08106eaf
 8106cdc:	08106eaf 	.word	0x08106eaf
 8106ce0:	08106eaf 	.word	0x08106eaf
 8106ce4:	08106d69 	.word	0x08106d69
 8106ce8:	08106eaf 	.word	0x08106eaf
 8106cec:	08106eaf 	.word	0x08106eaf
 8106cf0:	08106eaf 	.word	0x08106eaf
 8106cf4:	08106dab 	.word	0x08106dab
 8106cf8:	08106eaf 	.word	0x08106eaf
 8106cfc:	08106eaf 	.word	0x08106eaf
 8106d00:	08106eaf 	.word	0x08106eaf
 8106d04:	08106deb 	.word	0x08106deb
 8106d08:	08106eaf 	.word	0x08106eaf
 8106d0c:	08106eaf 	.word	0x08106eaf
 8106d10:	08106eaf 	.word	0x08106eaf
 8106d14:	08106e2d 	.word	0x08106e2d
 8106d18:	08106eaf 	.word	0x08106eaf
 8106d1c:	08106eaf 	.word	0x08106eaf
 8106d20:	08106eaf 	.word	0x08106eaf
 8106d24:	08106e6d 	.word	0x08106e6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8106d28:	68fb      	ldr	r3, [r7, #12]
 8106d2a:	681b      	ldr	r3, [r3, #0]
 8106d2c:	68b9      	ldr	r1, [r7, #8]
 8106d2e:	4618      	mov	r0, r3
 8106d30:	f000 fabe 	bl	81072b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8106d34:	68fb      	ldr	r3, [r7, #12]
 8106d36:	681b      	ldr	r3, [r3, #0]
 8106d38:	699a      	ldr	r2, [r3, #24]
 8106d3a:	68fb      	ldr	r3, [r7, #12]
 8106d3c:	681b      	ldr	r3, [r3, #0]
 8106d3e:	f042 0208 	orr.w	r2, r2, #8
 8106d42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8106d44:	68fb      	ldr	r3, [r7, #12]
 8106d46:	681b      	ldr	r3, [r3, #0]
 8106d48:	699a      	ldr	r2, [r3, #24]
 8106d4a:	68fb      	ldr	r3, [r7, #12]
 8106d4c:	681b      	ldr	r3, [r3, #0]
 8106d4e:	f022 0204 	bic.w	r2, r2, #4
 8106d52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8106d54:	68fb      	ldr	r3, [r7, #12]
 8106d56:	681b      	ldr	r3, [r3, #0]
 8106d58:	6999      	ldr	r1, [r3, #24]
 8106d5a:	68bb      	ldr	r3, [r7, #8]
 8106d5c:	691a      	ldr	r2, [r3, #16]
 8106d5e:	68fb      	ldr	r3, [r7, #12]
 8106d60:	681b      	ldr	r3, [r3, #0]
 8106d62:	430a      	orrs	r2, r1
 8106d64:	619a      	str	r2, [r3, #24]
      break;
 8106d66:	e0a5      	b.n	8106eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8106d68:	68fb      	ldr	r3, [r7, #12]
 8106d6a:	681b      	ldr	r3, [r3, #0]
 8106d6c:	68b9      	ldr	r1, [r7, #8]
 8106d6e:	4618      	mov	r0, r3
 8106d70:	f000 fb2e 	bl	81073d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8106d74:	68fb      	ldr	r3, [r7, #12]
 8106d76:	681b      	ldr	r3, [r3, #0]
 8106d78:	699a      	ldr	r2, [r3, #24]
 8106d7a:	68fb      	ldr	r3, [r7, #12]
 8106d7c:	681b      	ldr	r3, [r3, #0]
 8106d7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8106d82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8106d84:	68fb      	ldr	r3, [r7, #12]
 8106d86:	681b      	ldr	r3, [r3, #0]
 8106d88:	699a      	ldr	r2, [r3, #24]
 8106d8a:	68fb      	ldr	r3, [r7, #12]
 8106d8c:	681b      	ldr	r3, [r3, #0]
 8106d8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8106d92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8106d94:	68fb      	ldr	r3, [r7, #12]
 8106d96:	681b      	ldr	r3, [r3, #0]
 8106d98:	6999      	ldr	r1, [r3, #24]
 8106d9a:	68bb      	ldr	r3, [r7, #8]
 8106d9c:	691b      	ldr	r3, [r3, #16]
 8106d9e:	021a      	lsls	r2, r3, #8
 8106da0:	68fb      	ldr	r3, [r7, #12]
 8106da2:	681b      	ldr	r3, [r3, #0]
 8106da4:	430a      	orrs	r2, r1
 8106da6:	619a      	str	r2, [r3, #24]
      break;
 8106da8:	e084      	b.n	8106eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8106daa:	68fb      	ldr	r3, [r7, #12]
 8106dac:	681b      	ldr	r3, [r3, #0]
 8106dae:	68b9      	ldr	r1, [r7, #8]
 8106db0:	4618      	mov	r0, r3
 8106db2:	f000 fb97 	bl	81074e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8106db6:	68fb      	ldr	r3, [r7, #12]
 8106db8:	681b      	ldr	r3, [r3, #0]
 8106dba:	69da      	ldr	r2, [r3, #28]
 8106dbc:	68fb      	ldr	r3, [r7, #12]
 8106dbe:	681b      	ldr	r3, [r3, #0]
 8106dc0:	f042 0208 	orr.w	r2, r2, #8
 8106dc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8106dc6:	68fb      	ldr	r3, [r7, #12]
 8106dc8:	681b      	ldr	r3, [r3, #0]
 8106dca:	69da      	ldr	r2, [r3, #28]
 8106dcc:	68fb      	ldr	r3, [r7, #12]
 8106dce:	681b      	ldr	r3, [r3, #0]
 8106dd0:	f022 0204 	bic.w	r2, r2, #4
 8106dd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8106dd6:	68fb      	ldr	r3, [r7, #12]
 8106dd8:	681b      	ldr	r3, [r3, #0]
 8106dda:	69d9      	ldr	r1, [r3, #28]
 8106ddc:	68bb      	ldr	r3, [r7, #8]
 8106dde:	691a      	ldr	r2, [r3, #16]
 8106de0:	68fb      	ldr	r3, [r7, #12]
 8106de2:	681b      	ldr	r3, [r3, #0]
 8106de4:	430a      	orrs	r2, r1
 8106de6:	61da      	str	r2, [r3, #28]
      break;
 8106de8:	e064      	b.n	8106eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8106dea:	68fb      	ldr	r3, [r7, #12]
 8106dec:	681b      	ldr	r3, [r3, #0]
 8106dee:	68b9      	ldr	r1, [r7, #8]
 8106df0:	4618      	mov	r0, r3
 8106df2:	f000 fbff 	bl	81075f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8106df6:	68fb      	ldr	r3, [r7, #12]
 8106df8:	681b      	ldr	r3, [r3, #0]
 8106dfa:	69da      	ldr	r2, [r3, #28]
 8106dfc:	68fb      	ldr	r3, [r7, #12]
 8106dfe:	681b      	ldr	r3, [r3, #0]
 8106e00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8106e04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8106e06:	68fb      	ldr	r3, [r7, #12]
 8106e08:	681b      	ldr	r3, [r3, #0]
 8106e0a:	69da      	ldr	r2, [r3, #28]
 8106e0c:	68fb      	ldr	r3, [r7, #12]
 8106e0e:	681b      	ldr	r3, [r3, #0]
 8106e10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8106e14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8106e16:	68fb      	ldr	r3, [r7, #12]
 8106e18:	681b      	ldr	r3, [r3, #0]
 8106e1a:	69d9      	ldr	r1, [r3, #28]
 8106e1c:	68bb      	ldr	r3, [r7, #8]
 8106e1e:	691b      	ldr	r3, [r3, #16]
 8106e20:	021a      	lsls	r2, r3, #8
 8106e22:	68fb      	ldr	r3, [r7, #12]
 8106e24:	681b      	ldr	r3, [r3, #0]
 8106e26:	430a      	orrs	r2, r1
 8106e28:	61da      	str	r2, [r3, #28]
      break;
 8106e2a:	e043      	b.n	8106eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8106e2c:	68fb      	ldr	r3, [r7, #12]
 8106e2e:	681b      	ldr	r3, [r3, #0]
 8106e30:	68b9      	ldr	r1, [r7, #8]
 8106e32:	4618      	mov	r0, r3
 8106e34:	f000 fc48 	bl	81076c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8106e38:	68fb      	ldr	r3, [r7, #12]
 8106e3a:	681b      	ldr	r3, [r3, #0]
 8106e3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8106e3e:	68fb      	ldr	r3, [r7, #12]
 8106e40:	681b      	ldr	r3, [r3, #0]
 8106e42:	f042 0208 	orr.w	r2, r2, #8
 8106e46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8106e48:	68fb      	ldr	r3, [r7, #12]
 8106e4a:	681b      	ldr	r3, [r3, #0]
 8106e4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8106e4e:	68fb      	ldr	r3, [r7, #12]
 8106e50:	681b      	ldr	r3, [r3, #0]
 8106e52:	f022 0204 	bic.w	r2, r2, #4
 8106e56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8106e58:	68fb      	ldr	r3, [r7, #12]
 8106e5a:	681b      	ldr	r3, [r3, #0]
 8106e5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8106e5e:	68bb      	ldr	r3, [r7, #8]
 8106e60:	691a      	ldr	r2, [r3, #16]
 8106e62:	68fb      	ldr	r3, [r7, #12]
 8106e64:	681b      	ldr	r3, [r3, #0]
 8106e66:	430a      	orrs	r2, r1
 8106e68:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8106e6a:	e023      	b.n	8106eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8106e6c:	68fb      	ldr	r3, [r7, #12]
 8106e6e:	681b      	ldr	r3, [r3, #0]
 8106e70:	68b9      	ldr	r1, [r7, #8]
 8106e72:	4618      	mov	r0, r3
 8106e74:	f000 fc8c 	bl	8107790 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8106e78:	68fb      	ldr	r3, [r7, #12]
 8106e7a:	681b      	ldr	r3, [r3, #0]
 8106e7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8106e7e:	68fb      	ldr	r3, [r7, #12]
 8106e80:	681b      	ldr	r3, [r3, #0]
 8106e82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8106e86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8106e88:	68fb      	ldr	r3, [r7, #12]
 8106e8a:	681b      	ldr	r3, [r3, #0]
 8106e8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8106e8e:	68fb      	ldr	r3, [r7, #12]
 8106e90:	681b      	ldr	r3, [r3, #0]
 8106e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8106e96:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8106e98:	68fb      	ldr	r3, [r7, #12]
 8106e9a:	681b      	ldr	r3, [r3, #0]
 8106e9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8106e9e:	68bb      	ldr	r3, [r7, #8]
 8106ea0:	691b      	ldr	r3, [r3, #16]
 8106ea2:	021a      	lsls	r2, r3, #8
 8106ea4:	68fb      	ldr	r3, [r7, #12]
 8106ea6:	681b      	ldr	r3, [r3, #0]
 8106ea8:	430a      	orrs	r2, r1
 8106eaa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8106eac:	e002      	b.n	8106eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8106eae:	2301      	movs	r3, #1
 8106eb0:	75fb      	strb	r3, [r7, #23]
      break;
 8106eb2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8106eb4:	68fb      	ldr	r3, [r7, #12]
 8106eb6:	2200      	movs	r2, #0
 8106eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8106ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8106ebe:	4618      	mov	r0, r3
 8106ec0:	3718      	adds	r7, #24
 8106ec2:	46bd      	mov	sp, r7
 8106ec4:	bd80      	pop	{r7, pc}
 8106ec6:	bf00      	nop

08106ec8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8106ec8:	b580      	push	{r7, lr}
 8106eca:	b084      	sub	sp, #16
 8106ecc:	af00      	add	r7, sp, #0
 8106ece:	6078      	str	r0, [r7, #4]
 8106ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8106ed2:	2300      	movs	r3, #0
 8106ed4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8106ed6:	687b      	ldr	r3, [r7, #4]
 8106ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8106edc:	2b01      	cmp	r3, #1
 8106ede:	d101      	bne.n	8106ee4 <HAL_TIM_ConfigClockSource+0x1c>
 8106ee0:	2302      	movs	r3, #2
 8106ee2:	e0de      	b.n	81070a2 <HAL_TIM_ConfigClockSource+0x1da>
 8106ee4:	687b      	ldr	r3, [r7, #4]
 8106ee6:	2201      	movs	r2, #1
 8106ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8106eec:	687b      	ldr	r3, [r7, #4]
 8106eee:	2202      	movs	r2, #2
 8106ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8106ef4:	687b      	ldr	r3, [r7, #4]
 8106ef6:	681b      	ldr	r3, [r3, #0]
 8106ef8:	689b      	ldr	r3, [r3, #8]
 8106efa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8106efc:	68bb      	ldr	r3, [r7, #8]
 8106efe:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8106f02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8106f06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8106f08:	68bb      	ldr	r3, [r7, #8]
 8106f0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8106f0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8106f10:	687b      	ldr	r3, [r7, #4]
 8106f12:	681b      	ldr	r3, [r3, #0]
 8106f14:	68ba      	ldr	r2, [r7, #8]
 8106f16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8106f18:	683b      	ldr	r3, [r7, #0]
 8106f1a:	681b      	ldr	r3, [r3, #0]
 8106f1c:	4a63      	ldr	r2, [pc, #396]	; (81070ac <HAL_TIM_ConfigClockSource+0x1e4>)
 8106f1e:	4293      	cmp	r3, r2
 8106f20:	f000 80a9 	beq.w	8107076 <HAL_TIM_ConfigClockSource+0x1ae>
 8106f24:	4a61      	ldr	r2, [pc, #388]	; (81070ac <HAL_TIM_ConfigClockSource+0x1e4>)
 8106f26:	4293      	cmp	r3, r2
 8106f28:	f200 80ae 	bhi.w	8107088 <HAL_TIM_ConfigClockSource+0x1c0>
 8106f2c:	4a60      	ldr	r2, [pc, #384]	; (81070b0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8106f2e:	4293      	cmp	r3, r2
 8106f30:	f000 80a1 	beq.w	8107076 <HAL_TIM_ConfigClockSource+0x1ae>
 8106f34:	4a5e      	ldr	r2, [pc, #376]	; (81070b0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8106f36:	4293      	cmp	r3, r2
 8106f38:	f200 80a6 	bhi.w	8107088 <HAL_TIM_ConfigClockSource+0x1c0>
 8106f3c:	4a5d      	ldr	r2, [pc, #372]	; (81070b4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8106f3e:	4293      	cmp	r3, r2
 8106f40:	f000 8099 	beq.w	8107076 <HAL_TIM_ConfigClockSource+0x1ae>
 8106f44:	4a5b      	ldr	r2, [pc, #364]	; (81070b4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8106f46:	4293      	cmp	r3, r2
 8106f48:	f200 809e 	bhi.w	8107088 <HAL_TIM_ConfigClockSource+0x1c0>
 8106f4c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8106f50:	f000 8091 	beq.w	8107076 <HAL_TIM_ConfigClockSource+0x1ae>
 8106f54:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8106f58:	f200 8096 	bhi.w	8107088 <HAL_TIM_ConfigClockSource+0x1c0>
 8106f5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8106f60:	f000 8089 	beq.w	8107076 <HAL_TIM_ConfigClockSource+0x1ae>
 8106f64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8106f68:	f200 808e 	bhi.w	8107088 <HAL_TIM_ConfigClockSource+0x1c0>
 8106f6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106f70:	d03e      	beq.n	8106ff0 <HAL_TIM_ConfigClockSource+0x128>
 8106f72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106f76:	f200 8087 	bhi.w	8107088 <HAL_TIM_ConfigClockSource+0x1c0>
 8106f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106f7e:	f000 8086 	beq.w	810708e <HAL_TIM_ConfigClockSource+0x1c6>
 8106f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106f86:	d87f      	bhi.n	8107088 <HAL_TIM_ConfigClockSource+0x1c0>
 8106f88:	2b70      	cmp	r3, #112	; 0x70
 8106f8a:	d01a      	beq.n	8106fc2 <HAL_TIM_ConfigClockSource+0xfa>
 8106f8c:	2b70      	cmp	r3, #112	; 0x70
 8106f8e:	d87b      	bhi.n	8107088 <HAL_TIM_ConfigClockSource+0x1c0>
 8106f90:	2b60      	cmp	r3, #96	; 0x60
 8106f92:	d050      	beq.n	8107036 <HAL_TIM_ConfigClockSource+0x16e>
 8106f94:	2b60      	cmp	r3, #96	; 0x60
 8106f96:	d877      	bhi.n	8107088 <HAL_TIM_ConfigClockSource+0x1c0>
 8106f98:	2b50      	cmp	r3, #80	; 0x50
 8106f9a:	d03c      	beq.n	8107016 <HAL_TIM_ConfigClockSource+0x14e>
 8106f9c:	2b50      	cmp	r3, #80	; 0x50
 8106f9e:	d873      	bhi.n	8107088 <HAL_TIM_ConfigClockSource+0x1c0>
 8106fa0:	2b40      	cmp	r3, #64	; 0x40
 8106fa2:	d058      	beq.n	8107056 <HAL_TIM_ConfigClockSource+0x18e>
 8106fa4:	2b40      	cmp	r3, #64	; 0x40
 8106fa6:	d86f      	bhi.n	8107088 <HAL_TIM_ConfigClockSource+0x1c0>
 8106fa8:	2b30      	cmp	r3, #48	; 0x30
 8106faa:	d064      	beq.n	8107076 <HAL_TIM_ConfigClockSource+0x1ae>
 8106fac:	2b30      	cmp	r3, #48	; 0x30
 8106fae:	d86b      	bhi.n	8107088 <HAL_TIM_ConfigClockSource+0x1c0>
 8106fb0:	2b20      	cmp	r3, #32
 8106fb2:	d060      	beq.n	8107076 <HAL_TIM_ConfigClockSource+0x1ae>
 8106fb4:	2b20      	cmp	r3, #32
 8106fb6:	d867      	bhi.n	8107088 <HAL_TIM_ConfigClockSource+0x1c0>
 8106fb8:	2b00      	cmp	r3, #0
 8106fba:	d05c      	beq.n	8107076 <HAL_TIM_ConfigClockSource+0x1ae>
 8106fbc:	2b10      	cmp	r3, #16
 8106fbe:	d05a      	beq.n	8107076 <HAL_TIM_ConfigClockSource+0x1ae>
 8106fc0:	e062      	b.n	8107088 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8106fc2:	687b      	ldr	r3, [r7, #4]
 8106fc4:	6818      	ldr	r0, [r3, #0]
 8106fc6:	683b      	ldr	r3, [r7, #0]
 8106fc8:	6899      	ldr	r1, [r3, #8]
 8106fca:	683b      	ldr	r3, [r7, #0]
 8106fcc:	685a      	ldr	r2, [r3, #4]
 8106fce:	683b      	ldr	r3, [r7, #0]
 8106fd0:	68db      	ldr	r3, [r3, #12]
 8106fd2:	f000 fde9 	bl	8107ba8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8106fd6:	687b      	ldr	r3, [r7, #4]
 8106fd8:	681b      	ldr	r3, [r3, #0]
 8106fda:	689b      	ldr	r3, [r3, #8]
 8106fdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8106fde:	68bb      	ldr	r3, [r7, #8]
 8106fe0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8106fe4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8106fe6:	687b      	ldr	r3, [r7, #4]
 8106fe8:	681b      	ldr	r3, [r3, #0]
 8106fea:	68ba      	ldr	r2, [r7, #8]
 8106fec:	609a      	str	r2, [r3, #8]
      break;
 8106fee:	e04f      	b.n	8107090 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8106ff0:	687b      	ldr	r3, [r7, #4]
 8106ff2:	6818      	ldr	r0, [r3, #0]
 8106ff4:	683b      	ldr	r3, [r7, #0]
 8106ff6:	6899      	ldr	r1, [r3, #8]
 8106ff8:	683b      	ldr	r3, [r7, #0]
 8106ffa:	685a      	ldr	r2, [r3, #4]
 8106ffc:	683b      	ldr	r3, [r7, #0]
 8106ffe:	68db      	ldr	r3, [r3, #12]
 8107000:	f000 fdd2 	bl	8107ba8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8107004:	687b      	ldr	r3, [r7, #4]
 8107006:	681b      	ldr	r3, [r3, #0]
 8107008:	689a      	ldr	r2, [r3, #8]
 810700a:	687b      	ldr	r3, [r7, #4]
 810700c:	681b      	ldr	r3, [r3, #0]
 810700e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8107012:	609a      	str	r2, [r3, #8]
      break;
 8107014:	e03c      	b.n	8107090 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8107016:	687b      	ldr	r3, [r7, #4]
 8107018:	6818      	ldr	r0, [r3, #0]
 810701a:	683b      	ldr	r3, [r7, #0]
 810701c:	6859      	ldr	r1, [r3, #4]
 810701e:	683b      	ldr	r3, [r7, #0]
 8107020:	68db      	ldr	r3, [r3, #12]
 8107022:	461a      	mov	r2, r3
 8107024:	f000 fc8e 	bl	8107944 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8107028:	687b      	ldr	r3, [r7, #4]
 810702a:	681b      	ldr	r3, [r3, #0]
 810702c:	2150      	movs	r1, #80	; 0x50
 810702e:	4618      	mov	r0, r3
 8107030:	f000 fd9d 	bl	8107b6e <TIM_ITRx_SetConfig>
      break;
 8107034:	e02c      	b.n	8107090 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8107036:	687b      	ldr	r3, [r7, #4]
 8107038:	6818      	ldr	r0, [r3, #0]
 810703a:	683b      	ldr	r3, [r7, #0]
 810703c:	6859      	ldr	r1, [r3, #4]
 810703e:	683b      	ldr	r3, [r7, #0]
 8107040:	68db      	ldr	r3, [r3, #12]
 8107042:	461a      	mov	r2, r3
 8107044:	f000 fcea 	bl	8107a1c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8107048:	687b      	ldr	r3, [r7, #4]
 810704a:	681b      	ldr	r3, [r3, #0]
 810704c:	2160      	movs	r1, #96	; 0x60
 810704e:	4618      	mov	r0, r3
 8107050:	f000 fd8d 	bl	8107b6e <TIM_ITRx_SetConfig>
      break;
 8107054:	e01c      	b.n	8107090 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8107056:	687b      	ldr	r3, [r7, #4]
 8107058:	6818      	ldr	r0, [r3, #0]
 810705a:	683b      	ldr	r3, [r7, #0]
 810705c:	6859      	ldr	r1, [r3, #4]
 810705e:	683b      	ldr	r3, [r7, #0]
 8107060:	68db      	ldr	r3, [r3, #12]
 8107062:	461a      	mov	r2, r3
 8107064:	f000 fc6e 	bl	8107944 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8107068:	687b      	ldr	r3, [r7, #4]
 810706a:	681b      	ldr	r3, [r3, #0]
 810706c:	2140      	movs	r1, #64	; 0x40
 810706e:	4618      	mov	r0, r3
 8107070:	f000 fd7d 	bl	8107b6e <TIM_ITRx_SetConfig>
      break;
 8107074:	e00c      	b.n	8107090 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8107076:	687b      	ldr	r3, [r7, #4]
 8107078:	681a      	ldr	r2, [r3, #0]
 810707a:	683b      	ldr	r3, [r7, #0]
 810707c:	681b      	ldr	r3, [r3, #0]
 810707e:	4619      	mov	r1, r3
 8107080:	4610      	mov	r0, r2
 8107082:	f000 fd74 	bl	8107b6e <TIM_ITRx_SetConfig>
      break;
 8107086:	e003      	b.n	8107090 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8107088:	2301      	movs	r3, #1
 810708a:	73fb      	strb	r3, [r7, #15]
      break;
 810708c:	e000      	b.n	8107090 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 810708e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8107090:	687b      	ldr	r3, [r7, #4]
 8107092:	2201      	movs	r2, #1
 8107094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8107098:	687b      	ldr	r3, [r7, #4]
 810709a:	2200      	movs	r2, #0
 810709c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 81070a0:	7bfb      	ldrb	r3, [r7, #15]
}
 81070a2:	4618      	mov	r0, r3
 81070a4:	3710      	adds	r7, #16
 81070a6:	46bd      	mov	sp, r7
 81070a8:	bd80      	pop	{r7, pc}
 81070aa:	bf00      	nop
 81070ac:	00100040 	.word	0x00100040
 81070b0:	00100030 	.word	0x00100030
 81070b4:	00100020 	.word	0x00100020

081070b8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 81070b8:	b480      	push	{r7}
 81070ba:	b085      	sub	sp, #20
 81070bc:	af00      	add	r7, sp, #0
 81070be:	6078      	str	r0, [r7, #4]
 81070c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 81070c2:	2300      	movs	r3, #0
 81070c4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 81070c6:	683b      	ldr	r3, [r7, #0]
 81070c8:	2b0c      	cmp	r3, #12
 81070ca:	d831      	bhi.n	8107130 <HAL_TIM_ReadCapturedValue+0x78>
 81070cc:	a201      	add	r2, pc, #4	; (adr r2, 81070d4 <HAL_TIM_ReadCapturedValue+0x1c>)
 81070ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81070d2:	bf00      	nop
 81070d4:	08107109 	.word	0x08107109
 81070d8:	08107131 	.word	0x08107131
 81070dc:	08107131 	.word	0x08107131
 81070e0:	08107131 	.word	0x08107131
 81070e4:	08107113 	.word	0x08107113
 81070e8:	08107131 	.word	0x08107131
 81070ec:	08107131 	.word	0x08107131
 81070f0:	08107131 	.word	0x08107131
 81070f4:	0810711d 	.word	0x0810711d
 81070f8:	08107131 	.word	0x08107131
 81070fc:	08107131 	.word	0x08107131
 8107100:	08107131 	.word	0x08107131
 8107104:	08107127 	.word	0x08107127
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8107108:	687b      	ldr	r3, [r7, #4]
 810710a:	681b      	ldr	r3, [r3, #0]
 810710c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810710e:	60fb      	str	r3, [r7, #12]

      break;
 8107110:	e00f      	b.n	8107132 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8107112:	687b      	ldr	r3, [r7, #4]
 8107114:	681b      	ldr	r3, [r3, #0]
 8107116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107118:	60fb      	str	r3, [r7, #12]

      break;
 810711a:	e00a      	b.n	8107132 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 810711c:	687b      	ldr	r3, [r7, #4]
 810711e:	681b      	ldr	r3, [r3, #0]
 8107120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107122:	60fb      	str	r3, [r7, #12]

      break;
 8107124:	e005      	b.n	8107132 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8107126:	687b      	ldr	r3, [r7, #4]
 8107128:	681b      	ldr	r3, [r3, #0]
 810712a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810712c:	60fb      	str	r3, [r7, #12]

      break;
 810712e:	e000      	b.n	8107132 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8107130:	bf00      	nop
  }

  return tmpreg;
 8107132:	68fb      	ldr	r3, [r7, #12]
}
 8107134:	4618      	mov	r0, r3
 8107136:	3714      	adds	r7, #20
 8107138:	46bd      	mov	sp, r7
 810713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810713e:	4770      	bx	lr

08107140 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8107140:	b480      	push	{r7}
 8107142:	b083      	sub	sp, #12
 8107144:	af00      	add	r7, sp, #0
 8107146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8107148:	bf00      	nop
 810714a:	370c      	adds	r7, #12
 810714c:	46bd      	mov	sp, r7
 810714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107152:	4770      	bx	lr

08107154 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8107154:	b480      	push	{r7}
 8107156:	b083      	sub	sp, #12
 8107158:	af00      	add	r7, sp, #0
 810715a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810715c:	bf00      	nop
 810715e:	370c      	adds	r7, #12
 8107160:	46bd      	mov	sp, r7
 8107162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107166:	4770      	bx	lr

08107168 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8107168:	b480      	push	{r7}
 810716a:	b083      	sub	sp, #12
 810716c:	af00      	add	r7, sp, #0
 810716e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8107170:	bf00      	nop
 8107172:	370c      	adds	r7, #12
 8107174:	46bd      	mov	sp, r7
 8107176:	f85d 7b04 	ldr.w	r7, [sp], #4
 810717a:	4770      	bx	lr

0810717c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 810717c:	b480      	push	{r7}
 810717e:	b085      	sub	sp, #20
 8107180:	af00      	add	r7, sp, #0
 8107182:	6078      	str	r0, [r7, #4]
 8107184:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8107186:	687b      	ldr	r3, [r7, #4]
 8107188:	681b      	ldr	r3, [r3, #0]
 810718a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810718c:	687b      	ldr	r3, [r7, #4]
 810718e:	4a40      	ldr	r2, [pc, #256]	; (8107290 <TIM_Base_SetConfig+0x114>)
 8107190:	4293      	cmp	r3, r2
 8107192:	d013      	beq.n	81071bc <TIM_Base_SetConfig+0x40>
 8107194:	687b      	ldr	r3, [r7, #4]
 8107196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810719a:	d00f      	beq.n	81071bc <TIM_Base_SetConfig+0x40>
 810719c:	687b      	ldr	r3, [r7, #4]
 810719e:	4a3d      	ldr	r2, [pc, #244]	; (8107294 <TIM_Base_SetConfig+0x118>)
 81071a0:	4293      	cmp	r3, r2
 81071a2:	d00b      	beq.n	81071bc <TIM_Base_SetConfig+0x40>
 81071a4:	687b      	ldr	r3, [r7, #4]
 81071a6:	4a3c      	ldr	r2, [pc, #240]	; (8107298 <TIM_Base_SetConfig+0x11c>)
 81071a8:	4293      	cmp	r3, r2
 81071aa:	d007      	beq.n	81071bc <TIM_Base_SetConfig+0x40>
 81071ac:	687b      	ldr	r3, [r7, #4]
 81071ae:	4a3b      	ldr	r2, [pc, #236]	; (810729c <TIM_Base_SetConfig+0x120>)
 81071b0:	4293      	cmp	r3, r2
 81071b2:	d003      	beq.n	81071bc <TIM_Base_SetConfig+0x40>
 81071b4:	687b      	ldr	r3, [r7, #4]
 81071b6:	4a3a      	ldr	r2, [pc, #232]	; (81072a0 <TIM_Base_SetConfig+0x124>)
 81071b8:	4293      	cmp	r3, r2
 81071ba:	d108      	bne.n	81071ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 81071bc:	68fb      	ldr	r3, [r7, #12]
 81071be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81071c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 81071c4:	683b      	ldr	r3, [r7, #0]
 81071c6:	685b      	ldr	r3, [r3, #4]
 81071c8:	68fa      	ldr	r2, [r7, #12]
 81071ca:	4313      	orrs	r3, r2
 81071cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 81071ce:	687b      	ldr	r3, [r7, #4]
 81071d0:	4a2f      	ldr	r2, [pc, #188]	; (8107290 <TIM_Base_SetConfig+0x114>)
 81071d2:	4293      	cmp	r3, r2
 81071d4:	d01f      	beq.n	8107216 <TIM_Base_SetConfig+0x9a>
 81071d6:	687b      	ldr	r3, [r7, #4]
 81071d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81071dc:	d01b      	beq.n	8107216 <TIM_Base_SetConfig+0x9a>
 81071de:	687b      	ldr	r3, [r7, #4]
 81071e0:	4a2c      	ldr	r2, [pc, #176]	; (8107294 <TIM_Base_SetConfig+0x118>)
 81071e2:	4293      	cmp	r3, r2
 81071e4:	d017      	beq.n	8107216 <TIM_Base_SetConfig+0x9a>
 81071e6:	687b      	ldr	r3, [r7, #4]
 81071e8:	4a2b      	ldr	r2, [pc, #172]	; (8107298 <TIM_Base_SetConfig+0x11c>)
 81071ea:	4293      	cmp	r3, r2
 81071ec:	d013      	beq.n	8107216 <TIM_Base_SetConfig+0x9a>
 81071ee:	687b      	ldr	r3, [r7, #4]
 81071f0:	4a2a      	ldr	r2, [pc, #168]	; (810729c <TIM_Base_SetConfig+0x120>)
 81071f2:	4293      	cmp	r3, r2
 81071f4:	d00f      	beq.n	8107216 <TIM_Base_SetConfig+0x9a>
 81071f6:	687b      	ldr	r3, [r7, #4]
 81071f8:	4a29      	ldr	r2, [pc, #164]	; (81072a0 <TIM_Base_SetConfig+0x124>)
 81071fa:	4293      	cmp	r3, r2
 81071fc:	d00b      	beq.n	8107216 <TIM_Base_SetConfig+0x9a>
 81071fe:	687b      	ldr	r3, [r7, #4]
 8107200:	4a28      	ldr	r2, [pc, #160]	; (81072a4 <TIM_Base_SetConfig+0x128>)
 8107202:	4293      	cmp	r3, r2
 8107204:	d007      	beq.n	8107216 <TIM_Base_SetConfig+0x9a>
 8107206:	687b      	ldr	r3, [r7, #4]
 8107208:	4a27      	ldr	r2, [pc, #156]	; (81072a8 <TIM_Base_SetConfig+0x12c>)
 810720a:	4293      	cmp	r3, r2
 810720c:	d003      	beq.n	8107216 <TIM_Base_SetConfig+0x9a>
 810720e:	687b      	ldr	r3, [r7, #4]
 8107210:	4a26      	ldr	r2, [pc, #152]	; (81072ac <TIM_Base_SetConfig+0x130>)
 8107212:	4293      	cmp	r3, r2
 8107214:	d108      	bne.n	8107228 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8107216:	68fb      	ldr	r3, [r7, #12]
 8107218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810721c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810721e:	683b      	ldr	r3, [r7, #0]
 8107220:	68db      	ldr	r3, [r3, #12]
 8107222:	68fa      	ldr	r2, [r7, #12]
 8107224:	4313      	orrs	r3, r2
 8107226:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8107228:	68fb      	ldr	r3, [r7, #12]
 810722a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 810722e:	683b      	ldr	r3, [r7, #0]
 8107230:	695b      	ldr	r3, [r3, #20]
 8107232:	4313      	orrs	r3, r2
 8107234:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8107236:	687b      	ldr	r3, [r7, #4]
 8107238:	68fa      	ldr	r2, [r7, #12]
 810723a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810723c:	683b      	ldr	r3, [r7, #0]
 810723e:	689a      	ldr	r2, [r3, #8]
 8107240:	687b      	ldr	r3, [r7, #4]
 8107242:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8107244:	683b      	ldr	r3, [r7, #0]
 8107246:	681a      	ldr	r2, [r3, #0]
 8107248:	687b      	ldr	r3, [r7, #4]
 810724a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810724c:	687b      	ldr	r3, [r7, #4]
 810724e:	4a10      	ldr	r2, [pc, #64]	; (8107290 <TIM_Base_SetConfig+0x114>)
 8107250:	4293      	cmp	r3, r2
 8107252:	d00f      	beq.n	8107274 <TIM_Base_SetConfig+0xf8>
 8107254:	687b      	ldr	r3, [r7, #4]
 8107256:	4a12      	ldr	r2, [pc, #72]	; (81072a0 <TIM_Base_SetConfig+0x124>)
 8107258:	4293      	cmp	r3, r2
 810725a:	d00b      	beq.n	8107274 <TIM_Base_SetConfig+0xf8>
 810725c:	687b      	ldr	r3, [r7, #4]
 810725e:	4a11      	ldr	r2, [pc, #68]	; (81072a4 <TIM_Base_SetConfig+0x128>)
 8107260:	4293      	cmp	r3, r2
 8107262:	d007      	beq.n	8107274 <TIM_Base_SetConfig+0xf8>
 8107264:	687b      	ldr	r3, [r7, #4]
 8107266:	4a10      	ldr	r2, [pc, #64]	; (81072a8 <TIM_Base_SetConfig+0x12c>)
 8107268:	4293      	cmp	r3, r2
 810726a:	d003      	beq.n	8107274 <TIM_Base_SetConfig+0xf8>
 810726c:	687b      	ldr	r3, [r7, #4]
 810726e:	4a0f      	ldr	r2, [pc, #60]	; (81072ac <TIM_Base_SetConfig+0x130>)
 8107270:	4293      	cmp	r3, r2
 8107272:	d103      	bne.n	810727c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8107274:	683b      	ldr	r3, [r7, #0]
 8107276:	691a      	ldr	r2, [r3, #16]
 8107278:	687b      	ldr	r3, [r7, #4]
 810727a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810727c:	687b      	ldr	r3, [r7, #4]
 810727e:	2201      	movs	r2, #1
 8107280:	615a      	str	r2, [r3, #20]
}
 8107282:	bf00      	nop
 8107284:	3714      	adds	r7, #20
 8107286:	46bd      	mov	sp, r7
 8107288:	f85d 7b04 	ldr.w	r7, [sp], #4
 810728c:	4770      	bx	lr
 810728e:	bf00      	nop
 8107290:	40010000 	.word	0x40010000
 8107294:	40000400 	.word	0x40000400
 8107298:	40000800 	.word	0x40000800
 810729c:	40000c00 	.word	0x40000c00
 81072a0:	40010400 	.word	0x40010400
 81072a4:	40014000 	.word	0x40014000
 81072a8:	40014400 	.word	0x40014400
 81072ac:	40014800 	.word	0x40014800

081072b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81072b0:	b480      	push	{r7}
 81072b2:	b087      	sub	sp, #28
 81072b4:	af00      	add	r7, sp, #0
 81072b6:	6078      	str	r0, [r7, #4]
 81072b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81072ba:	687b      	ldr	r3, [r7, #4]
 81072bc:	6a1b      	ldr	r3, [r3, #32]
 81072be:	f023 0201 	bic.w	r2, r3, #1
 81072c2:	687b      	ldr	r3, [r7, #4]
 81072c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81072c6:	687b      	ldr	r3, [r7, #4]
 81072c8:	6a1b      	ldr	r3, [r3, #32]
 81072ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81072cc:	687b      	ldr	r3, [r7, #4]
 81072ce:	685b      	ldr	r3, [r3, #4]
 81072d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 81072d2:	687b      	ldr	r3, [r7, #4]
 81072d4:	699b      	ldr	r3, [r3, #24]
 81072d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 81072d8:	68fb      	ldr	r3, [r7, #12]
 81072da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81072de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81072e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 81072e4:	68fb      	ldr	r3, [r7, #12]
 81072e6:	f023 0303 	bic.w	r3, r3, #3
 81072ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81072ec:	683b      	ldr	r3, [r7, #0]
 81072ee:	681b      	ldr	r3, [r3, #0]
 81072f0:	68fa      	ldr	r2, [r7, #12]
 81072f2:	4313      	orrs	r3, r2
 81072f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 81072f6:	697b      	ldr	r3, [r7, #20]
 81072f8:	f023 0302 	bic.w	r3, r3, #2
 81072fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 81072fe:	683b      	ldr	r3, [r7, #0]
 8107300:	689b      	ldr	r3, [r3, #8]
 8107302:	697a      	ldr	r2, [r7, #20]
 8107304:	4313      	orrs	r3, r2
 8107306:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8107308:	687b      	ldr	r3, [r7, #4]
 810730a:	4a2c      	ldr	r2, [pc, #176]	; (81073bc <TIM_OC1_SetConfig+0x10c>)
 810730c:	4293      	cmp	r3, r2
 810730e:	d00f      	beq.n	8107330 <TIM_OC1_SetConfig+0x80>
 8107310:	687b      	ldr	r3, [r7, #4]
 8107312:	4a2b      	ldr	r2, [pc, #172]	; (81073c0 <TIM_OC1_SetConfig+0x110>)
 8107314:	4293      	cmp	r3, r2
 8107316:	d00b      	beq.n	8107330 <TIM_OC1_SetConfig+0x80>
 8107318:	687b      	ldr	r3, [r7, #4]
 810731a:	4a2a      	ldr	r2, [pc, #168]	; (81073c4 <TIM_OC1_SetConfig+0x114>)
 810731c:	4293      	cmp	r3, r2
 810731e:	d007      	beq.n	8107330 <TIM_OC1_SetConfig+0x80>
 8107320:	687b      	ldr	r3, [r7, #4]
 8107322:	4a29      	ldr	r2, [pc, #164]	; (81073c8 <TIM_OC1_SetConfig+0x118>)
 8107324:	4293      	cmp	r3, r2
 8107326:	d003      	beq.n	8107330 <TIM_OC1_SetConfig+0x80>
 8107328:	687b      	ldr	r3, [r7, #4]
 810732a:	4a28      	ldr	r2, [pc, #160]	; (81073cc <TIM_OC1_SetConfig+0x11c>)
 810732c:	4293      	cmp	r3, r2
 810732e:	d10c      	bne.n	810734a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8107330:	697b      	ldr	r3, [r7, #20]
 8107332:	f023 0308 	bic.w	r3, r3, #8
 8107336:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8107338:	683b      	ldr	r3, [r7, #0]
 810733a:	68db      	ldr	r3, [r3, #12]
 810733c:	697a      	ldr	r2, [r7, #20]
 810733e:	4313      	orrs	r3, r2
 8107340:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8107342:	697b      	ldr	r3, [r7, #20]
 8107344:	f023 0304 	bic.w	r3, r3, #4
 8107348:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810734a:	687b      	ldr	r3, [r7, #4]
 810734c:	4a1b      	ldr	r2, [pc, #108]	; (81073bc <TIM_OC1_SetConfig+0x10c>)
 810734e:	4293      	cmp	r3, r2
 8107350:	d00f      	beq.n	8107372 <TIM_OC1_SetConfig+0xc2>
 8107352:	687b      	ldr	r3, [r7, #4]
 8107354:	4a1a      	ldr	r2, [pc, #104]	; (81073c0 <TIM_OC1_SetConfig+0x110>)
 8107356:	4293      	cmp	r3, r2
 8107358:	d00b      	beq.n	8107372 <TIM_OC1_SetConfig+0xc2>
 810735a:	687b      	ldr	r3, [r7, #4]
 810735c:	4a19      	ldr	r2, [pc, #100]	; (81073c4 <TIM_OC1_SetConfig+0x114>)
 810735e:	4293      	cmp	r3, r2
 8107360:	d007      	beq.n	8107372 <TIM_OC1_SetConfig+0xc2>
 8107362:	687b      	ldr	r3, [r7, #4]
 8107364:	4a18      	ldr	r2, [pc, #96]	; (81073c8 <TIM_OC1_SetConfig+0x118>)
 8107366:	4293      	cmp	r3, r2
 8107368:	d003      	beq.n	8107372 <TIM_OC1_SetConfig+0xc2>
 810736a:	687b      	ldr	r3, [r7, #4]
 810736c:	4a17      	ldr	r2, [pc, #92]	; (81073cc <TIM_OC1_SetConfig+0x11c>)
 810736e:	4293      	cmp	r3, r2
 8107370:	d111      	bne.n	8107396 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8107372:	693b      	ldr	r3, [r7, #16]
 8107374:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8107378:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 810737a:	693b      	ldr	r3, [r7, #16]
 810737c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8107380:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8107382:	683b      	ldr	r3, [r7, #0]
 8107384:	695b      	ldr	r3, [r3, #20]
 8107386:	693a      	ldr	r2, [r7, #16]
 8107388:	4313      	orrs	r3, r2
 810738a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 810738c:	683b      	ldr	r3, [r7, #0]
 810738e:	699b      	ldr	r3, [r3, #24]
 8107390:	693a      	ldr	r2, [r7, #16]
 8107392:	4313      	orrs	r3, r2
 8107394:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107396:	687b      	ldr	r3, [r7, #4]
 8107398:	693a      	ldr	r2, [r7, #16]
 810739a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810739c:	687b      	ldr	r3, [r7, #4]
 810739e:	68fa      	ldr	r2, [r7, #12]
 81073a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 81073a2:	683b      	ldr	r3, [r7, #0]
 81073a4:	685a      	ldr	r2, [r3, #4]
 81073a6:	687b      	ldr	r3, [r7, #4]
 81073a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81073aa:	687b      	ldr	r3, [r7, #4]
 81073ac:	697a      	ldr	r2, [r7, #20]
 81073ae:	621a      	str	r2, [r3, #32]
}
 81073b0:	bf00      	nop
 81073b2:	371c      	adds	r7, #28
 81073b4:	46bd      	mov	sp, r7
 81073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81073ba:	4770      	bx	lr
 81073bc:	40010000 	.word	0x40010000
 81073c0:	40010400 	.word	0x40010400
 81073c4:	40014000 	.word	0x40014000
 81073c8:	40014400 	.word	0x40014400
 81073cc:	40014800 	.word	0x40014800

081073d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81073d0:	b480      	push	{r7}
 81073d2:	b087      	sub	sp, #28
 81073d4:	af00      	add	r7, sp, #0
 81073d6:	6078      	str	r0, [r7, #4]
 81073d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 81073da:	687b      	ldr	r3, [r7, #4]
 81073dc:	6a1b      	ldr	r3, [r3, #32]
 81073de:	f023 0210 	bic.w	r2, r3, #16
 81073e2:	687b      	ldr	r3, [r7, #4]
 81073e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81073e6:	687b      	ldr	r3, [r7, #4]
 81073e8:	6a1b      	ldr	r3, [r3, #32]
 81073ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81073ec:	687b      	ldr	r3, [r7, #4]
 81073ee:	685b      	ldr	r3, [r3, #4]
 81073f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 81073f2:	687b      	ldr	r3, [r7, #4]
 81073f4:	699b      	ldr	r3, [r3, #24]
 81073f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 81073f8:	68fb      	ldr	r3, [r7, #12]
 81073fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 81073fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8107402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8107404:	68fb      	ldr	r3, [r7, #12]
 8107406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810740a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810740c:	683b      	ldr	r3, [r7, #0]
 810740e:	681b      	ldr	r3, [r3, #0]
 8107410:	021b      	lsls	r3, r3, #8
 8107412:	68fa      	ldr	r2, [r7, #12]
 8107414:	4313      	orrs	r3, r2
 8107416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8107418:	697b      	ldr	r3, [r7, #20]
 810741a:	f023 0320 	bic.w	r3, r3, #32
 810741e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8107420:	683b      	ldr	r3, [r7, #0]
 8107422:	689b      	ldr	r3, [r3, #8]
 8107424:	011b      	lsls	r3, r3, #4
 8107426:	697a      	ldr	r2, [r7, #20]
 8107428:	4313      	orrs	r3, r2
 810742a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 810742c:	687b      	ldr	r3, [r7, #4]
 810742e:	4a28      	ldr	r2, [pc, #160]	; (81074d0 <TIM_OC2_SetConfig+0x100>)
 8107430:	4293      	cmp	r3, r2
 8107432:	d003      	beq.n	810743c <TIM_OC2_SetConfig+0x6c>
 8107434:	687b      	ldr	r3, [r7, #4]
 8107436:	4a27      	ldr	r2, [pc, #156]	; (81074d4 <TIM_OC2_SetConfig+0x104>)
 8107438:	4293      	cmp	r3, r2
 810743a:	d10d      	bne.n	8107458 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 810743c:	697b      	ldr	r3, [r7, #20]
 810743e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8107442:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8107444:	683b      	ldr	r3, [r7, #0]
 8107446:	68db      	ldr	r3, [r3, #12]
 8107448:	011b      	lsls	r3, r3, #4
 810744a:	697a      	ldr	r2, [r7, #20]
 810744c:	4313      	orrs	r3, r2
 810744e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8107450:	697b      	ldr	r3, [r7, #20]
 8107452:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8107456:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107458:	687b      	ldr	r3, [r7, #4]
 810745a:	4a1d      	ldr	r2, [pc, #116]	; (81074d0 <TIM_OC2_SetConfig+0x100>)
 810745c:	4293      	cmp	r3, r2
 810745e:	d00f      	beq.n	8107480 <TIM_OC2_SetConfig+0xb0>
 8107460:	687b      	ldr	r3, [r7, #4]
 8107462:	4a1c      	ldr	r2, [pc, #112]	; (81074d4 <TIM_OC2_SetConfig+0x104>)
 8107464:	4293      	cmp	r3, r2
 8107466:	d00b      	beq.n	8107480 <TIM_OC2_SetConfig+0xb0>
 8107468:	687b      	ldr	r3, [r7, #4]
 810746a:	4a1b      	ldr	r2, [pc, #108]	; (81074d8 <TIM_OC2_SetConfig+0x108>)
 810746c:	4293      	cmp	r3, r2
 810746e:	d007      	beq.n	8107480 <TIM_OC2_SetConfig+0xb0>
 8107470:	687b      	ldr	r3, [r7, #4]
 8107472:	4a1a      	ldr	r2, [pc, #104]	; (81074dc <TIM_OC2_SetConfig+0x10c>)
 8107474:	4293      	cmp	r3, r2
 8107476:	d003      	beq.n	8107480 <TIM_OC2_SetConfig+0xb0>
 8107478:	687b      	ldr	r3, [r7, #4]
 810747a:	4a19      	ldr	r2, [pc, #100]	; (81074e0 <TIM_OC2_SetConfig+0x110>)
 810747c:	4293      	cmp	r3, r2
 810747e:	d113      	bne.n	81074a8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8107480:	693b      	ldr	r3, [r7, #16]
 8107482:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8107486:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8107488:	693b      	ldr	r3, [r7, #16]
 810748a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 810748e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8107490:	683b      	ldr	r3, [r7, #0]
 8107492:	695b      	ldr	r3, [r3, #20]
 8107494:	009b      	lsls	r3, r3, #2
 8107496:	693a      	ldr	r2, [r7, #16]
 8107498:	4313      	orrs	r3, r2
 810749a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 810749c:	683b      	ldr	r3, [r7, #0]
 810749e:	699b      	ldr	r3, [r3, #24]
 81074a0:	009b      	lsls	r3, r3, #2
 81074a2:	693a      	ldr	r2, [r7, #16]
 81074a4:	4313      	orrs	r3, r2
 81074a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81074a8:	687b      	ldr	r3, [r7, #4]
 81074aa:	693a      	ldr	r2, [r7, #16]
 81074ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 81074ae:	687b      	ldr	r3, [r7, #4]
 81074b0:	68fa      	ldr	r2, [r7, #12]
 81074b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 81074b4:	683b      	ldr	r3, [r7, #0]
 81074b6:	685a      	ldr	r2, [r3, #4]
 81074b8:	687b      	ldr	r3, [r7, #4]
 81074ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81074bc:	687b      	ldr	r3, [r7, #4]
 81074be:	697a      	ldr	r2, [r7, #20]
 81074c0:	621a      	str	r2, [r3, #32]
}
 81074c2:	bf00      	nop
 81074c4:	371c      	adds	r7, #28
 81074c6:	46bd      	mov	sp, r7
 81074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81074cc:	4770      	bx	lr
 81074ce:	bf00      	nop
 81074d0:	40010000 	.word	0x40010000
 81074d4:	40010400 	.word	0x40010400
 81074d8:	40014000 	.word	0x40014000
 81074dc:	40014400 	.word	0x40014400
 81074e0:	40014800 	.word	0x40014800

081074e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81074e4:	b480      	push	{r7}
 81074e6:	b087      	sub	sp, #28
 81074e8:	af00      	add	r7, sp, #0
 81074ea:	6078      	str	r0, [r7, #4]
 81074ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 81074ee:	687b      	ldr	r3, [r7, #4]
 81074f0:	6a1b      	ldr	r3, [r3, #32]
 81074f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 81074f6:	687b      	ldr	r3, [r7, #4]
 81074f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81074fa:	687b      	ldr	r3, [r7, #4]
 81074fc:	6a1b      	ldr	r3, [r3, #32]
 81074fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107500:	687b      	ldr	r3, [r7, #4]
 8107502:	685b      	ldr	r3, [r3, #4]
 8107504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8107506:	687b      	ldr	r3, [r7, #4]
 8107508:	69db      	ldr	r3, [r3, #28]
 810750a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 810750c:	68fb      	ldr	r3, [r7, #12]
 810750e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8107512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8107518:	68fb      	ldr	r3, [r7, #12]
 810751a:	f023 0303 	bic.w	r3, r3, #3
 810751e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107520:	683b      	ldr	r3, [r7, #0]
 8107522:	681b      	ldr	r3, [r3, #0]
 8107524:	68fa      	ldr	r2, [r7, #12]
 8107526:	4313      	orrs	r3, r2
 8107528:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 810752a:	697b      	ldr	r3, [r7, #20]
 810752c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8107530:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8107532:	683b      	ldr	r3, [r7, #0]
 8107534:	689b      	ldr	r3, [r3, #8]
 8107536:	021b      	lsls	r3, r3, #8
 8107538:	697a      	ldr	r2, [r7, #20]
 810753a:	4313      	orrs	r3, r2
 810753c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 810753e:	687b      	ldr	r3, [r7, #4]
 8107540:	4a27      	ldr	r2, [pc, #156]	; (81075e0 <TIM_OC3_SetConfig+0xfc>)
 8107542:	4293      	cmp	r3, r2
 8107544:	d003      	beq.n	810754e <TIM_OC3_SetConfig+0x6a>
 8107546:	687b      	ldr	r3, [r7, #4]
 8107548:	4a26      	ldr	r2, [pc, #152]	; (81075e4 <TIM_OC3_SetConfig+0x100>)
 810754a:	4293      	cmp	r3, r2
 810754c:	d10d      	bne.n	810756a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 810754e:	697b      	ldr	r3, [r7, #20]
 8107550:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8107554:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8107556:	683b      	ldr	r3, [r7, #0]
 8107558:	68db      	ldr	r3, [r3, #12]
 810755a:	021b      	lsls	r3, r3, #8
 810755c:	697a      	ldr	r2, [r7, #20]
 810755e:	4313      	orrs	r3, r2
 8107560:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8107562:	697b      	ldr	r3, [r7, #20]
 8107564:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8107568:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810756a:	687b      	ldr	r3, [r7, #4]
 810756c:	4a1c      	ldr	r2, [pc, #112]	; (81075e0 <TIM_OC3_SetConfig+0xfc>)
 810756e:	4293      	cmp	r3, r2
 8107570:	d00f      	beq.n	8107592 <TIM_OC3_SetConfig+0xae>
 8107572:	687b      	ldr	r3, [r7, #4]
 8107574:	4a1b      	ldr	r2, [pc, #108]	; (81075e4 <TIM_OC3_SetConfig+0x100>)
 8107576:	4293      	cmp	r3, r2
 8107578:	d00b      	beq.n	8107592 <TIM_OC3_SetConfig+0xae>
 810757a:	687b      	ldr	r3, [r7, #4]
 810757c:	4a1a      	ldr	r2, [pc, #104]	; (81075e8 <TIM_OC3_SetConfig+0x104>)
 810757e:	4293      	cmp	r3, r2
 8107580:	d007      	beq.n	8107592 <TIM_OC3_SetConfig+0xae>
 8107582:	687b      	ldr	r3, [r7, #4]
 8107584:	4a19      	ldr	r2, [pc, #100]	; (81075ec <TIM_OC3_SetConfig+0x108>)
 8107586:	4293      	cmp	r3, r2
 8107588:	d003      	beq.n	8107592 <TIM_OC3_SetConfig+0xae>
 810758a:	687b      	ldr	r3, [r7, #4]
 810758c:	4a18      	ldr	r2, [pc, #96]	; (81075f0 <TIM_OC3_SetConfig+0x10c>)
 810758e:	4293      	cmp	r3, r2
 8107590:	d113      	bne.n	81075ba <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8107592:	693b      	ldr	r3, [r7, #16]
 8107594:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8107598:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 810759a:	693b      	ldr	r3, [r7, #16]
 810759c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 81075a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 81075a2:	683b      	ldr	r3, [r7, #0]
 81075a4:	695b      	ldr	r3, [r3, #20]
 81075a6:	011b      	lsls	r3, r3, #4
 81075a8:	693a      	ldr	r2, [r7, #16]
 81075aa:	4313      	orrs	r3, r2
 81075ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 81075ae:	683b      	ldr	r3, [r7, #0]
 81075b0:	699b      	ldr	r3, [r3, #24]
 81075b2:	011b      	lsls	r3, r3, #4
 81075b4:	693a      	ldr	r2, [r7, #16]
 81075b6:	4313      	orrs	r3, r2
 81075b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81075ba:	687b      	ldr	r3, [r7, #4]
 81075bc:	693a      	ldr	r2, [r7, #16]
 81075be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 81075c0:	687b      	ldr	r3, [r7, #4]
 81075c2:	68fa      	ldr	r2, [r7, #12]
 81075c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 81075c6:	683b      	ldr	r3, [r7, #0]
 81075c8:	685a      	ldr	r2, [r3, #4]
 81075ca:	687b      	ldr	r3, [r7, #4]
 81075cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81075ce:	687b      	ldr	r3, [r7, #4]
 81075d0:	697a      	ldr	r2, [r7, #20]
 81075d2:	621a      	str	r2, [r3, #32]
}
 81075d4:	bf00      	nop
 81075d6:	371c      	adds	r7, #28
 81075d8:	46bd      	mov	sp, r7
 81075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81075de:	4770      	bx	lr
 81075e0:	40010000 	.word	0x40010000
 81075e4:	40010400 	.word	0x40010400
 81075e8:	40014000 	.word	0x40014000
 81075ec:	40014400 	.word	0x40014400
 81075f0:	40014800 	.word	0x40014800

081075f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81075f4:	b480      	push	{r7}
 81075f6:	b087      	sub	sp, #28
 81075f8:	af00      	add	r7, sp, #0
 81075fa:	6078      	str	r0, [r7, #4]
 81075fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 81075fe:	687b      	ldr	r3, [r7, #4]
 8107600:	6a1b      	ldr	r3, [r3, #32]
 8107602:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8107606:	687b      	ldr	r3, [r7, #4]
 8107608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810760a:	687b      	ldr	r3, [r7, #4]
 810760c:	6a1b      	ldr	r3, [r3, #32]
 810760e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107610:	687b      	ldr	r3, [r7, #4]
 8107612:	685b      	ldr	r3, [r3, #4]
 8107614:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8107616:	687b      	ldr	r3, [r7, #4]
 8107618:	69db      	ldr	r3, [r3, #28]
 810761a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 810761c:	68fb      	ldr	r3, [r7, #12]
 810761e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8107622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8107626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8107628:	68fb      	ldr	r3, [r7, #12]
 810762a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810762e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107630:	683b      	ldr	r3, [r7, #0]
 8107632:	681b      	ldr	r3, [r3, #0]
 8107634:	021b      	lsls	r3, r3, #8
 8107636:	68fa      	ldr	r2, [r7, #12]
 8107638:	4313      	orrs	r3, r2
 810763a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 810763c:	693b      	ldr	r3, [r7, #16]
 810763e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8107642:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8107644:	683b      	ldr	r3, [r7, #0]
 8107646:	689b      	ldr	r3, [r3, #8]
 8107648:	031b      	lsls	r3, r3, #12
 810764a:	693a      	ldr	r2, [r7, #16]
 810764c:	4313      	orrs	r3, r2
 810764e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107650:	687b      	ldr	r3, [r7, #4]
 8107652:	4a18      	ldr	r2, [pc, #96]	; (81076b4 <TIM_OC4_SetConfig+0xc0>)
 8107654:	4293      	cmp	r3, r2
 8107656:	d00f      	beq.n	8107678 <TIM_OC4_SetConfig+0x84>
 8107658:	687b      	ldr	r3, [r7, #4]
 810765a:	4a17      	ldr	r2, [pc, #92]	; (81076b8 <TIM_OC4_SetConfig+0xc4>)
 810765c:	4293      	cmp	r3, r2
 810765e:	d00b      	beq.n	8107678 <TIM_OC4_SetConfig+0x84>
 8107660:	687b      	ldr	r3, [r7, #4]
 8107662:	4a16      	ldr	r2, [pc, #88]	; (81076bc <TIM_OC4_SetConfig+0xc8>)
 8107664:	4293      	cmp	r3, r2
 8107666:	d007      	beq.n	8107678 <TIM_OC4_SetConfig+0x84>
 8107668:	687b      	ldr	r3, [r7, #4]
 810766a:	4a15      	ldr	r2, [pc, #84]	; (81076c0 <TIM_OC4_SetConfig+0xcc>)
 810766c:	4293      	cmp	r3, r2
 810766e:	d003      	beq.n	8107678 <TIM_OC4_SetConfig+0x84>
 8107670:	687b      	ldr	r3, [r7, #4]
 8107672:	4a14      	ldr	r2, [pc, #80]	; (81076c4 <TIM_OC4_SetConfig+0xd0>)
 8107674:	4293      	cmp	r3, r2
 8107676:	d109      	bne.n	810768c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8107678:	697b      	ldr	r3, [r7, #20]
 810767a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 810767e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8107680:	683b      	ldr	r3, [r7, #0]
 8107682:	695b      	ldr	r3, [r3, #20]
 8107684:	019b      	lsls	r3, r3, #6
 8107686:	697a      	ldr	r2, [r7, #20]
 8107688:	4313      	orrs	r3, r2
 810768a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810768c:	687b      	ldr	r3, [r7, #4]
 810768e:	697a      	ldr	r2, [r7, #20]
 8107690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8107692:	687b      	ldr	r3, [r7, #4]
 8107694:	68fa      	ldr	r2, [r7, #12]
 8107696:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8107698:	683b      	ldr	r3, [r7, #0]
 810769a:	685a      	ldr	r2, [r3, #4]
 810769c:	687b      	ldr	r3, [r7, #4]
 810769e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81076a0:	687b      	ldr	r3, [r7, #4]
 81076a2:	693a      	ldr	r2, [r7, #16]
 81076a4:	621a      	str	r2, [r3, #32]
}
 81076a6:	bf00      	nop
 81076a8:	371c      	adds	r7, #28
 81076aa:	46bd      	mov	sp, r7
 81076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81076b0:	4770      	bx	lr
 81076b2:	bf00      	nop
 81076b4:	40010000 	.word	0x40010000
 81076b8:	40010400 	.word	0x40010400
 81076bc:	40014000 	.word	0x40014000
 81076c0:	40014400 	.word	0x40014400
 81076c4:	40014800 	.word	0x40014800

081076c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 81076c8:	b480      	push	{r7}
 81076ca:	b087      	sub	sp, #28
 81076cc:	af00      	add	r7, sp, #0
 81076ce:	6078      	str	r0, [r7, #4]
 81076d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 81076d2:	687b      	ldr	r3, [r7, #4]
 81076d4:	6a1b      	ldr	r3, [r3, #32]
 81076d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81076da:	687b      	ldr	r3, [r7, #4]
 81076dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81076de:	687b      	ldr	r3, [r7, #4]
 81076e0:	6a1b      	ldr	r3, [r3, #32]
 81076e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81076e4:	687b      	ldr	r3, [r7, #4]
 81076e6:	685b      	ldr	r3, [r3, #4]
 81076e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 81076ea:	687b      	ldr	r3, [r7, #4]
 81076ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81076ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 81076f0:	68fb      	ldr	r3, [r7, #12]
 81076f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81076f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81076fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81076fc:	683b      	ldr	r3, [r7, #0]
 81076fe:	681b      	ldr	r3, [r3, #0]
 8107700:	68fa      	ldr	r2, [r7, #12]
 8107702:	4313      	orrs	r3, r2
 8107704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8107706:	693b      	ldr	r3, [r7, #16]
 8107708:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 810770c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 810770e:	683b      	ldr	r3, [r7, #0]
 8107710:	689b      	ldr	r3, [r3, #8]
 8107712:	041b      	lsls	r3, r3, #16
 8107714:	693a      	ldr	r2, [r7, #16]
 8107716:	4313      	orrs	r3, r2
 8107718:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810771a:	687b      	ldr	r3, [r7, #4]
 810771c:	4a17      	ldr	r2, [pc, #92]	; (810777c <TIM_OC5_SetConfig+0xb4>)
 810771e:	4293      	cmp	r3, r2
 8107720:	d00f      	beq.n	8107742 <TIM_OC5_SetConfig+0x7a>
 8107722:	687b      	ldr	r3, [r7, #4]
 8107724:	4a16      	ldr	r2, [pc, #88]	; (8107780 <TIM_OC5_SetConfig+0xb8>)
 8107726:	4293      	cmp	r3, r2
 8107728:	d00b      	beq.n	8107742 <TIM_OC5_SetConfig+0x7a>
 810772a:	687b      	ldr	r3, [r7, #4]
 810772c:	4a15      	ldr	r2, [pc, #84]	; (8107784 <TIM_OC5_SetConfig+0xbc>)
 810772e:	4293      	cmp	r3, r2
 8107730:	d007      	beq.n	8107742 <TIM_OC5_SetConfig+0x7a>
 8107732:	687b      	ldr	r3, [r7, #4]
 8107734:	4a14      	ldr	r2, [pc, #80]	; (8107788 <TIM_OC5_SetConfig+0xc0>)
 8107736:	4293      	cmp	r3, r2
 8107738:	d003      	beq.n	8107742 <TIM_OC5_SetConfig+0x7a>
 810773a:	687b      	ldr	r3, [r7, #4]
 810773c:	4a13      	ldr	r2, [pc, #76]	; (810778c <TIM_OC5_SetConfig+0xc4>)
 810773e:	4293      	cmp	r3, r2
 8107740:	d109      	bne.n	8107756 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8107742:	697b      	ldr	r3, [r7, #20]
 8107744:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8107748:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 810774a:	683b      	ldr	r3, [r7, #0]
 810774c:	695b      	ldr	r3, [r3, #20]
 810774e:	021b      	lsls	r3, r3, #8
 8107750:	697a      	ldr	r2, [r7, #20]
 8107752:	4313      	orrs	r3, r2
 8107754:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107756:	687b      	ldr	r3, [r7, #4]
 8107758:	697a      	ldr	r2, [r7, #20]
 810775a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810775c:	687b      	ldr	r3, [r7, #4]
 810775e:	68fa      	ldr	r2, [r7, #12]
 8107760:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8107762:	683b      	ldr	r3, [r7, #0]
 8107764:	685a      	ldr	r2, [r3, #4]
 8107766:	687b      	ldr	r3, [r7, #4]
 8107768:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810776a:	687b      	ldr	r3, [r7, #4]
 810776c:	693a      	ldr	r2, [r7, #16]
 810776e:	621a      	str	r2, [r3, #32]
}
 8107770:	bf00      	nop
 8107772:	371c      	adds	r7, #28
 8107774:	46bd      	mov	sp, r7
 8107776:	f85d 7b04 	ldr.w	r7, [sp], #4
 810777a:	4770      	bx	lr
 810777c:	40010000 	.word	0x40010000
 8107780:	40010400 	.word	0x40010400
 8107784:	40014000 	.word	0x40014000
 8107788:	40014400 	.word	0x40014400
 810778c:	40014800 	.word	0x40014800

08107790 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8107790:	b480      	push	{r7}
 8107792:	b087      	sub	sp, #28
 8107794:	af00      	add	r7, sp, #0
 8107796:	6078      	str	r0, [r7, #4]
 8107798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 810779a:	687b      	ldr	r3, [r7, #4]
 810779c:	6a1b      	ldr	r3, [r3, #32]
 810779e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 81077a2:	687b      	ldr	r3, [r7, #4]
 81077a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81077a6:	687b      	ldr	r3, [r7, #4]
 81077a8:	6a1b      	ldr	r3, [r3, #32]
 81077aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81077ac:	687b      	ldr	r3, [r7, #4]
 81077ae:	685b      	ldr	r3, [r3, #4]
 81077b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 81077b2:	687b      	ldr	r3, [r7, #4]
 81077b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81077b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 81077b8:	68fb      	ldr	r3, [r7, #12]
 81077ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 81077be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 81077c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 81077c4:	683b      	ldr	r3, [r7, #0]
 81077c6:	681b      	ldr	r3, [r3, #0]
 81077c8:	021b      	lsls	r3, r3, #8
 81077ca:	68fa      	ldr	r2, [r7, #12]
 81077cc:	4313      	orrs	r3, r2
 81077ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 81077d0:	693b      	ldr	r3, [r7, #16]
 81077d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 81077d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 81077d8:	683b      	ldr	r3, [r7, #0]
 81077da:	689b      	ldr	r3, [r3, #8]
 81077dc:	051b      	lsls	r3, r3, #20
 81077de:	693a      	ldr	r2, [r7, #16]
 81077e0:	4313      	orrs	r3, r2
 81077e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81077e4:	687b      	ldr	r3, [r7, #4]
 81077e6:	4a18      	ldr	r2, [pc, #96]	; (8107848 <TIM_OC6_SetConfig+0xb8>)
 81077e8:	4293      	cmp	r3, r2
 81077ea:	d00f      	beq.n	810780c <TIM_OC6_SetConfig+0x7c>
 81077ec:	687b      	ldr	r3, [r7, #4]
 81077ee:	4a17      	ldr	r2, [pc, #92]	; (810784c <TIM_OC6_SetConfig+0xbc>)
 81077f0:	4293      	cmp	r3, r2
 81077f2:	d00b      	beq.n	810780c <TIM_OC6_SetConfig+0x7c>
 81077f4:	687b      	ldr	r3, [r7, #4]
 81077f6:	4a16      	ldr	r2, [pc, #88]	; (8107850 <TIM_OC6_SetConfig+0xc0>)
 81077f8:	4293      	cmp	r3, r2
 81077fa:	d007      	beq.n	810780c <TIM_OC6_SetConfig+0x7c>
 81077fc:	687b      	ldr	r3, [r7, #4]
 81077fe:	4a15      	ldr	r2, [pc, #84]	; (8107854 <TIM_OC6_SetConfig+0xc4>)
 8107800:	4293      	cmp	r3, r2
 8107802:	d003      	beq.n	810780c <TIM_OC6_SetConfig+0x7c>
 8107804:	687b      	ldr	r3, [r7, #4]
 8107806:	4a14      	ldr	r2, [pc, #80]	; (8107858 <TIM_OC6_SetConfig+0xc8>)
 8107808:	4293      	cmp	r3, r2
 810780a:	d109      	bne.n	8107820 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 810780c:	697b      	ldr	r3, [r7, #20]
 810780e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8107812:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8107814:	683b      	ldr	r3, [r7, #0]
 8107816:	695b      	ldr	r3, [r3, #20]
 8107818:	029b      	lsls	r3, r3, #10
 810781a:	697a      	ldr	r2, [r7, #20]
 810781c:	4313      	orrs	r3, r2
 810781e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107820:	687b      	ldr	r3, [r7, #4]
 8107822:	697a      	ldr	r2, [r7, #20]
 8107824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8107826:	687b      	ldr	r3, [r7, #4]
 8107828:	68fa      	ldr	r2, [r7, #12]
 810782a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 810782c:	683b      	ldr	r3, [r7, #0]
 810782e:	685a      	ldr	r2, [r3, #4]
 8107830:	687b      	ldr	r3, [r7, #4]
 8107832:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107834:	687b      	ldr	r3, [r7, #4]
 8107836:	693a      	ldr	r2, [r7, #16]
 8107838:	621a      	str	r2, [r3, #32]
}
 810783a:	bf00      	nop
 810783c:	371c      	adds	r7, #28
 810783e:	46bd      	mov	sp, r7
 8107840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107844:	4770      	bx	lr
 8107846:	bf00      	nop
 8107848:	40010000 	.word	0x40010000
 810784c:	40010400 	.word	0x40010400
 8107850:	40014000 	.word	0x40014000
 8107854:	40014400 	.word	0x40014400
 8107858:	40014800 	.word	0x40014800

0810785c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 810785c:	b480      	push	{r7}
 810785e:	b087      	sub	sp, #28
 8107860:	af00      	add	r7, sp, #0
 8107862:	60f8      	str	r0, [r7, #12]
 8107864:	60b9      	str	r1, [r7, #8]
 8107866:	607a      	str	r2, [r7, #4]
 8107868:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810786a:	68fb      	ldr	r3, [r7, #12]
 810786c:	6a1b      	ldr	r3, [r3, #32]
 810786e:	f023 0201 	bic.w	r2, r3, #1
 8107872:	68fb      	ldr	r3, [r7, #12]
 8107874:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8107876:	68fb      	ldr	r3, [r7, #12]
 8107878:	699b      	ldr	r3, [r3, #24]
 810787a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 810787c:	68fb      	ldr	r3, [r7, #12]
 810787e:	6a1b      	ldr	r3, [r3, #32]
 8107880:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8107882:	68fb      	ldr	r3, [r7, #12]
 8107884:	4a28      	ldr	r2, [pc, #160]	; (8107928 <TIM_TI1_SetConfig+0xcc>)
 8107886:	4293      	cmp	r3, r2
 8107888:	d01b      	beq.n	81078c2 <TIM_TI1_SetConfig+0x66>
 810788a:	68fb      	ldr	r3, [r7, #12]
 810788c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107890:	d017      	beq.n	81078c2 <TIM_TI1_SetConfig+0x66>
 8107892:	68fb      	ldr	r3, [r7, #12]
 8107894:	4a25      	ldr	r2, [pc, #148]	; (810792c <TIM_TI1_SetConfig+0xd0>)
 8107896:	4293      	cmp	r3, r2
 8107898:	d013      	beq.n	81078c2 <TIM_TI1_SetConfig+0x66>
 810789a:	68fb      	ldr	r3, [r7, #12]
 810789c:	4a24      	ldr	r2, [pc, #144]	; (8107930 <TIM_TI1_SetConfig+0xd4>)
 810789e:	4293      	cmp	r3, r2
 81078a0:	d00f      	beq.n	81078c2 <TIM_TI1_SetConfig+0x66>
 81078a2:	68fb      	ldr	r3, [r7, #12]
 81078a4:	4a23      	ldr	r2, [pc, #140]	; (8107934 <TIM_TI1_SetConfig+0xd8>)
 81078a6:	4293      	cmp	r3, r2
 81078a8:	d00b      	beq.n	81078c2 <TIM_TI1_SetConfig+0x66>
 81078aa:	68fb      	ldr	r3, [r7, #12]
 81078ac:	4a22      	ldr	r2, [pc, #136]	; (8107938 <TIM_TI1_SetConfig+0xdc>)
 81078ae:	4293      	cmp	r3, r2
 81078b0:	d007      	beq.n	81078c2 <TIM_TI1_SetConfig+0x66>
 81078b2:	68fb      	ldr	r3, [r7, #12]
 81078b4:	4a21      	ldr	r2, [pc, #132]	; (810793c <TIM_TI1_SetConfig+0xe0>)
 81078b6:	4293      	cmp	r3, r2
 81078b8:	d003      	beq.n	81078c2 <TIM_TI1_SetConfig+0x66>
 81078ba:	68fb      	ldr	r3, [r7, #12]
 81078bc:	4a20      	ldr	r2, [pc, #128]	; (8107940 <TIM_TI1_SetConfig+0xe4>)
 81078be:	4293      	cmp	r3, r2
 81078c0:	d101      	bne.n	81078c6 <TIM_TI1_SetConfig+0x6a>
 81078c2:	2301      	movs	r3, #1
 81078c4:	e000      	b.n	81078c8 <TIM_TI1_SetConfig+0x6c>
 81078c6:	2300      	movs	r3, #0
 81078c8:	2b00      	cmp	r3, #0
 81078ca:	d008      	beq.n	81078de <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 81078cc:	697b      	ldr	r3, [r7, #20]
 81078ce:	f023 0303 	bic.w	r3, r3, #3
 81078d2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 81078d4:	697a      	ldr	r2, [r7, #20]
 81078d6:	687b      	ldr	r3, [r7, #4]
 81078d8:	4313      	orrs	r3, r2
 81078da:	617b      	str	r3, [r7, #20]
 81078dc:	e003      	b.n	81078e6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 81078de:	697b      	ldr	r3, [r7, #20]
 81078e0:	f043 0301 	orr.w	r3, r3, #1
 81078e4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 81078e6:	697b      	ldr	r3, [r7, #20]
 81078e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 81078ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 81078ee:	683b      	ldr	r3, [r7, #0]
 81078f0:	011b      	lsls	r3, r3, #4
 81078f2:	b2db      	uxtb	r3, r3
 81078f4:	697a      	ldr	r2, [r7, #20]
 81078f6:	4313      	orrs	r3, r2
 81078f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 81078fa:	693b      	ldr	r3, [r7, #16]
 81078fc:	f023 030a 	bic.w	r3, r3, #10
 8107900:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8107902:	68bb      	ldr	r3, [r7, #8]
 8107904:	f003 030a 	and.w	r3, r3, #10
 8107908:	693a      	ldr	r2, [r7, #16]
 810790a:	4313      	orrs	r3, r2
 810790c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 810790e:	68fb      	ldr	r3, [r7, #12]
 8107910:	697a      	ldr	r2, [r7, #20]
 8107912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8107914:	68fb      	ldr	r3, [r7, #12]
 8107916:	693a      	ldr	r2, [r7, #16]
 8107918:	621a      	str	r2, [r3, #32]
}
 810791a:	bf00      	nop
 810791c:	371c      	adds	r7, #28
 810791e:	46bd      	mov	sp, r7
 8107920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107924:	4770      	bx	lr
 8107926:	bf00      	nop
 8107928:	40010000 	.word	0x40010000
 810792c:	40000400 	.word	0x40000400
 8107930:	40000800 	.word	0x40000800
 8107934:	40000c00 	.word	0x40000c00
 8107938:	40010400 	.word	0x40010400
 810793c:	40001800 	.word	0x40001800
 8107940:	40014000 	.word	0x40014000

08107944 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8107944:	b480      	push	{r7}
 8107946:	b087      	sub	sp, #28
 8107948:	af00      	add	r7, sp, #0
 810794a:	60f8      	str	r0, [r7, #12]
 810794c:	60b9      	str	r1, [r7, #8]
 810794e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8107950:	68fb      	ldr	r3, [r7, #12]
 8107952:	6a1b      	ldr	r3, [r3, #32]
 8107954:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8107956:	68fb      	ldr	r3, [r7, #12]
 8107958:	6a1b      	ldr	r3, [r3, #32]
 810795a:	f023 0201 	bic.w	r2, r3, #1
 810795e:	68fb      	ldr	r3, [r7, #12]
 8107960:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8107962:	68fb      	ldr	r3, [r7, #12]
 8107964:	699b      	ldr	r3, [r3, #24]
 8107966:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8107968:	693b      	ldr	r3, [r7, #16]
 810796a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 810796e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8107970:	687b      	ldr	r3, [r7, #4]
 8107972:	011b      	lsls	r3, r3, #4
 8107974:	693a      	ldr	r2, [r7, #16]
 8107976:	4313      	orrs	r3, r2
 8107978:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810797a:	697b      	ldr	r3, [r7, #20]
 810797c:	f023 030a 	bic.w	r3, r3, #10
 8107980:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8107982:	697a      	ldr	r2, [r7, #20]
 8107984:	68bb      	ldr	r3, [r7, #8]
 8107986:	4313      	orrs	r3, r2
 8107988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 810798a:	68fb      	ldr	r3, [r7, #12]
 810798c:	693a      	ldr	r2, [r7, #16]
 810798e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8107990:	68fb      	ldr	r3, [r7, #12]
 8107992:	697a      	ldr	r2, [r7, #20]
 8107994:	621a      	str	r2, [r3, #32]
}
 8107996:	bf00      	nop
 8107998:	371c      	adds	r7, #28
 810799a:	46bd      	mov	sp, r7
 810799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81079a0:	4770      	bx	lr

081079a2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 81079a2:	b480      	push	{r7}
 81079a4:	b087      	sub	sp, #28
 81079a6:	af00      	add	r7, sp, #0
 81079a8:	60f8      	str	r0, [r7, #12]
 81079aa:	60b9      	str	r1, [r7, #8]
 81079ac:	607a      	str	r2, [r7, #4]
 81079ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 81079b0:	68fb      	ldr	r3, [r7, #12]
 81079b2:	6a1b      	ldr	r3, [r3, #32]
 81079b4:	f023 0210 	bic.w	r2, r3, #16
 81079b8:	68fb      	ldr	r3, [r7, #12]
 81079ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 81079bc:	68fb      	ldr	r3, [r7, #12]
 81079be:	699b      	ldr	r3, [r3, #24]
 81079c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 81079c2:	68fb      	ldr	r3, [r7, #12]
 81079c4:	6a1b      	ldr	r3, [r3, #32]
 81079c6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 81079c8:	697b      	ldr	r3, [r7, #20]
 81079ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81079ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 81079d0:	687b      	ldr	r3, [r7, #4]
 81079d2:	021b      	lsls	r3, r3, #8
 81079d4:	697a      	ldr	r2, [r7, #20]
 81079d6:	4313      	orrs	r3, r2
 81079d8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 81079da:	697b      	ldr	r3, [r7, #20]
 81079dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 81079e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 81079e2:	683b      	ldr	r3, [r7, #0]
 81079e4:	031b      	lsls	r3, r3, #12
 81079e6:	b29b      	uxth	r3, r3
 81079e8:	697a      	ldr	r2, [r7, #20]
 81079ea:	4313      	orrs	r3, r2
 81079ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 81079ee:	693b      	ldr	r3, [r7, #16]
 81079f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 81079f4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 81079f6:	68bb      	ldr	r3, [r7, #8]
 81079f8:	011b      	lsls	r3, r3, #4
 81079fa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 81079fe:	693a      	ldr	r2, [r7, #16]
 8107a00:	4313      	orrs	r3, r2
 8107a02:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8107a04:	68fb      	ldr	r3, [r7, #12]
 8107a06:	697a      	ldr	r2, [r7, #20]
 8107a08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8107a0a:	68fb      	ldr	r3, [r7, #12]
 8107a0c:	693a      	ldr	r2, [r7, #16]
 8107a0e:	621a      	str	r2, [r3, #32]
}
 8107a10:	bf00      	nop
 8107a12:	371c      	adds	r7, #28
 8107a14:	46bd      	mov	sp, r7
 8107a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a1a:	4770      	bx	lr

08107a1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8107a1c:	b480      	push	{r7}
 8107a1e:	b087      	sub	sp, #28
 8107a20:	af00      	add	r7, sp, #0
 8107a22:	60f8      	str	r0, [r7, #12]
 8107a24:	60b9      	str	r1, [r7, #8]
 8107a26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8107a28:	68fb      	ldr	r3, [r7, #12]
 8107a2a:	6a1b      	ldr	r3, [r3, #32]
 8107a2c:	f023 0210 	bic.w	r2, r3, #16
 8107a30:	68fb      	ldr	r3, [r7, #12]
 8107a32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8107a34:	68fb      	ldr	r3, [r7, #12]
 8107a36:	699b      	ldr	r3, [r3, #24]
 8107a38:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8107a3a:	68fb      	ldr	r3, [r7, #12]
 8107a3c:	6a1b      	ldr	r3, [r3, #32]
 8107a3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8107a40:	697b      	ldr	r3, [r7, #20]
 8107a42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8107a46:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8107a48:	687b      	ldr	r3, [r7, #4]
 8107a4a:	031b      	lsls	r3, r3, #12
 8107a4c:	697a      	ldr	r2, [r7, #20]
 8107a4e:	4313      	orrs	r3, r2
 8107a50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8107a52:	693b      	ldr	r3, [r7, #16]
 8107a54:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8107a58:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8107a5a:	68bb      	ldr	r3, [r7, #8]
 8107a5c:	011b      	lsls	r3, r3, #4
 8107a5e:	693a      	ldr	r2, [r7, #16]
 8107a60:	4313      	orrs	r3, r2
 8107a62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8107a64:	68fb      	ldr	r3, [r7, #12]
 8107a66:	697a      	ldr	r2, [r7, #20]
 8107a68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8107a6a:	68fb      	ldr	r3, [r7, #12]
 8107a6c:	693a      	ldr	r2, [r7, #16]
 8107a6e:	621a      	str	r2, [r3, #32]
}
 8107a70:	bf00      	nop
 8107a72:	371c      	adds	r7, #28
 8107a74:	46bd      	mov	sp, r7
 8107a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a7a:	4770      	bx	lr

08107a7c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8107a7c:	b480      	push	{r7}
 8107a7e:	b087      	sub	sp, #28
 8107a80:	af00      	add	r7, sp, #0
 8107a82:	60f8      	str	r0, [r7, #12]
 8107a84:	60b9      	str	r1, [r7, #8]
 8107a86:	607a      	str	r2, [r7, #4]
 8107a88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8107a8a:	68fb      	ldr	r3, [r7, #12]
 8107a8c:	6a1b      	ldr	r3, [r3, #32]
 8107a8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8107a92:	68fb      	ldr	r3, [r7, #12]
 8107a94:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8107a96:	68fb      	ldr	r3, [r7, #12]
 8107a98:	69db      	ldr	r3, [r3, #28]
 8107a9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8107a9c:	68fb      	ldr	r3, [r7, #12]
 8107a9e:	6a1b      	ldr	r3, [r3, #32]
 8107aa0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8107aa2:	697b      	ldr	r3, [r7, #20]
 8107aa4:	f023 0303 	bic.w	r3, r3, #3
 8107aa8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8107aaa:	697a      	ldr	r2, [r7, #20]
 8107aac:	687b      	ldr	r3, [r7, #4]
 8107aae:	4313      	orrs	r3, r2
 8107ab0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8107ab2:	697b      	ldr	r3, [r7, #20]
 8107ab4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8107ab8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8107aba:	683b      	ldr	r3, [r7, #0]
 8107abc:	011b      	lsls	r3, r3, #4
 8107abe:	b2db      	uxtb	r3, r3
 8107ac0:	697a      	ldr	r2, [r7, #20]
 8107ac2:	4313      	orrs	r3, r2
 8107ac4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8107ac6:	693b      	ldr	r3, [r7, #16]
 8107ac8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8107acc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8107ace:	68bb      	ldr	r3, [r7, #8]
 8107ad0:	021b      	lsls	r3, r3, #8
 8107ad2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8107ad6:	693a      	ldr	r2, [r7, #16]
 8107ad8:	4313      	orrs	r3, r2
 8107ada:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8107adc:	68fb      	ldr	r3, [r7, #12]
 8107ade:	697a      	ldr	r2, [r7, #20]
 8107ae0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8107ae2:	68fb      	ldr	r3, [r7, #12]
 8107ae4:	693a      	ldr	r2, [r7, #16]
 8107ae6:	621a      	str	r2, [r3, #32]
}
 8107ae8:	bf00      	nop
 8107aea:	371c      	adds	r7, #28
 8107aec:	46bd      	mov	sp, r7
 8107aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107af2:	4770      	bx	lr

08107af4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8107af4:	b480      	push	{r7}
 8107af6:	b087      	sub	sp, #28
 8107af8:	af00      	add	r7, sp, #0
 8107afa:	60f8      	str	r0, [r7, #12]
 8107afc:	60b9      	str	r1, [r7, #8]
 8107afe:	607a      	str	r2, [r7, #4]
 8107b00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8107b02:	68fb      	ldr	r3, [r7, #12]
 8107b04:	6a1b      	ldr	r3, [r3, #32]
 8107b06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8107b0a:	68fb      	ldr	r3, [r7, #12]
 8107b0c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8107b0e:	68fb      	ldr	r3, [r7, #12]
 8107b10:	69db      	ldr	r3, [r3, #28]
 8107b12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8107b14:	68fb      	ldr	r3, [r7, #12]
 8107b16:	6a1b      	ldr	r3, [r3, #32]
 8107b18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8107b1a:	697b      	ldr	r3, [r7, #20]
 8107b1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107b20:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8107b22:	687b      	ldr	r3, [r7, #4]
 8107b24:	021b      	lsls	r3, r3, #8
 8107b26:	697a      	ldr	r2, [r7, #20]
 8107b28:	4313      	orrs	r3, r2
 8107b2a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8107b2c:	697b      	ldr	r3, [r7, #20]
 8107b2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8107b32:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8107b34:	683b      	ldr	r3, [r7, #0]
 8107b36:	031b      	lsls	r3, r3, #12
 8107b38:	b29b      	uxth	r3, r3
 8107b3a:	697a      	ldr	r2, [r7, #20]
 8107b3c:	4313      	orrs	r3, r2
 8107b3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8107b40:	693b      	ldr	r3, [r7, #16]
 8107b42:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8107b46:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8107b48:	68bb      	ldr	r3, [r7, #8]
 8107b4a:	031b      	lsls	r3, r3, #12
 8107b4c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8107b50:	693a      	ldr	r2, [r7, #16]
 8107b52:	4313      	orrs	r3, r2
 8107b54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8107b56:	68fb      	ldr	r3, [r7, #12]
 8107b58:	697a      	ldr	r2, [r7, #20]
 8107b5a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8107b5c:	68fb      	ldr	r3, [r7, #12]
 8107b5e:	693a      	ldr	r2, [r7, #16]
 8107b60:	621a      	str	r2, [r3, #32]
}
 8107b62:	bf00      	nop
 8107b64:	371c      	adds	r7, #28
 8107b66:	46bd      	mov	sp, r7
 8107b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b6c:	4770      	bx	lr

08107b6e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8107b6e:	b480      	push	{r7}
 8107b70:	b085      	sub	sp, #20
 8107b72:	af00      	add	r7, sp, #0
 8107b74:	6078      	str	r0, [r7, #4]
 8107b76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8107b78:	687b      	ldr	r3, [r7, #4]
 8107b7a:	689b      	ldr	r3, [r3, #8]
 8107b7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8107b7e:	68fb      	ldr	r3, [r7, #12]
 8107b80:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8107b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107b88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8107b8a:	683a      	ldr	r2, [r7, #0]
 8107b8c:	68fb      	ldr	r3, [r7, #12]
 8107b8e:	4313      	orrs	r3, r2
 8107b90:	f043 0307 	orr.w	r3, r3, #7
 8107b94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8107b96:	687b      	ldr	r3, [r7, #4]
 8107b98:	68fa      	ldr	r2, [r7, #12]
 8107b9a:	609a      	str	r2, [r3, #8]
}
 8107b9c:	bf00      	nop
 8107b9e:	3714      	adds	r7, #20
 8107ba0:	46bd      	mov	sp, r7
 8107ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ba6:	4770      	bx	lr

08107ba8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8107ba8:	b480      	push	{r7}
 8107baa:	b087      	sub	sp, #28
 8107bac:	af00      	add	r7, sp, #0
 8107bae:	60f8      	str	r0, [r7, #12]
 8107bb0:	60b9      	str	r1, [r7, #8]
 8107bb2:	607a      	str	r2, [r7, #4]
 8107bb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8107bb6:	68fb      	ldr	r3, [r7, #12]
 8107bb8:	689b      	ldr	r3, [r3, #8]
 8107bba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8107bbc:	697b      	ldr	r3, [r7, #20]
 8107bbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8107bc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8107bc4:	683b      	ldr	r3, [r7, #0]
 8107bc6:	021a      	lsls	r2, r3, #8
 8107bc8:	687b      	ldr	r3, [r7, #4]
 8107bca:	431a      	orrs	r2, r3
 8107bcc:	68bb      	ldr	r3, [r7, #8]
 8107bce:	4313      	orrs	r3, r2
 8107bd0:	697a      	ldr	r2, [r7, #20]
 8107bd2:	4313      	orrs	r3, r2
 8107bd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8107bd6:	68fb      	ldr	r3, [r7, #12]
 8107bd8:	697a      	ldr	r2, [r7, #20]
 8107bda:	609a      	str	r2, [r3, #8]
}
 8107bdc:	bf00      	nop
 8107bde:	371c      	adds	r7, #28
 8107be0:	46bd      	mov	sp, r7
 8107be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107be6:	4770      	bx	lr

08107be8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8107be8:	b480      	push	{r7}
 8107bea:	b087      	sub	sp, #28
 8107bec:	af00      	add	r7, sp, #0
 8107bee:	60f8      	str	r0, [r7, #12]
 8107bf0:	60b9      	str	r1, [r7, #8]
 8107bf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8107bf4:	68bb      	ldr	r3, [r7, #8]
 8107bf6:	f003 031f 	and.w	r3, r3, #31
 8107bfa:	2201      	movs	r2, #1
 8107bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8107c00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8107c02:	68fb      	ldr	r3, [r7, #12]
 8107c04:	6a1a      	ldr	r2, [r3, #32]
 8107c06:	697b      	ldr	r3, [r7, #20]
 8107c08:	43db      	mvns	r3, r3
 8107c0a:	401a      	ands	r2, r3
 8107c0c:	68fb      	ldr	r3, [r7, #12]
 8107c0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8107c10:	68fb      	ldr	r3, [r7, #12]
 8107c12:	6a1a      	ldr	r2, [r3, #32]
 8107c14:	68bb      	ldr	r3, [r7, #8]
 8107c16:	f003 031f 	and.w	r3, r3, #31
 8107c1a:	6879      	ldr	r1, [r7, #4]
 8107c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8107c20:	431a      	orrs	r2, r3
 8107c22:	68fb      	ldr	r3, [r7, #12]
 8107c24:	621a      	str	r2, [r3, #32]
}
 8107c26:	bf00      	nop
 8107c28:	371c      	adds	r7, #28
 8107c2a:	46bd      	mov	sp, r7
 8107c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c30:	4770      	bx	lr
	...

08107c34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8107c34:	b480      	push	{r7}
 8107c36:	b085      	sub	sp, #20
 8107c38:	af00      	add	r7, sp, #0
 8107c3a:	6078      	str	r0, [r7, #4]
 8107c3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8107c3e:	687b      	ldr	r3, [r7, #4]
 8107c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8107c44:	2b01      	cmp	r3, #1
 8107c46:	d101      	bne.n	8107c4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8107c48:	2302      	movs	r3, #2
 8107c4a:	e06d      	b.n	8107d28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8107c4c:	687b      	ldr	r3, [r7, #4]
 8107c4e:	2201      	movs	r2, #1
 8107c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8107c54:	687b      	ldr	r3, [r7, #4]
 8107c56:	2202      	movs	r2, #2
 8107c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8107c5c:	687b      	ldr	r3, [r7, #4]
 8107c5e:	681b      	ldr	r3, [r3, #0]
 8107c60:	685b      	ldr	r3, [r3, #4]
 8107c62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8107c64:	687b      	ldr	r3, [r7, #4]
 8107c66:	681b      	ldr	r3, [r3, #0]
 8107c68:	689b      	ldr	r3, [r3, #8]
 8107c6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8107c6c:	687b      	ldr	r3, [r7, #4]
 8107c6e:	681b      	ldr	r3, [r3, #0]
 8107c70:	4a30      	ldr	r2, [pc, #192]	; (8107d34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8107c72:	4293      	cmp	r3, r2
 8107c74:	d004      	beq.n	8107c80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8107c76:	687b      	ldr	r3, [r7, #4]
 8107c78:	681b      	ldr	r3, [r3, #0]
 8107c7a:	4a2f      	ldr	r2, [pc, #188]	; (8107d38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8107c7c:	4293      	cmp	r3, r2
 8107c7e:	d108      	bne.n	8107c92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8107c80:	68fb      	ldr	r3, [r7, #12]
 8107c82:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8107c86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8107c88:	683b      	ldr	r3, [r7, #0]
 8107c8a:	685b      	ldr	r3, [r3, #4]
 8107c8c:	68fa      	ldr	r2, [r7, #12]
 8107c8e:	4313      	orrs	r3, r2
 8107c90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8107c92:	68fb      	ldr	r3, [r7, #12]
 8107c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107c98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8107c9a:	683b      	ldr	r3, [r7, #0]
 8107c9c:	681b      	ldr	r3, [r3, #0]
 8107c9e:	68fa      	ldr	r2, [r7, #12]
 8107ca0:	4313      	orrs	r3, r2
 8107ca2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8107ca4:	687b      	ldr	r3, [r7, #4]
 8107ca6:	681b      	ldr	r3, [r3, #0]
 8107ca8:	68fa      	ldr	r2, [r7, #12]
 8107caa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8107cac:	687b      	ldr	r3, [r7, #4]
 8107cae:	681b      	ldr	r3, [r3, #0]
 8107cb0:	4a20      	ldr	r2, [pc, #128]	; (8107d34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8107cb2:	4293      	cmp	r3, r2
 8107cb4:	d022      	beq.n	8107cfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107cb6:	687b      	ldr	r3, [r7, #4]
 8107cb8:	681b      	ldr	r3, [r3, #0]
 8107cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107cbe:	d01d      	beq.n	8107cfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107cc0:	687b      	ldr	r3, [r7, #4]
 8107cc2:	681b      	ldr	r3, [r3, #0]
 8107cc4:	4a1d      	ldr	r2, [pc, #116]	; (8107d3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8107cc6:	4293      	cmp	r3, r2
 8107cc8:	d018      	beq.n	8107cfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107cca:	687b      	ldr	r3, [r7, #4]
 8107ccc:	681b      	ldr	r3, [r3, #0]
 8107cce:	4a1c      	ldr	r2, [pc, #112]	; (8107d40 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8107cd0:	4293      	cmp	r3, r2
 8107cd2:	d013      	beq.n	8107cfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107cd4:	687b      	ldr	r3, [r7, #4]
 8107cd6:	681b      	ldr	r3, [r3, #0]
 8107cd8:	4a1a      	ldr	r2, [pc, #104]	; (8107d44 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8107cda:	4293      	cmp	r3, r2
 8107cdc:	d00e      	beq.n	8107cfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107cde:	687b      	ldr	r3, [r7, #4]
 8107ce0:	681b      	ldr	r3, [r3, #0]
 8107ce2:	4a15      	ldr	r2, [pc, #84]	; (8107d38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8107ce4:	4293      	cmp	r3, r2
 8107ce6:	d009      	beq.n	8107cfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107ce8:	687b      	ldr	r3, [r7, #4]
 8107cea:	681b      	ldr	r3, [r3, #0]
 8107cec:	4a16      	ldr	r2, [pc, #88]	; (8107d48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8107cee:	4293      	cmp	r3, r2
 8107cf0:	d004      	beq.n	8107cfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107cf2:	687b      	ldr	r3, [r7, #4]
 8107cf4:	681b      	ldr	r3, [r3, #0]
 8107cf6:	4a15      	ldr	r2, [pc, #84]	; (8107d4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8107cf8:	4293      	cmp	r3, r2
 8107cfa:	d10c      	bne.n	8107d16 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8107cfc:	68bb      	ldr	r3, [r7, #8]
 8107cfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8107d02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8107d04:	683b      	ldr	r3, [r7, #0]
 8107d06:	689b      	ldr	r3, [r3, #8]
 8107d08:	68ba      	ldr	r2, [r7, #8]
 8107d0a:	4313      	orrs	r3, r2
 8107d0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8107d0e:	687b      	ldr	r3, [r7, #4]
 8107d10:	681b      	ldr	r3, [r3, #0]
 8107d12:	68ba      	ldr	r2, [r7, #8]
 8107d14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8107d16:	687b      	ldr	r3, [r7, #4]
 8107d18:	2201      	movs	r2, #1
 8107d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8107d1e:	687b      	ldr	r3, [r7, #4]
 8107d20:	2200      	movs	r2, #0
 8107d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8107d26:	2300      	movs	r3, #0
}
 8107d28:	4618      	mov	r0, r3
 8107d2a:	3714      	adds	r7, #20
 8107d2c:	46bd      	mov	sp, r7
 8107d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107d32:	4770      	bx	lr
 8107d34:	40010000 	.word	0x40010000
 8107d38:	40010400 	.word	0x40010400
 8107d3c:	40000400 	.word	0x40000400
 8107d40:	40000800 	.word	0x40000800
 8107d44:	40000c00 	.word	0x40000c00
 8107d48:	40001800 	.word	0x40001800
 8107d4c:	40014000 	.word	0x40014000

08107d50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8107d50:	b480      	push	{r7}
 8107d52:	b083      	sub	sp, #12
 8107d54:	af00      	add	r7, sp, #0
 8107d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8107d58:	bf00      	nop
 8107d5a:	370c      	adds	r7, #12
 8107d5c:	46bd      	mov	sp, r7
 8107d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107d62:	4770      	bx	lr

08107d64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8107d64:	b480      	push	{r7}
 8107d66:	b083      	sub	sp, #12
 8107d68:	af00      	add	r7, sp, #0
 8107d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8107d6c:	bf00      	nop
 8107d6e:	370c      	adds	r7, #12
 8107d70:	46bd      	mov	sp, r7
 8107d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107d76:	4770      	bx	lr

08107d78 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8107d78:	b480      	push	{r7}
 8107d7a:	b083      	sub	sp, #12
 8107d7c:	af00      	add	r7, sp, #0
 8107d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8107d80:	bf00      	nop
 8107d82:	370c      	adds	r7, #12
 8107d84:	46bd      	mov	sp, r7
 8107d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107d8a:	4770      	bx	lr

08107d8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8107d8c:	b580      	push	{r7, lr}
 8107d8e:	b082      	sub	sp, #8
 8107d90:	af00      	add	r7, sp, #0
 8107d92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8107d94:	687b      	ldr	r3, [r7, #4]
 8107d96:	2b00      	cmp	r3, #0
 8107d98:	d101      	bne.n	8107d9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8107d9a:	2301      	movs	r3, #1
 8107d9c:	e042      	b.n	8107e24 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8107d9e:	687b      	ldr	r3, [r7, #4]
 8107da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107da4:	2b00      	cmp	r3, #0
 8107da6:	d106      	bne.n	8107db6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8107da8:	687b      	ldr	r3, [r7, #4]
 8107daa:	2200      	movs	r2, #0
 8107dac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8107db0:	6878      	ldr	r0, [r7, #4]
 8107db2:	f7fb f80f 	bl	8102dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8107db6:	687b      	ldr	r3, [r7, #4]
 8107db8:	2224      	movs	r2, #36	; 0x24
 8107dba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8107dbe:	687b      	ldr	r3, [r7, #4]
 8107dc0:	681b      	ldr	r3, [r3, #0]
 8107dc2:	681a      	ldr	r2, [r3, #0]
 8107dc4:	687b      	ldr	r3, [r7, #4]
 8107dc6:	681b      	ldr	r3, [r3, #0]
 8107dc8:	f022 0201 	bic.w	r2, r2, #1
 8107dcc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8107dce:	6878      	ldr	r0, [r7, #4]
 8107dd0:	f000 f8c2 	bl	8107f58 <UART_SetConfig>
 8107dd4:	4603      	mov	r3, r0
 8107dd6:	2b01      	cmp	r3, #1
 8107dd8:	d101      	bne.n	8107dde <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8107dda:	2301      	movs	r3, #1
 8107ddc:	e022      	b.n	8107e24 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8107dde:	687b      	ldr	r3, [r7, #4]
 8107de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107de2:	2b00      	cmp	r3, #0
 8107de4:	d002      	beq.n	8107dec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8107de6:	6878      	ldr	r0, [r7, #4]
 8107de8:	f000 fe1e 	bl	8108a28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8107dec:	687b      	ldr	r3, [r7, #4]
 8107dee:	681b      	ldr	r3, [r3, #0]
 8107df0:	685a      	ldr	r2, [r3, #4]
 8107df2:	687b      	ldr	r3, [r7, #4]
 8107df4:	681b      	ldr	r3, [r3, #0]
 8107df6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8107dfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8107dfc:	687b      	ldr	r3, [r7, #4]
 8107dfe:	681b      	ldr	r3, [r3, #0]
 8107e00:	689a      	ldr	r2, [r3, #8]
 8107e02:	687b      	ldr	r3, [r7, #4]
 8107e04:	681b      	ldr	r3, [r3, #0]
 8107e06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8107e0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8107e0c:	687b      	ldr	r3, [r7, #4]
 8107e0e:	681b      	ldr	r3, [r3, #0]
 8107e10:	681a      	ldr	r2, [r3, #0]
 8107e12:	687b      	ldr	r3, [r7, #4]
 8107e14:	681b      	ldr	r3, [r3, #0]
 8107e16:	f042 0201 	orr.w	r2, r2, #1
 8107e1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8107e1c:	6878      	ldr	r0, [r7, #4]
 8107e1e:	f000 fea5 	bl	8108b6c <UART_CheckIdleState>
 8107e22:	4603      	mov	r3, r0
}
 8107e24:	4618      	mov	r0, r3
 8107e26:	3708      	adds	r7, #8
 8107e28:	46bd      	mov	sp, r7
 8107e2a:	bd80      	pop	{r7, pc}

08107e2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8107e2c:	b580      	push	{r7, lr}
 8107e2e:	b08a      	sub	sp, #40	; 0x28
 8107e30:	af02      	add	r7, sp, #8
 8107e32:	60f8      	str	r0, [r7, #12]
 8107e34:	60b9      	str	r1, [r7, #8]
 8107e36:	603b      	str	r3, [r7, #0]
 8107e38:	4613      	mov	r3, r2
 8107e3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8107e3c:	68fb      	ldr	r3, [r7, #12]
 8107e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107e42:	2b20      	cmp	r3, #32
 8107e44:	f040 8083 	bne.w	8107f4e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8107e48:	68bb      	ldr	r3, [r7, #8]
 8107e4a:	2b00      	cmp	r3, #0
 8107e4c:	d002      	beq.n	8107e54 <HAL_UART_Transmit+0x28>
 8107e4e:	88fb      	ldrh	r3, [r7, #6]
 8107e50:	2b00      	cmp	r3, #0
 8107e52:	d101      	bne.n	8107e58 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8107e54:	2301      	movs	r3, #1
 8107e56:	e07b      	b.n	8107f50 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8107e58:	68fb      	ldr	r3, [r7, #12]
 8107e5a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8107e5e:	2b01      	cmp	r3, #1
 8107e60:	d101      	bne.n	8107e66 <HAL_UART_Transmit+0x3a>
 8107e62:	2302      	movs	r3, #2
 8107e64:	e074      	b.n	8107f50 <HAL_UART_Transmit+0x124>
 8107e66:	68fb      	ldr	r3, [r7, #12]
 8107e68:	2201      	movs	r2, #1
 8107e6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107e6e:	68fb      	ldr	r3, [r7, #12]
 8107e70:	2200      	movs	r2, #0
 8107e72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8107e76:	68fb      	ldr	r3, [r7, #12]
 8107e78:	2221      	movs	r2, #33	; 0x21
 8107e7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8107e7e:	f7fb f9ed 	bl	810325c <HAL_GetTick>
 8107e82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8107e84:	68fb      	ldr	r3, [r7, #12]
 8107e86:	88fa      	ldrh	r2, [r7, #6]
 8107e88:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8107e8c:	68fb      	ldr	r3, [r7, #12]
 8107e8e:	88fa      	ldrh	r2, [r7, #6]
 8107e90:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8107e94:	68fb      	ldr	r3, [r7, #12]
 8107e96:	689b      	ldr	r3, [r3, #8]
 8107e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8107e9c:	d108      	bne.n	8107eb0 <HAL_UART_Transmit+0x84>
 8107e9e:	68fb      	ldr	r3, [r7, #12]
 8107ea0:	691b      	ldr	r3, [r3, #16]
 8107ea2:	2b00      	cmp	r3, #0
 8107ea4:	d104      	bne.n	8107eb0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8107ea6:	2300      	movs	r3, #0
 8107ea8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8107eaa:	68bb      	ldr	r3, [r7, #8]
 8107eac:	61bb      	str	r3, [r7, #24]
 8107eae:	e003      	b.n	8107eb8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8107eb0:	68bb      	ldr	r3, [r7, #8]
 8107eb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8107eb4:	2300      	movs	r3, #0
 8107eb6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8107eb8:	68fb      	ldr	r3, [r7, #12]
 8107eba:	2200      	movs	r2, #0
 8107ebc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8107ec0:	e02c      	b.n	8107f1c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8107ec2:	683b      	ldr	r3, [r7, #0]
 8107ec4:	9300      	str	r3, [sp, #0]
 8107ec6:	697b      	ldr	r3, [r7, #20]
 8107ec8:	2200      	movs	r2, #0
 8107eca:	2180      	movs	r1, #128	; 0x80
 8107ecc:	68f8      	ldr	r0, [r7, #12]
 8107ece:	f000 fe98 	bl	8108c02 <UART_WaitOnFlagUntilTimeout>
 8107ed2:	4603      	mov	r3, r0
 8107ed4:	2b00      	cmp	r3, #0
 8107ed6:	d001      	beq.n	8107edc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8107ed8:	2303      	movs	r3, #3
 8107eda:	e039      	b.n	8107f50 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8107edc:	69fb      	ldr	r3, [r7, #28]
 8107ede:	2b00      	cmp	r3, #0
 8107ee0:	d10b      	bne.n	8107efa <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8107ee2:	69bb      	ldr	r3, [r7, #24]
 8107ee4:	881b      	ldrh	r3, [r3, #0]
 8107ee6:	461a      	mov	r2, r3
 8107ee8:	68fb      	ldr	r3, [r7, #12]
 8107eea:	681b      	ldr	r3, [r3, #0]
 8107eec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8107ef0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8107ef2:	69bb      	ldr	r3, [r7, #24]
 8107ef4:	3302      	adds	r3, #2
 8107ef6:	61bb      	str	r3, [r7, #24]
 8107ef8:	e007      	b.n	8107f0a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8107efa:	69fb      	ldr	r3, [r7, #28]
 8107efc:	781a      	ldrb	r2, [r3, #0]
 8107efe:	68fb      	ldr	r3, [r7, #12]
 8107f00:	681b      	ldr	r3, [r3, #0]
 8107f02:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8107f04:	69fb      	ldr	r3, [r7, #28]
 8107f06:	3301      	adds	r3, #1
 8107f08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8107f0a:	68fb      	ldr	r3, [r7, #12]
 8107f0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8107f10:	b29b      	uxth	r3, r3
 8107f12:	3b01      	subs	r3, #1
 8107f14:	b29a      	uxth	r2, r3
 8107f16:	68fb      	ldr	r3, [r7, #12]
 8107f18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8107f1c:	68fb      	ldr	r3, [r7, #12]
 8107f1e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8107f22:	b29b      	uxth	r3, r3
 8107f24:	2b00      	cmp	r3, #0
 8107f26:	d1cc      	bne.n	8107ec2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8107f28:	683b      	ldr	r3, [r7, #0]
 8107f2a:	9300      	str	r3, [sp, #0]
 8107f2c:	697b      	ldr	r3, [r7, #20]
 8107f2e:	2200      	movs	r2, #0
 8107f30:	2140      	movs	r1, #64	; 0x40
 8107f32:	68f8      	ldr	r0, [r7, #12]
 8107f34:	f000 fe65 	bl	8108c02 <UART_WaitOnFlagUntilTimeout>
 8107f38:	4603      	mov	r3, r0
 8107f3a:	2b00      	cmp	r3, #0
 8107f3c:	d001      	beq.n	8107f42 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8107f3e:	2303      	movs	r3, #3
 8107f40:	e006      	b.n	8107f50 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8107f42:	68fb      	ldr	r3, [r7, #12]
 8107f44:	2220      	movs	r2, #32
 8107f46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8107f4a:	2300      	movs	r3, #0
 8107f4c:	e000      	b.n	8107f50 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8107f4e:	2302      	movs	r3, #2
  }
}
 8107f50:	4618      	mov	r0, r3
 8107f52:	3720      	adds	r7, #32
 8107f54:	46bd      	mov	sp, r7
 8107f56:	bd80      	pop	{r7, pc}

08107f58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8107f58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8107f5c:	b092      	sub	sp, #72	; 0x48
 8107f5e:	af00      	add	r7, sp, #0
 8107f60:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8107f62:	2300      	movs	r3, #0
 8107f64:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8107f68:	697b      	ldr	r3, [r7, #20]
 8107f6a:	689a      	ldr	r2, [r3, #8]
 8107f6c:	697b      	ldr	r3, [r7, #20]
 8107f6e:	691b      	ldr	r3, [r3, #16]
 8107f70:	431a      	orrs	r2, r3
 8107f72:	697b      	ldr	r3, [r7, #20]
 8107f74:	695b      	ldr	r3, [r3, #20]
 8107f76:	431a      	orrs	r2, r3
 8107f78:	697b      	ldr	r3, [r7, #20]
 8107f7a:	69db      	ldr	r3, [r3, #28]
 8107f7c:	4313      	orrs	r3, r2
 8107f7e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8107f80:	697b      	ldr	r3, [r7, #20]
 8107f82:	681b      	ldr	r3, [r3, #0]
 8107f84:	681a      	ldr	r2, [r3, #0]
 8107f86:	4bbd      	ldr	r3, [pc, #756]	; (810827c <UART_SetConfig+0x324>)
 8107f88:	4013      	ands	r3, r2
 8107f8a:	697a      	ldr	r2, [r7, #20]
 8107f8c:	6812      	ldr	r2, [r2, #0]
 8107f8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8107f90:	430b      	orrs	r3, r1
 8107f92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8107f94:	697b      	ldr	r3, [r7, #20]
 8107f96:	681b      	ldr	r3, [r3, #0]
 8107f98:	685b      	ldr	r3, [r3, #4]
 8107f9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8107f9e:	697b      	ldr	r3, [r7, #20]
 8107fa0:	68da      	ldr	r2, [r3, #12]
 8107fa2:	697b      	ldr	r3, [r7, #20]
 8107fa4:	681b      	ldr	r3, [r3, #0]
 8107fa6:	430a      	orrs	r2, r1
 8107fa8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8107faa:	697b      	ldr	r3, [r7, #20]
 8107fac:	699b      	ldr	r3, [r3, #24]
 8107fae:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8107fb0:	697b      	ldr	r3, [r7, #20]
 8107fb2:	681b      	ldr	r3, [r3, #0]
 8107fb4:	4ab2      	ldr	r2, [pc, #712]	; (8108280 <UART_SetConfig+0x328>)
 8107fb6:	4293      	cmp	r3, r2
 8107fb8:	d004      	beq.n	8107fc4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8107fba:	697b      	ldr	r3, [r7, #20]
 8107fbc:	6a1b      	ldr	r3, [r3, #32]
 8107fbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8107fc0:	4313      	orrs	r3, r2
 8107fc2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8107fc4:	697b      	ldr	r3, [r7, #20]
 8107fc6:	681b      	ldr	r3, [r3, #0]
 8107fc8:	689b      	ldr	r3, [r3, #8]
 8107fca:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8107fce:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8107fd2:	697a      	ldr	r2, [r7, #20]
 8107fd4:	6812      	ldr	r2, [r2, #0]
 8107fd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8107fd8:	430b      	orrs	r3, r1
 8107fda:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8107fdc:	697b      	ldr	r3, [r7, #20]
 8107fde:	681b      	ldr	r3, [r3, #0]
 8107fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107fe2:	f023 010f 	bic.w	r1, r3, #15
 8107fe6:	697b      	ldr	r3, [r7, #20]
 8107fe8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8107fea:	697b      	ldr	r3, [r7, #20]
 8107fec:	681b      	ldr	r3, [r3, #0]
 8107fee:	430a      	orrs	r2, r1
 8107ff0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8107ff2:	697b      	ldr	r3, [r7, #20]
 8107ff4:	681b      	ldr	r3, [r3, #0]
 8107ff6:	4aa3      	ldr	r2, [pc, #652]	; (8108284 <UART_SetConfig+0x32c>)
 8107ff8:	4293      	cmp	r3, r2
 8107ffa:	d177      	bne.n	81080ec <UART_SetConfig+0x194>
 8107ffc:	4ba2      	ldr	r3, [pc, #648]	; (8108288 <UART_SetConfig+0x330>)
 8107ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108000:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8108004:	2b28      	cmp	r3, #40	; 0x28
 8108006:	d86d      	bhi.n	81080e4 <UART_SetConfig+0x18c>
 8108008:	a201      	add	r2, pc, #4	; (adr r2, 8108010 <UART_SetConfig+0xb8>)
 810800a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810800e:	bf00      	nop
 8108010:	081080b5 	.word	0x081080b5
 8108014:	081080e5 	.word	0x081080e5
 8108018:	081080e5 	.word	0x081080e5
 810801c:	081080e5 	.word	0x081080e5
 8108020:	081080e5 	.word	0x081080e5
 8108024:	081080e5 	.word	0x081080e5
 8108028:	081080e5 	.word	0x081080e5
 810802c:	081080e5 	.word	0x081080e5
 8108030:	081080bd 	.word	0x081080bd
 8108034:	081080e5 	.word	0x081080e5
 8108038:	081080e5 	.word	0x081080e5
 810803c:	081080e5 	.word	0x081080e5
 8108040:	081080e5 	.word	0x081080e5
 8108044:	081080e5 	.word	0x081080e5
 8108048:	081080e5 	.word	0x081080e5
 810804c:	081080e5 	.word	0x081080e5
 8108050:	081080c5 	.word	0x081080c5
 8108054:	081080e5 	.word	0x081080e5
 8108058:	081080e5 	.word	0x081080e5
 810805c:	081080e5 	.word	0x081080e5
 8108060:	081080e5 	.word	0x081080e5
 8108064:	081080e5 	.word	0x081080e5
 8108068:	081080e5 	.word	0x081080e5
 810806c:	081080e5 	.word	0x081080e5
 8108070:	081080cd 	.word	0x081080cd
 8108074:	081080e5 	.word	0x081080e5
 8108078:	081080e5 	.word	0x081080e5
 810807c:	081080e5 	.word	0x081080e5
 8108080:	081080e5 	.word	0x081080e5
 8108084:	081080e5 	.word	0x081080e5
 8108088:	081080e5 	.word	0x081080e5
 810808c:	081080e5 	.word	0x081080e5
 8108090:	081080d5 	.word	0x081080d5
 8108094:	081080e5 	.word	0x081080e5
 8108098:	081080e5 	.word	0x081080e5
 810809c:	081080e5 	.word	0x081080e5
 81080a0:	081080e5 	.word	0x081080e5
 81080a4:	081080e5 	.word	0x081080e5
 81080a8:	081080e5 	.word	0x081080e5
 81080ac:	081080e5 	.word	0x081080e5
 81080b0:	081080dd 	.word	0x081080dd
 81080b4:	2301      	movs	r3, #1
 81080b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81080ba:	e220      	b.n	81084fe <UART_SetConfig+0x5a6>
 81080bc:	2304      	movs	r3, #4
 81080be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81080c2:	e21c      	b.n	81084fe <UART_SetConfig+0x5a6>
 81080c4:	2308      	movs	r3, #8
 81080c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81080ca:	e218      	b.n	81084fe <UART_SetConfig+0x5a6>
 81080cc:	2310      	movs	r3, #16
 81080ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81080d2:	e214      	b.n	81084fe <UART_SetConfig+0x5a6>
 81080d4:	2320      	movs	r3, #32
 81080d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81080da:	e210      	b.n	81084fe <UART_SetConfig+0x5a6>
 81080dc:	2340      	movs	r3, #64	; 0x40
 81080de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81080e2:	e20c      	b.n	81084fe <UART_SetConfig+0x5a6>
 81080e4:	2380      	movs	r3, #128	; 0x80
 81080e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81080ea:	e208      	b.n	81084fe <UART_SetConfig+0x5a6>
 81080ec:	697b      	ldr	r3, [r7, #20]
 81080ee:	681b      	ldr	r3, [r3, #0]
 81080f0:	4a66      	ldr	r2, [pc, #408]	; (810828c <UART_SetConfig+0x334>)
 81080f2:	4293      	cmp	r3, r2
 81080f4:	d130      	bne.n	8108158 <UART_SetConfig+0x200>
 81080f6:	4b64      	ldr	r3, [pc, #400]	; (8108288 <UART_SetConfig+0x330>)
 81080f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81080fa:	f003 0307 	and.w	r3, r3, #7
 81080fe:	2b05      	cmp	r3, #5
 8108100:	d826      	bhi.n	8108150 <UART_SetConfig+0x1f8>
 8108102:	a201      	add	r2, pc, #4	; (adr r2, 8108108 <UART_SetConfig+0x1b0>)
 8108104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108108:	08108121 	.word	0x08108121
 810810c:	08108129 	.word	0x08108129
 8108110:	08108131 	.word	0x08108131
 8108114:	08108139 	.word	0x08108139
 8108118:	08108141 	.word	0x08108141
 810811c:	08108149 	.word	0x08108149
 8108120:	2300      	movs	r3, #0
 8108122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108126:	e1ea      	b.n	81084fe <UART_SetConfig+0x5a6>
 8108128:	2304      	movs	r3, #4
 810812a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810812e:	e1e6      	b.n	81084fe <UART_SetConfig+0x5a6>
 8108130:	2308      	movs	r3, #8
 8108132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108136:	e1e2      	b.n	81084fe <UART_SetConfig+0x5a6>
 8108138:	2310      	movs	r3, #16
 810813a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810813e:	e1de      	b.n	81084fe <UART_SetConfig+0x5a6>
 8108140:	2320      	movs	r3, #32
 8108142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108146:	e1da      	b.n	81084fe <UART_SetConfig+0x5a6>
 8108148:	2340      	movs	r3, #64	; 0x40
 810814a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810814e:	e1d6      	b.n	81084fe <UART_SetConfig+0x5a6>
 8108150:	2380      	movs	r3, #128	; 0x80
 8108152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108156:	e1d2      	b.n	81084fe <UART_SetConfig+0x5a6>
 8108158:	697b      	ldr	r3, [r7, #20]
 810815a:	681b      	ldr	r3, [r3, #0]
 810815c:	4a4c      	ldr	r2, [pc, #304]	; (8108290 <UART_SetConfig+0x338>)
 810815e:	4293      	cmp	r3, r2
 8108160:	d130      	bne.n	81081c4 <UART_SetConfig+0x26c>
 8108162:	4b49      	ldr	r3, [pc, #292]	; (8108288 <UART_SetConfig+0x330>)
 8108164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108166:	f003 0307 	and.w	r3, r3, #7
 810816a:	2b05      	cmp	r3, #5
 810816c:	d826      	bhi.n	81081bc <UART_SetConfig+0x264>
 810816e:	a201      	add	r2, pc, #4	; (adr r2, 8108174 <UART_SetConfig+0x21c>)
 8108170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108174:	0810818d 	.word	0x0810818d
 8108178:	08108195 	.word	0x08108195
 810817c:	0810819d 	.word	0x0810819d
 8108180:	081081a5 	.word	0x081081a5
 8108184:	081081ad 	.word	0x081081ad
 8108188:	081081b5 	.word	0x081081b5
 810818c:	2300      	movs	r3, #0
 810818e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108192:	e1b4      	b.n	81084fe <UART_SetConfig+0x5a6>
 8108194:	2304      	movs	r3, #4
 8108196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810819a:	e1b0      	b.n	81084fe <UART_SetConfig+0x5a6>
 810819c:	2308      	movs	r3, #8
 810819e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81081a2:	e1ac      	b.n	81084fe <UART_SetConfig+0x5a6>
 81081a4:	2310      	movs	r3, #16
 81081a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81081aa:	e1a8      	b.n	81084fe <UART_SetConfig+0x5a6>
 81081ac:	2320      	movs	r3, #32
 81081ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81081b2:	e1a4      	b.n	81084fe <UART_SetConfig+0x5a6>
 81081b4:	2340      	movs	r3, #64	; 0x40
 81081b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81081ba:	e1a0      	b.n	81084fe <UART_SetConfig+0x5a6>
 81081bc:	2380      	movs	r3, #128	; 0x80
 81081be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81081c2:	e19c      	b.n	81084fe <UART_SetConfig+0x5a6>
 81081c4:	697b      	ldr	r3, [r7, #20]
 81081c6:	681b      	ldr	r3, [r3, #0]
 81081c8:	4a32      	ldr	r2, [pc, #200]	; (8108294 <UART_SetConfig+0x33c>)
 81081ca:	4293      	cmp	r3, r2
 81081cc:	d130      	bne.n	8108230 <UART_SetConfig+0x2d8>
 81081ce:	4b2e      	ldr	r3, [pc, #184]	; (8108288 <UART_SetConfig+0x330>)
 81081d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81081d2:	f003 0307 	and.w	r3, r3, #7
 81081d6:	2b05      	cmp	r3, #5
 81081d8:	d826      	bhi.n	8108228 <UART_SetConfig+0x2d0>
 81081da:	a201      	add	r2, pc, #4	; (adr r2, 81081e0 <UART_SetConfig+0x288>)
 81081dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81081e0:	081081f9 	.word	0x081081f9
 81081e4:	08108201 	.word	0x08108201
 81081e8:	08108209 	.word	0x08108209
 81081ec:	08108211 	.word	0x08108211
 81081f0:	08108219 	.word	0x08108219
 81081f4:	08108221 	.word	0x08108221
 81081f8:	2300      	movs	r3, #0
 81081fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81081fe:	e17e      	b.n	81084fe <UART_SetConfig+0x5a6>
 8108200:	2304      	movs	r3, #4
 8108202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108206:	e17a      	b.n	81084fe <UART_SetConfig+0x5a6>
 8108208:	2308      	movs	r3, #8
 810820a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810820e:	e176      	b.n	81084fe <UART_SetConfig+0x5a6>
 8108210:	2310      	movs	r3, #16
 8108212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108216:	e172      	b.n	81084fe <UART_SetConfig+0x5a6>
 8108218:	2320      	movs	r3, #32
 810821a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810821e:	e16e      	b.n	81084fe <UART_SetConfig+0x5a6>
 8108220:	2340      	movs	r3, #64	; 0x40
 8108222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108226:	e16a      	b.n	81084fe <UART_SetConfig+0x5a6>
 8108228:	2380      	movs	r3, #128	; 0x80
 810822a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810822e:	e166      	b.n	81084fe <UART_SetConfig+0x5a6>
 8108230:	697b      	ldr	r3, [r7, #20]
 8108232:	681b      	ldr	r3, [r3, #0]
 8108234:	4a18      	ldr	r2, [pc, #96]	; (8108298 <UART_SetConfig+0x340>)
 8108236:	4293      	cmp	r3, r2
 8108238:	d140      	bne.n	81082bc <UART_SetConfig+0x364>
 810823a:	4b13      	ldr	r3, [pc, #76]	; (8108288 <UART_SetConfig+0x330>)
 810823c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810823e:	f003 0307 	and.w	r3, r3, #7
 8108242:	2b05      	cmp	r3, #5
 8108244:	d836      	bhi.n	81082b4 <UART_SetConfig+0x35c>
 8108246:	a201      	add	r2, pc, #4	; (adr r2, 810824c <UART_SetConfig+0x2f4>)
 8108248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810824c:	08108265 	.word	0x08108265
 8108250:	0810826d 	.word	0x0810826d
 8108254:	08108275 	.word	0x08108275
 8108258:	0810829d 	.word	0x0810829d
 810825c:	081082a5 	.word	0x081082a5
 8108260:	081082ad 	.word	0x081082ad
 8108264:	2300      	movs	r3, #0
 8108266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810826a:	e148      	b.n	81084fe <UART_SetConfig+0x5a6>
 810826c:	2304      	movs	r3, #4
 810826e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108272:	e144      	b.n	81084fe <UART_SetConfig+0x5a6>
 8108274:	2308      	movs	r3, #8
 8108276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810827a:	e140      	b.n	81084fe <UART_SetConfig+0x5a6>
 810827c:	cfff69f3 	.word	0xcfff69f3
 8108280:	58000c00 	.word	0x58000c00
 8108284:	40011000 	.word	0x40011000
 8108288:	58024400 	.word	0x58024400
 810828c:	40004400 	.word	0x40004400
 8108290:	40004800 	.word	0x40004800
 8108294:	40004c00 	.word	0x40004c00
 8108298:	40005000 	.word	0x40005000
 810829c:	2310      	movs	r3, #16
 810829e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81082a2:	e12c      	b.n	81084fe <UART_SetConfig+0x5a6>
 81082a4:	2320      	movs	r3, #32
 81082a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81082aa:	e128      	b.n	81084fe <UART_SetConfig+0x5a6>
 81082ac:	2340      	movs	r3, #64	; 0x40
 81082ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81082b2:	e124      	b.n	81084fe <UART_SetConfig+0x5a6>
 81082b4:	2380      	movs	r3, #128	; 0x80
 81082b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81082ba:	e120      	b.n	81084fe <UART_SetConfig+0x5a6>
 81082bc:	697b      	ldr	r3, [r7, #20]
 81082be:	681b      	ldr	r3, [r3, #0]
 81082c0:	4acb      	ldr	r2, [pc, #812]	; (81085f0 <UART_SetConfig+0x698>)
 81082c2:	4293      	cmp	r3, r2
 81082c4:	d176      	bne.n	81083b4 <UART_SetConfig+0x45c>
 81082c6:	4bcb      	ldr	r3, [pc, #812]	; (81085f4 <UART_SetConfig+0x69c>)
 81082c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81082ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81082ce:	2b28      	cmp	r3, #40	; 0x28
 81082d0:	d86c      	bhi.n	81083ac <UART_SetConfig+0x454>
 81082d2:	a201      	add	r2, pc, #4	; (adr r2, 81082d8 <UART_SetConfig+0x380>)
 81082d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81082d8:	0810837d 	.word	0x0810837d
 81082dc:	081083ad 	.word	0x081083ad
 81082e0:	081083ad 	.word	0x081083ad
 81082e4:	081083ad 	.word	0x081083ad
 81082e8:	081083ad 	.word	0x081083ad
 81082ec:	081083ad 	.word	0x081083ad
 81082f0:	081083ad 	.word	0x081083ad
 81082f4:	081083ad 	.word	0x081083ad
 81082f8:	08108385 	.word	0x08108385
 81082fc:	081083ad 	.word	0x081083ad
 8108300:	081083ad 	.word	0x081083ad
 8108304:	081083ad 	.word	0x081083ad
 8108308:	081083ad 	.word	0x081083ad
 810830c:	081083ad 	.word	0x081083ad
 8108310:	081083ad 	.word	0x081083ad
 8108314:	081083ad 	.word	0x081083ad
 8108318:	0810838d 	.word	0x0810838d
 810831c:	081083ad 	.word	0x081083ad
 8108320:	081083ad 	.word	0x081083ad
 8108324:	081083ad 	.word	0x081083ad
 8108328:	081083ad 	.word	0x081083ad
 810832c:	081083ad 	.word	0x081083ad
 8108330:	081083ad 	.word	0x081083ad
 8108334:	081083ad 	.word	0x081083ad
 8108338:	08108395 	.word	0x08108395
 810833c:	081083ad 	.word	0x081083ad
 8108340:	081083ad 	.word	0x081083ad
 8108344:	081083ad 	.word	0x081083ad
 8108348:	081083ad 	.word	0x081083ad
 810834c:	081083ad 	.word	0x081083ad
 8108350:	081083ad 	.word	0x081083ad
 8108354:	081083ad 	.word	0x081083ad
 8108358:	0810839d 	.word	0x0810839d
 810835c:	081083ad 	.word	0x081083ad
 8108360:	081083ad 	.word	0x081083ad
 8108364:	081083ad 	.word	0x081083ad
 8108368:	081083ad 	.word	0x081083ad
 810836c:	081083ad 	.word	0x081083ad
 8108370:	081083ad 	.word	0x081083ad
 8108374:	081083ad 	.word	0x081083ad
 8108378:	081083a5 	.word	0x081083a5
 810837c:	2301      	movs	r3, #1
 810837e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108382:	e0bc      	b.n	81084fe <UART_SetConfig+0x5a6>
 8108384:	2304      	movs	r3, #4
 8108386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810838a:	e0b8      	b.n	81084fe <UART_SetConfig+0x5a6>
 810838c:	2308      	movs	r3, #8
 810838e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108392:	e0b4      	b.n	81084fe <UART_SetConfig+0x5a6>
 8108394:	2310      	movs	r3, #16
 8108396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810839a:	e0b0      	b.n	81084fe <UART_SetConfig+0x5a6>
 810839c:	2320      	movs	r3, #32
 810839e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81083a2:	e0ac      	b.n	81084fe <UART_SetConfig+0x5a6>
 81083a4:	2340      	movs	r3, #64	; 0x40
 81083a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81083aa:	e0a8      	b.n	81084fe <UART_SetConfig+0x5a6>
 81083ac:	2380      	movs	r3, #128	; 0x80
 81083ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81083b2:	e0a4      	b.n	81084fe <UART_SetConfig+0x5a6>
 81083b4:	697b      	ldr	r3, [r7, #20]
 81083b6:	681b      	ldr	r3, [r3, #0]
 81083b8:	4a8f      	ldr	r2, [pc, #572]	; (81085f8 <UART_SetConfig+0x6a0>)
 81083ba:	4293      	cmp	r3, r2
 81083bc:	d130      	bne.n	8108420 <UART_SetConfig+0x4c8>
 81083be:	4b8d      	ldr	r3, [pc, #564]	; (81085f4 <UART_SetConfig+0x69c>)
 81083c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81083c2:	f003 0307 	and.w	r3, r3, #7
 81083c6:	2b05      	cmp	r3, #5
 81083c8:	d826      	bhi.n	8108418 <UART_SetConfig+0x4c0>
 81083ca:	a201      	add	r2, pc, #4	; (adr r2, 81083d0 <UART_SetConfig+0x478>)
 81083cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81083d0:	081083e9 	.word	0x081083e9
 81083d4:	081083f1 	.word	0x081083f1
 81083d8:	081083f9 	.word	0x081083f9
 81083dc:	08108401 	.word	0x08108401
 81083e0:	08108409 	.word	0x08108409
 81083e4:	08108411 	.word	0x08108411
 81083e8:	2300      	movs	r3, #0
 81083ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81083ee:	e086      	b.n	81084fe <UART_SetConfig+0x5a6>
 81083f0:	2304      	movs	r3, #4
 81083f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81083f6:	e082      	b.n	81084fe <UART_SetConfig+0x5a6>
 81083f8:	2308      	movs	r3, #8
 81083fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81083fe:	e07e      	b.n	81084fe <UART_SetConfig+0x5a6>
 8108400:	2310      	movs	r3, #16
 8108402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108406:	e07a      	b.n	81084fe <UART_SetConfig+0x5a6>
 8108408:	2320      	movs	r3, #32
 810840a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810840e:	e076      	b.n	81084fe <UART_SetConfig+0x5a6>
 8108410:	2340      	movs	r3, #64	; 0x40
 8108412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108416:	e072      	b.n	81084fe <UART_SetConfig+0x5a6>
 8108418:	2380      	movs	r3, #128	; 0x80
 810841a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810841e:	e06e      	b.n	81084fe <UART_SetConfig+0x5a6>
 8108420:	697b      	ldr	r3, [r7, #20]
 8108422:	681b      	ldr	r3, [r3, #0]
 8108424:	4a75      	ldr	r2, [pc, #468]	; (81085fc <UART_SetConfig+0x6a4>)
 8108426:	4293      	cmp	r3, r2
 8108428:	d130      	bne.n	810848c <UART_SetConfig+0x534>
 810842a:	4b72      	ldr	r3, [pc, #456]	; (81085f4 <UART_SetConfig+0x69c>)
 810842c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810842e:	f003 0307 	and.w	r3, r3, #7
 8108432:	2b05      	cmp	r3, #5
 8108434:	d826      	bhi.n	8108484 <UART_SetConfig+0x52c>
 8108436:	a201      	add	r2, pc, #4	; (adr r2, 810843c <UART_SetConfig+0x4e4>)
 8108438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810843c:	08108455 	.word	0x08108455
 8108440:	0810845d 	.word	0x0810845d
 8108444:	08108465 	.word	0x08108465
 8108448:	0810846d 	.word	0x0810846d
 810844c:	08108475 	.word	0x08108475
 8108450:	0810847d 	.word	0x0810847d
 8108454:	2300      	movs	r3, #0
 8108456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810845a:	e050      	b.n	81084fe <UART_SetConfig+0x5a6>
 810845c:	2304      	movs	r3, #4
 810845e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108462:	e04c      	b.n	81084fe <UART_SetConfig+0x5a6>
 8108464:	2308      	movs	r3, #8
 8108466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810846a:	e048      	b.n	81084fe <UART_SetConfig+0x5a6>
 810846c:	2310      	movs	r3, #16
 810846e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108472:	e044      	b.n	81084fe <UART_SetConfig+0x5a6>
 8108474:	2320      	movs	r3, #32
 8108476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810847a:	e040      	b.n	81084fe <UART_SetConfig+0x5a6>
 810847c:	2340      	movs	r3, #64	; 0x40
 810847e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108482:	e03c      	b.n	81084fe <UART_SetConfig+0x5a6>
 8108484:	2380      	movs	r3, #128	; 0x80
 8108486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810848a:	e038      	b.n	81084fe <UART_SetConfig+0x5a6>
 810848c:	697b      	ldr	r3, [r7, #20]
 810848e:	681b      	ldr	r3, [r3, #0]
 8108490:	4a5b      	ldr	r2, [pc, #364]	; (8108600 <UART_SetConfig+0x6a8>)
 8108492:	4293      	cmp	r3, r2
 8108494:	d130      	bne.n	81084f8 <UART_SetConfig+0x5a0>
 8108496:	4b57      	ldr	r3, [pc, #348]	; (81085f4 <UART_SetConfig+0x69c>)
 8108498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810849a:	f003 0307 	and.w	r3, r3, #7
 810849e:	2b05      	cmp	r3, #5
 81084a0:	d826      	bhi.n	81084f0 <UART_SetConfig+0x598>
 81084a2:	a201      	add	r2, pc, #4	; (adr r2, 81084a8 <UART_SetConfig+0x550>)
 81084a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81084a8:	081084c1 	.word	0x081084c1
 81084ac:	081084c9 	.word	0x081084c9
 81084b0:	081084d1 	.word	0x081084d1
 81084b4:	081084d9 	.word	0x081084d9
 81084b8:	081084e1 	.word	0x081084e1
 81084bc:	081084e9 	.word	0x081084e9
 81084c0:	2302      	movs	r3, #2
 81084c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81084c6:	e01a      	b.n	81084fe <UART_SetConfig+0x5a6>
 81084c8:	2304      	movs	r3, #4
 81084ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81084ce:	e016      	b.n	81084fe <UART_SetConfig+0x5a6>
 81084d0:	2308      	movs	r3, #8
 81084d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81084d6:	e012      	b.n	81084fe <UART_SetConfig+0x5a6>
 81084d8:	2310      	movs	r3, #16
 81084da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81084de:	e00e      	b.n	81084fe <UART_SetConfig+0x5a6>
 81084e0:	2320      	movs	r3, #32
 81084e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81084e6:	e00a      	b.n	81084fe <UART_SetConfig+0x5a6>
 81084e8:	2340      	movs	r3, #64	; 0x40
 81084ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81084ee:	e006      	b.n	81084fe <UART_SetConfig+0x5a6>
 81084f0:	2380      	movs	r3, #128	; 0x80
 81084f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81084f6:	e002      	b.n	81084fe <UART_SetConfig+0x5a6>
 81084f8:	2380      	movs	r3, #128	; 0x80
 81084fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 81084fe:	697b      	ldr	r3, [r7, #20]
 8108500:	681b      	ldr	r3, [r3, #0]
 8108502:	4a3f      	ldr	r2, [pc, #252]	; (8108600 <UART_SetConfig+0x6a8>)
 8108504:	4293      	cmp	r3, r2
 8108506:	f040 80f8 	bne.w	81086fa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810850a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810850e:	2b20      	cmp	r3, #32
 8108510:	dc46      	bgt.n	81085a0 <UART_SetConfig+0x648>
 8108512:	2b02      	cmp	r3, #2
 8108514:	f2c0 8082 	blt.w	810861c <UART_SetConfig+0x6c4>
 8108518:	3b02      	subs	r3, #2
 810851a:	2b1e      	cmp	r3, #30
 810851c:	d87e      	bhi.n	810861c <UART_SetConfig+0x6c4>
 810851e:	a201      	add	r2, pc, #4	; (adr r2, 8108524 <UART_SetConfig+0x5cc>)
 8108520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108524:	081085a7 	.word	0x081085a7
 8108528:	0810861d 	.word	0x0810861d
 810852c:	081085af 	.word	0x081085af
 8108530:	0810861d 	.word	0x0810861d
 8108534:	0810861d 	.word	0x0810861d
 8108538:	0810861d 	.word	0x0810861d
 810853c:	081085bf 	.word	0x081085bf
 8108540:	0810861d 	.word	0x0810861d
 8108544:	0810861d 	.word	0x0810861d
 8108548:	0810861d 	.word	0x0810861d
 810854c:	0810861d 	.word	0x0810861d
 8108550:	0810861d 	.word	0x0810861d
 8108554:	0810861d 	.word	0x0810861d
 8108558:	0810861d 	.word	0x0810861d
 810855c:	081085cf 	.word	0x081085cf
 8108560:	0810861d 	.word	0x0810861d
 8108564:	0810861d 	.word	0x0810861d
 8108568:	0810861d 	.word	0x0810861d
 810856c:	0810861d 	.word	0x0810861d
 8108570:	0810861d 	.word	0x0810861d
 8108574:	0810861d 	.word	0x0810861d
 8108578:	0810861d 	.word	0x0810861d
 810857c:	0810861d 	.word	0x0810861d
 8108580:	0810861d 	.word	0x0810861d
 8108584:	0810861d 	.word	0x0810861d
 8108588:	0810861d 	.word	0x0810861d
 810858c:	0810861d 	.word	0x0810861d
 8108590:	0810861d 	.word	0x0810861d
 8108594:	0810861d 	.word	0x0810861d
 8108598:	0810861d 	.word	0x0810861d
 810859c:	0810860f 	.word	0x0810860f
 81085a0:	2b40      	cmp	r3, #64	; 0x40
 81085a2:	d037      	beq.n	8108614 <UART_SetConfig+0x6bc>
 81085a4:	e03a      	b.n	810861c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 81085a6:	f7fd f8ed 	bl	8105784 <HAL_RCCEx_GetD3PCLK1Freq>
 81085aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81085ac:	e03c      	b.n	8108628 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81085ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81085b2:	4618      	mov	r0, r3
 81085b4:	f7fd f8fc 	bl	81057b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81085b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81085ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81085bc:	e034      	b.n	8108628 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81085be:	f107 0318 	add.w	r3, r7, #24
 81085c2:	4618      	mov	r0, r3
 81085c4:	f7fd fa48 	bl	8105a58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81085c8:	69fb      	ldr	r3, [r7, #28]
 81085ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81085cc:	e02c      	b.n	8108628 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81085ce:	4b09      	ldr	r3, [pc, #36]	; (81085f4 <UART_SetConfig+0x69c>)
 81085d0:	681b      	ldr	r3, [r3, #0]
 81085d2:	f003 0320 	and.w	r3, r3, #32
 81085d6:	2b00      	cmp	r3, #0
 81085d8:	d016      	beq.n	8108608 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81085da:	4b06      	ldr	r3, [pc, #24]	; (81085f4 <UART_SetConfig+0x69c>)
 81085dc:	681b      	ldr	r3, [r3, #0]
 81085de:	08db      	lsrs	r3, r3, #3
 81085e0:	f003 0303 	and.w	r3, r3, #3
 81085e4:	4a07      	ldr	r2, [pc, #28]	; (8108604 <UART_SetConfig+0x6ac>)
 81085e6:	fa22 f303 	lsr.w	r3, r2, r3
 81085ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81085ec:	e01c      	b.n	8108628 <UART_SetConfig+0x6d0>
 81085ee:	bf00      	nop
 81085f0:	40011400 	.word	0x40011400
 81085f4:	58024400 	.word	0x58024400
 81085f8:	40007800 	.word	0x40007800
 81085fc:	40007c00 	.word	0x40007c00
 8108600:	58000c00 	.word	0x58000c00
 8108604:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8108608:	4b9d      	ldr	r3, [pc, #628]	; (8108880 <UART_SetConfig+0x928>)
 810860a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810860c:	e00c      	b.n	8108628 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810860e:	4b9d      	ldr	r3, [pc, #628]	; (8108884 <UART_SetConfig+0x92c>)
 8108610:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108612:	e009      	b.n	8108628 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8108614:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8108618:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810861a:	e005      	b.n	8108628 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 810861c:	2300      	movs	r3, #0
 810861e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8108620:	2301      	movs	r3, #1
 8108622:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8108626:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8108628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810862a:	2b00      	cmp	r3, #0
 810862c:	f000 81de 	beq.w	81089ec <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8108630:	697b      	ldr	r3, [r7, #20]
 8108632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108634:	4a94      	ldr	r2, [pc, #592]	; (8108888 <UART_SetConfig+0x930>)
 8108636:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810863a:	461a      	mov	r2, r3
 810863c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810863e:	fbb3 f3f2 	udiv	r3, r3, r2
 8108642:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8108644:	697b      	ldr	r3, [r7, #20]
 8108646:	685a      	ldr	r2, [r3, #4]
 8108648:	4613      	mov	r3, r2
 810864a:	005b      	lsls	r3, r3, #1
 810864c:	4413      	add	r3, r2
 810864e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8108650:	429a      	cmp	r2, r3
 8108652:	d305      	bcc.n	8108660 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8108654:	697b      	ldr	r3, [r7, #20]
 8108656:	685b      	ldr	r3, [r3, #4]
 8108658:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810865a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810865c:	429a      	cmp	r2, r3
 810865e:	d903      	bls.n	8108668 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8108660:	2301      	movs	r3, #1
 8108662:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8108666:	e1c1      	b.n	81089ec <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810866a:	2200      	movs	r2, #0
 810866c:	60bb      	str	r3, [r7, #8]
 810866e:	60fa      	str	r2, [r7, #12]
 8108670:	697b      	ldr	r3, [r7, #20]
 8108672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108674:	4a84      	ldr	r2, [pc, #528]	; (8108888 <UART_SetConfig+0x930>)
 8108676:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810867a:	b29b      	uxth	r3, r3
 810867c:	2200      	movs	r2, #0
 810867e:	603b      	str	r3, [r7, #0]
 8108680:	607a      	str	r2, [r7, #4]
 8108682:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108686:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810868a:	f7f8 fb85 	bl	8100d98 <__aeabi_uldivmod>
 810868e:	4602      	mov	r2, r0
 8108690:	460b      	mov	r3, r1
 8108692:	4610      	mov	r0, r2
 8108694:	4619      	mov	r1, r3
 8108696:	f04f 0200 	mov.w	r2, #0
 810869a:	f04f 0300 	mov.w	r3, #0
 810869e:	020b      	lsls	r3, r1, #8
 81086a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 81086a4:	0202      	lsls	r2, r0, #8
 81086a6:	6979      	ldr	r1, [r7, #20]
 81086a8:	6849      	ldr	r1, [r1, #4]
 81086aa:	0849      	lsrs	r1, r1, #1
 81086ac:	2000      	movs	r0, #0
 81086ae:	460c      	mov	r4, r1
 81086b0:	4605      	mov	r5, r0
 81086b2:	eb12 0804 	adds.w	r8, r2, r4
 81086b6:	eb43 0905 	adc.w	r9, r3, r5
 81086ba:	697b      	ldr	r3, [r7, #20]
 81086bc:	685b      	ldr	r3, [r3, #4]
 81086be:	2200      	movs	r2, #0
 81086c0:	469a      	mov	sl, r3
 81086c2:	4693      	mov	fp, r2
 81086c4:	4652      	mov	r2, sl
 81086c6:	465b      	mov	r3, fp
 81086c8:	4640      	mov	r0, r8
 81086ca:	4649      	mov	r1, r9
 81086cc:	f7f8 fb64 	bl	8100d98 <__aeabi_uldivmod>
 81086d0:	4602      	mov	r2, r0
 81086d2:	460b      	mov	r3, r1
 81086d4:	4613      	mov	r3, r2
 81086d6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 81086d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81086da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81086de:	d308      	bcc.n	81086f2 <UART_SetConfig+0x79a>
 81086e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81086e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81086e6:	d204      	bcs.n	81086f2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 81086e8:	697b      	ldr	r3, [r7, #20]
 81086ea:	681b      	ldr	r3, [r3, #0]
 81086ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81086ee:	60da      	str	r2, [r3, #12]
 81086f0:	e17c      	b.n	81089ec <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 81086f2:	2301      	movs	r3, #1
 81086f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 81086f8:	e178      	b.n	81089ec <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 81086fa:	697b      	ldr	r3, [r7, #20]
 81086fc:	69db      	ldr	r3, [r3, #28]
 81086fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8108702:	f040 80c5 	bne.w	8108890 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8108706:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810870a:	2b20      	cmp	r3, #32
 810870c:	dc48      	bgt.n	81087a0 <UART_SetConfig+0x848>
 810870e:	2b00      	cmp	r3, #0
 8108710:	db7b      	blt.n	810880a <UART_SetConfig+0x8b2>
 8108712:	2b20      	cmp	r3, #32
 8108714:	d879      	bhi.n	810880a <UART_SetConfig+0x8b2>
 8108716:	a201      	add	r2, pc, #4	; (adr r2, 810871c <UART_SetConfig+0x7c4>)
 8108718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810871c:	081087a7 	.word	0x081087a7
 8108720:	081087af 	.word	0x081087af
 8108724:	0810880b 	.word	0x0810880b
 8108728:	0810880b 	.word	0x0810880b
 810872c:	081087b7 	.word	0x081087b7
 8108730:	0810880b 	.word	0x0810880b
 8108734:	0810880b 	.word	0x0810880b
 8108738:	0810880b 	.word	0x0810880b
 810873c:	081087c7 	.word	0x081087c7
 8108740:	0810880b 	.word	0x0810880b
 8108744:	0810880b 	.word	0x0810880b
 8108748:	0810880b 	.word	0x0810880b
 810874c:	0810880b 	.word	0x0810880b
 8108750:	0810880b 	.word	0x0810880b
 8108754:	0810880b 	.word	0x0810880b
 8108758:	0810880b 	.word	0x0810880b
 810875c:	081087d7 	.word	0x081087d7
 8108760:	0810880b 	.word	0x0810880b
 8108764:	0810880b 	.word	0x0810880b
 8108768:	0810880b 	.word	0x0810880b
 810876c:	0810880b 	.word	0x0810880b
 8108770:	0810880b 	.word	0x0810880b
 8108774:	0810880b 	.word	0x0810880b
 8108778:	0810880b 	.word	0x0810880b
 810877c:	0810880b 	.word	0x0810880b
 8108780:	0810880b 	.word	0x0810880b
 8108784:	0810880b 	.word	0x0810880b
 8108788:	0810880b 	.word	0x0810880b
 810878c:	0810880b 	.word	0x0810880b
 8108790:	0810880b 	.word	0x0810880b
 8108794:	0810880b 	.word	0x0810880b
 8108798:	0810880b 	.word	0x0810880b
 810879c:	081087fd 	.word	0x081087fd
 81087a0:	2b40      	cmp	r3, #64	; 0x40
 81087a2:	d02e      	beq.n	8108802 <UART_SetConfig+0x8aa>
 81087a4:	e031      	b.n	810880a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81087a6:	f7fc f87b 	bl	81048a0 <HAL_RCC_GetPCLK1Freq>
 81087aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81087ac:	e033      	b.n	8108816 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81087ae:	f7fc f88d 	bl	81048cc <HAL_RCC_GetPCLK2Freq>
 81087b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81087b4:	e02f      	b.n	8108816 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81087b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81087ba:	4618      	mov	r0, r3
 81087bc:	f7fc fff8 	bl	81057b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81087c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81087c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81087c4:	e027      	b.n	8108816 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81087c6:	f107 0318 	add.w	r3, r7, #24
 81087ca:	4618      	mov	r0, r3
 81087cc:	f7fd f944 	bl	8105a58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81087d0:	69fb      	ldr	r3, [r7, #28]
 81087d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81087d4:	e01f      	b.n	8108816 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81087d6:	4b2d      	ldr	r3, [pc, #180]	; (810888c <UART_SetConfig+0x934>)
 81087d8:	681b      	ldr	r3, [r3, #0]
 81087da:	f003 0320 	and.w	r3, r3, #32
 81087de:	2b00      	cmp	r3, #0
 81087e0:	d009      	beq.n	81087f6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81087e2:	4b2a      	ldr	r3, [pc, #168]	; (810888c <UART_SetConfig+0x934>)
 81087e4:	681b      	ldr	r3, [r3, #0]
 81087e6:	08db      	lsrs	r3, r3, #3
 81087e8:	f003 0303 	and.w	r3, r3, #3
 81087ec:	4a24      	ldr	r2, [pc, #144]	; (8108880 <UART_SetConfig+0x928>)
 81087ee:	fa22 f303 	lsr.w	r3, r2, r3
 81087f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81087f4:	e00f      	b.n	8108816 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 81087f6:	4b22      	ldr	r3, [pc, #136]	; (8108880 <UART_SetConfig+0x928>)
 81087f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81087fa:	e00c      	b.n	8108816 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81087fc:	4b21      	ldr	r3, [pc, #132]	; (8108884 <UART_SetConfig+0x92c>)
 81087fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108800:	e009      	b.n	8108816 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8108802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8108806:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108808:	e005      	b.n	8108816 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810880a:	2300      	movs	r3, #0
 810880c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810880e:	2301      	movs	r3, #1
 8108810:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8108814:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8108816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108818:	2b00      	cmp	r3, #0
 810881a:	f000 80e7 	beq.w	81089ec <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810881e:	697b      	ldr	r3, [r7, #20]
 8108820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108822:	4a19      	ldr	r2, [pc, #100]	; (8108888 <UART_SetConfig+0x930>)
 8108824:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108828:	461a      	mov	r2, r3
 810882a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810882c:	fbb3 f3f2 	udiv	r3, r3, r2
 8108830:	005a      	lsls	r2, r3, #1
 8108832:	697b      	ldr	r3, [r7, #20]
 8108834:	685b      	ldr	r3, [r3, #4]
 8108836:	085b      	lsrs	r3, r3, #1
 8108838:	441a      	add	r2, r3
 810883a:	697b      	ldr	r3, [r7, #20]
 810883c:	685b      	ldr	r3, [r3, #4]
 810883e:	fbb2 f3f3 	udiv	r3, r2, r3
 8108842:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8108844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108846:	2b0f      	cmp	r3, #15
 8108848:	d916      	bls.n	8108878 <UART_SetConfig+0x920>
 810884a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810884c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8108850:	d212      	bcs.n	8108878 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8108852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108854:	b29b      	uxth	r3, r3
 8108856:	f023 030f 	bic.w	r3, r3, #15
 810885a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810885c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810885e:	085b      	lsrs	r3, r3, #1
 8108860:	b29b      	uxth	r3, r3
 8108862:	f003 0307 	and.w	r3, r3, #7
 8108866:	b29a      	uxth	r2, r3
 8108868:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 810886a:	4313      	orrs	r3, r2
 810886c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 810886e:	697b      	ldr	r3, [r7, #20]
 8108870:	681b      	ldr	r3, [r3, #0]
 8108872:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8108874:	60da      	str	r2, [r3, #12]
 8108876:	e0b9      	b.n	81089ec <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8108878:	2301      	movs	r3, #1
 810887a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 810887e:	e0b5      	b.n	81089ec <UART_SetConfig+0xa94>
 8108880:	03d09000 	.word	0x03d09000
 8108884:	003d0900 	.word	0x003d0900
 8108888:	0810df10 	.word	0x0810df10
 810888c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8108890:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8108894:	2b20      	cmp	r3, #32
 8108896:	dc49      	bgt.n	810892c <UART_SetConfig+0x9d4>
 8108898:	2b00      	cmp	r3, #0
 810889a:	db7c      	blt.n	8108996 <UART_SetConfig+0xa3e>
 810889c:	2b20      	cmp	r3, #32
 810889e:	d87a      	bhi.n	8108996 <UART_SetConfig+0xa3e>
 81088a0:	a201      	add	r2, pc, #4	; (adr r2, 81088a8 <UART_SetConfig+0x950>)
 81088a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81088a6:	bf00      	nop
 81088a8:	08108933 	.word	0x08108933
 81088ac:	0810893b 	.word	0x0810893b
 81088b0:	08108997 	.word	0x08108997
 81088b4:	08108997 	.word	0x08108997
 81088b8:	08108943 	.word	0x08108943
 81088bc:	08108997 	.word	0x08108997
 81088c0:	08108997 	.word	0x08108997
 81088c4:	08108997 	.word	0x08108997
 81088c8:	08108953 	.word	0x08108953
 81088cc:	08108997 	.word	0x08108997
 81088d0:	08108997 	.word	0x08108997
 81088d4:	08108997 	.word	0x08108997
 81088d8:	08108997 	.word	0x08108997
 81088dc:	08108997 	.word	0x08108997
 81088e0:	08108997 	.word	0x08108997
 81088e4:	08108997 	.word	0x08108997
 81088e8:	08108963 	.word	0x08108963
 81088ec:	08108997 	.word	0x08108997
 81088f0:	08108997 	.word	0x08108997
 81088f4:	08108997 	.word	0x08108997
 81088f8:	08108997 	.word	0x08108997
 81088fc:	08108997 	.word	0x08108997
 8108900:	08108997 	.word	0x08108997
 8108904:	08108997 	.word	0x08108997
 8108908:	08108997 	.word	0x08108997
 810890c:	08108997 	.word	0x08108997
 8108910:	08108997 	.word	0x08108997
 8108914:	08108997 	.word	0x08108997
 8108918:	08108997 	.word	0x08108997
 810891c:	08108997 	.word	0x08108997
 8108920:	08108997 	.word	0x08108997
 8108924:	08108997 	.word	0x08108997
 8108928:	08108989 	.word	0x08108989
 810892c:	2b40      	cmp	r3, #64	; 0x40
 810892e:	d02e      	beq.n	810898e <UART_SetConfig+0xa36>
 8108930:	e031      	b.n	8108996 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8108932:	f7fb ffb5 	bl	81048a0 <HAL_RCC_GetPCLK1Freq>
 8108936:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8108938:	e033      	b.n	81089a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810893a:	f7fb ffc7 	bl	81048cc <HAL_RCC_GetPCLK2Freq>
 810893e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8108940:	e02f      	b.n	81089a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8108946:	4618      	mov	r0, r3
 8108948:	f7fc ff32 	bl	81057b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810894c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810894e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108950:	e027      	b.n	81089a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108952:	f107 0318 	add.w	r3, r7, #24
 8108956:	4618      	mov	r0, r3
 8108958:	f7fd f87e 	bl	8105a58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810895c:	69fb      	ldr	r3, [r7, #28]
 810895e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108960:	e01f      	b.n	81089a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108962:	4b2d      	ldr	r3, [pc, #180]	; (8108a18 <UART_SetConfig+0xac0>)
 8108964:	681b      	ldr	r3, [r3, #0]
 8108966:	f003 0320 	and.w	r3, r3, #32
 810896a:	2b00      	cmp	r3, #0
 810896c:	d009      	beq.n	8108982 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810896e:	4b2a      	ldr	r3, [pc, #168]	; (8108a18 <UART_SetConfig+0xac0>)
 8108970:	681b      	ldr	r3, [r3, #0]
 8108972:	08db      	lsrs	r3, r3, #3
 8108974:	f003 0303 	and.w	r3, r3, #3
 8108978:	4a28      	ldr	r2, [pc, #160]	; (8108a1c <UART_SetConfig+0xac4>)
 810897a:	fa22 f303 	lsr.w	r3, r2, r3
 810897e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8108980:	e00f      	b.n	81089a2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8108982:	4b26      	ldr	r3, [pc, #152]	; (8108a1c <UART_SetConfig+0xac4>)
 8108984:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108986:	e00c      	b.n	81089a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8108988:	4b25      	ldr	r3, [pc, #148]	; (8108a20 <UART_SetConfig+0xac8>)
 810898a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810898c:	e009      	b.n	81089a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810898e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8108992:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108994:	e005      	b.n	81089a2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8108996:	2300      	movs	r3, #0
 8108998:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810899a:	2301      	movs	r3, #1
 810899c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 81089a0:	bf00      	nop
    }

    if (pclk != 0U)
 81089a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81089a4:	2b00      	cmp	r3, #0
 81089a6:	d021      	beq.n	81089ec <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81089a8:	697b      	ldr	r3, [r7, #20]
 81089aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81089ac:	4a1d      	ldr	r2, [pc, #116]	; (8108a24 <UART_SetConfig+0xacc>)
 81089ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81089b2:	461a      	mov	r2, r3
 81089b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81089b6:	fbb3 f2f2 	udiv	r2, r3, r2
 81089ba:	697b      	ldr	r3, [r7, #20]
 81089bc:	685b      	ldr	r3, [r3, #4]
 81089be:	085b      	lsrs	r3, r3, #1
 81089c0:	441a      	add	r2, r3
 81089c2:	697b      	ldr	r3, [r7, #20]
 81089c4:	685b      	ldr	r3, [r3, #4]
 81089c6:	fbb2 f3f3 	udiv	r3, r2, r3
 81089ca:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81089cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81089ce:	2b0f      	cmp	r3, #15
 81089d0:	d909      	bls.n	81089e6 <UART_SetConfig+0xa8e>
 81089d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81089d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81089d8:	d205      	bcs.n	81089e6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 81089da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81089dc:	b29a      	uxth	r2, r3
 81089de:	697b      	ldr	r3, [r7, #20]
 81089e0:	681b      	ldr	r3, [r3, #0]
 81089e2:	60da      	str	r2, [r3, #12]
 81089e4:	e002      	b.n	81089ec <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 81089e6:	2301      	movs	r3, #1
 81089e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 81089ec:	697b      	ldr	r3, [r7, #20]
 81089ee:	2201      	movs	r2, #1
 81089f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 81089f4:	697b      	ldr	r3, [r7, #20]
 81089f6:	2201      	movs	r2, #1
 81089f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 81089fc:	697b      	ldr	r3, [r7, #20]
 81089fe:	2200      	movs	r2, #0
 8108a00:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8108a02:	697b      	ldr	r3, [r7, #20]
 8108a04:	2200      	movs	r2, #0
 8108a06:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8108a08:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8108a0c:	4618      	mov	r0, r3
 8108a0e:	3748      	adds	r7, #72	; 0x48
 8108a10:	46bd      	mov	sp, r7
 8108a12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8108a16:	bf00      	nop
 8108a18:	58024400 	.word	0x58024400
 8108a1c:	03d09000 	.word	0x03d09000
 8108a20:	003d0900 	.word	0x003d0900
 8108a24:	0810df10 	.word	0x0810df10

08108a28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8108a28:	b480      	push	{r7}
 8108a2a:	b083      	sub	sp, #12
 8108a2c:	af00      	add	r7, sp, #0
 8108a2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8108a30:	687b      	ldr	r3, [r7, #4]
 8108a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108a34:	f003 0301 	and.w	r3, r3, #1
 8108a38:	2b00      	cmp	r3, #0
 8108a3a:	d00a      	beq.n	8108a52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8108a3c:	687b      	ldr	r3, [r7, #4]
 8108a3e:	681b      	ldr	r3, [r3, #0]
 8108a40:	685b      	ldr	r3, [r3, #4]
 8108a42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8108a46:	687b      	ldr	r3, [r7, #4]
 8108a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8108a4a:	687b      	ldr	r3, [r7, #4]
 8108a4c:	681b      	ldr	r3, [r3, #0]
 8108a4e:	430a      	orrs	r2, r1
 8108a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8108a52:	687b      	ldr	r3, [r7, #4]
 8108a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108a56:	f003 0302 	and.w	r3, r3, #2
 8108a5a:	2b00      	cmp	r3, #0
 8108a5c:	d00a      	beq.n	8108a74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8108a5e:	687b      	ldr	r3, [r7, #4]
 8108a60:	681b      	ldr	r3, [r3, #0]
 8108a62:	685b      	ldr	r3, [r3, #4]
 8108a64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8108a68:	687b      	ldr	r3, [r7, #4]
 8108a6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8108a6c:	687b      	ldr	r3, [r7, #4]
 8108a6e:	681b      	ldr	r3, [r3, #0]
 8108a70:	430a      	orrs	r2, r1
 8108a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8108a74:	687b      	ldr	r3, [r7, #4]
 8108a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108a78:	f003 0304 	and.w	r3, r3, #4
 8108a7c:	2b00      	cmp	r3, #0
 8108a7e:	d00a      	beq.n	8108a96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8108a80:	687b      	ldr	r3, [r7, #4]
 8108a82:	681b      	ldr	r3, [r3, #0]
 8108a84:	685b      	ldr	r3, [r3, #4]
 8108a86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8108a8a:	687b      	ldr	r3, [r7, #4]
 8108a8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8108a8e:	687b      	ldr	r3, [r7, #4]
 8108a90:	681b      	ldr	r3, [r3, #0]
 8108a92:	430a      	orrs	r2, r1
 8108a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8108a96:	687b      	ldr	r3, [r7, #4]
 8108a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108a9a:	f003 0308 	and.w	r3, r3, #8
 8108a9e:	2b00      	cmp	r3, #0
 8108aa0:	d00a      	beq.n	8108ab8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8108aa2:	687b      	ldr	r3, [r7, #4]
 8108aa4:	681b      	ldr	r3, [r3, #0]
 8108aa6:	685b      	ldr	r3, [r3, #4]
 8108aa8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8108aac:	687b      	ldr	r3, [r7, #4]
 8108aae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8108ab0:	687b      	ldr	r3, [r7, #4]
 8108ab2:	681b      	ldr	r3, [r3, #0]
 8108ab4:	430a      	orrs	r2, r1
 8108ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8108ab8:	687b      	ldr	r3, [r7, #4]
 8108aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108abc:	f003 0310 	and.w	r3, r3, #16
 8108ac0:	2b00      	cmp	r3, #0
 8108ac2:	d00a      	beq.n	8108ada <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8108ac4:	687b      	ldr	r3, [r7, #4]
 8108ac6:	681b      	ldr	r3, [r3, #0]
 8108ac8:	689b      	ldr	r3, [r3, #8]
 8108aca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8108ace:	687b      	ldr	r3, [r7, #4]
 8108ad0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8108ad2:	687b      	ldr	r3, [r7, #4]
 8108ad4:	681b      	ldr	r3, [r3, #0]
 8108ad6:	430a      	orrs	r2, r1
 8108ad8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8108ada:	687b      	ldr	r3, [r7, #4]
 8108adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108ade:	f003 0320 	and.w	r3, r3, #32
 8108ae2:	2b00      	cmp	r3, #0
 8108ae4:	d00a      	beq.n	8108afc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8108ae6:	687b      	ldr	r3, [r7, #4]
 8108ae8:	681b      	ldr	r3, [r3, #0]
 8108aea:	689b      	ldr	r3, [r3, #8]
 8108aec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8108af0:	687b      	ldr	r3, [r7, #4]
 8108af2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8108af4:	687b      	ldr	r3, [r7, #4]
 8108af6:	681b      	ldr	r3, [r3, #0]
 8108af8:	430a      	orrs	r2, r1
 8108afa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8108afc:	687b      	ldr	r3, [r7, #4]
 8108afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108b04:	2b00      	cmp	r3, #0
 8108b06:	d01a      	beq.n	8108b3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8108b08:	687b      	ldr	r3, [r7, #4]
 8108b0a:	681b      	ldr	r3, [r3, #0]
 8108b0c:	685b      	ldr	r3, [r3, #4]
 8108b0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8108b12:	687b      	ldr	r3, [r7, #4]
 8108b14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8108b16:	687b      	ldr	r3, [r7, #4]
 8108b18:	681b      	ldr	r3, [r3, #0]
 8108b1a:	430a      	orrs	r2, r1
 8108b1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8108b1e:	687b      	ldr	r3, [r7, #4]
 8108b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108b22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8108b26:	d10a      	bne.n	8108b3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8108b28:	687b      	ldr	r3, [r7, #4]
 8108b2a:	681b      	ldr	r3, [r3, #0]
 8108b2c:	685b      	ldr	r3, [r3, #4]
 8108b2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8108b32:	687b      	ldr	r3, [r7, #4]
 8108b34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8108b36:	687b      	ldr	r3, [r7, #4]
 8108b38:	681b      	ldr	r3, [r3, #0]
 8108b3a:	430a      	orrs	r2, r1
 8108b3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8108b3e:	687b      	ldr	r3, [r7, #4]
 8108b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108b46:	2b00      	cmp	r3, #0
 8108b48:	d00a      	beq.n	8108b60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8108b4a:	687b      	ldr	r3, [r7, #4]
 8108b4c:	681b      	ldr	r3, [r3, #0]
 8108b4e:	685b      	ldr	r3, [r3, #4]
 8108b50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8108b54:	687b      	ldr	r3, [r7, #4]
 8108b56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8108b58:	687b      	ldr	r3, [r7, #4]
 8108b5a:	681b      	ldr	r3, [r3, #0]
 8108b5c:	430a      	orrs	r2, r1
 8108b5e:	605a      	str	r2, [r3, #4]
  }
}
 8108b60:	bf00      	nop
 8108b62:	370c      	adds	r7, #12
 8108b64:	46bd      	mov	sp, r7
 8108b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108b6a:	4770      	bx	lr

08108b6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8108b6c:	b580      	push	{r7, lr}
 8108b6e:	b086      	sub	sp, #24
 8108b70:	af02      	add	r7, sp, #8
 8108b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108b74:	687b      	ldr	r3, [r7, #4]
 8108b76:	2200      	movs	r2, #0
 8108b78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8108b7c:	f7fa fb6e 	bl	810325c <HAL_GetTick>
 8108b80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8108b82:	687b      	ldr	r3, [r7, #4]
 8108b84:	681b      	ldr	r3, [r3, #0]
 8108b86:	681b      	ldr	r3, [r3, #0]
 8108b88:	f003 0308 	and.w	r3, r3, #8
 8108b8c:	2b08      	cmp	r3, #8
 8108b8e:	d10e      	bne.n	8108bae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8108b90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8108b94:	9300      	str	r3, [sp, #0]
 8108b96:	68fb      	ldr	r3, [r7, #12]
 8108b98:	2200      	movs	r2, #0
 8108b9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8108b9e:	6878      	ldr	r0, [r7, #4]
 8108ba0:	f000 f82f 	bl	8108c02 <UART_WaitOnFlagUntilTimeout>
 8108ba4:	4603      	mov	r3, r0
 8108ba6:	2b00      	cmp	r3, #0
 8108ba8:	d001      	beq.n	8108bae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8108baa:	2303      	movs	r3, #3
 8108bac:	e025      	b.n	8108bfa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8108bae:	687b      	ldr	r3, [r7, #4]
 8108bb0:	681b      	ldr	r3, [r3, #0]
 8108bb2:	681b      	ldr	r3, [r3, #0]
 8108bb4:	f003 0304 	and.w	r3, r3, #4
 8108bb8:	2b04      	cmp	r3, #4
 8108bba:	d10e      	bne.n	8108bda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8108bbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8108bc0:	9300      	str	r3, [sp, #0]
 8108bc2:	68fb      	ldr	r3, [r7, #12]
 8108bc4:	2200      	movs	r2, #0
 8108bc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8108bca:	6878      	ldr	r0, [r7, #4]
 8108bcc:	f000 f819 	bl	8108c02 <UART_WaitOnFlagUntilTimeout>
 8108bd0:	4603      	mov	r3, r0
 8108bd2:	2b00      	cmp	r3, #0
 8108bd4:	d001      	beq.n	8108bda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8108bd6:	2303      	movs	r3, #3
 8108bd8:	e00f      	b.n	8108bfa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8108bda:	687b      	ldr	r3, [r7, #4]
 8108bdc:	2220      	movs	r2, #32
 8108bde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8108be2:	687b      	ldr	r3, [r7, #4]
 8108be4:	2220      	movs	r2, #32
 8108be6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8108bea:	687b      	ldr	r3, [r7, #4]
 8108bec:	2200      	movs	r2, #0
 8108bee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8108bf0:	687b      	ldr	r3, [r7, #4]
 8108bf2:	2200      	movs	r2, #0
 8108bf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8108bf8:	2300      	movs	r3, #0
}
 8108bfa:	4618      	mov	r0, r3
 8108bfc:	3710      	adds	r7, #16
 8108bfe:	46bd      	mov	sp, r7
 8108c00:	bd80      	pop	{r7, pc}

08108c02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8108c02:	b580      	push	{r7, lr}
 8108c04:	b09c      	sub	sp, #112	; 0x70
 8108c06:	af00      	add	r7, sp, #0
 8108c08:	60f8      	str	r0, [r7, #12]
 8108c0a:	60b9      	str	r1, [r7, #8]
 8108c0c:	603b      	str	r3, [r7, #0]
 8108c0e:	4613      	mov	r3, r2
 8108c10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8108c12:	e0a9      	b.n	8108d68 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8108c14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8108c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108c1a:	f000 80a5 	beq.w	8108d68 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8108c1e:	f7fa fb1d 	bl	810325c <HAL_GetTick>
 8108c22:	4602      	mov	r2, r0
 8108c24:	683b      	ldr	r3, [r7, #0]
 8108c26:	1ad3      	subs	r3, r2, r3
 8108c28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8108c2a:	429a      	cmp	r2, r3
 8108c2c:	d302      	bcc.n	8108c34 <UART_WaitOnFlagUntilTimeout+0x32>
 8108c2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8108c30:	2b00      	cmp	r3, #0
 8108c32:	d140      	bne.n	8108cb6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8108c34:	68fb      	ldr	r3, [r7, #12]
 8108c36:	681b      	ldr	r3, [r3, #0]
 8108c38:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8108c3c:	e853 3f00 	ldrex	r3, [r3]
 8108c40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8108c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8108c44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8108c48:	667b      	str	r3, [r7, #100]	; 0x64
 8108c4a:	68fb      	ldr	r3, [r7, #12]
 8108c4c:	681b      	ldr	r3, [r3, #0]
 8108c4e:	461a      	mov	r2, r3
 8108c50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8108c52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8108c54:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108c56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8108c58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8108c5a:	e841 2300 	strex	r3, r2, [r1]
 8108c5e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8108c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8108c62:	2b00      	cmp	r3, #0
 8108c64:	d1e6      	bne.n	8108c34 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8108c66:	68fb      	ldr	r3, [r7, #12]
 8108c68:	681b      	ldr	r3, [r3, #0]
 8108c6a:	3308      	adds	r3, #8
 8108c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108c70:	e853 3f00 	ldrex	r3, [r3]
 8108c74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8108c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108c78:	f023 0301 	bic.w	r3, r3, #1
 8108c7c:	663b      	str	r3, [r7, #96]	; 0x60
 8108c7e:	68fb      	ldr	r3, [r7, #12]
 8108c80:	681b      	ldr	r3, [r3, #0]
 8108c82:	3308      	adds	r3, #8
 8108c84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8108c86:	64ba      	str	r2, [r7, #72]	; 0x48
 8108c88:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108c8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8108c8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8108c8e:	e841 2300 	strex	r3, r2, [r1]
 8108c92:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8108c94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8108c96:	2b00      	cmp	r3, #0
 8108c98:	d1e5      	bne.n	8108c66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8108c9a:	68fb      	ldr	r3, [r7, #12]
 8108c9c:	2220      	movs	r2, #32
 8108c9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8108ca2:	68fb      	ldr	r3, [r7, #12]
 8108ca4:	2220      	movs	r2, #32
 8108ca6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8108caa:	68fb      	ldr	r3, [r7, #12]
 8108cac:	2200      	movs	r2, #0
 8108cae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8108cb2:	2303      	movs	r3, #3
 8108cb4:	e069      	b.n	8108d8a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8108cb6:	68fb      	ldr	r3, [r7, #12]
 8108cb8:	681b      	ldr	r3, [r3, #0]
 8108cba:	681b      	ldr	r3, [r3, #0]
 8108cbc:	f003 0304 	and.w	r3, r3, #4
 8108cc0:	2b00      	cmp	r3, #0
 8108cc2:	d051      	beq.n	8108d68 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8108cc4:	68fb      	ldr	r3, [r7, #12]
 8108cc6:	681b      	ldr	r3, [r3, #0]
 8108cc8:	69db      	ldr	r3, [r3, #28]
 8108cca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8108cce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8108cd2:	d149      	bne.n	8108d68 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8108cd4:	68fb      	ldr	r3, [r7, #12]
 8108cd6:	681b      	ldr	r3, [r3, #0]
 8108cd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8108cdc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8108cde:	68fb      	ldr	r3, [r7, #12]
 8108ce0:	681b      	ldr	r3, [r3, #0]
 8108ce2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108ce6:	e853 3f00 	ldrex	r3, [r3]
 8108cea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8108cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108cee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8108cf2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8108cf4:	68fb      	ldr	r3, [r7, #12]
 8108cf6:	681b      	ldr	r3, [r3, #0]
 8108cf8:	461a      	mov	r2, r3
 8108cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8108cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8108cfe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108d00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8108d02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8108d04:	e841 2300 	strex	r3, r2, [r1]
 8108d08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8108d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108d0c:	2b00      	cmp	r3, #0
 8108d0e:	d1e6      	bne.n	8108cde <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8108d10:	68fb      	ldr	r3, [r7, #12]
 8108d12:	681b      	ldr	r3, [r3, #0]
 8108d14:	3308      	adds	r3, #8
 8108d16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108d18:	697b      	ldr	r3, [r7, #20]
 8108d1a:	e853 3f00 	ldrex	r3, [r3]
 8108d1e:	613b      	str	r3, [r7, #16]
   return(result);
 8108d20:	693b      	ldr	r3, [r7, #16]
 8108d22:	f023 0301 	bic.w	r3, r3, #1
 8108d26:	66bb      	str	r3, [r7, #104]	; 0x68
 8108d28:	68fb      	ldr	r3, [r7, #12]
 8108d2a:	681b      	ldr	r3, [r3, #0]
 8108d2c:	3308      	adds	r3, #8
 8108d2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8108d30:	623a      	str	r2, [r7, #32]
 8108d32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108d34:	69f9      	ldr	r1, [r7, #28]
 8108d36:	6a3a      	ldr	r2, [r7, #32]
 8108d38:	e841 2300 	strex	r3, r2, [r1]
 8108d3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8108d3e:	69bb      	ldr	r3, [r7, #24]
 8108d40:	2b00      	cmp	r3, #0
 8108d42:	d1e5      	bne.n	8108d10 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8108d44:	68fb      	ldr	r3, [r7, #12]
 8108d46:	2220      	movs	r2, #32
 8108d48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8108d4c:	68fb      	ldr	r3, [r7, #12]
 8108d4e:	2220      	movs	r2, #32
 8108d50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8108d54:	68fb      	ldr	r3, [r7, #12]
 8108d56:	2220      	movs	r2, #32
 8108d58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8108d5c:	68fb      	ldr	r3, [r7, #12]
 8108d5e:	2200      	movs	r2, #0
 8108d60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8108d64:	2303      	movs	r3, #3
 8108d66:	e010      	b.n	8108d8a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8108d68:	68fb      	ldr	r3, [r7, #12]
 8108d6a:	681b      	ldr	r3, [r3, #0]
 8108d6c:	69da      	ldr	r2, [r3, #28]
 8108d6e:	68bb      	ldr	r3, [r7, #8]
 8108d70:	4013      	ands	r3, r2
 8108d72:	68ba      	ldr	r2, [r7, #8]
 8108d74:	429a      	cmp	r2, r3
 8108d76:	bf0c      	ite	eq
 8108d78:	2301      	moveq	r3, #1
 8108d7a:	2300      	movne	r3, #0
 8108d7c:	b2db      	uxtb	r3, r3
 8108d7e:	461a      	mov	r2, r3
 8108d80:	79fb      	ldrb	r3, [r7, #7]
 8108d82:	429a      	cmp	r2, r3
 8108d84:	f43f af46 	beq.w	8108c14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8108d88:	2300      	movs	r3, #0
}
 8108d8a:	4618      	mov	r0, r3
 8108d8c:	3770      	adds	r7, #112	; 0x70
 8108d8e:	46bd      	mov	sp, r7
 8108d90:	bd80      	pop	{r7, pc}

08108d92 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8108d92:	b480      	push	{r7}
 8108d94:	b085      	sub	sp, #20
 8108d96:	af00      	add	r7, sp, #0
 8108d98:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108d9a:	687b      	ldr	r3, [r7, #4]
 8108d9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8108da0:	2b01      	cmp	r3, #1
 8108da2:	d101      	bne.n	8108da8 <HAL_UARTEx_DisableFifoMode+0x16>
 8108da4:	2302      	movs	r3, #2
 8108da6:	e027      	b.n	8108df8 <HAL_UARTEx_DisableFifoMode+0x66>
 8108da8:	687b      	ldr	r3, [r7, #4]
 8108daa:	2201      	movs	r2, #1
 8108dac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8108db0:	687b      	ldr	r3, [r7, #4]
 8108db2:	2224      	movs	r2, #36	; 0x24
 8108db4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108db8:	687b      	ldr	r3, [r7, #4]
 8108dba:	681b      	ldr	r3, [r3, #0]
 8108dbc:	681b      	ldr	r3, [r3, #0]
 8108dbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108dc0:	687b      	ldr	r3, [r7, #4]
 8108dc2:	681b      	ldr	r3, [r3, #0]
 8108dc4:	681a      	ldr	r2, [r3, #0]
 8108dc6:	687b      	ldr	r3, [r7, #4]
 8108dc8:	681b      	ldr	r3, [r3, #0]
 8108dca:	f022 0201 	bic.w	r2, r2, #1
 8108dce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8108dd0:	68fb      	ldr	r3, [r7, #12]
 8108dd2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8108dd6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8108dd8:	687b      	ldr	r3, [r7, #4]
 8108dda:	2200      	movs	r2, #0
 8108ddc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108dde:	687b      	ldr	r3, [r7, #4]
 8108de0:	681b      	ldr	r3, [r3, #0]
 8108de2:	68fa      	ldr	r2, [r7, #12]
 8108de4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8108de6:	687b      	ldr	r3, [r7, #4]
 8108de8:	2220      	movs	r2, #32
 8108dea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108dee:	687b      	ldr	r3, [r7, #4]
 8108df0:	2200      	movs	r2, #0
 8108df2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8108df6:	2300      	movs	r3, #0
}
 8108df8:	4618      	mov	r0, r3
 8108dfa:	3714      	adds	r7, #20
 8108dfc:	46bd      	mov	sp, r7
 8108dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e02:	4770      	bx	lr

08108e04 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8108e04:	b580      	push	{r7, lr}
 8108e06:	b084      	sub	sp, #16
 8108e08:	af00      	add	r7, sp, #0
 8108e0a:	6078      	str	r0, [r7, #4]
 8108e0c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108e0e:	687b      	ldr	r3, [r7, #4]
 8108e10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8108e14:	2b01      	cmp	r3, #1
 8108e16:	d101      	bne.n	8108e1c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8108e18:	2302      	movs	r3, #2
 8108e1a:	e02d      	b.n	8108e78 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8108e1c:	687b      	ldr	r3, [r7, #4]
 8108e1e:	2201      	movs	r2, #1
 8108e20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8108e24:	687b      	ldr	r3, [r7, #4]
 8108e26:	2224      	movs	r2, #36	; 0x24
 8108e28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108e2c:	687b      	ldr	r3, [r7, #4]
 8108e2e:	681b      	ldr	r3, [r3, #0]
 8108e30:	681b      	ldr	r3, [r3, #0]
 8108e32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108e34:	687b      	ldr	r3, [r7, #4]
 8108e36:	681b      	ldr	r3, [r3, #0]
 8108e38:	681a      	ldr	r2, [r3, #0]
 8108e3a:	687b      	ldr	r3, [r7, #4]
 8108e3c:	681b      	ldr	r3, [r3, #0]
 8108e3e:	f022 0201 	bic.w	r2, r2, #1
 8108e42:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8108e44:	687b      	ldr	r3, [r7, #4]
 8108e46:	681b      	ldr	r3, [r3, #0]
 8108e48:	689b      	ldr	r3, [r3, #8]
 8108e4a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8108e4e:	687b      	ldr	r3, [r7, #4]
 8108e50:	681b      	ldr	r3, [r3, #0]
 8108e52:	683a      	ldr	r2, [r7, #0]
 8108e54:	430a      	orrs	r2, r1
 8108e56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8108e58:	6878      	ldr	r0, [r7, #4]
 8108e5a:	f000 f84f 	bl	8108efc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108e5e:	687b      	ldr	r3, [r7, #4]
 8108e60:	681b      	ldr	r3, [r3, #0]
 8108e62:	68fa      	ldr	r2, [r7, #12]
 8108e64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8108e66:	687b      	ldr	r3, [r7, #4]
 8108e68:	2220      	movs	r2, #32
 8108e6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108e6e:	687b      	ldr	r3, [r7, #4]
 8108e70:	2200      	movs	r2, #0
 8108e72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8108e76:	2300      	movs	r3, #0
}
 8108e78:	4618      	mov	r0, r3
 8108e7a:	3710      	adds	r7, #16
 8108e7c:	46bd      	mov	sp, r7
 8108e7e:	bd80      	pop	{r7, pc}

08108e80 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8108e80:	b580      	push	{r7, lr}
 8108e82:	b084      	sub	sp, #16
 8108e84:	af00      	add	r7, sp, #0
 8108e86:	6078      	str	r0, [r7, #4]
 8108e88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108e8a:	687b      	ldr	r3, [r7, #4]
 8108e8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8108e90:	2b01      	cmp	r3, #1
 8108e92:	d101      	bne.n	8108e98 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8108e94:	2302      	movs	r3, #2
 8108e96:	e02d      	b.n	8108ef4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8108e98:	687b      	ldr	r3, [r7, #4]
 8108e9a:	2201      	movs	r2, #1
 8108e9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8108ea0:	687b      	ldr	r3, [r7, #4]
 8108ea2:	2224      	movs	r2, #36	; 0x24
 8108ea4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108ea8:	687b      	ldr	r3, [r7, #4]
 8108eaa:	681b      	ldr	r3, [r3, #0]
 8108eac:	681b      	ldr	r3, [r3, #0]
 8108eae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108eb0:	687b      	ldr	r3, [r7, #4]
 8108eb2:	681b      	ldr	r3, [r3, #0]
 8108eb4:	681a      	ldr	r2, [r3, #0]
 8108eb6:	687b      	ldr	r3, [r7, #4]
 8108eb8:	681b      	ldr	r3, [r3, #0]
 8108eba:	f022 0201 	bic.w	r2, r2, #1
 8108ebe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8108ec0:	687b      	ldr	r3, [r7, #4]
 8108ec2:	681b      	ldr	r3, [r3, #0]
 8108ec4:	689b      	ldr	r3, [r3, #8]
 8108ec6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8108eca:	687b      	ldr	r3, [r7, #4]
 8108ecc:	681b      	ldr	r3, [r3, #0]
 8108ece:	683a      	ldr	r2, [r7, #0]
 8108ed0:	430a      	orrs	r2, r1
 8108ed2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8108ed4:	6878      	ldr	r0, [r7, #4]
 8108ed6:	f000 f811 	bl	8108efc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108eda:	687b      	ldr	r3, [r7, #4]
 8108edc:	681b      	ldr	r3, [r3, #0]
 8108ede:	68fa      	ldr	r2, [r7, #12]
 8108ee0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8108ee2:	687b      	ldr	r3, [r7, #4]
 8108ee4:	2220      	movs	r2, #32
 8108ee6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108eea:	687b      	ldr	r3, [r7, #4]
 8108eec:	2200      	movs	r2, #0
 8108eee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8108ef2:	2300      	movs	r3, #0
}
 8108ef4:	4618      	mov	r0, r3
 8108ef6:	3710      	adds	r7, #16
 8108ef8:	46bd      	mov	sp, r7
 8108efa:	bd80      	pop	{r7, pc}

08108efc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8108efc:	b480      	push	{r7}
 8108efe:	b085      	sub	sp, #20
 8108f00:	af00      	add	r7, sp, #0
 8108f02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8108f04:	687b      	ldr	r3, [r7, #4]
 8108f06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108f08:	2b00      	cmp	r3, #0
 8108f0a:	d108      	bne.n	8108f1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8108f0c:	687b      	ldr	r3, [r7, #4]
 8108f0e:	2201      	movs	r2, #1
 8108f10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8108f14:	687b      	ldr	r3, [r7, #4]
 8108f16:	2201      	movs	r2, #1
 8108f18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8108f1c:	e031      	b.n	8108f82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8108f1e:	2310      	movs	r3, #16
 8108f20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8108f22:	2310      	movs	r3, #16
 8108f24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8108f26:	687b      	ldr	r3, [r7, #4]
 8108f28:	681b      	ldr	r3, [r3, #0]
 8108f2a:	689b      	ldr	r3, [r3, #8]
 8108f2c:	0e5b      	lsrs	r3, r3, #25
 8108f2e:	b2db      	uxtb	r3, r3
 8108f30:	f003 0307 	and.w	r3, r3, #7
 8108f34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8108f36:	687b      	ldr	r3, [r7, #4]
 8108f38:	681b      	ldr	r3, [r3, #0]
 8108f3a:	689b      	ldr	r3, [r3, #8]
 8108f3c:	0f5b      	lsrs	r3, r3, #29
 8108f3e:	b2db      	uxtb	r3, r3
 8108f40:	f003 0307 	and.w	r3, r3, #7
 8108f44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8108f46:	7bbb      	ldrb	r3, [r7, #14]
 8108f48:	7b3a      	ldrb	r2, [r7, #12]
 8108f4a:	4911      	ldr	r1, [pc, #68]	; (8108f90 <UARTEx_SetNbDataToProcess+0x94>)
 8108f4c:	5c8a      	ldrb	r2, [r1, r2]
 8108f4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8108f52:	7b3a      	ldrb	r2, [r7, #12]
 8108f54:	490f      	ldr	r1, [pc, #60]	; (8108f94 <UARTEx_SetNbDataToProcess+0x98>)
 8108f56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8108f58:	fb93 f3f2 	sdiv	r3, r3, r2
 8108f5c:	b29a      	uxth	r2, r3
 8108f5e:	687b      	ldr	r3, [r7, #4]
 8108f60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8108f64:	7bfb      	ldrb	r3, [r7, #15]
 8108f66:	7b7a      	ldrb	r2, [r7, #13]
 8108f68:	4909      	ldr	r1, [pc, #36]	; (8108f90 <UARTEx_SetNbDataToProcess+0x94>)
 8108f6a:	5c8a      	ldrb	r2, [r1, r2]
 8108f6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8108f70:	7b7a      	ldrb	r2, [r7, #13]
 8108f72:	4908      	ldr	r1, [pc, #32]	; (8108f94 <UARTEx_SetNbDataToProcess+0x98>)
 8108f74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8108f76:	fb93 f3f2 	sdiv	r3, r3, r2
 8108f7a:	b29a      	uxth	r2, r3
 8108f7c:	687b      	ldr	r3, [r7, #4]
 8108f7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8108f82:	bf00      	nop
 8108f84:	3714      	adds	r7, #20
 8108f86:	46bd      	mov	sp, r7
 8108f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108f8c:	4770      	bx	lr
 8108f8e:	bf00      	nop
 8108f90:	0810df28 	.word	0x0810df28
 8108f94:	0810df30 	.word	0x0810df30

08108f98 <__errno>:
 8108f98:	4b01      	ldr	r3, [pc, #4]	; (8108fa0 <__errno+0x8>)
 8108f9a:	6818      	ldr	r0, [r3, #0]
 8108f9c:	4770      	bx	lr
 8108f9e:	bf00      	nop
 8108fa0:	1000002c 	.word	0x1000002c

08108fa4 <__libc_init_array>:
 8108fa4:	b570      	push	{r4, r5, r6, lr}
 8108fa6:	4d0d      	ldr	r5, [pc, #52]	; (8108fdc <__libc_init_array+0x38>)
 8108fa8:	4c0d      	ldr	r4, [pc, #52]	; (8108fe0 <__libc_init_array+0x3c>)
 8108faa:	1b64      	subs	r4, r4, r5
 8108fac:	10a4      	asrs	r4, r4, #2
 8108fae:	2600      	movs	r6, #0
 8108fb0:	42a6      	cmp	r6, r4
 8108fb2:	d109      	bne.n	8108fc8 <__libc_init_array+0x24>
 8108fb4:	4d0b      	ldr	r5, [pc, #44]	; (8108fe4 <__libc_init_array+0x40>)
 8108fb6:	4c0c      	ldr	r4, [pc, #48]	; (8108fe8 <__libc_init_array+0x44>)
 8108fb8:	f004 fe3c 	bl	810dc34 <_init>
 8108fbc:	1b64      	subs	r4, r4, r5
 8108fbe:	10a4      	asrs	r4, r4, #2
 8108fc0:	2600      	movs	r6, #0
 8108fc2:	42a6      	cmp	r6, r4
 8108fc4:	d105      	bne.n	8108fd2 <__libc_init_array+0x2e>
 8108fc6:	bd70      	pop	{r4, r5, r6, pc}
 8108fc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8108fcc:	4798      	blx	r3
 8108fce:	3601      	adds	r6, #1
 8108fd0:	e7ee      	b.n	8108fb0 <__libc_init_array+0xc>
 8108fd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8108fd6:	4798      	blx	r3
 8108fd8:	3601      	adds	r6, #1
 8108fda:	e7f2      	b.n	8108fc2 <__libc_init_array+0x1e>
 8108fdc:	0810e3ec 	.word	0x0810e3ec
 8108fe0:	0810e3ec 	.word	0x0810e3ec
 8108fe4:	0810e3ec 	.word	0x0810e3ec
 8108fe8:	0810e3f0 	.word	0x0810e3f0

08108fec <memcpy>:
 8108fec:	440a      	add	r2, r1
 8108fee:	4291      	cmp	r1, r2
 8108ff0:	f100 33ff 	add.w	r3, r0, #4294967295
 8108ff4:	d100      	bne.n	8108ff8 <memcpy+0xc>
 8108ff6:	4770      	bx	lr
 8108ff8:	b510      	push	{r4, lr}
 8108ffa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8108ffe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8109002:	4291      	cmp	r1, r2
 8109004:	d1f9      	bne.n	8108ffa <memcpy+0xe>
 8109006:	bd10      	pop	{r4, pc}

08109008 <memset>:
 8109008:	4402      	add	r2, r0
 810900a:	4603      	mov	r3, r0
 810900c:	4293      	cmp	r3, r2
 810900e:	d100      	bne.n	8109012 <memset+0xa>
 8109010:	4770      	bx	lr
 8109012:	f803 1b01 	strb.w	r1, [r3], #1
 8109016:	e7f9      	b.n	810900c <memset+0x4>

08109018 <__cvt>:
 8109018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810901c:	ec55 4b10 	vmov	r4, r5, d0
 8109020:	2d00      	cmp	r5, #0
 8109022:	460e      	mov	r6, r1
 8109024:	4619      	mov	r1, r3
 8109026:	462b      	mov	r3, r5
 8109028:	bfbb      	ittet	lt
 810902a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 810902e:	461d      	movlt	r5, r3
 8109030:	2300      	movge	r3, #0
 8109032:	232d      	movlt	r3, #45	; 0x2d
 8109034:	700b      	strb	r3, [r1, #0]
 8109036:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8109038:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 810903c:	4691      	mov	r9, r2
 810903e:	f023 0820 	bic.w	r8, r3, #32
 8109042:	bfbc      	itt	lt
 8109044:	4622      	movlt	r2, r4
 8109046:	4614      	movlt	r4, r2
 8109048:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 810904c:	d005      	beq.n	810905a <__cvt+0x42>
 810904e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8109052:	d100      	bne.n	8109056 <__cvt+0x3e>
 8109054:	3601      	adds	r6, #1
 8109056:	2102      	movs	r1, #2
 8109058:	e000      	b.n	810905c <__cvt+0x44>
 810905a:	2103      	movs	r1, #3
 810905c:	ab03      	add	r3, sp, #12
 810905e:	9301      	str	r3, [sp, #4]
 8109060:	ab02      	add	r3, sp, #8
 8109062:	9300      	str	r3, [sp, #0]
 8109064:	ec45 4b10 	vmov	d0, r4, r5
 8109068:	4653      	mov	r3, sl
 810906a:	4632      	mov	r2, r6
 810906c:	f001 fefc 	bl	810ae68 <_dtoa_r>
 8109070:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8109074:	4607      	mov	r7, r0
 8109076:	d102      	bne.n	810907e <__cvt+0x66>
 8109078:	f019 0f01 	tst.w	r9, #1
 810907c:	d022      	beq.n	81090c4 <__cvt+0xac>
 810907e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8109082:	eb07 0906 	add.w	r9, r7, r6
 8109086:	d110      	bne.n	81090aa <__cvt+0x92>
 8109088:	783b      	ldrb	r3, [r7, #0]
 810908a:	2b30      	cmp	r3, #48	; 0x30
 810908c:	d10a      	bne.n	81090a4 <__cvt+0x8c>
 810908e:	2200      	movs	r2, #0
 8109090:	2300      	movs	r3, #0
 8109092:	4620      	mov	r0, r4
 8109094:	4629      	mov	r1, r5
 8109096:	f7f7 fd9f 	bl	8100bd8 <__aeabi_dcmpeq>
 810909a:	b918      	cbnz	r0, 81090a4 <__cvt+0x8c>
 810909c:	f1c6 0601 	rsb	r6, r6, #1
 81090a0:	f8ca 6000 	str.w	r6, [sl]
 81090a4:	f8da 3000 	ldr.w	r3, [sl]
 81090a8:	4499      	add	r9, r3
 81090aa:	2200      	movs	r2, #0
 81090ac:	2300      	movs	r3, #0
 81090ae:	4620      	mov	r0, r4
 81090b0:	4629      	mov	r1, r5
 81090b2:	f7f7 fd91 	bl	8100bd8 <__aeabi_dcmpeq>
 81090b6:	b108      	cbz	r0, 81090bc <__cvt+0xa4>
 81090b8:	f8cd 900c 	str.w	r9, [sp, #12]
 81090bc:	2230      	movs	r2, #48	; 0x30
 81090be:	9b03      	ldr	r3, [sp, #12]
 81090c0:	454b      	cmp	r3, r9
 81090c2:	d307      	bcc.n	81090d4 <__cvt+0xbc>
 81090c4:	9b03      	ldr	r3, [sp, #12]
 81090c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 81090c8:	1bdb      	subs	r3, r3, r7
 81090ca:	4638      	mov	r0, r7
 81090cc:	6013      	str	r3, [r2, #0]
 81090ce:	b004      	add	sp, #16
 81090d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81090d4:	1c59      	adds	r1, r3, #1
 81090d6:	9103      	str	r1, [sp, #12]
 81090d8:	701a      	strb	r2, [r3, #0]
 81090da:	e7f0      	b.n	81090be <__cvt+0xa6>

081090dc <__exponent>:
 81090dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 81090de:	4603      	mov	r3, r0
 81090e0:	2900      	cmp	r1, #0
 81090e2:	bfb8      	it	lt
 81090e4:	4249      	neglt	r1, r1
 81090e6:	f803 2b02 	strb.w	r2, [r3], #2
 81090ea:	bfb4      	ite	lt
 81090ec:	222d      	movlt	r2, #45	; 0x2d
 81090ee:	222b      	movge	r2, #43	; 0x2b
 81090f0:	2909      	cmp	r1, #9
 81090f2:	7042      	strb	r2, [r0, #1]
 81090f4:	dd2a      	ble.n	810914c <__exponent+0x70>
 81090f6:	f10d 0407 	add.w	r4, sp, #7
 81090fa:	46a4      	mov	ip, r4
 81090fc:	270a      	movs	r7, #10
 81090fe:	46a6      	mov	lr, r4
 8109100:	460a      	mov	r2, r1
 8109102:	fb91 f6f7 	sdiv	r6, r1, r7
 8109106:	fb07 1516 	mls	r5, r7, r6, r1
 810910a:	3530      	adds	r5, #48	; 0x30
 810910c:	2a63      	cmp	r2, #99	; 0x63
 810910e:	f104 34ff 	add.w	r4, r4, #4294967295
 8109112:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8109116:	4631      	mov	r1, r6
 8109118:	dcf1      	bgt.n	81090fe <__exponent+0x22>
 810911a:	3130      	adds	r1, #48	; 0x30
 810911c:	f1ae 0502 	sub.w	r5, lr, #2
 8109120:	f804 1c01 	strb.w	r1, [r4, #-1]
 8109124:	1c44      	adds	r4, r0, #1
 8109126:	4629      	mov	r1, r5
 8109128:	4561      	cmp	r1, ip
 810912a:	d30a      	bcc.n	8109142 <__exponent+0x66>
 810912c:	f10d 0209 	add.w	r2, sp, #9
 8109130:	eba2 020e 	sub.w	r2, r2, lr
 8109134:	4565      	cmp	r5, ip
 8109136:	bf88      	it	hi
 8109138:	2200      	movhi	r2, #0
 810913a:	4413      	add	r3, r2
 810913c:	1a18      	subs	r0, r3, r0
 810913e:	b003      	add	sp, #12
 8109140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8109142:	f811 2b01 	ldrb.w	r2, [r1], #1
 8109146:	f804 2f01 	strb.w	r2, [r4, #1]!
 810914a:	e7ed      	b.n	8109128 <__exponent+0x4c>
 810914c:	2330      	movs	r3, #48	; 0x30
 810914e:	3130      	adds	r1, #48	; 0x30
 8109150:	7083      	strb	r3, [r0, #2]
 8109152:	70c1      	strb	r1, [r0, #3]
 8109154:	1d03      	adds	r3, r0, #4
 8109156:	e7f1      	b.n	810913c <__exponent+0x60>

08109158 <_printf_float>:
 8109158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810915c:	ed2d 8b02 	vpush	{d8}
 8109160:	b08d      	sub	sp, #52	; 0x34
 8109162:	460c      	mov	r4, r1
 8109164:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8109168:	4616      	mov	r6, r2
 810916a:	461f      	mov	r7, r3
 810916c:	4605      	mov	r5, r0
 810916e:	f003 f98f 	bl	810c490 <_localeconv_r>
 8109172:	f8d0 a000 	ldr.w	sl, [r0]
 8109176:	4650      	mov	r0, sl
 8109178:	f7f7 f8b2 	bl	81002e0 <strlen>
 810917c:	2300      	movs	r3, #0
 810917e:	930a      	str	r3, [sp, #40]	; 0x28
 8109180:	6823      	ldr	r3, [r4, #0]
 8109182:	9305      	str	r3, [sp, #20]
 8109184:	f8d8 3000 	ldr.w	r3, [r8]
 8109188:	f894 b018 	ldrb.w	fp, [r4, #24]
 810918c:	3307      	adds	r3, #7
 810918e:	f023 0307 	bic.w	r3, r3, #7
 8109192:	f103 0208 	add.w	r2, r3, #8
 8109196:	f8c8 2000 	str.w	r2, [r8]
 810919a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810919e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 81091a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 81091a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 81091aa:	9307      	str	r3, [sp, #28]
 81091ac:	f8cd 8018 	str.w	r8, [sp, #24]
 81091b0:	ee08 0a10 	vmov	s16, r0
 81091b4:	4b9f      	ldr	r3, [pc, #636]	; (8109434 <_printf_float+0x2dc>)
 81091b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 81091ba:	f04f 32ff 	mov.w	r2, #4294967295
 81091be:	f7f7 fd3d 	bl	8100c3c <__aeabi_dcmpun>
 81091c2:	bb88      	cbnz	r0, 8109228 <_printf_float+0xd0>
 81091c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 81091c8:	4b9a      	ldr	r3, [pc, #616]	; (8109434 <_printf_float+0x2dc>)
 81091ca:	f04f 32ff 	mov.w	r2, #4294967295
 81091ce:	f7f7 fd17 	bl	8100c00 <__aeabi_dcmple>
 81091d2:	bb48      	cbnz	r0, 8109228 <_printf_float+0xd0>
 81091d4:	2200      	movs	r2, #0
 81091d6:	2300      	movs	r3, #0
 81091d8:	4640      	mov	r0, r8
 81091da:	4649      	mov	r1, r9
 81091dc:	f7f7 fd06 	bl	8100bec <__aeabi_dcmplt>
 81091e0:	b110      	cbz	r0, 81091e8 <_printf_float+0x90>
 81091e2:	232d      	movs	r3, #45	; 0x2d
 81091e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81091e8:	4b93      	ldr	r3, [pc, #588]	; (8109438 <_printf_float+0x2e0>)
 81091ea:	4894      	ldr	r0, [pc, #592]	; (810943c <_printf_float+0x2e4>)
 81091ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 81091f0:	bf94      	ite	ls
 81091f2:	4698      	movls	r8, r3
 81091f4:	4680      	movhi	r8, r0
 81091f6:	2303      	movs	r3, #3
 81091f8:	6123      	str	r3, [r4, #16]
 81091fa:	9b05      	ldr	r3, [sp, #20]
 81091fc:	f023 0204 	bic.w	r2, r3, #4
 8109200:	6022      	str	r2, [r4, #0]
 8109202:	f04f 0900 	mov.w	r9, #0
 8109206:	9700      	str	r7, [sp, #0]
 8109208:	4633      	mov	r3, r6
 810920a:	aa0b      	add	r2, sp, #44	; 0x2c
 810920c:	4621      	mov	r1, r4
 810920e:	4628      	mov	r0, r5
 8109210:	f000 f9d8 	bl	81095c4 <_printf_common>
 8109214:	3001      	adds	r0, #1
 8109216:	f040 8090 	bne.w	810933a <_printf_float+0x1e2>
 810921a:	f04f 30ff 	mov.w	r0, #4294967295
 810921e:	b00d      	add	sp, #52	; 0x34
 8109220:	ecbd 8b02 	vpop	{d8}
 8109224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109228:	4642      	mov	r2, r8
 810922a:	464b      	mov	r3, r9
 810922c:	4640      	mov	r0, r8
 810922e:	4649      	mov	r1, r9
 8109230:	f7f7 fd04 	bl	8100c3c <__aeabi_dcmpun>
 8109234:	b140      	cbz	r0, 8109248 <_printf_float+0xf0>
 8109236:	464b      	mov	r3, r9
 8109238:	2b00      	cmp	r3, #0
 810923a:	bfbc      	itt	lt
 810923c:	232d      	movlt	r3, #45	; 0x2d
 810923e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8109242:	487f      	ldr	r0, [pc, #508]	; (8109440 <_printf_float+0x2e8>)
 8109244:	4b7f      	ldr	r3, [pc, #508]	; (8109444 <_printf_float+0x2ec>)
 8109246:	e7d1      	b.n	81091ec <_printf_float+0x94>
 8109248:	6863      	ldr	r3, [r4, #4]
 810924a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 810924e:	9206      	str	r2, [sp, #24]
 8109250:	1c5a      	adds	r2, r3, #1
 8109252:	d13f      	bne.n	81092d4 <_printf_float+0x17c>
 8109254:	2306      	movs	r3, #6
 8109256:	6063      	str	r3, [r4, #4]
 8109258:	9b05      	ldr	r3, [sp, #20]
 810925a:	6861      	ldr	r1, [r4, #4]
 810925c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8109260:	2300      	movs	r3, #0
 8109262:	9303      	str	r3, [sp, #12]
 8109264:	ab0a      	add	r3, sp, #40	; 0x28
 8109266:	e9cd b301 	strd	fp, r3, [sp, #4]
 810926a:	ab09      	add	r3, sp, #36	; 0x24
 810926c:	ec49 8b10 	vmov	d0, r8, r9
 8109270:	9300      	str	r3, [sp, #0]
 8109272:	6022      	str	r2, [r4, #0]
 8109274:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8109278:	4628      	mov	r0, r5
 810927a:	f7ff fecd 	bl	8109018 <__cvt>
 810927e:	9b06      	ldr	r3, [sp, #24]
 8109280:	9909      	ldr	r1, [sp, #36]	; 0x24
 8109282:	2b47      	cmp	r3, #71	; 0x47
 8109284:	4680      	mov	r8, r0
 8109286:	d108      	bne.n	810929a <_printf_float+0x142>
 8109288:	1cc8      	adds	r0, r1, #3
 810928a:	db02      	blt.n	8109292 <_printf_float+0x13a>
 810928c:	6863      	ldr	r3, [r4, #4]
 810928e:	4299      	cmp	r1, r3
 8109290:	dd41      	ble.n	8109316 <_printf_float+0x1be>
 8109292:	f1ab 0b02 	sub.w	fp, fp, #2
 8109296:	fa5f fb8b 	uxtb.w	fp, fp
 810929a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 810929e:	d820      	bhi.n	81092e2 <_printf_float+0x18a>
 81092a0:	3901      	subs	r1, #1
 81092a2:	465a      	mov	r2, fp
 81092a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 81092a8:	9109      	str	r1, [sp, #36]	; 0x24
 81092aa:	f7ff ff17 	bl	81090dc <__exponent>
 81092ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 81092b0:	1813      	adds	r3, r2, r0
 81092b2:	2a01      	cmp	r2, #1
 81092b4:	4681      	mov	r9, r0
 81092b6:	6123      	str	r3, [r4, #16]
 81092b8:	dc02      	bgt.n	81092c0 <_printf_float+0x168>
 81092ba:	6822      	ldr	r2, [r4, #0]
 81092bc:	07d2      	lsls	r2, r2, #31
 81092be:	d501      	bpl.n	81092c4 <_printf_float+0x16c>
 81092c0:	3301      	adds	r3, #1
 81092c2:	6123      	str	r3, [r4, #16]
 81092c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 81092c8:	2b00      	cmp	r3, #0
 81092ca:	d09c      	beq.n	8109206 <_printf_float+0xae>
 81092cc:	232d      	movs	r3, #45	; 0x2d
 81092ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81092d2:	e798      	b.n	8109206 <_printf_float+0xae>
 81092d4:	9a06      	ldr	r2, [sp, #24]
 81092d6:	2a47      	cmp	r2, #71	; 0x47
 81092d8:	d1be      	bne.n	8109258 <_printf_float+0x100>
 81092da:	2b00      	cmp	r3, #0
 81092dc:	d1bc      	bne.n	8109258 <_printf_float+0x100>
 81092de:	2301      	movs	r3, #1
 81092e0:	e7b9      	b.n	8109256 <_printf_float+0xfe>
 81092e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 81092e6:	d118      	bne.n	810931a <_printf_float+0x1c2>
 81092e8:	2900      	cmp	r1, #0
 81092ea:	6863      	ldr	r3, [r4, #4]
 81092ec:	dd0b      	ble.n	8109306 <_printf_float+0x1ae>
 81092ee:	6121      	str	r1, [r4, #16]
 81092f0:	b913      	cbnz	r3, 81092f8 <_printf_float+0x1a0>
 81092f2:	6822      	ldr	r2, [r4, #0]
 81092f4:	07d0      	lsls	r0, r2, #31
 81092f6:	d502      	bpl.n	81092fe <_printf_float+0x1a6>
 81092f8:	3301      	adds	r3, #1
 81092fa:	440b      	add	r3, r1
 81092fc:	6123      	str	r3, [r4, #16]
 81092fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8109300:	f04f 0900 	mov.w	r9, #0
 8109304:	e7de      	b.n	81092c4 <_printf_float+0x16c>
 8109306:	b913      	cbnz	r3, 810930e <_printf_float+0x1b6>
 8109308:	6822      	ldr	r2, [r4, #0]
 810930a:	07d2      	lsls	r2, r2, #31
 810930c:	d501      	bpl.n	8109312 <_printf_float+0x1ba>
 810930e:	3302      	adds	r3, #2
 8109310:	e7f4      	b.n	81092fc <_printf_float+0x1a4>
 8109312:	2301      	movs	r3, #1
 8109314:	e7f2      	b.n	81092fc <_printf_float+0x1a4>
 8109316:	f04f 0b67 	mov.w	fp, #103	; 0x67
 810931a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810931c:	4299      	cmp	r1, r3
 810931e:	db05      	blt.n	810932c <_printf_float+0x1d4>
 8109320:	6823      	ldr	r3, [r4, #0]
 8109322:	6121      	str	r1, [r4, #16]
 8109324:	07d8      	lsls	r0, r3, #31
 8109326:	d5ea      	bpl.n	81092fe <_printf_float+0x1a6>
 8109328:	1c4b      	adds	r3, r1, #1
 810932a:	e7e7      	b.n	81092fc <_printf_float+0x1a4>
 810932c:	2900      	cmp	r1, #0
 810932e:	bfd4      	ite	le
 8109330:	f1c1 0202 	rsble	r2, r1, #2
 8109334:	2201      	movgt	r2, #1
 8109336:	4413      	add	r3, r2
 8109338:	e7e0      	b.n	81092fc <_printf_float+0x1a4>
 810933a:	6823      	ldr	r3, [r4, #0]
 810933c:	055a      	lsls	r2, r3, #21
 810933e:	d407      	bmi.n	8109350 <_printf_float+0x1f8>
 8109340:	6923      	ldr	r3, [r4, #16]
 8109342:	4642      	mov	r2, r8
 8109344:	4631      	mov	r1, r6
 8109346:	4628      	mov	r0, r5
 8109348:	47b8      	blx	r7
 810934a:	3001      	adds	r0, #1
 810934c:	d12c      	bne.n	81093a8 <_printf_float+0x250>
 810934e:	e764      	b.n	810921a <_printf_float+0xc2>
 8109350:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8109354:	f240 80e0 	bls.w	8109518 <_printf_float+0x3c0>
 8109358:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810935c:	2200      	movs	r2, #0
 810935e:	2300      	movs	r3, #0
 8109360:	f7f7 fc3a 	bl	8100bd8 <__aeabi_dcmpeq>
 8109364:	2800      	cmp	r0, #0
 8109366:	d034      	beq.n	81093d2 <_printf_float+0x27a>
 8109368:	4a37      	ldr	r2, [pc, #220]	; (8109448 <_printf_float+0x2f0>)
 810936a:	2301      	movs	r3, #1
 810936c:	4631      	mov	r1, r6
 810936e:	4628      	mov	r0, r5
 8109370:	47b8      	blx	r7
 8109372:	3001      	adds	r0, #1
 8109374:	f43f af51 	beq.w	810921a <_printf_float+0xc2>
 8109378:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810937c:	429a      	cmp	r2, r3
 810937e:	db02      	blt.n	8109386 <_printf_float+0x22e>
 8109380:	6823      	ldr	r3, [r4, #0]
 8109382:	07d8      	lsls	r0, r3, #31
 8109384:	d510      	bpl.n	81093a8 <_printf_float+0x250>
 8109386:	ee18 3a10 	vmov	r3, s16
 810938a:	4652      	mov	r2, sl
 810938c:	4631      	mov	r1, r6
 810938e:	4628      	mov	r0, r5
 8109390:	47b8      	blx	r7
 8109392:	3001      	adds	r0, #1
 8109394:	f43f af41 	beq.w	810921a <_printf_float+0xc2>
 8109398:	f04f 0800 	mov.w	r8, #0
 810939c:	f104 091a 	add.w	r9, r4, #26
 81093a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81093a2:	3b01      	subs	r3, #1
 81093a4:	4543      	cmp	r3, r8
 81093a6:	dc09      	bgt.n	81093bc <_printf_float+0x264>
 81093a8:	6823      	ldr	r3, [r4, #0]
 81093aa:	079b      	lsls	r3, r3, #30
 81093ac:	f100 8105 	bmi.w	81095ba <_printf_float+0x462>
 81093b0:	68e0      	ldr	r0, [r4, #12]
 81093b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81093b4:	4298      	cmp	r0, r3
 81093b6:	bfb8      	it	lt
 81093b8:	4618      	movlt	r0, r3
 81093ba:	e730      	b.n	810921e <_printf_float+0xc6>
 81093bc:	2301      	movs	r3, #1
 81093be:	464a      	mov	r2, r9
 81093c0:	4631      	mov	r1, r6
 81093c2:	4628      	mov	r0, r5
 81093c4:	47b8      	blx	r7
 81093c6:	3001      	adds	r0, #1
 81093c8:	f43f af27 	beq.w	810921a <_printf_float+0xc2>
 81093cc:	f108 0801 	add.w	r8, r8, #1
 81093d0:	e7e6      	b.n	81093a0 <_printf_float+0x248>
 81093d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81093d4:	2b00      	cmp	r3, #0
 81093d6:	dc39      	bgt.n	810944c <_printf_float+0x2f4>
 81093d8:	4a1b      	ldr	r2, [pc, #108]	; (8109448 <_printf_float+0x2f0>)
 81093da:	2301      	movs	r3, #1
 81093dc:	4631      	mov	r1, r6
 81093de:	4628      	mov	r0, r5
 81093e0:	47b8      	blx	r7
 81093e2:	3001      	adds	r0, #1
 81093e4:	f43f af19 	beq.w	810921a <_printf_float+0xc2>
 81093e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81093ec:	4313      	orrs	r3, r2
 81093ee:	d102      	bne.n	81093f6 <_printf_float+0x29e>
 81093f0:	6823      	ldr	r3, [r4, #0]
 81093f2:	07d9      	lsls	r1, r3, #31
 81093f4:	d5d8      	bpl.n	81093a8 <_printf_float+0x250>
 81093f6:	ee18 3a10 	vmov	r3, s16
 81093fa:	4652      	mov	r2, sl
 81093fc:	4631      	mov	r1, r6
 81093fe:	4628      	mov	r0, r5
 8109400:	47b8      	blx	r7
 8109402:	3001      	adds	r0, #1
 8109404:	f43f af09 	beq.w	810921a <_printf_float+0xc2>
 8109408:	f04f 0900 	mov.w	r9, #0
 810940c:	f104 0a1a 	add.w	sl, r4, #26
 8109410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109412:	425b      	negs	r3, r3
 8109414:	454b      	cmp	r3, r9
 8109416:	dc01      	bgt.n	810941c <_printf_float+0x2c4>
 8109418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810941a:	e792      	b.n	8109342 <_printf_float+0x1ea>
 810941c:	2301      	movs	r3, #1
 810941e:	4652      	mov	r2, sl
 8109420:	4631      	mov	r1, r6
 8109422:	4628      	mov	r0, r5
 8109424:	47b8      	blx	r7
 8109426:	3001      	adds	r0, #1
 8109428:	f43f aef7 	beq.w	810921a <_printf_float+0xc2>
 810942c:	f109 0901 	add.w	r9, r9, #1
 8109430:	e7ee      	b.n	8109410 <_printf_float+0x2b8>
 8109432:	bf00      	nop
 8109434:	7fefffff 	.word	0x7fefffff
 8109438:	0810df3c 	.word	0x0810df3c
 810943c:	0810df40 	.word	0x0810df40
 8109440:	0810df48 	.word	0x0810df48
 8109444:	0810df44 	.word	0x0810df44
 8109448:	0810df4c 	.word	0x0810df4c
 810944c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810944e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8109450:	429a      	cmp	r2, r3
 8109452:	bfa8      	it	ge
 8109454:	461a      	movge	r2, r3
 8109456:	2a00      	cmp	r2, #0
 8109458:	4691      	mov	r9, r2
 810945a:	dc37      	bgt.n	81094cc <_printf_float+0x374>
 810945c:	f04f 0b00 	mov.w	fp, #0
 8109460:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8109464:	f104 021a 	add.w	r2, r4, #26
 8109468:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810946a:	9305      	str	r3, [sp, #20]
 810946c:	eba3 0309 	sub.w	r3, r3, r9
 8109470:	455b      	cmp	r3, fp
 8109472:	dc33      	bgt.n	81094dc <_printf_float+0x384>
 8109474:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8109478:	429a      	cmp	r2, r3
 810947a:	db3b      	blt.n	81094f4 <_printf_float+0x39c>
 810947c:	6823      	ldr	r3, [r4, #0]
 810947e:	07da      	lsls	r2, r3, #31
 8109480:	d438      	bmi.n	81094f4 <_printf_float+0x39c>
 8109482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109484:	9a05      	ldr	r2, [sp, #20]
 8109486:	9909      	ldr	r1, [sp, #36]	; 0x24
 8109488:	1a9a      	subs	r2, r3, r2
 810948a:	eba3 0901 	sub.w	r9, r3, r1
 810948e:	4591      	cmp	r9, r2
 8109490:	bfa8      	it	ge
 8109492:	4691      	movge	r9, r2
 8109494:	f1b9 0f00 	cmp.w	r9, #0
 8109498:	dc35      	bgt.n	8109506 <_printf_float+0x3ae>
 810949a:	f04f 0800 	mov.w	r8, #0
 810949e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 81094a2:	f104 0a1a 	add.w	sl, r4, #26
 81094a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81094aa:	1a9b      	subs	r3, r3, r2
 81094ac:	eba3 0309 	sub.w	r3, r3, r9
 81094b0:	4543      	cmp	r3, r8
 81094b2:	f77f af79 	ble.w	81093a8 <_printf_float+0x250>
 81094b6:	2301      	movs	r3, #1
 81094b8:	4652      	mov	r2, sl
 81094ba:	4631      	mov	r1, r6
 81094bc:	4628      	mov	r0, r5
 81094be:	47b8      	blx	r7
 81094c0:	3001      	adds	r0, #1
 81094c2:	f43f aeaa 	beq.w	810921a <_printf_float+0xc2>
 81094c6:	f108 0801 	add.w	r8, r8, #1
 81094ca:	e7ec      	b.n	81094a6 <_printf_float+0x34e>
 81094cc:	4613      	mov	r3, r2
 81094ce:	4631      	mov	r1, r6
 81094d0:	4642      	mov	r2, r8
 81094d2:	4628      	mov	r0, r5
 81094d4:	47b8      	blx	r7
 81094d6:	3001      	adds	r0, #1
 81094d8:	d1c0      	bne.n	810945c <_printf_float+0x304>
 81094da:	e69e      	b.n	810921a <_printf_float+0xc2>
 81094dc:	2301      	movs	r3, #1
 81094de:	4631      	mov	r1, r6
 81094e0:	4628      	mov	r0, r5
 81094e2:	9205      	str	r2, [sp, #20]
 81094e4:	47b8      	blx	r7
 81094e6:	3001      	adds	r0, #1
 81094e8:	f43f ae97 	beq.w	810921a <_printf_float+0xc2>
 81094ec:	9a05      	ldr	r2, [sp, #20]
 81094ee:	f10b 0b01 	add.w	fp, fp, #1
 81094f2:	e7b9      	b.n	8109468 <_printf_float+0x310>
 81094f4:	ee18 3a10 	vmov	r3, s16
 81094f8:	4652      	mov	r2, sl
 81094fa:	4631      	mov	r1, r6
 81094fc:	4628      	mov	r0, r5
 81094fe:	47b8      	blx	r7
 8109500:	3001      	adds	r0, #1
 8109502:	d1be      	bne.n	8109482 <_printf_float+0x32a>
 8109504:	e689      	b.n	810921a <_printf_float+0xc2>
 8109506:	9a05      	ldr	r2, [sp, #20]
 8109508:	464b      	mov	r3, r9
 810950a:	4442      	add	r2, r8
 810950c:	4631      	mov	r1, r6
 810950e:	4628      	mov	r0, r5
 8109510:	47b8      	blx	r7
 8109512:	3001      	adds	r0, #1
 8109514:	d1c1      	bne.n	810949a <_printf_float+0x342>
 8109516:	e680      	b.n	810921a <_printf_float+0xc2>
 8109518:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810951a:	2a01      	cmp	r2, #1
 810951c:	dc01      	bgt.n	8109522 <_printf_float+0x3ca>
 810951e:	07db      	lsls	r3, r3, #31
 8109520:	d538      	bpl.n	8109594 <_printf_float+0x43c>
 8109522:	2301      	movs	r3, #1
 8109524:	4642      	mov	r2, r8
 8109526:	4631      	mov	r1, r6
 8109528:	4628      	mov	r0, r5
 810952a:	47b8      	blx	r7
 810952c:	3001      	adds	r0, #1
 810952e:	f43f ae74 	beq.w	810921a <_printf_float+0xc2>
 8109532:	ee18 3a10 	vmov	r3, s16
 8109536:	4652      	mov	r2, sl
 8109538:	4631      	mov	r1, r6
 810953a:	4628      	mov	r0, r5
 810953c:	47b8      	blx	r7
 810953e:	3001      	adds	r0, #1
 8109540:	f43f ae6b 	beq.w	810921a <_printf_float+0xc2>
 8109544:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8109548:	2200      	movs	r2, #0
 810954a:	2300      	movs	r3, #0
 810954c:	f7f7 fb44 	bl	8100bd8 <__aeabi_dcmpeq>
 8109550:	b9d8      	cbnz	r0, 810958a <_printf_float+0x432>
 8109552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109554:	f108 0201 	add.w	r2, r8, #1
 8109558:	3b01      	subs	r3, #1
 810955a:	4631      	mov	r1, r6
 810955c:	4628      	mov	r0, r5
 810955e:	47b8      	blx	r7
 8109560:	3001      	adds	r0, #1
 8109562:	d10e      	bne.n	8109582 <_printf_float+0x42a>
 8109564:	e659      	b.n	810921a <_printf_float+0xc2>
 8109566:	2301      	movs	r3, #1
 8109568:	4652      	mov	r2, sl
 810956a:	4631      	mov	r1, r6
 810956c:	4628      	mov	r0, r5
 810956e:	47b8      	blx	r7
 8109570:	3001      	adds	r0, #1
 8109572:	f43f ae52 	beq.w	810921a <_printf_float+0xc2>
 8109576:	f108 0801 	add.w	r8, r8, #1
 810957a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810957c:	3b01      	subs	r3, #1
 810957e:	4543      	cmp	r3, r8
 8109580:	dcf1      	bgt.n	8109566 <_printf_float+0x40e>
 8109582:	464b      	mov	r3, r9
 8109584:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8109588:	e6dc      	b.n	8109344 <_printf_float+0x1ec>
 810958a:	f04f 0800 	mov.w	r8, #0
 810958e:	f104 0a1a 	add.w	sl, r4, #26
 8109592:	e7f2      	b.n	810957a <_printf_float+0x422>
 8109594:	2301      	movs	r3, #1
 8109596:	4642      	mov	r2, r8
 8109598:	e7df      	b.n	810955a <_printf_float+0x402>
 810959a:	2301      	movs	r3, #1
 810959c:	464a      	mov	r2, r9
 810959e:	4631      	mov	r1, r6
 81095a0:	4628      	mov	r0, r5
 81095a2:	47b8      	blx	r7
 81095a4:	3001      	adds	r0, #1
 81095a6:	f43f ae38 	beq.w	810921a <_printf_float+0xc2>
 81095aa:	f108 0801 	add.w	r8, r8, #1
 81095ae:	68e3      	ldr	r3, [r4, #12]
 81095b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 81095b2:	1a5b      	subs	r3, r3, r1
 81095b4:	4543      	cmp	r3, r8
 81095b6:	dcf0      	bgt.n	810959a <_printf_float+0x442>
 81095b8:	e6fa      	b.n	81093b0 <_printf_float+0x258>
 81095ba:	f04f 0800 	mov.w	r8, #0
 81095be:	f104 0919 	add.w	r9, r4, #25
 81095c2:	e7f4      	b.n	81095ae <_printf_float+0x456>

081095c4 <_printf_common>:
 81095c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81095c8:	4616      	mov	r6, r2
 81095ca:	4699      	mov	r9, r3
 81095cc:	688a      	ldr	r2, [r1, #8]
 81095ce:	690b      	ldr	r3, [r1, #16]
 81095d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 81095d4:	4293      	cmp	r3, r2
 81095d6:	bfb8      	it	lt
 81095d8:	4613      	movlt	r3, r2
 81095da:	6033      	str	r3, [r6, #0]
 81095dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 81095e0:	4607      	mov	r7, r0
 81095e2:	460c      	mov	r4, r1
 81095e4:	b10a      	cbz	r2, 81095ea <_printf_common+0x26>
 81095e6:	3301      	adds	r3, #1
 81095e8:	6033      	str	r3, [r6, #0]
 81095ea:	6823      	ldr	r3, [r4, #0]
 81095ec:	0699      	lsls	r1, r3, #26
 81095ee:	bf42      	ittt	mi
 81095f0:	6833      	ldrmi	r3, [r6, #0]
 81095f2:	3302      	addmi	r3, #2
 81095f4:	6033      	strmi	r3, [r6, #0]
 81095f6:	6825      	ldr	r5, [r4, #0]
 81095f8:	f015 0506 	ands.w	r5, r5, #6
 81095fc:	d106      	bne.n	810960c <_printf_common+0x48>
 81095fe:	f104 0a19 	add.w	sl, r4, #25
 8109602:	68e3      	ldr	r3, [r4, #12]
 8109604:	6832      	ldr	r2, [r6, #0]
 8109606:	1a9b      	subs	r3, r3, r2
 8109608:	42ab      	cmp	r3, r5
 810960a:	dc26      	bgt.n	810965a <_printf_common+0x96>
 810960c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8109610:	1e13      	subs	r3, r2, #0
 8109612:	6822      	ldr	r2, [r4, #0]
 8109614:	bf18      	it	ne
 8109616:	2301      	movne	r3, #1
 8109618:	0692      	lsls	r2, r2, #26
 810961a:	d42b      	bmi.n	8109674 <_printf_common+0xb0>
 810961c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8109620:	4649      	mov	r1, r9
 8109622:	4638      	mov	r0, r7
 8109624:	47c0      	blx	r8
 8109626:	3001      	adds	r0, #1
 8109628:	d01e      	beq.n	8109668 <_printf_common+0xa4>
 810962a:	6823      	ldr	r3, [r4, #0]
 810962c:	68e5      	ldr	r5, [r4, #12]
 810962e:	6832      	ldr	r2, [r6, #0]
 8109630:	f003 0306 	and.w	r3, r3, #6
 8109634:	2b04      	cmp	r3, #4
 8109636:	bf08      	it	eq
 8109638:	1aad      	subeq	r5, r5, r2
 810963a:	68a3      	ldr	r3, [r4, #8]
 810963c:	6922      	ldr	r2, [r4, #16]
 810963e:	bf0c      	ite	eq
 8109640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8109644:	2500      	movne	r5, #0
 8109646:	4293      	cmp	r3, r2
 8109648:	bfc4      	itt	gt
 810964a:	1a9b      	subgt	r3, r3, r2
 810964c:	18ed      	addgt	r5, r5, r3
 810964e:	2600      	movs	r6, #0
 8109650:	341a      	adds	r4, #26
 8109652:	42b5      	cmp	r5, r6
 8109654:	d11a      	bne.n	810968c <_printf_common+0xc8>
 8109656:	2000      	movs	r0, #0
 8109658:	e008      	b.n	810966c <_printf_common+0xa8>
 810965a:	2301      	movs	r3, #1
 810965c:	4652      	mov	r2, sl
 810965e:	4649      	mov	r1, r9
 8109660:	4638      	mov	r0, r7
 8109662:	47c0      	blx	r8
 8109664:	3001      	adds	r0, #1
 8109666:	d103      	bne.n	8109670 <_printf_common+0xac>
 8109668:	f04f 30ff 	mov.w	r0, #4294967295
 810966c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109670:	3501      	adds	r5, #1
 8109672:	e7c6      	b.n	8109602 <_printf_common+0x3e>
 8109674:	18e1      	adds	r1, r4, r3
 8109676:	1c5a      	adds	r2, r3, #1
 8109678:	2030      	movs	r0, #48	; 0x30
 810967a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 810967e:	4422      	add	r2, r4
 8109680:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8109684:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8109688:	3302      	adds	r3, #2
 810968a:	e7c7      	b.n	810961c <_printf_common+0x58>
 810968c:	2301      	movs	r3, #1
 810968e:	4622      	mov	r2, r4
 8109690:	4649      	mov	r1, r9
 8109692:	4638      	mov	r0, r7
 8109694:	47c0      	blx	r8
 8109696:	3001      	adds	r0, #1
 8109698:	d0e6      	beq.n	8109668 <_printf_common+0xa4>
 810969a:	3601      	adds	r6, #1
 810969c:	e7d9      	b.n	8109652 <_printf_common+0x8e>
	...

081096a0 <_printf_i>:
 81096a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 81096a4:	7e0f      	ldrb	r7, [r1, #24]
 81096a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 81096a8:	2f78      	cmp	r7, #120	; 0x78
 81096aa:	4691      	mov	r9, r2
 81096ac:	4680      	mov	r8, r0
 81096ae:	460c      	mov	r4, r1
 81096b0:	469a      	mov	sl, r3
 81096b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 81096b6:	d807      	bhi.n	81096c8 <_printf_i+0x28>
 81096b8:	2f62      	cmp	r7, #98	; 0x62
 81096ba:	d80a      	bhi.n	81096d2 <_printf_i+0x32>
 81096bc:	2f00      	cmp	r7, #0
 81096be:	f000 80d8 	beq.w	8109872 <_printf_i+0x1d2>
 81096c2:	2f58      	cmp	r7, #88	; 0x58
 81096c4:	f000 80a3 	beq.w	810980e <_printf_i+0x16e>
 81096c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 81096cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 81096d0:	e03a      	b.n	8109748 <_printf_i+0xa8>
 81096d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 81096d6:	2b15      	cmp	r3, #21
 81096d8:	d8f6      	bhi.n	81096c8 <_printf_i+0x28>
 81096da:	a101      	add	r1, pc, #4	; (adr r1, 81096e0 <_printf_i+0x40>)
 81096dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 81096e0:	08109739 	.word	0x08109739
 81096e4:	0810974d 	.word	0x0810974d
 81096e8:	081096c9 	.word	0x081096c9
 81096ec:	081096c9 	.word	0x081096c9
 81096f0:	081096c9 	.word	0x081096c9
 81096f4:	081096c9 	.word	0x081096c9
 81096f8:	0810974d 	.word	0x0810974d
 81096fc:	081096c9 	.word	0x081096c9
 8109700:	081096c9 	.word	0x081096c9
 8109704:	081096c9 	.word	0x081096c9
 8109708:	081096c9 	.word	0x081096c9
 810970c:	08109859 	.word	0x08109859
 8109710:	0810977d 	.word	0x0810977d
 8109714:	0810983b 	.word	0x0810983b
 8109718:	081096c9 	.word	0x081096c9
 810971c:	081096c9 	.word	0x081096c9
 8109720:	0810987b 	.word	0x0810987b
 8109724:	081096c9 	.word	0x081096c9
 8109728:	0810977d 	.word	0x0810977d
 810972c:	081096c9 	.word	0x081096c9
 8109730:	081096c9 	.word	0x081096c9
 8109734:	08109843 	.word	0x08109843
 8109738:	682b      	ldr	r3, [r5, #0]
 810973a:	1d1a      	adds	r2, r3, #4
 810973c:	681b      	ldr	r3, [r3, #0]
 810973e:	602a      	str	r2, [r5, #0]
 8109740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8109744:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8109748:	2301      	movs	r3, #1
 810974a:	e0a3      	b.n	8109894 <_printf_i+0x1f4>
 810974c:	6820      	ldr	r0, [r4, #0]
 810974e:	6829      	ldr	r1, [r5, #0]
 8109750:	0606      	lsls	r6, r0, #24
 8109752:	f101 0304 	add.w	r3, r1, #4
 8109756:	d50a      	bpl.n	810976e <_printf_i+0xce>
 8109758:	680e      	ldr	r6, [r1, #0]
 810975a:	602b      	str	r3, [r5, #0]
 810975c:	2e00      	cmp	r6, #0
 810975e:	da03      	bge.n	8109768 <_printf_i+0xc8>
 8109760:	232d      	movs	r3, #45	; 0x2d
 8109762:	4276      	negs	r6, r6
 8109764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8109768:	485e      	ldr	r0, [pc, #376]	; (81098e4 <_printf_i+0x244>)
 810976a:	230a      	movs	r3, #10
 810976c:	e019      	b.n	81097a2 <_printf_i+0x102>
 810976e:	680e      	ldr	r6, [r1, #0]
 8109770:	602b      	str	r3, [r5, #0]
 8109772:	f010 0f40 	tst.w	r0, #64	; 0x40
 8109776:	bf18      	it	ne
 8109778:	b236      	sxthne	r6, r6
 810977a:	e7ef      	b.n	810975c <_printf_i+0xbc>
 810977c:	682b      	ldr	r3, [r5, #0]
 810977e:	6820      	ldr	r0, [r4, #0]
 8109780:	1d19      	adds	r1, r3, #4
 8109782:	6029      	str	r1, [r5, #0]
 8109784:	0601      	lsls	r1, r0, #24
 8109786:	d501      	bpl.n	810978c <_printf_i+0xec>
 8109788:	681e      	ldr	r6, [r3, #0]
 810978a:	e002      	b.n	8109792 <_printf_i+0xf2>
 810978c:	0646      	lsls	r6, r0, #25
 810978e:	d5fb      	bpl.n	8109788 <_printf_i+0xe8>
 8109790:	881e      	ldrh	r6, [r3, #0]
 8109792:	4854      	ldr	r0, [pc, #336]	; (81098e4 <_printf_i+0x244>)
 8109794:	2f6f      	cmp	r7, #111	; 0x6f
 8109796:	bf0c      	ite	eq
 8109798:	2308      	moveq	r3, #8
 810979a:	230a      	movne	r3, #10
 810979c:	2100      	movs	r1, #0
 810979e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 81097a2:	6865      	ldr	r5, [r4, #4]
 81097a4:	60a5      	str	r5, [r4, #8]
 81097a6:	2d00      	cmp	r5, #0
 81097a8:	bfa2      	ittt	ge
 81097aa:	6821      	ldrge	r1, [r4, #0]
 81097ac:	f021 0104 	bicge.w	r1, r1, #4
 81097b0:	6021      	strge	r1, [r4, #0]
 81097b2:	b90e      	cbnz	r6, 81097b8 <_printf_i+0x118>
 81097b4:	2d00      	cmp	r5, #0
 81097b6:	d04d      	beq.n	8109854 <_printf_i+0x1b4>
 81097b8:	4615      	mov	r5, r2
 81097ba:	fbb6 f1f3 	udiv	r1, r6, r3
 81097be:	fb03 6711 	mls	r7, r3, r1, r6
 81097c2:	5dc7      	ldrb	r7, [r0, r7]
 81097c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 81097c8:	4637      	mov	r7, r6
 81097ca:	42bb      	cmp	r3, r7
 81097cc:	460e      	mov	r6, r1
 81097ce:	d9f4      	bls.n	81097ba <_printf_i+0x11a>
 81097d0:	2b08      	cmp	r3, #8
 81097d2:	d10b      	bne.n	81097ec <_printf_i+0x14c>
 81097d4:	6823      	ldr	r3, [r4, #0]
 81097d6:	07de      	lsls	r6, r3, #31
 81097d8:	d508      	bpl.n	81097ec <_printf_i+0x14c>
 81097da:	6923      	ldr	r3, [r4, #16]
 81097dc:	6861      	ldr	r1, [r4, #4]
 81097de:	4299      	cmp	r1, r3
 81097e0:	bfde      	ittt	le
 81097e2:	2330      	movle	r3, #48	; 0x30
 81097e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 81097e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 81097ec:	1b52      	subs	r2, r2, r5
 81097ee:	6122      	str	r2, [r4, #16]
 81097f0:	f8cd a000 	str.w	sl, [sp]
 81097f4:	464b      	mov	r3, r9
 81097f6:	aa03      	add	r2, sp, #12
 81097f8:	4621      	mov	r1, r4
 81097fa:	4640      	mov	r0, r8
 81097fc:	f7ff fee2 	bl	81095c4 <_printf_common>
 8109800:	3001      	adds	r0, #1
 8109802:	d14c      	bne.n	810989e <_printf_i+0x1fe>
 8109804:	f04f 30ff 	mov.w	r0, #4294967295
 8109808:	b004      	add	sp, #16
 810980a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810980e:	4835      	ldr	r0, [pc, #212]	; (81098e4 <_printf_i+0x244>)
 8109810:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8109814:	6829      	ldr	r1, [r5, #0]
 8109816:	6823      	ldr	r3, [r4, #0]
 8109818:	f851 6b04 	ldr.w	r6, [r1], #4
 810981c:	6029      	str	r1, [r5, #0]
 810981e:	061d      	lsls	r5, r3, #24
 8109820:	d514      	bpl.n	810984c <_printf_i+0x1ac>
 8109822:	07df      	lsls	r7, r3, #31
 8109824:	bf44      	itt	mi
 8109826:	f043 0320 	orrmi.w	r3, r3, #32
 810982a:	6023      	strmi	r3, [r4, #0]
 810982c:	b91e      	cbnz	r6, 8109836 <_printf_i+0x196>
 810982e:	6823      	ldr	r3, [r4, #0]
 8109830:	f023 0320 	bic.w	r3, r3, #32
 8109834:	6023      	str	r3, [r4, #0]
 8109836:	2310      	movs	r3, #16
 8109838:	e7b0      	b.n	810979c <_printf_i+0xfc>
 810983a:	6823      	ldr	r3, [r4, #0]
 810983c:	f043 0320 	orr.w	r3, r3, #32
 8109840:	6023      	str	r3, [r4, #0]
 8109842:	2378      	movs	r3, #120	; 0x78
 8109844:	4828      	ldr	r0, [pc, #160]	; (81098e8 <_printf_i+0x248>)
 8109846:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 810984a:	e7e3      	b.n	8109814 <_printf_i+0x174>
 810984c:	0659      	lsls	r1, r3, #25
 810984e:	bf48      	it	mi
 8109850:	b2b6      	uxthmi	r6, r6
 8109852:	e7e6      	b.n	8109822 <_printf_i+0x182>
 8109854:	4615      	mov	r5, r2
 8109856:	e7bb      	b.n	81097d0 <_printf_i+0x130>
 8109858:	682b      	ldr	r3, [r5, #0]
 810985a:	6826      	ldr	r6, [r4, #0]
 810985c:	6961      	ldr	r1, [r4, #20]
 810985e:	1d18      	adds	r0, r3, #4
 8109860:	6028      	str	r0, [r5, #0]
 8109862:	0635      	lsls	r5, r6, #24
 8109864:	681b      	ldr	r3, [r3, #0]
 8109866:	d501      	bpl.n	810986c <_printf_i+0x1cc>
 8109868:	6019      	str	r1, [r3, #0]
 810986a:	e002      	b.n	8109872 <_printf_i+0x1d2>
 810986c:	0670      	lsls	r0, r6, #25
 810986e:	d5fb      	bpl.n	8109868 <_printf_i+0x1c8>
 8109870:	8019      	strh	r1, [r3, #0]
 8109872:	2300      	movs	r3, #0
 8109874:	6123      	str	r3, [r4, #16]
 8109876:	4615      	mov	r5, r2
 8109878:	e7ba      	b.n	81097f0 <_printf_i+0x150>
 810987a:	682b      	ldr	r3, [r5, #0]
 810987c:	1d1a      	adds	r2, r3, #4
 810987e:	602a      	str	r2, [r5, #0]
 8109880:	681d      	ldr	r5, [r3, #0]
 8109882:	6862      	ldr	r2, [r4, #4]
 8109884:	2100      	movs	r1, #0
 8109886:	4628      	mov	r0, r5
 8109888:	f7f6 fd32 	bl	81002f0 <memchr>
 810988c:	b108      	cbz	r0, 8109892 <_printf_i+0x1f2>
 810988e:	1b40      	subs	r0, r0, r5
 8109890:	6060      	str	r0, [r4, #4]
 8109892:	6863      	ldr	r3, [r4, #4]
 8109894:	6123      	str	r3, [r4, #16]
 8109896:	2300      	movs	r3, #0
 8109898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810989c:	e7a8      	b.n	81097f0 <_printf_i+0x150>
 810989e:	6923      	ldr	r3, [r4, #16]
 81098a0:	462a      	mov	r2, r5
 81098a2:	4649      	mov	r1, r9
 81098a4:	4640      	mov	r0, r8
 81098a6:	47d0      	blx	sl
 81098a8:	3001      	adds	r0, #1
 81098aa:	d0ab      	beq.n	8109804 <_printf_i+0x164>
 81098ac:	6823      	ldr	r3, [r4, #0]
 81098ae:	079b      	lsls	r3, r3, #30
 81098b0:	d413      	bmi.n	81098da <_printf_i+0x23a>
 81098b2:	68e0      	ldr	r0, [r4, #12]
 81098b4:	9b03      	ldr	r3, [sp, #12]
 81098b6:	4298      	cmp	r0, r3
 81098b8:	bfb8      	it	lt
 81098ba:	4618      	movlt	r0, r3
 81098bc:	e7a4      	b.n	8109808 <_printf_i+0x168>
 81098be:	2301      	movs	r3, #1
 81098c0:	4632      	mov	r2, r6
 81098c2:	4649      	mov	r1, r9
 81098c4:	4640      	mov	r0, r8
 81098c6:	47d0      	blx	sl
 81098c8:	3001      	adds	r0, #1
 81098ca:	d09b      	beq.n	8109804 <_printf_i+0x164>
 81098cc:	3501      	adds	r5, #1
 81098ce:	68e3      	ldr	r3, [r4, #12]
 81098d0:	9903      	ldr	r1, [sp, #12]
 81098d2:	1a5b      	subs	r3, r3, r1
 81098d4:	42ab      	cmp	r3, r5
 81098d6:	dcf2      	bgt.n	81098be <_printf_i+0x21e>
 81098d8:	e7eb      	b.n	81098b2 <_printf_i+0x212>
 81098da:	2500      	movs	r5, #0
 81098dc:	f104 0619 	add.w	r6, r4, #25
 81098e0:	e7f5      	b.n	81098ce <_printf_i+0x22e>
 81098e2:	bf00      	nop
 81098e4:	0810df4e 	.word	0x0810df4e
 81098e8:	0810df5f 	.word	0x0810df5f

081098ec <_scanf_float>:
 81098ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81098f0:	b087      	sub	sp, #28
 81098f2:	4617      	mov	r7, r2
 81098f4:	9303      	str	r3, [sp, #12]
 81098f6:	688b      	ldr	r3, [r1, #8]
 81098f8:	1e5a      	subs	r2, r3, #1
 81098fa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 81098fe:	bf83      	ittte	hi
 8109900:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8109904:	195b      	addhi	r3, r3, r5
 8109906:	9302      	strhi	r3, [sp, #8]
 8109908:	2300      	movls	r3, #0
 810990a:	bf86      	itte	hi
 810990c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8109910:	608b      	strhi	r3, [r1, #8]
 8109912:	9302      	strls	r3, [sp, #8]
 8109914:	680b      	ldr	r3, [r1, #0]
 8109916:	468b      	mov	fp, r1
 8109918:	2500      	movs	r5, #0
 810991a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 810991e:	f84b 3b1c 	str.w	r3, [fp], #28
 8109922:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8109926:	4680      	mov	r8, r0
 8109928:	460c      	mov	r4, r1
 810992a:	465e      	mov	r6, fp
 810992c:	46aa      	mov	sl, r5
 810992e:	46a9      	mov	r9, r5
 8109930:	9501      	str	r5, [sp, #4]
 8109932:	68a2      	ldr	r2, [r4, #8]
 8109934:	b152      	cbz	r2, 810994c <_scanf_float+0x60>
 8109936:	683b      	ldr	r3, [r7, #0]
 8109938:	781b      	ldrb	r3, [r3, #0]
 810993a:	2b4e      	cmp	r3, #78	; 0x4e
 810993c:	d864      	bhi.n	8109a08 <_scanf_float+0x11c>
 810993e:	2b40      	cmp	r3, #64	; 0x40
 8109940:	d83c      	bhi.n	81099bc <_scanf_float+0xd0>
 8109942:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8109946:	b2c8      	uxtb	r0, r1
 8109948:	280e      	cmp	r0, #14
 810994a:	d93a      	bls.n	81099c2 <_scanf_float+0xd6>
 810994c:	f1b9 0f00 	cmp.w	r9, #0
 8109950:	d003      	beq.n	810995a <_scanf_float+0x6e>
 8109952:	6823      	ldr	r3, [r4, #0]
 8109954:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8109958:	6023      	str	r3, [r4, #0]
 810995a:	f10a 3aff 	add.w	sl, sl, #4294967295
 810995e:	f1ba 0f01 	cmp.w	sl, #1
 8109962:	f200 8113 	bhi.w	8109b8c <_scanf_float+0x2a0>
 8109966:	455e      	cmp	r6, fp
 8109968:	f200 8105 	bhi.w	8109b76 <_scanf_float+0x28a>
 810996c:	2501      	movs	r5, #1
 810996e:	4628      	mov	r0, r5
 8109970:	b007      	add	sp, #28
 8109972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109976:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 810997a:	2a0d      	cmp	r2, #13
 810997c:	d8e6      	bhi.n	810994c <_scanf_float+0x60>
 810997e:	a101      	add	r1, pc, #4	; (adr r1, 8109984 <_scanf_float+0x98>)
 8109980:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8109984:	08109ac3 	.word	0x08109ac3
 8109988:	0810994d 	.word	0x0810994d
 810998c:	0810994d 	.word	0x0810994d
 8109990:	0810994d 	.word	0x0810994d
 8109994:	08109b23 	.word	0x08109b23
 8109998:	08109afb 	.word	0x08109afb
 810999c:	0810994d 	.word	0x0810994d
 81099a0:	0810994d 	.word	0x0810994d
 81099a4:	08109ad1 	.word	0x08109ad1
 81099a8:	0810994d 	.word	0x0810994d
 81099ac:	0810994d 	.word	0x0810994d
 81099b0:	0810994d 	.word	0x0810994d
 81099b4:	0810994d 	.word	0x0810994d
 81099b8:	08109a89 	.word	0x08109a89
 81099bc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 81099c0:	e7db      	b.n	810997a <_scanf_float+0x8e>
 81099c2:	290e      	cmp	r1, #14
 81099c4:	d8c2      	bhi.n	810994c <_scanf_float+0x60>
 81099c6:	a001      	add	r0, pc, #4	; (adr r0, 81099cc <_scanf_float+0xe0>)
 81099c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 81099cc:	08109a7b 	.word	0x08109a7b
 81099d0:	0810994d 	.word	0x0810994d
 81099d4:	08109a7b 	.word	0x08109a7b
 81099d8:	08109b0f 	.word	0x08109b0f
 81099dc:	0810994d 	.word	0x0810994d
 81099e0:	08109a29 	.word	0x08109a29
 81099e4:	08109a65 	.word	0x08109a65
 81099e8:	08109a65 	.word	0x08109a65
 81099ec:	08109a65 	.word	0x08109a65
 81099f0:	08109a65 	.word	0x08109a65
 81099f4:	08109a65 	.word	0x08109a65
 81099f8:	08109a65 	.word	0x08109a65
 81099fc:	08109a65 	.word	0x08109a65
 8109a00:	08109a65 	.word	0x08109a65
 8109a04:	08109a65 	.word	0x08109a65
 8109a08:	2b6e      	cmp	r3, #110	; 0x6e
 8109a0a:	d809      	bhi.n	8109a20 <_scanf_float+0x134>
 8109a0c:	2b60      	cmp	r3, #96	; 0x60
 8109a0e:	d8b2      	bhi.n	8109976 <_scanf_float+0x8a>
 8109a10:	2b54      	cmp	r3, #84	; 0x54
 8109a12:	d077      	beq.n	8109b04 <_scanf_float+0x218>
 8109a14:	2b59      	cmp	r3, #89	; 0x59
 8109a16:	d199      	bne.n	810994c <_scanf_float+0x60>
 8109a18:	2d07      	cmp	r5, #7
 8109a1a:	d197      	bne.n	810994c <_scanf_float+0x60>
 8109a1c:	2508      	movs	r5, #8
 8109a1e:	e029      	b.n	8109a74 <_scanf_float+0x188>
 8109a20:	2b74      	cmp	r3, #116	; 0x74
 8109a22:	d06f      	beq.n	8109b04 <_scanf_float+0x218>
 8109a24:	2b79      	cmp	r3, #121	; 0x79
 8109a26:	e7f6      	b.n	8109a16 <_scanf_float+0x12a>
 8109a28:	6821      	ldr	r1, [r4, #0]
 8109a2a:	05c8      	lsls	r0, r1, #23
 8109a2c:	d51a      	bpl.n	8109a64 <_scanf_float+0x178>
 8109a2e:	9b02      	ldr	r3, [sp, #8]
 8109a30:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8109a34:	6021      	str	r1, [r4, #0]
 8109a36:	f109 0901 	add.w	r9, r9, #1
 8109a3a:	b11b      	cbz	r3, 8109a44 <_scanf_float+0x158>
 8109a3c:	3b01      	subs	r3, #1
 8109a3e:	3201      	adds	r2, #1
 8109a40:	9302      	str	r3, [sp, #8]
 8109a42:	60a2      	str	r2, [r4, #8]
 8109a44:	68a3      	ldr	r3, [r4, #8]
 8109a46:	3b01      	subs	r3, #1
 8109a48:	60a3      	str	r3, [r4, #8]
 8109a4a:	6923      	ldr	r3, [r4, #16]
 8109a4c:	3301      	adds	r3, #1
 8109a4e:	6123      	str	r3, [r4, #16]
 8109a50:	687b      	ldr	r3, [r7, #4]
 8109a52:	3b01      	subs	r3, #1
 8109a54:	2b00      	cmp	r3, #0
 8109a56:	607b      	str	r3, [r7, #4]
 8109a58:	f340 8084 	ble.w	8109b64 <_scanf_float+0x278>
 8109a5c:	683b      	ldr	r3, [r7, #0]
 8109a5e:	3301      	adds	r3, #1
 8109a60:	603b      	str	r3, [r7, #0]
 8109a62:	e766      	b.n	8109932 <_scanf_float+0x46>
 8109a64:	eb1a 0f05 	cmn.w	sl, r5
 8109a68:	f47f af70 	bne.w	810994c <_scanf_float+0x60>
 8109a6c:	6822      	ldr	r2, [r4, #0]
 8109a6e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8109a72:	6022      	str	r2, [r4, #0]
 8109a74:	f806 3b01 	strb.w	r3, [r6], #1
 8109a78:	e7e4      	b.n	8109a44 <_scanf_float+0x158>
 8109a7a:	6822      	ldr	r2, [r4, #0]
 8109a7c:	0610      	lsls	r0, r2, #24
 8109a7e:	f57f af65 	bpl.w	810994c <_scanf_float+0x60>
 8109a82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8109a86:	e7f4      	b.n	8109a72 <_scanf_float+0x186>
 8109a88:	f1ba 0f00 	cmp.w	sl, #0
 8109a8c:	d10e      	bne.n	8109aac <_scanf_float+0x1c0>
 8109a8e:	f1b9 0f00 	cmp.w	r9, #0
 8109a92:	d10e      	bne.n	8109ab2 <_scanf_float+0x1c6>
 8109a94:	6822      	ldr	r2, [r4, #0]
 8109a96:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8109a9a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8109a9e:	d108      	bne.n	8109ab2 <_scanf_float+0x1c6>
 8109aa0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8109aa4:	6022      	str	r2, [r4, #0]
 8109aa6:	f04f 0a01 	mov.w	sl, #1
 8109aaa:	e7e3      	b.n	8109a74 <_scanf_float+0x188>
 8109aac:	f1ba 0f02 	cmp.w	sl, #2
 8109ab0:	d055      	beq.n	8109b5e <_scanf_float+0x272>
 8109ab2:	2d01      	cmp	r5, #1
 8109ab4:	d002      	beq.n	8109abc <_scanf_float+0x1d0>
 8109ab6:	2d04      	cmp	r5, #4
 8109ab8:	f47f af48 	bne.w	810994c <_scanf_float+0x60>
 8109abc:	3501      	adds	r5, #1
 8109abe:	b2ed      	uxtb	r5, r5
 8109ac0:	e7d8      	b.n	8109a74 <_scanf_float+0x188>
 8109ac2:	f1ba 0f01 	cmp.w	sl, #1
 8109ac6:	f47f af41 	bne.w	810994c <_scanf_float+0x60>
 8109aca:	f04f 0a02 	mov.w	sl, #2
 8109ace:	e7d1      	b.n	8109a74 <_scanf_float+0x188>
 8109ad0:	b97d      	cbnz	r5, 8109af2 <_scanf_float+0x206>
 8109ad2:	f1b9 0f00 	cmp.w	r9, #0
 8109ad6:	f47f af3c 	bne.w	8109952 <_scanf_float+0x66>
 8109ada:	6822      	ldr	r2, [r4, #0]
 8109adc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8109ae0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8109ae4:	f47f af39 	bne.w	810995a <_scanf_float+0x6e>
 8109ae8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8109aec:	6022      	str	r2, [r4, #0]
 8109aee:	2501      	movs	r5, #1
 8109af0:	e7c0      	b.n	8109a74 <_scanf_float+0x188>
 8109af2:	2d03      	cmp	r5, #3
 8109af4:	d0e2      	beq.n	8109abc <_scanf_float+0x1d0>
 8109af6:	2d05      	cmp	r5, #5
 8109af8:	e7de      	b.n	8109ab8 <_scanf_float+0x1cc>
 8109afa:	2d02      	cmp	r5, #2
 8109afc:	f47f af26 	bne.w	810994c <_scanf_float+0x60>
 8109b00:	2503      	movs	r5, #3
 8109b02:	e7b7      	b.n	8109a74 <_scanf_float+0x188>
 8109b04:	2d06      	cmp	r5, #6
 8109b06:	f47f af21 	bne.w	810994c <_scanf_float+0x60>
 8109b0a:	2507      	movs	r5, #7
 8109b0c:	e7b2      	b.n	8109a74 <_scanf_float+0x188>
 8109b0e:	6822      	ldr	r2, [r4, #0]
 8109b10:	0591      	lsls	r1, r2, #22
 8109b12:	f57f af1b 	bpl.w	810994c <_scanf_float+0x60>
 8109b16:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8109b1a:	6022      	str	r2, [r4, #0]
 8109b1c:	f8cd 9004 	str.w	r9, [sp, #4]
 8109b20:	e7a8      	b.n	8109a74 <_scanf_float+0x188>
 8109b22:	6822      	ldr	r2, [r4, #0]
 8109b24:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8109b28:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8109b2c:	d006      	beq.n	8109b3c <_scanf_float+0x250>
 8109b2e:	0550      	lsls	r0, r2, #21
 8109b30:	f57f af0c 	bpl.w	810994c <_scanf_float+0x60>
 8109b34:	f1b9 0f00 	cmp.w	r9, #0
 8109b38:	f43f af0f 	beq.w	810995a <_scanf_float+0x6e>
 8109b3c:	0591      	lsls	r1, r2, #22
 8109b3e:	bf58      	it	pl
 8109b40:	9901      	ldrpl	r1, [sp, #4]
 8109b42:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8109b46:	bf58      	it	pl
 8109b48:	eba9 0101 	subpl.w	r1, r9, r1
 8109b4c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8109b50:	bf58      	it	pl
 8109b52:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8109b56:	6022      	str	r2, [r4, #0]
 8109b58:	f04f 0900 	mov.w	r9, #0
 8109b5c:	e78a      	b.n	8109a74 <_scanf_float+0x188>
 8109b5e:	f04f 0a03 	mov.w	sl, #3
 8109b62:	e787      	b.n	8109a74 <_scanf_float+0x188>
 8109b64:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8109b68:	4639      	mov	r1, r7
 8109b6a:	4640      	mov	r0, r8
 8109b6c:	4798      	blx	r3
 8109b6e:	2800      	cmp	r0, #0
 8109b70:	f43f aedf 	beq.w	8109932 <_scanf_float+0x46>
 8109b74:	e6ea      	b.n	810994c <_scanf_float+0x60>
 8109b76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109b7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8109b7e:	463a      	mov	r2, r7
 8109b80:	4640      	mov	r0, r8
 8109b82:	4798      	blx	r3
 8109b84:	6923      	ldr	r3, [r4, #16]
 8109b86:	3b01      	subs	r3, #1
 8109b88:	6123      	str	r3, [r4, #16]
 8109b8a:	e6ec      	b.n	8109966 <_scanf_float+0x7a>
 8109b8c:	1e6b      	subs	r3, r5, #1
 8109b8e:	2b06      	cmp	r3, #6
 8109b90:	d825      	bhi.n	8109bde <_scanf_float+0x2f2>
 8109b92:	2d02      	cmp	r5, #2
 8109b94:	d836      	bhi.n	8109c04 <_scanf_float+0x318>
 8109b96:	455e      	cmp	r6, fp
 8109b98:	f67f aee8 	bls.w	810996c <_scanf_float+0x80>
 8109b9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109ba0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8109ba4:	463a      	mov	r2, r7
 8109ba6:	4640      	mov	r0, r8
 8109ba8:	4798      	blx	r3
 8109baa:	6923      	ldr	r3, [r4, #16]
 8109bac:	3b01      	subs	r3, #1
 8109bae:	6123      	str	r3, [r4, #16]
 8109bb0:	e7f1      	b.n	8109b96 <_scanf_float+0x2aa>
 8109bb2:	9802      	ldr	r0, [sp, #8]
 8109bb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109bb8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8109bbc:	9002      	str	r0, [sp, #8]
 8109bbe:	463a      	mov	r2, r7
 8109bc0:	4640      	mov	r0, r8
 8109bc2:	4798      	blx	r3
 8109bc4:	6923      	ldr	r3, [r4, #16]
 8109bc6:	3b01      	subs	r3, #1
 8109bc8:	6123      	str	r3, [r4, #16]
 8109bca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8109bce:	fa5f fa8a 	uxtb.w	sl, sl
 8109bd2:	f1ba 0f02 	cmp.w	sl, #2
 8109bd6:	d1ec      	bne.n	8109bb2 <_scanf_float+0x2c6>
 8109bd8:	3d03      	subs	r5, #3
 8109bda:	b2ed      	uxtb	r5, r5
 8109bdc:	1b76      	subs	r6, r6, r5
 8109bde:	6823      	ldr	r3, [r4, #0]
 8109be0:	05da      	lsls	r2, r3, #23
 8109be2:	d52f      	bpl.n	8109c44 <_scanf_float+0x358>
 8109be4:	055b      	lsls	r3, r3, #21
 8109be6:	d510      	bpl.n	8109c0a <_scanf_float+0x31e>
 8109be8:	455e      	cmp	r6, fp
 8109bea:	f67f aebf 	bls.w	810996c <_scanf_float+0x80>
 8109bee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109bf2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8109bf6:	463a      	mov	r2, r7
 8109bf8:	4640      	mov	r0, r8
 8109bfa:	4798      	blx	r3
 8109bfc:	6923      	ldr	r3, [r4, #16]
 8109bfe:	3b01      	subs	r3, #1
 8109c00:	6123      	str	r3, [r4, #16]
 8109c02:	e7f1      	b.n	8109be8 <_scanf_float+0x2fc>
 8109c04:	46aa      	mov	sl, r5
 8109c06:	9602      	str	r6, [sp, #8]
 8109c08:	e7df      	b.n	8109bca <_scanf_float+0x2de>
 8109c0a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8109c0e:	6923      	ldr	r3, [r4, #16]
 8109c10:	2965      	cmp	r1, #101	; 0x65
 8109c12:	f103 33ff 	add.w	r3, r3, #4294967295
 8109c16:	f106 35ff 	add.w	r5, r6, #4294967295
 8109c1a:	6123      	str	r3, [r4, #16]
 8109c1c:	d00c      	beq.n	8109c38 <_scanf_float+0x34c>
 8109c1e:	2945      	cmp	r1, #69	; 0x45
 8109c20:	d00a      	beq.n	8109c38 <_scanf_float+0x34c>
 8109c22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109c26:	463a      	mov	r2, r7
 8109c28:	4640      	mov	r0, r8
 8109c2a:	4798      	blx	r3
 8109c2c:	6923      	ldr	r3, [r4, #16]
 8109c2e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8109c32:	3b01      	subs	r3, #1
 8109c34:	1eb5      	subs	r5, r6, #2
 8109c36:	6123      	str	r3, [r4, #16]
 8109c38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109c3c:	463a      	mov	r2, r7
 8109c3e:	4640      	mov	r0, r8
 8109c40:	4798      	blx	r3
 8109c42:	462e      	mov	r6, r5
 8109c44:	6825      	ldr	r5, [r4, #0]
 8109c46:	f015 0510 	ands.w	r5, r5, #16
 8109c4a:	d159      	bne.n	8109d00 <_scanf_float+0x414>
 8109c4c:	7035      	strb	r5, [r6, #0]
 8109c4e:	6823      	ldr	r3, [r4, #0]
 8109c50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8109c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8109c58:	d11b      	bne.n	8109c92 <_scanf_float+0x3a6>
 8109c5a:	9b01      	ldr	r3, [sp, #4]
 8109c5c:	454b      	cmp	r3, r9
 8109c5e:	eba3 0209 	sub.w	r2, r3, r9
 8109c62:	d123      	bne.n	8109cac <_scanf_float+0x3c0>
 8109c64:	2200      	movs	r2, #0
 8109c66:	4659      	mov	r1, fp
 8109c68:	4640      	mov	r0, r8
 8109c6a:	f000 ff27 	bl	810aabc <_strtod_r>
 8109c6e:	6822      	ldr	r2, [r4, #0]
 8109c70:	9b03      	ldr	r3, [sp, #12]
 8109c72:	f012 0f02 	tst.w	r2, #2
 8109c76:	ec57 6b10 	vmov	r6, r7, d0
 8109c7a:	681b      	ldr	r3, [r3, #0]
 8109c7c:	d021      	beq.n	8109cc2 <_scanf_float+0x3d6>
 8109c7e:	9903      	ldr	r1, [sp, #12]
 8109c80:	1d1a      	adds	r2, r3, #4
 8109c82:	600a      	str	r2, [r1, #0]
 8109c84:	681b      	ldr	r3, [r3, #0]
 8109c86:	e9c3 6700 	strd	r6, r7, [r3]
 8109c8a:	68e3      	ldr	r3, [r4, #12]
 8109c8c:	3301      	adds	r3, #1
 8109c8e:	60e3      	str	r3, [r4, #12]
 8109c90:	e66d      	b.n	810996e <_scanf_float+0x82>
 8109c92:	9b04      	ldr	r3, [sp, #16]
 8109c94:	2b00      	cmp	r3, #0
 8109c96:	d0e5      	beq.n	8109c64 <_scanf_float+0x378>
 8109c98:	9905      	ldr	r1, [sp, #20]
 8109c9a:	230a      	movs	r3, #10
 8109c9c:	462a      	mov	r2, r5
 8109c9e:	3101      	adds	r1, #1
 8109ca0:	4640      	mov	r0, r8
 8109ca2:	f000 ff93 	bl	810abcc <_strtol_r>
 8109ca6:	9b04      	ldr	r3, [sp, #16]
 8109ca8:	9e05      	ldr	r6, [sp, #20]
 8109caa:	1ac2      	subs	r2, r0, r3
 8109cac:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8109cb0:	429e      	cmp	r6, r3
 8109cb2:	bf28      	it	cs
 8109cb4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8109cb8:	4912      	ldr	r1, [pc, #72]	; (8109d04 <_scanf_float+0x418>)
 8109cba:	4630      	mov	r0, r6
 8109cbc:	f000 f8ba 	bl	8109e34 <siprintf>
 8109cc0:	e7d0      	b.n	8109c64 <_scanf_float+0x378>
 8109cc2:	9903      	ldr	r1, [sp, #12]
 8109cc4:	f012 0f04 	tst.w	r2, #4
 8109cc8:	f103 0204 	add.w	r2, r3, #4
 8109ccc:	600a      	str	r2, [r1, #0]
 8109cce:	d1d9      	bne.n	8109c84 <_scanf_float+0x398>
 8109cd0:	f8d3 8000 	ldr.w	r8, [r3]
 8109cd4:	ee10 2a10 	vmov	r2, s0
 8109cd8:	ee10 0a10 	vmov	r0, s0
 8109cdc:	463b      	mov	r3, r7
 8109cde:	4639      	mov	r1, r7
 8109ce0:	f7f6 ffac 	bl	8100c3c <__aeabi_dcmpun>
 8109ce4:	b128      	cbz	r0, 8109cf2 <_scanf_float+0x406>
 8109ce6:	4808      	ldr	r0, [pc, #32]	; (8109d08 <_scanf_float+0x41c>)
 8109ce8:	f000 f89e 	bl	8109e28 <nanf>
 8109cec:	ed88 0a00 	vstr	s0, [r8]
 8109cf0:	e7cb      	b.n	8109c8a <_scanf_float+0x39e>
 8109cf2:	4630      	mov	r0, r6
 8109cf4:	4639      	mov	r1, r7
 8109cf6:	f7f6 ffff 	bl	8100cf8 <__aeabi_d2f>
 8109cfa:	f8c8 0000 	str.w	r0, [r8]
 8109cfe:	e7c4      	b.n	8109c8a <_scanf_float+0x39e>
 8109d00:	2500      	movs	r5, #0
 8109d02:	e634      	b.n	810996e <_scanf_float+0x82>
 8109d04:	0810df70 	.word	0x0810df70
 8109d08:	0810e3e0 	.word	0x0810e3e0

08109d0c <iprintf>:
 8109d0c:	b40f      	push	{r0, r1, r2, r3}
 8109d0e:	4b0a      	ldr	r3, [pc, #40]	; (8109d38 <iprintf+0x2c>)
 8109d10:	b513      	push	{r0, r1, r4, lr}
 8109d12:	681c      	ldr	r4, [r3, #0]
 8109d14:	b124      	cbz	r4, 8109d20 <iprintf+0x14>
 8109d16:	69a3      	ldr	r3, [r4, #24]
 8109d18:	b913      	cbnz	r3, 8109d20 <iprintf+0x14>
 8109d1a:	4620      	mov	r0, r4
 8109d1c:	f001 ffac 	bl	810bc78 <__sinit>
 8109d20:	ab05      	add	r3, sp, #20
 8109d22:	9a04      	ldr	r2, [sp, #16]
 8109d24:	68a1      	ldr	r1, [r4, #8]
 8109d26:	9301      	str	r3, [sp, #4]
 8109d28:	4620      	mov	r0, r4
 8109d2a:	f003 fb75 	bl	810d418 <_vfiprintf_r>
 8109d2e:	b002      	add	sp, #8
 8109d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8109d34:	b004      	add	sp, #16
 8109d36:	4770      	bx	lr
 8109d38:	1000002c 	.word	0x1000002c

08109d3c <_puts_r>:
 8109d3c:	b570      	push	{r4, r5, r6, lr}
 8109d3e:	460e      	mov	r6, r1
 8109d40:	4605      	mov	r5, r0
 8109d42:	b118      	cbz	r0, 8109d4c <_puts_r+0x10>
 8109d44:	6983      	ldr	r3, [r0, #24]
 8109d46:	b90b      	cbnz	r3, 8109d4c <_puts_r+0x10>
 8109d48:	f001 ff96 	bl	810bc78 <__sinit>
 8109d4c:	69ab      	ldr	r3, [r5, #24]
 8109d4e:	68ac      	ldr	r4, [r5, #8]
 8109d50:	b913      	cbnz	r3, 8109d58 <_puts_r+0x1c>
 8109d52:	4628      	mov	r0, r5
 8109d54:	f001 ff90 	bl	810bc78 <__sinit>
 8109d58:	4b2c      	ldr	r3, [pc, #176]	; (8109e0c <_puts_r+0xd0>)
 8109d5a:	429c      	cmp	r4, r3
 8109d5c:	d120      	bne.n	8109da0 <_puts_r+0x64>
 8109d5e:	686c      	ldr	r4, [r5, #4]
 8109d60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8109d62:	07db      	lsls	r3, r3, #31
 8109d64:	d405      	bmi.n	8109d72 <_puts_r+0x36>
 8109d66:	89a3      	ldrh	r3, [r4, #12]
 8109d68:	0598      	lsls	r0, r3, #22
 8109d6a:	d402      	bmi.n	8109d72 <_puts_r+0x36>
 8109d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8109d6e:	f002 fb94 	bl	810c49a <__retarget_lock_acquire_recursive>
 8109d72:	89a3      	ldrh	r3, [r4, #12]
 8109d74:	0719      	lsls	r1, r3, #28
 8109d76:	d51d      	bpl.n	8109db4 <_puts_r+0x78>
 8109d78:	6923      	ldr	r3, [r4, #16]
 8109d7a:	b1db      	cbz	r3, 8109db4 <_puts_r+0x78>
 8109d7c:	3e01      	subs	r6, #1
 8109d7e:	68a3      	ldr	r3, [r4, #8]
 8109d80:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8109d84:	3b01      	subs	r3, #1
 8109d86:	60a3      	str	r3, [r4, #8]
 8109d88:	bb39      	cbnz	r1, 8109dda <_puts_r+0x9e>
 8109d8a:	2b00      	cmp	r3, #0
 8109d8c:	da38      	bge.n	8109e00 <_puts_r+0xc4>
 8109d8e:	4622      	mov	r2, r4
 8109d90:	210a      	movs	r1, #10
 8109d92:	4628      	mov	r0, r5
 8109d94:	f000 ff1c 	bl	810abd0 <__swbuf_r>
 8109d98:	3001      	adds	r0, #1
 8109d9a:	d011      	beq.n	8109dc0 <_puts_r+0x84>
 8109d9c:	250a      	movs	r5, #10
 8109d9e:	e011      	b.n	8109dc4 <_puts_r+0x88>
 8109da0:	4b1b      	ldr	r3, [pc, #108]	; (8109e10 <_puts_r+0xd4>)
 8109da2:	429c      	cmp	r4, r3
 8109da4:	d101      	bne.n	8109daa <_puts_r+0x6e>
 8109da6:	68ac      	ldr	r4, [r5, #8]
 8109da8:	e7da      	b.n	8109d60 <_puts_r+0x24>
 8109daa:	4b1a      	ldr	r3, [pc, #104]	; (8109e14 <_puts_r+0xd8>)
 8109dac:	429c      	cmp	r4, r3
 8109dae:	bf08      	it	eq
 8109db0:	68ec      	ldreq	r4, [r5, #12]
 8109db2:	e7d5      	b.n	8109d60 <_puts_r+0x24>
 8109db4:	4621      	mov	r1, r4
 8109db6:	4628      	mov	r0, r5
 8109db8:	f000 ff5c 	bl	810ac74 <__swsetup_r>
 8109dbc:	2800      	cmp	r0, #0
 8109dbe:	d0dd      	beq.n	8109d7c <_puts_r+0x40>
 8109dc0:	f04f 35ff 	mov.w	r5, #4294967295
 8109dc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8109dc6:	07da      	lsls	r2, r3, #31
 8109dc8:	d405      	bmi.n	8109dd6 <_puts_r+0x9a>
 8109dca:	89a3      	ldrh	r3, [r4, #12]
 8109dcc:	059b      	lsls	r3, r3, #22
 8109dce:	d402      	bmi.n	8109dd6 <_puts_r+0x9a>
 8109dd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8109dd2:	f002 fb63 	bl	810c49c <__retarget_lock_release_recursive>
 8109dd6:	4628      	mov	r0, r5
 8109dd8:	bd70      	pop	{r4, r5, r6, pc}
 8109dda:	2b00      	cmp	r3, #0
 8109ddc:	da04      	bge.n	8109de8 <_puts_r+0xac>
 8109dde:	69a2      	ldr	r2, [r4, #24]
 8109de0:	429a      	cmp	r2, r3
 8109de2:	dc06      	bgt.n	8109df2 <_puts_r+0xb6>
 8109de4:	290a      	cmp	r1, #10
 8109de6:	d004      	beq.n	8109df2 <_puts_r+0xb6>
 8109de8:	6823      	ldr	r3, [r4, #0]
 8109dea:	1c5a      	adds	r2, r3, #1
 8109dec:	6022      	str	r2, [r4, #0]
 8109dee:	7019      	strb	r1, [r3, #0]
 8109df0:	e7c5      	b.n	8109d7e <_puts_r+0x42>
 8109df2:	4622      	mov	r2, r4
 8109df4:	4628      	mov	r0, r5
 8109df6:	f000 feeb 	bl	810abd0 <__swbuf_r>
 8109dfa:	3001      	adds	r0, #1
 8109dfc:	d1bf      	bne.n	8109d7e <_puts_r+0x42>
 8109dfe:	e7df      	b.n	8109dc0 <_puts_r+0x84>
 8109e00:	6823      	ldr	r3, [r4, #0]
 8109e02:	250a      	movs	r5, #10
 8109e04:	1c5a      	adds	r2, r3, #1
 8109e06:	6022      	str	r2, [r4, #0]
 8109e08:	701d      	strb	r5, [r3, #0]
 8109e0a:	e7db      	b.n	8109dc4 <_puts_r+0x88>
 8109e0c:	0810e17c 	.word	0x0810e17c
 8109e10:	0810e19c 	.word	0x0810e19c
 8109e14:	0810e15c 	.word	0x0810e15c

08109e18 <puts>:
 8109e18:	4b02      	ldr	r3, [pc, #8]	; (8109e24 <puts+0xc>)
 8109e1a:	4601      	mov	r1, r0
 8109e1c:	6818      	ldr	r0, [r3, #0]
 8109e1e:	f7ff bf8d 	b.w	8109d3c <_puts_r>
 8109e22:	bf00      	nop
 8109e24:	1000002c 	.word	0x1000002c

08109e28 <nanf>:
 8109e28:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8109e30 <nanf+0x8>
 8109e2c:	4770      	bx	lr
 8109e2e:	bf00      	nop
 8109e30:	7fc00000 	.word	0x7fc00000

08109e34 <siprintf>:
 8109e34:	b40e      	push	{r1, r2, r3}
 8109e36:	b500      	push	{lr}
 8109e38:	b09c      	sub	sp, #112	; 0x70
 8109e3a:	ab1d      	add	r3, sp, #116	; 0x74
 8109e3c:	9002      	str	r0, [sp, #8]
 8109e3e:	9006      	str	r0, [sp, #24]
 8109e40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8109e44:	4809      	ldr	r0, [pc, #36]	; (8109e6c <siprintf+0x38>)
 8109e46:	9107      	str	r1, [sp, #28]
 8109e48:	9104      	str	r1, [sp, #16]
 8109e4a:	4909      	ldr	r1, [pc, #36]	; (8109e70 <siprintf+0x3c>)
 8109e4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8109e50:	9105      	str	r1, [sp, #20]
 8109e52:	6800      	ldr	r0, [r0, #0]
 8109e54:	9301      	str	r3, [sp, #4]
 8109e56:	a902      	add	r1, sp, #8
 8109e58:	f003 f9b4 	bl	810d1c4 <_svfiprintf_r>
 8109e5c:	9b02      	ldr	r3, [sp, #8]
 8109e5e:	2200      	movs	r2, #0
 8109e60:	701a      	strb	r2, [r3, #0]
 8109e62:	b01c      	add	sp, #112	; 0x70
 8109e64:	f85d eb04 	ldr.w	lr, [sp], #4
 8109e68:	b003      	add	sp, #12
 8109e6a:	4770      	bx	lr
 8109e6c:	1000002c 	.word	0x1000002c
 8109e70:	ffff0208 	.word	0xffff0208

08109e74 <sulp>:
 8109e74:	b570      	push	{r4, r5, r6, lr}
 8109e76:	4604      	mov	r4, r0
 8109e78:	460d      	mov	r5, r1
 8109e7a:	ec45 4b10 	vmov	d0, r4, r5
 8109e7e:	4616      	mov	r6, r2
 8109e80:	f002 fefe 	bl	810cc80 <__ulp>
 8109e84:	ec51 0b10 	vmov	r0, r1, d0
 8109e88:	b17e      	cbz	r6, 8109eaa <sulp+0x36>
 8109e8a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8109e8e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8109e92:	2b00      	cmp	r3, #0
 8109e94:	dd09      	ble.n	8109eaa <sulp+0x36>
 8109e96:	051b      	lsls	r3, r3, #20
 8109e98:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8109e9c:	2400      	movs	r4, #0
 8109e9e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8109ea2:	4622      	mov	r2, r4
 8109ea4:	462b      	mov	r3, r5
 8109ea6:	f7f6 fc2f 	bl	8100708 <__aeabi_dmul>
 8109eaa:	bd70      	pop	{r4, r5, r6, pc}
 8109eac:	0000      	movs	r0, r0
	...

08109eb0 <_strtod_l>:
 8109eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109eb4:	ed2d 8b02 	vpush	{d8}
 8109eb8:	b09d      	sub	sp, #116	; 0x74
 8109eba:	461f      	mov	r7, r3
 8109ebc:	2300      	movs	r3, #0
 8109ebe:	9318      	str	r3, [sp, #96]	; 0x60
 8109ec0:	4ba2      	ldr	r3, [pc, #648]	; (810a14c <_strtod_l+0x29c>)
 8109ec2:	9213      	str	r2, [sp, #76]	; 0x4c
 8109ec4:	681b      	ldr	r3, [r3, #0]
 8109ec6:	9305      	str	r3, [sp, #20]
 8109ec8:	4604      	mov	r4, r0
 8109eca:	4618      	mov	r0, r3
 8109ecc:	4688      	mov	r8, r1
 8109ece:	f7f6 fa07 	bl	81002e0 <strlen>
 8109ed2:	f04f 0a00 	mov.w	sl, #0
 8109ed6:	4605      	mov	r5, r0
 8109ed8:	f04f 0b00 	mov.w	fp, #0
 8109edc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8109ee0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8109ee2:	781a      	ldrb	r2, [r3, #0]
 8109ee4:	2a2b      	cmp	r2, #43	; 0x2b
 8109ee6:	d04e      	beq.n	8109f86 <_strtod_l+0xd6>
 8109ee8:	d83b      	bhi.n	8109f62 <_strtod_l+0xb2>
 8109eea:	2a0d      	cmp	r2, #13
 8109eec:	d834      	bhi.n	8109f58 <_strtod_l+0xa8>
 8109eee:	2a08      	cmp	r2, #8
 8109ef0:	d834      	bhi.n	8109f5c <_strtod_l+0xac>
 8109ef2:	2a00      	cmp	r2, #0
 8109ef4:	d03e      	beq.n	8109f74 <_strtod_l+0xc4>
 8109ef6:	2300      	movs	r3, #0
 8109ef8:	930a      	str	r3, [sp, #40]	; 0x28
 8109efa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8109efc:	7833      	ldrb	r3, [r6, #0]
 8109efe:	2b30      	cmp	r3, #48	; 0x30
 8109f00:	f040 80b0 	bne.w	810a064 <_strtod_l+0x1b4>
 8109f04:	7873      	ldrb	r3, [r6, #1]
 8109f06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8109f0a:	2b58      	cmp	r3, #88	; 0x58
 8109f0c:	d168      	bne.n	8109fe0 <_strtod_l+0x130>
 8109f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109f10:	9301      	str	r3, [sp, #4]
 8109f12:	ab18      	add	r3, sp, #96	; 0x60
 8109f14:	9702      	str	r7, [sp, #8]
 8109f16:	9300      	str	r3, [sp, #0]
 8109f18:	4a8d      	ldr	r2, [pc, #564]	; (810a150 <_strtod_l+0x2a0>)
 8109f1a:	ab19      	add	r3, sp, #100	; 0x64
 8109f1c:	a917      	add	r1, sp, #92	; 0x5c
 8109f1e:	4620      	mov	r0, r4
 8109f20:	f001 ffae 	bl	810be80 <__gethex>
 8109f24:	f010 0707 	ands.w	r7, r0, #7
 8109f28:	4605      	mov	r5, r0
 8109f2a:	d005      	beq.n	8109f38 <_strtod_l+0x88>
 8109f2c:	2f06      	cmp	r7, #6
 8109f2e:	d12c      	bne.n	8109f8a <_strtod_l+0xda>
 8109f30:	3601      	adds	r6, #1
 8109f32:	2300      	movs	r3, #0
 8109f34:	9617      	str	r6, [sp, #92]	; 0x5c
 8109f36:	930a      	str	r3, [sp, #40]	; 0x28
 8109f38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8109f3a:	2b00      	cmp	r3, #0
 8109f3c:	f040 8590 	bne.w	810aa60 <_strtod_l+0xbb0>
 8109f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109f42:	b1eb      	cbz	r3, 8109f80 <_strtod_l+0xd0>
 8109f44:	4652      	mov	r2, sl
 8109f46:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8109f4a:	ec43 2b10 	vmov	d0, r2, r3
 8109f4e:	b01d      	add	sp, #116	; 0x74
 8109f50:	ecbd 8b02 	vpop	{d8}
 8109f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109f58:	2a20      	cmp	r2, #32
 8109f5a:	d1cc      	bne.n	8109ef6 <_strtod_l+0x46>
 8109f5c:	3301      	adds	r3, #1
 8109f5e:	9317      	str	r3, [sp, #92]	; 0x5c
 8109f60:	e7be      	b.n	8109ee0 <_strtod_l+0x30>
 8109f62:	2a2d      	cmp	r2, #45	; 0x2d
 8109f64:	d1c7      	bne.n	8109ef6 <_strtod_l+0x46>
 8109f66:	2201      	movs	r2, #1
 8109f68:	920a      	str	r2, [sp, #40]	; 0x28
 8109f6a:	1c5a      	adds	r2, r3, #1
 8109f6c:	9217      	str	r2, [sp, #92]	; 0x5c
 8109f6e:	785b      	ldrb	r3, [r3, #1]
 8109f70:	2b00      	cmp	r3, #0
 8109f72:	d1c2      	bne.n	8109efa <_strtod_l+0x4a>
 8109f74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8109f76:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8109f7a:	2b00      	cmp	r3, #0
 8109f7c:	f040 856e 	bne.w	810aa5c <_strtod_l+0xbac>
 8109f80:	4652      	mov	r2, sl
 8109f82:	465b      	mov	r3, fp
 8109f84:	e7e1      	b.n	8109f4a <_strtod_l+0x9a>
 8109f86:	2200      	movs	r2, #0
 8109f88:	e7ee      	b.n	8109f68 <_strtod_l+0xb8>
 8109f8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8109f8c:	b13a      	cbz	r2, 8109f9e <_strtod_l+0xee>
 8109f8e:	2135      	movs	r1, #53	; 0x35
 8109f90:	a81a      	add	r0, sp, #104	; 0x68
 8109f92:	f002 ff80 	bl	810ce96 <__copybits>
 8109f96:	9918      	ldr	r1, [sp, #96]	; 0x60
 8109f98:	4620      	mov	r0, r4
 8109f9a:	f002 fb3f 	bl	810c61c <_Bfree>
 8109f9e:	3f01      	subs	r7, #1
 8109fa0:	2f04      	cmp	r7, #4
 8109fa2:	d806      	bhi.n	8109fb2 <_strtod_l+0x102>
 8109fa4:	e8df f007 	tbb	[pc, r7]
 8109fa8:	1714030a 	.word	0x1714030a
 8109fac:	0a          	.byte	0x0a
 8109fad:	00          	.byte	0x00
 8109fae:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8109fb2:	0728      	lsls	r0, r5, #28
 8109fb4:	d5c0      	bpl.n	8109f38 <_strtod_l+0x88>
 8109fb6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8109fba:	e7bd      	b.n	8109f38 <_strtod_l+0x88>
 8109fbc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8109fc0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8109fc2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8109fc6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8109fca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8109fce:	e7f0      	b.n	8109fb2 <_strtod_l+0x102>
 8109fd0:	f8df b180 	ldr.w	fp, [pc, #384]	; 810a154 <_strtod_l+0x2a4>
 8109fd4:	e7ed      	b.n	8109fb2 <_strtod_l+0x102>
 8109fd6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8109fda:	f04f 3aff 	mov.w	sl, #4294967295
 8109fde:	e7e8      	b.n	8109fb2 <_strtod_l+0x102>
 8109fe0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8109fe2:	1c5a      	adds	r2, r3, #1
 8109fe4:	9217      	str	r2, [sp, #92]	; 0x5c
 8109fe6:	785b      	ldrb	r3, [r3, #1]
 8109fe8:	2b30      	cmp	r3, #48	; 0x30
 8109fea:	d0f9      	beq.n	8109fe0 <_strtod_l+0x130>
 8109fec:	2b00      	cmp	r3, #0
 8109fee:	d0a3      	beq.n	8109f38 <_strtod_l+0x88>
 8109ff0:	2301      	movs	r3, #1
 8109ff2:	f04f 0900 	mov.w	r9, #0
 8109ff6:	9304      	str	r3, [sp, #16]
 8109ff8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8109ffa:	9308      	str	r3, [sp, #32]
 8109ffc:	f8cd 901c 	str.w	r9, [sp, #28]
 810a000:	464f      	mov	r7, r9
 810a002:	220a      	movs	r2, #10
 810a004:	9817      	ldr	r0, [sp, #92]	; 0x5c
 810a006:	7806      	ldrb	r6, [r0, #0]
 810a008:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 810a00c:	b2d9      	uxtb	r1, r3
 810a00e:	2909      	cmp	r1, #9
 810a010:	d92a      	bls.n	810a068 <_strtod_l+0x1b8>
 810a012:	9905      	ldr	r1, [sp, #20]
 810a014:	462a      	mov	r2, r5
 810a016:	f003 fb8a 	bl	810d72e <strncmp>
 810a01a:	b398      	cbz	r0, 810a084 <_strtod_l+0x1d4>
 810a01c:	2000      	movs	r0, #0
 810a01e:	4632      	mov	r2, r6
 810a020:	463d      	mov	r5, r7
 810a022:	9005      	str	r0, [sp, #20]
 810a024:	4603      	mov	r3, r0
 810a026:	2a65      	cmp	r2, #101	; 0x65
 810a028:	d001      	beq.n	810a02e <_strtod_l+0x17e>
 810a02a:	2a45      	cmp	r2, #69	; 0x45
 810a02c:	d118      	bne.n	810a060 <_strtod_l+0x1b0>
 810a02e:	b91d      	cbnz	r5, 810a038 <_strtod_l+0x188>
 810a030:	9a04      	ldr	r2, [sp, #16]
 810a032:	4302      	orrs	r2, r0
 810a034:	d09e      	beq.n	8109f74 <_strtod_l+0xc4>
 810a036:	2500      	movs	r5, #0
 810a038:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 810a03c:	f108 0201 	add.w	r2, r8, #1
 810a040:	9217      	str	r2, [sp, #92]	; 0x5c
 810a042:	f898 2001 	ldrb.w	r2, [r8, #1]
 810a046:	2a2b      	cmp	r2, #43	; 0x2b
 810a048:	d075      	beq.n	810a136 <_strtod_l+0x286>
 810a04a:	2a2d      	cmp	r2, #45	; 0x2d
 810a04c:	d07b      	beq.n	810a146 <_strtod_l+0x296>
 810a04e:	f04f 0c00 	mov.w	ip, #0
 810a052:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 810a056:	2909      	cmp	r1, #9
 810a058:	f240 8082 	bls.w	810a160 <_strtod_l+0x2b0>
 810a05c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 810a060:	2600      	movs	r6, #0
 810a062:	e09d      	b.n	810a1a0 <_strtod_l+0x2f0>
 810a064:	2300      	movs	r3, #0
 810a066:	e7c4      	b.n	8109ff2 <_strtod_l+0x142>
 810a068:	2f08      	cmp	r7, #8
 810a06a:	bfd8      	it	le
 810a06c:	9907      	ldrle	r1, [sp, #28]
 810a06e:	f100 0001 	add.w	r0, r0, #1
 810a072:	bfda      	itte	le
 810a074:	fb02 3301 	mlale	r3, r2, r1, r3
 810a078:	9307      	strle	r3, [sp, #28]
 810a07a:	fb02 3909 	mlagt	r9, r2, r9, r3
 810a07e:	3701      	adds	r7, #1
 810a080:	9017      	str	r0, [sp, #92]	; 0x5c
 810a082:	e7bf      	b.n	810a004 <_strtod_l+0x154>
 810a084:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a086:	195a      	adds	r2, r3, r5
 810a088:	9217      	str	r2, [sp, #92]	; 0x5c
 810a08a:	5d5a      	ldrb	r2, [r3, r5]
 810a08c:	2f00      	cmp	r7, #0
 810a08e:	d037      	beq.n	810a100 <_strtod_l+0x250>
 810a090:	9005      	str	r0, [sp, #20]
 810a092:	463d      	mov	r5, r7
 810a094:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 810a098:	2b09      	cmp	r3, #9
 810a09a:	d912      	bls.n	810a0c2 <_strtod_l+0x212>
 810a09c:	2301      	movs	r3, #1
 810a09e:	e7c2      	b.n	810a026 <_strtod_l+0x176>
 810a0a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a0a2:	1c5a      	adds	r2, r3, #1
 810a0a4:	9217      	str	r2, [sp, #92]	; 0x5c
 810a0a6:	785a      	ldrb	r2, [r3, #1]
 810a0a8:	3001      	adds	r0, #1
 810a0aa:	2a30      	cmp	r2, #48	; 0x30
 810a0ac:	d0f8      	beq.n	810a0a0 <_strtod_l+0x1f0>
 810a0ae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 810a0b2:	2b08      	cmp	r3, #8
 810a0b4:	f200 84d9 	bhi.w	810aa6a <_strtod_l+0xbba>
 810a0b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a0ba:	9005      	str	r0, [sp, #20]
 810a0bc:	2000      	movs	r0, #0
 810a0be:	9308      	str	r3, [sp, #32]
 810a0c0:	4605      	mov	r5, r0
 810a0c2:	3a30      	subs	r2, #48	; 0x30
 810a0c4:	f100 0301 	add.w	r3, r0, #1
 810a0c8:	d014      	beq.n	810a0f4 <_strtod_l+0x244>
 810a0ca:	9905      	ldr	r1, [sp, #20]
 810a0cc:	4419      	add	r1, r3
 810a0ce:	9105      	str	r1, [sp, #20]
 810a0d0:	462b      	mov	r3, r5
 810a0d2:	eb00 0e05 	add.w	lr, r0, r5
 810a0d6:	210a      	movs	r1, #10
 810a0d8:	4573      	cmp	r3, lr
 810a0da:	d113      	bne.n	810a104 <_strtod_l+0x254>
 810a0dc:	182b      	adds	r3, r5, r0
 810a0de:	2b08      	cmp	r3, #8
 810a0e0:	f105 0501 	add.w	r5, r5, #1
 810a0e4:	4405      	add	r5, r0
 810a0e6:	dc1c      	bgt.n	810a122 <_strtod_l+0x272>
 810a0e8:	9907      	ldr	r1, [sp, #28]
 810a0ea:	230a      	movs	r3, #10
 810a0ec:	fb03 2301 	mla	r3, r3, r1, r2
 810a0f0:	9307      	str	r3, [sp, #28]
 810a0f2:	2300      	movs	r3, #0
 810a0f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810a0f6:	1c51      	adds	r1, r2, #1
 810a0f8:	9117      	str	r1, [sp, #92]	; 0x5c
 810a0fa:	7852      	ldrb	r2, [r2, #1]
 810a0fc:	4618      	mov	r0, r3
 810a0fe:	e7c9      	b.n	810a094 <_strtod_l+0x1e4>
 810a100:	4638      	mov	r0, r7
 810a102:	e7d2      	b.n	810a0aa <_strtod_l+0x1fa>
 810a104:	2b08      	cmp	r3, #8
 810a106:	dc04      	bgt.n	810a112 <_strtod_l+0x262>
 810a108:	9e07      	ldr	r6, [sp, #28]
 810a10a:	434e      	muls	r6, r1
 810a10c:	9607      	str	r6, [sp, #28]
 810a10e:	3301      	adds	r3, #1
 810a110:	e7e2      	b.n	810a0d8 <_strtod_l+0x228>
 810a112:	f103 0c01 	add.w	ip, r3, #1
 810a116:	f1bc 0f10 	cmp.w	ip, #16
 810a11a:	bfd8      	it	le
 810a11c:	fb01 f909 	mulle.w	r9, r1, r9
 810a120:	e7f5      	b.n	810a10e <_strtod_l+0x25e>
 810a122:	2d10      	cmp	r5, #16
 810a124:	bfdc      	itt	le
 810a126:	230a      	movle	r3, #10
 810a128:	fb03 2909 	mlale	r9, r3, r9, r2
 810a12c:	e7e1      	b.n	810a0f2 <_strtod_l+0x242>
 810a12e:	2300      	movs	r3, #0
 810a130:	9305      	str	r3, [sp, #20]
 810a132:	2301      	movs	r3, #1
 810a134:	e77c      	b.n	810a030 <_strtod_l+0x180>
 810a136:	f04f 0c00 	mov.w	ip, #0
 810a13a:	f108 0202 	add.w	r2, r8, #2
 810a13e:	9217      	str	r2, [sp, #92]	; 0x5c
 810a140:	f898 2002 	ldrb.w	r2, [r8, #2]
 810a144:	e785      	b.n	810a052 <_strtod_l+0x1a2>
 810a146:	f04f 0c01 	mov.w	ip, #1
 810a14a:	e7f6      	b.n	810a13a <_strtod_l+0x28a>
 810a14c:	0810e224 	.word	0x0810e224
 810a150:	0810df78 	.word	0x0810df78
 810a154:	7ff00000 	.word	0x7ff00000
 810a158:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810a15a:	1c51      	adds	r1, r2, #1
 810a15c:	9117      	str	r1, [sp, #92]	; 0x5c
 810a15e:	7852      	ldrb	r2, [r2, #1]
 810a160:	2a30      	cmp	r2, #48	; 0x30
 810a162:	d0f9      	beq.n	810a158 <_strtod_l+0x2a8>
 810a164:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 810a168:	2908      	cmp	r1, #8
 810a16a:	f63f af79 	bhi.w	810a060 <_strtod_l+0x1b0>
 810a16e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 810a172:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810a174:	9206      	str	r2, [sp, #24]
 810a176:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810a178:	1c51      	adds	r1, r2, #1
 810a17a:	9117      	str	r1, [sp, #92]	; 0x5c
 810a17c:	7852      	ldrb	r2, [r2, #1]
 810a17e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 810a182:	2e09      	cmp	r6, #9
 810a184:	d937      	bls.n	810a1f6 <_strtod_l+0x346>
 810a186:	9e06      	ldr	r6, [sp, #24]
 810a188:	1b89      	subs	r1, r1, r6
 810a18a:	2908      	cmp	r1, #8
 810a18c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 810a190:	dc02      	bgt.n	810a198 <_strtod_l+0x2e8>
 810a192:	4576      	cmp	r6, lr
 810a194:	bfa8      	it	ge
 810a196:	4676      	movge	r6, lr
 810a198:	f1bc 0f00 	cmp.w	ip, #0
 810a19c:	d000      	beq.n	810a1a0 <_strtod_l+0x2f0>
 810a19e:	4276      	negs	r6, r6
 810a1a0:	2d00      	cmp	r5, #0
 810a1a2:	d14d      	bne.n	810a240 <_strtod_l+0x390>
 810a1a4:	9904      	ldr	r1, [sp, #16]
 810a1a6:	4301      	orrs	r1, r0
 810a1a8:	f47f aec6 	bne.w	8109f38 <_strtod_l+0x88>
 810a1ac:	2b00      	cmp	r3, #0
 810a1ae:	f47f aee1 	bne.w	8109f74 <_strtod_l+0xc4>
 810a1b2:	2a69      	cmp	r2, #105	; 0x69
 810a1b4:	d027      	beq.n	810a206 <_strtod_l+0x356>
 810a1b6:	dc24      	bgt.n	810a202 <_strtod_l+0x352>
 810a1b8:	2a49      	cmp	r2, #73	; 0x49
 810a1ba:	d024      	beq.n	810a206 <_strtod_l+0x356>
 810a1bc:	2a4e      	cmp	r2, #78	; 0x4e
 810a1be:	f47f aed9 	bne.w	8109f74 <_strtod_l+0xc4>
 810a1c2:	499f      	ldr	r1, [pc, #636]	; (810a440 <_strtod_l+0x590>)
 810a1c4:	a817      	add	r0, sp, #92	; 0x5c
 810a1c6:	f002 f8b3 	bl	810c330 <__match>
 810a1ca:	2800      	cmp	r0, #0
 810a1cc:	f43f aed2 	beq.w	8109f74 <_strtod_l+0xc4>
 810a1d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a1d2:	781b      	ldrb	r3, [r3, #0]
 810a1d4:	2b28      	cmp	r3, #40	; 0x28
 810a1d6:	d12d      	bne.n	810a234 <_strtod_l+0x384>
 810a1d8:	499a      	ldr	r1, [pc, #616]	; (810a444 <_strtod_l+0x594>)
 810a1da:	aa1a      	add	r2, sp, #104	; 0x68
 810a1dc:	a817      	add	r0, sp, #92	; 0x5c
 810a1de:	f002 f8bb 	bl	810c358 <__hexnan>
 810a1e2:	2805      	cmp	r0, #5
 810a1e4:	d126      	bne.n	810a234 <_strtod_l+0x384>
 810a1e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 810a1e8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 810a1ec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 810a1f0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 810a1f4:	e6a0      	b.n	8109f38 <_strtod_l+0x88>
 810a1f6:	210a      	movs	r1, #10
 810a1f8:	fb01 2e0e 	mla	lr, r1, lr, r2
 810a1fc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 810a200:	e7b9      	b.n	810a176 <_strtod_l+0x2c6>
 810a202:	2a6e      	cmp	r2, #110	; 0x6e
 810a204:	e7db      	b.n	810a1be <_strtod_l+0x30e>
 810a206:	4990      	ldr	r1, [pc, #576]	; (810a448 <_strtod_l+0x598>)
 810a208:	a817      	add	r0, sp, #92	; 0x5c
 810a20a:	f002 f891 	bl	810c330 <__match>
 810a20e:	2800      	cmp	r0, #0
 810a210:	f43f aeb0 	beq.w	8109f74 <_strtod_l+0xc4>
 810a214:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a216:	498d      	ldr	r1, [pc, #564]	; (810a44c <_strtod_l+0x59c>)
 810a218:	3b01      	subs	r3, #1
 810a21a:	a817      	add	r0, sp, #92	; 0x5c
 810a21c:	9317      	str	r3, [sp, #92]	; 0x5c
 810a21e:	f002 f887 	bl	810c330 <__match>
 810a222:	b910      	cbnz	r0, 810a22a <_strtod_l+0x37a>
 810a224:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a226:	3301      	adds	r3, #1
 810a228:	9317      	str	r3, [sp, #92]	; 0x5c
 810a22a:	f8df b230 	ldr.w	fp, [pc, #560]	; 810a45c <_strtod_l+0x5ac>
 810a22e:	f04f 0a00 	mov.w	sl, #0
 810a232:	e681      	b.n	8109f38 <_strtod_l+0x88>
 810a234:	4886      	ldr	r0, [pc, #536]	; (810a450 <_strtod_l+0x5a0>)
 810a236:	f003 fa1f 	bl	810d678 <nan>
 810a23a:	ec5b ab10 	vmov	sl, fp, d0
 810a23e:	e67b      	b.n	8109f38 <_strtod_l+0x88>
 810a240:	9b05      	ldr	r3, [sp, #20]
 810a242:	9807      	ldr	r0, [sp, #28]
 810a244:	1af3      	subs	r3, r6, r3
 810a246:	2f00      	cmp	r7, #0
 810a248:	bf08      	it	eq
 810a24a:	462f      	moveq	r7, r5
 810a24c:	2d10      	cmp	r5, #16
 810a24e:	9306      	str	r3, [sp, #24]
 810a250:	46a8      	mov	r8, r5
 810a252:	bfa8      	it	ge
 810a254:	f04f 0810 	movge.w	r8, #16
 810a258:	f7f6 f9dc 	bl	8100614 <__aeabi_ui2d>
 810a25c:	2d09      	cmp	r5, #9
 810a25e:	4682      	mov	sl, r0
 810a260:	468b      	mov	fp, r1
 810a262:	dd13      	ble.n	810a28c <_strtod_l+0x3dc>
 810a264:	4b7b      	ldr	r3, [pc, #492]	; (810a454 <_strtod_l+0x5a4>)
 810a266:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 810a26a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 810a26e:	f7f6 fa4b 	bl	8100708 <__aeabi_dmul>
 810a272:	4682      	mov	sl, r0
 810a274:	4648      	mov	r0, r9
 810a276:	468b      	mov	fp, r1
 810a278:	f7f6 f9cc 	bl	8100614 <__aeabi_ui2d>
 810a27c:	4602      	mov	r2, r0
 810a27e:	460b      	mov	r3, r1
 810a280:	4650      	mov	r0, sl
 810a282:	4659      	mov	r1, fp
 810a284:	f7f6 f88a 	bl	810039c <__adddf3>
 810a288:	4682      	mov	sl, r0
 810a28a:	468b      	mov	fp, r1
 810a28c:	2d0f      	cmp	r5, #15
 810a28e:	dc38      	bgt.n	810a302 <_strtod_l+0x452>
 810a290:	9b06      	ldr	r3, [sp, #24]
 810a292:	2b00      	cmp	r3, #0
 810a294:	f43f ae50 	beq.w	8109f38 <_strtod_l+0x88>
 810a298:	dd24      	ble.n	810a2e4 <_strtod_l+0x434>
 810a29a:	2b16      	cmp	r3, #22
 810a29c:	dc0b      	bgt.n	810a2b6 <_strtod_l+0x406>
 810a29e:	496d      	ldr	r1, [pc, #436]	; (810a454 <_strtod_l+0x5a4>)
 810a2a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810a2a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 810a2a8:	4652      	mov	r2, sl
 810a2aa:	465b      	mov	r3, fp
 810a2ac:	f7f6 fa2c 	bl	8100708 <__aeabi_dmul>
 810a2b0:	4682      	mov	sl, r0
 810a2b2:	468b      	mov	fp, r1
 810a2b4:	e640      	b.n	8109f38 <_strtod_l+0x88>
 810a2b6:	9a06      	ldr	r2, [sp, #24]
 810a2b8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 810a2bc:	4293      	cmp	r3, r2
 810a2be:	db20      	blt.n	810a302 <_strtod_l+0x452>
 810a2c0:	4c64      	ldr	r4, [pc, #400]	; (810a454 <_strtod_l+0x5a4>)
 810a2c2:	f1c5 050f 	rsb	r5, r5, #15
 810a2c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 810a2ca:	4652      	mov	r2, sl
 810a2cc:	465b      	mov	r3, fp
 810a2ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 810a2d2:	f7f6 fa19 	bl	8100708 <__aeabi_dmul>
 810a2d6:	9b06      	ldr	r3, [sp, #24]
 810a2d8:	1b5d      	subs	r5, r3, r5
 810a2da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 810a2de:	e9d4 2300 	ldrd	r2, r3, [r4]
 810a2e2:	e7e3      	b.n	810a2ac <_strtod_l+0x3fc>
 810a2e4:	9b06      	ldr	r3, [sp, #24]
 810a2e6:	3316      	adds	r3, #22
 810a2e8:	db0b      	blt.n	810a302 <_strtod_l+0x452>
 810a2ea:	9b05      	ldr	r3, [sp, #20]
 810a2ec:	1b9e      	subs	r6, r3, r6
 810a2ee:	4b59      	ldr	r3, [pc, #356]	; (810a454 <_strtod_l+0x5a4>)
 810a2f0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 810a2f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 810a2f8:	4650      	mov	r0, sl
 810a2fa:	4659      	mov	r1, fp
 810a2fc:	f7f6 fb2e 	bl	810095c <__aeabi_ddiv>
 810a300:	e7d6      	b.n	810a2b0 <_strtod_l+0x400>
 810a302:	9b06      	ldr	r3, [sp, #24]
 810a304:	eba5 0808 	sub.w	r8, r5, r8
 810a308:	4498      	add	r8, r3
 810a30a:	f1b8 0f00 	cmp.w	r8, #0
 810a30e:	dd74      	ble.n	810a3fa <_strtod_l+0x54a>
 810a310:	f018 030f 	ands.w	r3, r8, #15
 810a314:	d00a      	beq.n	810a32c <_strtod_l+0x47c>
 810a316:	494f      	ldr	r1, [pc, #316]	; (810a454 <_strtod_l+0x5a4>)
 810a318:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810a31c:	4652      	mov	r2, sl
 810a31e:	465b      	mov	r3, fp
 810a320:	e9d1 0100 	ldrd	r0, r1, [r1]
 810a324:	f7f6 f9f0 	bl	8100708 <__aeabi_dmul>
 810a328:	4682      	mov	sl, r0
 810a32a:	468b      	mov	fp, r1
 810a32c:	f038 080f 	bics.w	r8, r8, #15
 810a330:	d04f      	beq.n	810a3d2 <_strtod_l+0x522>
 810a332:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 810a336:	dd22      	ble.n	810a37e <_strtod_l+0x4ce>
 810a338:	2500      	movs	r5, #0
 810a33a:	462e      	mov	r6, r5
 810a33c:	9507      	str	r5, [sp, #28]
 810a33e:	9505      	str	r5, [sp, #20]
 810a340:	2322      	movs	r3, #34	; 0x22
 810a342:	f8df b118 	ldr.w	fp, [pc, #280]	; 810a45c <_strtod_l+0x5ac>
 810a346:	6023      	str	r3, [r4, #0]
 810a348:	f04f 0a00 	mov.w	sl, #0
 810a34c:	9b07      	ldr	r3, [sp, #28]
 810a34e:	2b00      	cmp	r3, #0
 810a350:	f43f adf2 	beq.w	8109f38 <_strtod_l+0x88>
 810a354:	9918      	ldr	r1, [sp, #96]	; 0x60
 810a356:	4620      	mov	r0, r4
 810a358:	f002 f960 	bl	810c61c <_Bfree>
 810a35c:	9905      	ldr	r1, [sp, #20]
 810a35e:	4620      	mov	r0, r4
 810a360:	f002 f95c 	bl	810c61c <_Bfree>
 810a364:	4631      	mov	r1, r6
 810a366:	4620      	mov	r0, r4
 810a368:	f002 f958 	bl	810c61c <_Bfree>
 810a36c:	9907      	ldr	r1, [sp, #28]
 810a36e:	4620      	mov	r0, r4
 810a370:	f002 f954 	bl	810c61c <_Bfree>
 810a374:	4629      	mov	r1, r5
 810a376:	4620      	mov	r0, r4
 810a378:	f002 f950 	bl	810c61c <_Bfree>
 810a37c:	e5dc      	b.n	8109f38 <_strtod_l+0x88>
 810a37e:	4b36      	ldr	r3, [pc, #216]	; (810a458 <_strtod_l+0x5a8>)
 810a380:	9304      	str	r3, [sp, #16]
 810a382:	2300      	movs	r3, #0
 810a384:	ea4f 1828 	mov.w	r8, r8, asr #4
 810a388:	4650      	mov	r0, sl
 810a38a:	4659      	mov	r1, fp
 810a38c:	4699      	mov	r9, r3
 810a38e:	f1b8 0f01 	cmp.w	r8, #1
 810a392:	dc21      	bgt.n	810a3d8 <_strtod_l+0x528>
 810a394:	b10b      	cbz	r3, 810a39a <_strtod_l+0x4ea>
 810a396:	4682      	mov	sl, r0
 810a398:	468b      	mov	fp, r1
 810a39a:	4b2f      	ldr	r3, [pc, #188]	; (810a458 <_strtod_l+0x5a8>)
 810a39c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 810a3a0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 810a3a4:	4652      	mov	r2, sl
 810a3a6:	465b      	mov	r3, fp
 810a3a8:	e9d9 0100 	ldrd	r0, r1, [r9]
 810a3ac:	f7f6 f9ac 	bl	8100708 <__aeabi_dmul>
 810a3b0:	4b2a      	ldr	r3, [pc, #168]	; (810a45c <_strtod_l+0x5ac>)
 810a3b2:	460a      	mov	r2, r1
 810a3b4:	400b      	ands	r3, r1
 810a3b6:	492a      	ldr	r1, [pc, #168]	; (810a460 <_strtod_l+0x5b0>)
 810a3b8:	428b      	cmp	r3, r1
 810a3ba:	4682      	mov	sl, r0
 810a3bc:	d8bc      	bhi.n	810a338 <_strtod_l+0x488>
 810a3be:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 810a3c2:	428b      	cmp	r3, r1
 810a3c4:	bf86      	itte	hi
 810a3c6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 810a464 <_strtod_l+0x5b4>
 810a3ca:	f04f 3aff 	movhi.w	sl, #4294967295
 810a3ce:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 810a3d2:	2300      	movs	r3, #0
 810a3d4:	9304      	str	r3, [sp, #16]
 810a3d6:	e084      	b.n	810a4e2 <_strtod_l+0x632>
 810a3d8:	f018 0f01 	tst.w	r8, #1
 810a3dc:	d005      	beq.n	810a3ea <_strtod_l+0x53a>
 810a3de:	9b04      	ldr	r3, [sp, #16]
 810a3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a3e4:	f7f6 f990 	bl	8100708 <__aeabi_dmul>
 810a3e8:	2301      	movs	r3, #1
 810a3ea:	9a04      	ldr	r2, [sp, #16]
 810a3ec:	3208      	adds	r2, #8
 810a3ee:	f109 0901 	add.w	r9, r9, #1
 810a3f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 810a3f6:	9204      	str	r2, [sp, #16]
 810a3f8:	e7c9      	b.n	810a38e <_strtod_l+0x4de>
 810a3fa:	d0ea      	beq.n	810a3d2 <_strtod_l+0x522>
 810a3fc:	f1c8 0800 	rsb	r8, r8, #0
 810a400:	f018 020f 	ands.w	r2, r8, #15
 810a404:	d00a      	beq.n	810a41c <_strtod_l+0x56c>
 810a406:	4b13      	ldr	r3, [pc, #76]	; (810a454 <_strtod_l+0x5a4>)
 810a408:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810a40c:	4650      	mov	r0, sl
 810a40e:	4659      	mov	r1, fp
 810a410:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a414:	f7f6 faa2 	bl	810095c <__aeabi_ddiv>
 810a418:	4682      	mov	sl, r0
 810a41a:	468b      	mov	fp, r1
 810a41c:	ea5f 1828 	movs.w	r8, r8, asr #4
 810a420:	d0d7      	beq.n	810a3d2 <_strtod_l+0x522>
 810a422:	f1b8 0f1f 	cmp.w	r8, #31
 810a426:	dd1f      	ble.n	810a468 <_strtod_l+0x5b8>
 810a428:	2500      	movs	r5, #0
 810a42a:	462e      	mov	r6, r5
 810a42c:	9507      	str	r5, [sp, #28]
 810a42e:	9505      	str	r5, [sp, #20]
 810a430:	2322      	movs	r3, #34	; 0x22
 810a432:	f04f 0a00 	mov.w	sl, #0
 810a436:	f04f 0b00 	mov.w	fp, #0
 810a43a:	6023      	str	r3, [r4, #0]
 810a43c:	e786      	b.n	810a34c <_strtod_l+0x49c>
 810a43e:	bf00      	nop
 810a440:	0810df49 	.word	0x0810df49
 810a444:	0810df8c 	.word	0x0810df8c
 810a448:	0810df41 	.word	0x0810df41
 810a44c:	0810e0cc 	.word	0x0810e0cc
 810a450:	0810e3e0 	.word	0x0810e3e0
 810a454:	0810e2c0 	.word	0x0810e2c0
 810a458:	0810e298 	.word	0x0810e298
 810a45c:	7ff00000 	.word	0x7ff00000
 810a460:	7ca00000 	.word	0x7ca00000
 810a464:	7fefffff 	.word	0x7fefffff
 810a468:	f018 0310 	ands.w	r3, r8, #16
 810a46c:	bf18      	it	ne
 810a46e:	236a      	movne	r3, #106	; 0x6a
 810a470:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 810a820 <_strtod_l+0x970>
 810a474:	9304      	str	r3, [sp, #16]
 810a476:	4650      	mov	r0, sl
 810a478:	4659      	mov	r1, fp
 810a47a:	2300      	movs	r3, #0
 810a47c:	f018 0f01 	tst.w	r8, #1
 810a480:	d004      	beq.n	810a48c <_strtod_l+0x5dc>
 810a482:	e9d9 2300 	ldrd	r2, r3, [r9]
 810a486:	f7f6 f93f 	bl	8100708 <__aeabi_dmul>
 810a48a:	2301      	movs	r3, #1
 810a48c:	ea5f 0868 	movs.w	r8, r8, asr #1
 810a490:	f109 0908 	add.w	r9, r9, #8
 810a494:	d1f2      	bne.n	810a47c <_strtod_l+0x5cc>
 810a496:	b10b      	cbz	r3, 810a49c <_strtod_l+0x5ec>
 810a498:	4682      	mov	sl, r0
 810a49a:	468b      	mov	fp, r1
 810a49c:	9b04      	ldr	r3, [sp, #16]
 810a49e:	b1c3      	cbz	r3, 810a4d2 <_strtod_l+0x622>
 810a4a0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 810a4a4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 810a4a8:	2b00      	cmp	r3, #0
 810a4aa:	4659      	mov	r1, fp
 810a4ac:	dd11      	ble.n	810a4d2 <_strtod_l+0x622>
 810a4ae:	2b1f      	cmp	r3, #31
 810a4b0:	f340 8124 	ble.w	810a6fc <_strtod_l+0x84c>
 810a4b4:	2b34      	cmp	r3, #52	; 0x34
 810a4b6:	bfde      	ittt	le
 810a4b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 810a4bc:	f04f 33ff 	movle.w	r3, #4294967295
 810a4c0:	fa03 f202 	lslle.w	r2, r3, r2
 810a4c4:	f04f 0a00 	mov.w	sl, #0
 810a4c8:	bfcc      	ite	gt
 810a4ca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 810a4ce:	ea02 0b01 	andle.w	fp, r2, r1
 810a4d2:	2200      	movs	r2, #0
 810a4d4:	2300      	movs	r3, #0
 810a4d6:	4650      	mov	r0, sl
 810a4d8:	4659      	mov	r1, fp
 810a4da:	f7f6 fb7d 	bl	8100bd8 <__aeabi_dcmpeq>
 810a4de:	2800      	cmp	r0, #0
 810a4e0:	d1a2      	bne.n	810a428 <_strtod_l+0x578>
 810a4e2:	9b07      	ldr	r3, [sp, #28]
 810a4e4:	9300      	str	r3, [sp, #0]
 810a4e6:	9908      	ldr	r1, [sp, #32]
 810a4e8:	462b      	mov	r3, r5
 810a4ea:	463a      	mov	r2, r7
 810a4ec:	4620      	mov	r0, r4
 810a4ee:	f002 f8fd 	bl	810c6ec <__s2b>
 810a4f2:	9007      	str	r0, [sp, #28]
 810a4f4:	2800      	cmp	r0, #0
 810a4f6:	f43f af1f 	beq.w	810a338 <_strtod_l+0x488>
 810a4fa:	9b05      	ldr	r3, [sp, #20]
 810a4fc:	1b9e      	subs	r6, r3, r6
 810a4fe:	9b06      	ldr	r3, [sp, #24]
 810a500:	2b00      	cmp	r3, #0
 810a502:	bfb4      	ite	lt
 810a504:	4633      	movlt	r3, r6
 810a506:	2300      	movge	r3, #0
 810a508:	930c      	str	r3, [sp, #48]	; 0x30
 810a50a:	9b06      	ldr	r3, [sp, #24]
 810a50c:	2500      	movs	r5, #0
 810a50e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 810a512:	9312      	str	r3, [sp, #72]	; 0x48
 810a514:	462e      	mov	r6, r5
 810a516:	9b07      	ldr	r3, [sp, #28]
 810a518:	4620      	mov	r0, r4
 810a51a:	6859      	ldr	r1, [r3, #4]
 810a51c:	f002 f83e 	bl	810c59c <_Balloc>
 810a520:	9005      	str	r0, [sp, #20]
 810a522:	2800      	cmp	r0, #0
 810a524:	f43f af0c 	beq.w	810a340 <_strtod_l+0x490>
 810a528:	9b07      	ldr	r3, [sp, #28]
 810a52a:	691a      	ldr	r2, [r3, #16]
 810a52c:	3202      	adds	r2, #2
 810a52e:	f103 010c 	add.w	r1, r3, #12
 810a532:	0092      	lsls	r2, r2, #2
 810a534:	300c      	adds	r0, #12
 810a536:	f7fe fd59 	bl	8108fec <memcpy>
 810a53a:	ec4b ab10 	vmov	d0, sl, fp
 810a53e:	aa1a      	add	r2, sp, #104	; 0x68
 810a540:	a919      	add	r1, sp, #100	; 0x64
 810a542:	4620      	mov	r0, r4
 810a544:	f002 fc18 	bl	810cd78 <__d2b>
 810a548:	ec4b ab18 	vmov	d8, sl, fp
 810a54c:	9018      	str	r0, [sp, #96]	; 0x60
 810a54e:	2800      	cmp	r0, #0
 810a550:	f43f aef6 	beq.w	810a340 <_strtod_l+0x490>
 810a554:	2101      	movs	r1, #1
 810a556:	4620      	mov	r0, r4
 810a558:	f002 f962 	bl	810c820 <__i2b>
 810a55c:	4606      	mov	r6, r0
 810a55e:	2800      	cmp	r0, #0
 810a560:	f43f aeee 	beq.w	810a340 <_strtod_l+0x490>
 810a564:	9b19      	ldr	r3, [sp, #100]	; 0x64
 810a566:	9904      	ldr	r1, [sp, #16]
 810a568:	2b00      	cmp	r3, #0
 810a56a:	bfab      	itete	ge
 810a56c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 810a56e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 810a570:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 810a572:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 810a576:	bfac      	ite	ge
 810a578:	eb03 0902 	addge.w	r9, r3, r2
 810a57c:	1ad7      	sublt	r7, r2, r3
 810a57e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 810a580:	eba3 0801 	sub.w	r8, r3, r1
 810a584:	4490      	add	r8, r2
 810a586:	4ba1      	ldr	r3, [pc, #644]	; (810a80c <_strtod_l+0x95c>)
 810a588:	f108 38ff 	add.w	r8, r8, #4294967295
 810a58c:	4598      	cmp	r8, r3
 810a58e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 810a592:	f280 80c7 	bge.w	810a724 <_strtod_l+0x874>
 810a596:	eba3 0308 	sub.w	r3, r3, r8
 810a59a:	2b1f      	cmp	r3, #31
 810a59c:	eba2 0203 	sub.w	r2, r2, r3
 810a5a0:	f04f 0101 	mov.w	r1, #1
 810a5a4:	f300 80b1 	bgt.w	810a70a <_strtod_l+0x85a>
 810a5a8:	fa01 f303 	lsl.w	r3, r1, r3
 810a5ac:	930d      	str	r3, [sp, #52]	; 0x34
 810a5ae:	2300      	movs	r3, #0
 810a5b0:	9308      	str	r3, [sp, #32]
 810a5b2:	eb09 0802 	add.w	r8, r9, r2
 810a5b6:	9b04      	ldr	r3, [sp, #16]
 810a5b8:	45c1      	cmp	r9, r8
 810a5ba:	4417      	add	r7, r2
 810a5bc:	441f      	add	r7, r3
 810a5be:	464b      	mov	r3, r9
 810a5c0:	bfa8      	it	ge
 810a5c2:	4643      	movge	r3, r8
 810a5c4:	42bb      	cmp	r3, r7
 810a5c6:	bfa8      	it	ge
 810a5c8:	463b      	movge	r3, r7
 810a5ca:	2b00      	cmp	r3, #0
 810a5cc:	bfc2      	ittt	gt
 810a5ce:	eba8 0803 	subgt.w	r8, r8, r3
 810a5d2:	1aff      	subgt	r7, r7, r3
 810a5d4:	eba9 0903 	subgt.w	r9, r9, r3
 810a5d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810a5da:	2b00      	cmp	r3, #0
 810a5dc:	dd17      	ble.n	810a60e <_strtod_l+0x75e>
 810a5de:	4631      	mov	r1, r6
 810a5e0:	461a      	mov	r2, r3
 810a5e2:	4620      	mov	r0, r4
 810a5e4:	f002 f9dc 	bl	810c9a0 <__pow5mult>
 810a5e8:	4606      	mov	r6, r0
 810a5ea:	2800      	cmp	r0, #0
 810a5ec:	f43f aea8 	beq.w	810a340 <_strtod_l+0x490>
 810a5f0:	4601      	mov	r1, r0
 810a5f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 810a5f4:	4620      	mov	r0, r4
 810a5f6:	f002 f929 	bl	810c84c <__multiply>
 810a5fa:	900b      	str	r0, [sp, #44]	; 0x2c
 810a5fc:	2800      	cmp	r0, #0
 810a5fe:	f43f ae9f 	beq.w	810a340 <_strtod_l+0x490>
 810a602:	9918      	ldr	r1, [sp, #96]	; 0x60
 810a604:	4620      	mov	r0, r4
 810a606:	f002 f809 	bl	810c61c <_Bfree>
 810a60a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a60c:	9318      	str	r3, [sp, #96]	; 0x60
 810a60e:	f1b8 0f00 	cmp.w	r8, #0
 810a612:	f300 808c 	bgt.w	810a72e <_strtod_l+0x87e>
 810a616:	9b06      	ldr	r3, [sp, #24]
 810a618:	2b00      	cmp	r3, #0
 810a61a:	dd08      	ble.n	810a62e <_strtod_l+0x77e>
 810a61c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810a61e:	9905      	ldr	r1, [sp, #20]
 810a620:	4620      	mov	r0, r4
 810a622:	f002 f9bd 	bl	810c9a0 <__pow5mult>
 810a626:	9005      	str	r0, [sp, #20]
 810a628:	2800      	cmp	r0, #0
 810a62a:	f43f ae89 	beq.w	810a340 <_strtod_l+0x490>
 810a62e:	2f00      	cmp	r7, #0
 810a630:	dd08      	ble.n	810a644 <_strtod_l+0x794>
 810a632:	9905      	ldr	r1, [sp, #20]
 810a634:	463a      	mov	r2, r7
 810a636:	4620      	mov	r0, r4
 810a638:	f002 fa0c 	bl	810ca54 <__lshift>
 810a63c:	9005      	str	r0, [sp, #20]
 810a63e:	2800      	cmp	r0, #0
 810a640:	f43f ae7e 	beq.w	810a340 <_strtod_l+0x490>
 810a644:	f1b9 0f00 	cmp.w	r9, #0
 810a648:	dd08      	ble.n	810a65c <_strtod_l+0x7ac>
 810a64a:	4631      	mov	r1, r6
 810a64c:	464a      	mov	r2, r9
 810a64e:	4620      	mov	r0, r4
 810a650:	f002 fa00 	bl	810ca54 <__lshift>
 810a654:	4606      	mov	r6, r0
 810a656:	2800      	cmp	r0, #0
 810a658:	f43f ae72 	beq.w	810a340 <_strtod_l+0x490>
 810a65c:	9a05      	ldr	r2, [sp, #20]
 810a65e:	9918      	ldr	r1, [sp, #96]	; 0x60
 810a660:	4620      	mov	r0, r4
 810a662:	f002 fa83 	bl	810cb6c <__mdiff>
 810a666:	4605      	mov	r5, r0
 810a668:	2800      	cmp	r0, #0
 810a66a:	f43f ae69 	beq.w	810a340 <_strtod_l+0x490>
 810a66e:	68c3      	ldr	r3, [r0, #12]
 810a670:	930b      	str	r3, [sp, #44]	; 0x2c
 810a672:	2300      	movs	r3, #0
 810a674:	60c3      	str	r3, [r0, #12]
 810a676:	4631      	mov	r1, r6
 810a678:	f002 fa5c 	bl	810cb34 <__mcmp>
 810a67c:	2800      	cmp	r0, #0
 810a67e:	da60      	bge.n	810a742 <_strtod_l+0x892>
 810a680:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a682:	ea53 030a 	orrs.w	r3, r3, sl
 810a686:	f040 8082 	bne.w	810a78e <_strtod_l+0x8de>
 810a68a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810a68e:	2b00      	cmp	r3, #0
 810a690:	d17d      	bne.n	810a78e <_strtod_l+0x8de>
 810a692:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810a696:	0d1b      	lsrs	r3, r3, #20
 810a698:	051b      	lsls	r3, r3, #20
 810a69a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 810a69e:	d976      	bls.n	810a78e <_strtod_l+0x8de>
 810a6a0:	696b      	ldr	r3, [r5, #20]
 810a6a2:	b913      	cbnz	r3, 810a6aa <_strtod_l+0x7fa>
 810a6a4:	692b      	ldr	r3, [r5, #16]
 810a6a6:	2b01      	cmp	r3, #1
 810a6a8:	dd71      	ble.n	810a78e <_strtod_l+0x8de>
 810a6aa:	4629      	mov	r1, r5
 810a6ac:	2201      	movs	r2, #1
 810a6ae:	4620      	mov	r0, r4
 810a6b0:	f002 f9d0 	bl	810ca54 <__lshift>
 810a6b4:	4631      	mov	r1, r6
 810a6b6:	4605      	mov	r5, r0
 810a6b8:	f002 fa3c 	bl	810cb34 <__mcmp>
 810a6bc:	2800      	cmp	r0, #0
 810a6be:	dd66      	ble.n	810a78e <_strtod_l+0x8de>
 810a6c0:	9904      	ldr	r1, [sp, #16]
 810a6c2:	4a53      	ldr	r2, [pc, #332]	; (810a810 <_strtod_l+0x960>)
 810a6c4:	465b      	mov	r3, fp
 810a6c6:	2900      	cmp	r1, #0
 810a6c8:	f000 8081 	beq.w	810a7ce <_strtod_l+0x91e>
 810a6cc:	ea02 010b 	and.w	r1, r2, fp
 810a6d0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 810a6d4:	dc7b      	bgt.n	810a7ce <_strtod_l+0x91e>
 810a6d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 810a6da:	f77f aea9 	ble.w	810a430 <_strtod_l+0x580>
 810a6de:	4b4d      	ldr	r3, [pc, #308]	; (810a814 <_strtod_l+0x964>)
 810a6e0:	4650      	mov	r0, sl
 810a6e2:	4659      	mov	r1, fp
 810a6e4:	2200      	movs	r2, #0
 810a6e6:	f7f6 f80f 	bl	8100708 <__aeabi_dmul>
 810a6ea:	460b      	mov	r3, r1
 810a6ec:	4303      	orrs	r3, r0
 810a6ee:	bf08      	it	eq
 810a6f0:	2322      	moveq	r3, #34	; 0x22
 810a6f2:	4682      	mov	sl, r0
 810a6f4:	468b      	mov	fp, r1
 810a6f6:	bf08      	it	eq
 810a6f8:	6023      	streq	r3, [r4, #0]
 810a6fa:	e62b      	b.n	810a354 <_strtod_l+0x4a4>
 810a6fc:	f04f 32ff 	mov.w	r2, #4294967295
 810a700:	fa02 f303 	lsl.w	r3, r2, r3
 810a704:	ea03 0a0a 	and.w	sl, r3, sl
 810a708:	e6e3      	b.n	810a4d2 <_strtod_l+0x622>
 810a70a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 810a70e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 810a712:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 810a716:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 810a71a:	fa01 f308 	lsl.w	r3, r1, r8
 810a71e:	9308      	str	r3, [sp, #32]
 810a720:	910d      	str	r1, [sp, #52]	; 0x34
 810a722:	e746      	b.n	810a5b2 <_strtod_l+0x702>
 810a724:	2300      	movs	r3, #0
 810a726:	9308      	str	r3, [sp, #32]
 810a728:	2301      	movs	r3, #1
 810a72a:	930d      	str	r3, [sp, #52]	; 0x34
 810a72c:	e741      	b.n	810a5b2 <_strtod_l+0x702>
 810a72e:	9918      	ldr	r1, [sp, #96]	; 0x60
 810a730:	4642      	mov	r2, r8
 810a732:	4620      	mov	r0, r4
 810a734:	f002 f98e 	bl	810ca54 <__lshift>
 810a738:	9018      	str	r0, [sp, #96]	; 0x60
 810a73a:	2800      	cmp	r0, #0
 810a73c:	f47f af6b 	bne.w	810a616 <_strtod_l+0x766>
 810a740:	e5fe      	b.n	810a340 <_strtod_l+0x490>
 810a742:	465f      	mov	r7, fp
 810a744:	d16e      	bne.n	810a824 <_strtod_l+0x974>
 810a746:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810a748:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810a74c:	b342      	cbz	r2, 810a7a0 <_strtod_l+0x8f0>
 810a74e:	4a32      	ldr	r2, [pc, #200]	; (810a818 <_strtod_l+0x968>)
 810a750:	4293      	cmp	r3, r2
 810a752:	d128      	bne.n	810a7a6 <_strtod_l+0x8f6>
 810a754:	9b04      	ldr	r3, [sp, #16]
 810a756:	4651      	mov	r1, sl
 810a758:	b1eb      	cbz	r3, 810a796 <_strtod_l+0x8e6>
 810a75a:	4b2d      	ldr	r3, [pc, #180]	; (810a810 <_strtod_l+0x960>)
 810a75c:	403b      	ands	r3, r7
 810a75e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810a762:	f04f 32ff 	mov.w	r2, #4294967295
 810a766:	d819      	bhi.n	810a79c <_strtod_l+0x8ec>
 810a768:	0d1b      	lsrs	r3, r3, #20
 810a76a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810a76e:	fa02 f303 	lsl.w	r3, r2, r3
 810a772:	4299      	cmp	r1, r3
 810a774:	d117      	bne.n	810a7a6 <_strtod_l+0x8f6>
 810a776:	4b29      	ldr	r3, [pc, #164]	; (810a81c <_strtod_l+0x96c>)
 810a778:	429f      	cmp	r7, r3
 810a77a:	d102      	bne.n	810a782 <_strtod_l+0x8d2>
 810a77c:	3101      	adds	r1, #1
 810a77e:	f43f addf 	beq.w	810a340 <_strtod_l+0x490>
 810a782:	4b23      	ldr	r3, [pc, #140]	; (810a810 <_strtod_l+0x960>)
 810a784:	403b      	ands	r3, r7
 810a786:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 810a78a:	f04f 0a00 	mov.w	sl, #0
 810a78e:	9b04      	ldr	r3, [sp, #16]
 810a790:	2b00      	cmp	r3, #0
 810a792:	d1a4      	bne.n	810a6de <_strtod_l+0x82e>
 810a794:	e5de      	b.n	810a354 <_strtod_l+0x4a4>
 810a796:	f04f 33ff 	mov.w	r3, #4294967295
 810a79a:	e7ea      	b.n	810a772 <_strtod_l+0x8c2>
 810a79c:	4613      	mov	r3, r2
 810a79e:	e7e8      	b.n	810a772 <_strtod_l+0x8c2>
 810a7a0:	ea53 030a 	orrs.w	r3, r3, sl
 810a7a4:	d08c      	beq.n	810a6c0 <_strtod_l+0x810>
 810a7a6:	9b08      	ldr	r3, [sp, #32]
 810a7a8:	b1db      	cbz	r3, 810a7e2 <_strtod_l+0x932>
 810a7aa:	423b      	tst	r3, r7
 810a7ac:	d0ef      	beq.n	810a78e <_strtod_l+0x8de>
 810a7ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a7b0:	9a04      	ldr	r2, [sp, #16]
 810a7b2:	4650      	mov	r0, sl
 810a7b4:	4659      	mov	r1, fp
 810a7b6:	b1c3      	cbz	r3, 810a7ea <_strtod_l+0x93a>
 810a7b8:	f7ff fb5c 	bl	8109e74 <sulp>
 810a7bc:	4602      	mov	r2, r0
 810a7be:	460b      	mov	r3, r1
 810a7c0:	ec51 0b18 	vmov	r0, r1, d8
 810a7c4:	f7f5 fdea 	bl	810039c <__adddf3>
 810a7c8:	4682      	mov	sl, r0
 810a7ca:	468b      	mov	fp, r1
 810a7cc:	e7df      	b.n	810a78e <_strtod_l+0x8de>
 810a7ce:	4013      	ands	r3, r2
 810a7d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 810a7d4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 810a7d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 810a7dc:	f04f 3aff 	mov.w	sl, #4294967295
 810a7e0:	e7d5      	b.n	810a78e <_strtod_l+0x8de>
 810a7e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810a7e4:	ea13 0f0a 	tst.w	r3, sl
 810a7e8:	e7e0      	b.n	810a7ac <_strtod_l+0x8fc>
 810a7ea:	f7ff fb43 	bl	8109e74 <sulp>
 810a7ee:	4602      	mov	r2, r0
 810a7f0:	460b      	mov	r3, r1
 810a7f2:	ec51 0b18 	vmov	r0, r1, d8
 810a7f6:	f7f5 fdcf 	bl	8100398 <__aeabi_dsub>
 810a7fa:	2200      	movs	r2, #0
 810a7fc:	2300      	movs	r3, #0
 810a7fe:	4682      	mov	sl, r0
 810a800:	468b      	mov	fp, r1
 810a802:	f7f6 f9e9 	bl	8100bd8 <__aeabi_dcmpeq>
 810a806:	2800      	cmp	r0, #0
 810a808:	d0c1      	beq.n	810a78e <_strtod_l+0x8de>
 810a80a:	e611      	b.n	810a430 <_strtod_l+0x580>
 810a80c:	fffffc02 	.word	0xfffffc02
 810a810:	7ff00000 	.word	0x7ff00000
 810a814:	39500000 	.word	0x39500000
 810a818:	000fffff 	.word	0x000fffff
 810a81c:	7fefffff 	.word	0x7fefffff
 810a820:	0810dfa0 	.word	0x0810dfa0
 810a824:	4631      	mov	r1, r6
 810a826:	4628      	mov	r0, r5
 810a828:	f002 fb02 	bl	810ce30 <__ratio>
 810a82c:	ec59 8b10 	vmov	r8, r9, d0
 810a830:	ee10 0a10 	vmov	r0, s0
 810a834:	2200      	movs	r2, #0
 810a836:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810a83a:	4649      	mov	r1, r9
 810a83c:	f7f6 f9e0 	bl	8100c00 <__aeabi_dcmple>
 810a840:	2800      	cmp	r0, #0
 810a842:	d07a      	beq.n	810a93a <_strtod_l+0xa8a>
 810a844:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a846:	2b00      	cmp	r3, #0
 810a848:	d04a      	beq.n	810a8e0 <_strtod_l+0xa30>
 810a84a:	4b95      	ldr	r3, [pc, #596]	; (810aaa0 <_strtod_l+0xbf0>)
 810a84c:	2200      	movs	r2, #0
 810a84e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 810a852:	f8df 924c 	ldr.w	r9, [pc, #588]	; 810aaa0 <_strtod_l+0xbf0>
 810a856:	f04f 0800 	mov.w	r8, #0
 810a85a:	4b92      	ldr	r3, [pc, #584]	; (810aaa4 <_strtod_l+0xbf4>)
 810a85c:	403b      	ands	r3, r7
 810a85e:	930d      	str	r3, [sp, #52]	; 0x34
 810a860:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810a862:	4b91      	ldr	r3, [pc, #580]	; (810aaa8 <_strtod_l+0xbf8>)
 810a864:	429a      	cmp	r2, r3
 810a866:	f040 80b0 	bne.w	810a9ca <_strtod_l+0xb1a>
 810a86a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810a86e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 810a872:	ec4b ab10 	vmov	d0, sl, fp
 810a876:	e9cd 0108 	strd	r0, r1, [sp, #32]
 810a87a:	f002 fa01 	bl	810cc80 <__ulp>
 810a87e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810a882:	ec53 2b10 	vmov	r2, r3, d0
 810a886:	f7f5 ff3f 	bl	8100708 <__aeabi_dmul>
 810a88a:	4652      	mov	r2, sl
 810a88c:	465b      	mov	r3, fp
 810a88e:	f7f5 fd85 	bl	810039c <__adddf3>
 810a892:	460b      	mov	r3, r1
 810a894:	4983      	ldr	r1, [pc, #524]	; (810aaa4 <_strtod_l+0xbf4>)
 810a896:	4a85      	ldr	r2, [pc, #532]	; (810aaac <_strtod_l+0xbfc>)
 810a898:	4019      	ands	r1, r3
 810a89a:	4291      	cmp	r1, r2
 810a89c:	4682      	mov	sl, r0
 810a89e:	d960      	bls.n	810a962 <_strtod_l+0xab2>
 810a8a0:	ee18 3a90 	vmov	r3, s17
 810a8a4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 810a8a8:	4293      	cmp	r3, r2
 810a8aa:	d104      	bne.n	810a8b6 <_strtod_l+0xa06>
 810a8ac:	ee18 3a10 	vmov	r3, s16
 810a8b0:	3301      	adds	r3, #1
 810a8b2:	f43f ad45 	beq.w	810a340 <_strtod_l+0x490>
 810a8b6:	f8df b200 	ldr.w	fp, [pc, #512]	; 810aab8 <_strtod_l+0xc08>
 810a8ba:	f04f 3aff 	mov.w	sl, #4294967295
 810a8be:	9918      	ldr	r1, [sp, #96]	; 0x60
 810a8c0:	4620      	mov	r0, r4
 810a8c2:	f001 feab 	bl	810c61c <_Bfree>
 810a8c6:	9905      	ldr	r1, [sp, #20]
 810a8c8:	4620      	mov	r0, r4
 810a8ca:	f001 fea7 	bl	810c61c <_Bfree>
 810a8ce:	4631      	mov	r1, r6
 810a8d0:	4620      	mov	r0, r4
 810a8d2:	f001 fea3 	bl	810c61c <_Bfree>
 810a8d6:	4629      	mov	r1, r5
 810a8d8:	4620      	mov	r0, r4
 810a8da:	f001 fe9f 	bl	810c61c <_Bfree>
 810a8de:	e61a      	b.n	810a516 <_strtod_l+0x666>
 810a8e0:	f1ba 0f00 	cmp.w	sl, #0
 810a8e4:	d11b      	bne.n	810a91e <_strtod_l+0xa6e>
 810a8e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810a8ea:	b9f3      	cbnz	r3, 810a92a <_strtod_l+0xa7a>
 810a8ec:	4b6c      	ldr	r3, [pc, #432]	; (810aaa0 <_strtod_l+0xbf0>)
 810a8ee:	2200      	movs	r2, #0
 810a8f0:	4640      	mov	r0, r8
 810a8f2:	4649      	mov	r1, r9
 810a8f4:	f7f6 f97a 	bl	8100bec <__aeabi_dcmplt>
 810a8f8:	b9d0      	cbnz	r0, 810a930 <_strtod_l+0xa80>
 810a8fa:	4640      	mov	r0, r8
 810a8fc:	4649      	mov	r1, r9
 810a8fe:	4b6c      	ldr	r3, [pc, #432]	; (810aab0 <_strtod_l+0xc00>)
 810a900:	2200      	movs	r2, #0
 810a902:	f7f5 ff01 	bl	8100708 <__aeabi_dmul>
 810a906:	4680      	mov	r8, r0
 810a908:	4689      	mov	r9, r1
 810a90a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 810a90e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 810a912:	9315      	str	r3, [sp, #84]	; 0x54
 810a914:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 810a918:	e9cd 2308 	strd	r2, r3, [sp, #32]
 810a91c:	e79d      	b.n	810a85a <_strtod_l+0x9aa>
 810a91e:	f1ba 0f01 	cmp.w	sl, #1
 810a922:	d102      	bne.n	810a92a <_strtod_l+0xa7a>
 810a924:	2f00      	cmp	r7, #0
 810a926:	f43f ad83 	beq.w	810a430 <_strtod_l+0x580>
 810a92a:	4b62      	ldr	r3, [pc, #392]	; (810aab4 <_strtod_l+0xc04>)
 810a92c:	2200      	movs	r2, #0
 810a92e:	e78e      	b.n	810a84e <_strtod_l+0x99e>
 810a930:	f8df 917c 	ldr.w	r9, [pc, #380]	; 810aab0 <_strtod_l+0xc00>
 810a934:	f04f 0800 	mov.w	r8, #0
 810a938:	e7e7      	b.n	810a90a <_strtod_l+0xa5a>
 810a93a:	4b5d      	ldr	r3, [pc, #372]	; (810aab0 <_strtod_l+0xc00>)
 810a93c:	4640      	mov	r0, r8
 810a93e:	4649      	mov	r1, r9
 810a940:	2200      	movs	r2, #0
 810a942:	f7f5 fee1 	bl	8100708 <__aeabi_dmul>
 810a946:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a948:	4680      	mov	r8, r0
 810a94a:	4689      	mov	r9, r1
 810a94c:	b933      	cbnz	r3, 810a95c <_strtod_l+0xaac>
 810a94e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810a952:	900e      	str	r0, [sp, #56]	; 0x38
 810a954:	930f      	str	r3, [sp, #60]	; 0x3c
 810a956:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 810a95a:	e7dd      	b.n	810a918 <_strtod_l+0xa68>
 810a95c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 810a960:	e7f9      	b.n	810a956 <_strtod_l+0xaa6>
 810a962:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 810a966:	9b04      	ldr	r3, [sp, #16]
 810a968:	2b00      	cmp	r3, #0
 810a96a:	d1a8      	bne.n	810a8be <_strtod_l+0xa0e>
 810a96c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810a970:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810a972:	0d1b      	lsrs	r3, r3, #20
 810a974:	051b      	lsls	r3, r3, #20
 810a976:	429a      	cmp	r2, r3
 810a978:	d1a1      	bne.n	810a8be <_strtod_l+0xa0e>
 810a97a:	4640      	mov	r0, r8
 810a97c:	4649      	mov	r1, r9
 810a97e:	f7f6 fa23 	bl	8100dc8 <__aeabi_d2lz>
 810a982:	f7f5 fe93 	bl	81006ac <__aeabi_l2d>
 810a986:	4602      	mov	r2, r0
 810a988:	460b      	mov	r3, r1
 810a98a:	4640      	mov	r0, r8
 810a98c:	4649      	mov	r1, r9
 810a98e:	f7f5 fd03 	bl	8100398 <__aeabi_dsub>
 810a992:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810a994:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810a998:	ea43 030a 	orr.w	r3, r3, sl
 810a99c:	4313      	orrs	r3, r2
 810a99e:	4680      	mov	r8, r0
 810a9a0:	4689      	mov	r9, r1
 810a9a2:	d055      	beq.n	810aa50 <_strtod_l+0xba0>
 810a9a4:	a336      	add	r3, pc, #216	; (adr r3, 810aa80 <_strtod_l+0xbd0>)
 810a9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a9aa:	f7f6 f91f 	bl	8100bec <__aeabi_dcmplt>
 810a9ae:	2800      	cmp	r0, #0
 810a9b0:	f47f acd0 	bne.w	810a354 <_strtod_l+0x4a4>
 810a9b4:	a334      	add	r3, pc, #208	; (adr r3, 810aa88 <_strtod_l+0xbd8>)
 810a9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a9ba:	4640      	mov	r0, r8
 810a9bc:	4649      	mov	r1, r9
 810a9be:	f7f6 f933 	bl	8100c28 <__aeabi_dcmpgt>
 810a9c2:	2800      	cmp	r0, #0
 810a9c4:	f43f af7b 	beq.w	810a8be <_strtod_l+0xa0e>
 810a9c8:	e4c4      	b.n	810a354 <_strtod_l+0x4a4>
 810a9ca:	9b04      	ldr	r3, [sp, #16]
 810a9cc:	b333      	cbz	r3, 810aa1c <_strtod_l+0xb6c>
 810a9ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810a9d0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810a9d4:	d822      	bhi.n	810aa1c <_strtod_l+0xb6c>
 810a9d6:	a32e      	add	r3, pc, #184	; (adr r3, 810aa90 <_strtod_l+0xbe0>)
 810a9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a9dc:	4640      	mov	r0, r8
 810a9de:	4649      	mov	r1, r9
 810a9e0:	f7f6 f90e 	bl	8100c00 <__aeabi_dcmple>
 810a9e4:	b1a0      	cbz	r0, 810aa10 <_strtod_l+0xb60>
 810a9e6:	4649      	mov	r1, r9
 810a9e8:	4640      	mov	r0, r8
 810a9ea:	f7f6 f965 	bl	8100cb8 <__aeabi_d2uiz>
 810a9ee:	2801      	cmp	r0, #1
 810a9f0:	bf38      	it	cc
 810a9f2:	2001      	movcc	r0, #1
 810a9f4:	f7f5 fe0e 	bl	8100614 <__aeabi_ui2d>
 810a9f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a9fa:	4680      	mov	r8, r0
 810a9fc:	4689      	mov	r9, r1
 810a9fe:	bb23      	cbnz	r3, 810aa4a <_strtod_l+0xb9a>
 810aa00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810aa04:	9010      	str	r0, [sp, #64]	; 0x40
 810aa06:	9311      	str	r3, [sp, #68]	; 0x44
 810aa08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 810aa0c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 810aa10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810aa12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810aa14:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 810aa18:	1a9b      	subs	r3, r3, r2
 810aa1a:	9309      	str	r3, [sp, #36]	; 0x24
 810aa1c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810aa20:	eeb0 0a48 	vmov.f32	s0, s16
 810aa24:	eef0 0a68 	vmov.f32	s1, s17
 810aa28:	e9cd 0108 	strd	r0, r1, [sp, #32]
 810aa2c:	f002 f928 	bl	810cc80 <__ulp>
 810aa30:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810aa34:	ec53 2b10 	vmov	r2, r3, d0
 810aa38:	f7f5 fe66 	bl	8100708 <__aeabi_dmul>
 810aa3c:	ec53 2b18 	vmov	r2, r3, d8
 810aa40:	f7f5 fcac 	bl	810039c <__adddf3>
 810aa44:	4682      	mov	sl, r0
 810aa46:	468b      	mov	fp, r1
 810aa48:	e78d      	b.n	810a966 <_strtod_l+0xab6>
 810aa4a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 810aa4e:	e7db      	b.n	810aa08 <_strtod_l+0xb58>
 810aa50:	a311      	add	r3, pc, #68	; (adr r3, 810aa98 <_strtod_l+0xbe8>)
 810aa52:	e9d3 2300 	ldrd	r2, r3, [r3]
 810aa56:	f7f6 f8c9 	bl	8100bec <__aeabi_dcmplt>
 810aa5a:	e7b2      	b.n	810a9c2 <_strtod_l+0xb12>
 810aa5c:	2300      	movs	r3, #0
 810aa5e:	930a      	str	r3, [sp, #40]	; 0x28
 810aa60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 810aa62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810aa64:	6013      	str	r3, [r2, #0]
 810aa66:	f7ff ba6b 	b.w	8109f40 <_strtod_l+0x90>
 810aa6a:	2a65      	cmp	r2, #101	; 0x65
 810aa6c:	f43f ab5f 	beq.w	810a12e <_strtod_l+0x27e>
 810aa70:	2a45      	cmp	r2, #69	; 0x45
 810aa72:	f43f ab5c 	beq.w	810a12e <_strtod_l+0x27e>
 810aa76:	2301      	movs	r3, #1
 810aa78:	f7ff bb94 	b.w	810a1a4 <_strtod_l+0x2f4>
 810aa7c:	f3af 8000 	nop.w
 810aa80:	94a03595 	.word	0x94a03595
 810aa84:	3fdfffff 	.word	0x3fdfffff
 810aa88:	35afe535 	.word	0x35afe535
 810aa8c:	3fe00000 	.word	0x3fe00000
 810aa90:	ffc00000 	.word	0xffc00000
 810aa94:	41dfffff 	.word	0x41dfffff
 810aa98:	94a03595 	.word	0x94a03595
 810aa9c:	3fcfffff 	.word	0x3fcfffff
 810aaa0:	3ff00000 	.word	0x3ff00000
 810aaa4:	7ff00000 	.word	0x7ff00000
 810aaa8:	7fe00000 	.word	0x7fe00000
 810aaac:	7c9fffff 	.word	0x7c9fffff
 810aab0:	3fe00000 	.word	0x3fe00000
 810aab4:	bff00000 	.word	0xbff00000
 810aab8:	7fefffff 	.word	0x7fefffff

0810aabc <_strtod_r>:
 810aabc:	4b01      	ldr	r3, [pc, #4]	; (810aac4 <_strtod_r+0x8>)
 810aabe:	f7ff b9f7 	b.w	8109eb0 <_strtod_l>
 810aac2:	bf00      	nop
 810aac4:	10000094 	.word	0x10000094

0810aac8 <_strtol_l.constprop.0>:
 810aac8:	2b01      	cmp	r3, #1
 810aaca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810aace:	d001      	beq.n	810aad4 <_strtol_l.constprop.0+0xc>
 810aad0:	2b24      	cmp	r3, #36	; 0x24
 810aad2:	d906      	bls.n	810aae2 <_strtol_l.constprop.0+0x1a>
 810aad4:	f7fe fa60 	bl	8108f98 <__errno>
 810aad8:	2316      	movs	r3, #22
 810aada:	6003      	str	r3, [r0, #0]
 810aadc:	2000      	movs	r0, #0
 810aade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810aae2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 810abc8 <_strtol_l.constprop.0+0x100>
 810aae6:	460d      	mov	r5, r1
 810aae8:	462e      	mov	r6, r5
 810aaea:	f815 4b01 	ldrb.w	r4, [r5], #1
 810aaee:	f814 700c 	ldrb.w	r7, [r4, ip]
 810aaf2:	f017 0708 	ands.w	r7, r7, #8
 810aaf6:	d1f7      	bne.n	810aae8 <_strtol_l.constprop.0+0x20>
 810aaf8:	2c2d      	cmp	r4, #45	; 0x2d
 810aafa:	d132      	bne.n	810ab62 <_strtol_l.constprop.0+0x9a>
 810aafc:	782c      	ldrb	r4, [r5, #0]
 810aafe:	2701      	movs	r7, #1
 810ab00:	1cb5      	adds	r5, r6, #2
 810ab02:	2b00      	cmp	r3, #0
 810ab04:	d05b      	beq.n	810abbe <_strtol_l.constprop.0+0xf6>
 810ab06:	2b10      	cmp	r3, #16
 810ab08:	d109      	bne.n	810ab1e <_strtol_l.constprop.0+0x56>
 810ab0a:	2c30      	cmp	r4, #48	; 0x30
 810ab0c:	d107      	bne.n	810ab1e <_strtol_l.constprop.0+0x56>
 810ab0e:	782c      	ldrb	r4, [r5, #0]
 810ab10:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 810ab14:	2c58      	cmp	r4, #88	; 0x58
 810ab16:	d14d      	bne.n	810abb4 <_strtol_l.constprop.0+0xec>
 810ab18:	786c      	ldrb	r4, [r5, #1]
 810ab1a:	2310      	movs	r3, #16
 810ab1c:	3502      	adds	r5, #2
 810ab1e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 810ab22:	f108 38ff 	add.w	r8, r8, #4294967295
 810ab26:	f04f 0c00 	mov.w	ip, #0
 810ab2a:	fbb8 f9f3 	udiv	r9, r8, r3
 810ab2e:	4666      	mov	r6, ip
 810ab30:	fb03 8a19 	mls	sl, r3, r9, r8
 810ab34:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 810ab38:	f1be 0f09 	cmp.w	lr, #9
 810ab3c:	d816      	bhi.n	810ab6c <_strtol_l.constprop.0+0xa4>
 810ab3e:	4674      	mov	r4, lr
 810ab40:	42a3      	cmp	r3, r4
 810ab42:	dd24      	ble.n	810ab8e <_strtol_l.constprop.0+0xc6>
 810ab44:	f1bc 0f00 	cmp.w	ip, #0
 810ab48:	db1e      	blt.n	810ab88 <_strtol_l.constprop.0+0xc0>
 810ab4a:	45b1      	cmp	r9, r6
 810ab4c:	d31c      	bcc.n	810ab88 <_strtol_l.constprop.0+0xc0>
 810ab4e:	d101      	bne.n	810ab54 <_strtol_l.constprop.0+0x8c>
 810ab50:	45a2      	cmp	sl, r4
 810ab52:	db19      	blt.n	810ab88 <_strtol_l.constprop.0+0xc0>
 810ab54:	fb06 4603 	mla	r6, r6, r3, r4
 810ab58:	f04f 0c01 	mov.w	ip, #1
 810ab5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 810ab60:	e7e8      	b.n	810ab34 <_strtol_l.constprop.0+0x6c>
 810ab62:	2c2b      	cmp	r4, #43	; 0x2b
 810ab64:	bf04      	itt	eq
 810ab66:	782c      	ldrbeq	r4, [r5, #0]
 810ab68:	1cb5      	addeq	r5, r6, #2
 810ab6a:	e7ca      	b.n	810ab02 <_strtol_l.constprop.0+0x3a>
 810ab6c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 810ab70:	f1be 0f19 	cmp.w	lr, #25
 810ab74:	d801      	bhi.n	810ab7a <_strtol_l.constprop.0+0xb2>
 810ab76:	3c37      	subs	r4, #55	; 0x37
 810ab78:	e7e2      	b.n	810ab40 <_strtol_l.constprop.0+0x78>
 810ab7a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 810ab7e:	f1be 0f19 	cmp.w	lr, #25
 810ab82:	d804      	bhi.n	810ab8e <_strtol_l.constprop.0+0xc6>
 810ab84:	3c57      	subs	r4, #87	; 0x57
 810ab86:	e7db      	b.n	810ab40 <_strtol_l.constprop.0+0x78>
 810ab88:	f04f 3cff 	mov.w	ip, #4294967295
 810ab8c:	e7e6      	b.n	810ab5c <_strtol_l.constprop.0+0x94>
 810ab8e:	f1bc 0f00 	cmp.w	ip, #0
 810ab92:	da05      	bge.n	810aba0 <_strtol_l.constprop.0+0xd8>
 810ab94:	2322      	movs	r3, #34	; 0x22
 810ab96:	6003      	str	r3, [r0, #0]
 810ab98:	4646      	mov	r6, r8
 810ab9a:	b942      	cbnz	r2, 810abae <_strtol_l.constprop.0+0xe6>
 810ab9c:	4630      	mov	r0, r6
 810ab9e:	e79e      	b.n	810aade <_strtol_l.constprop.0+0x16>
 810aba0:	b107      	cbz	r7, 810aba4 <_strtol_l.constprop.0+0xdc>
 810aba2:	4276      	negs	r6, r6
 810aba4:	2a00      	cmp	r2, #0
 810aba6:	d0f9      	beq.n	810ab9c <_strtol_l.constprop.0+0xd4>
 810aba8:	f1bc 0f00 	cmp.w	ip, #0
 810abac:	d000      	beq.n	810abb0 <_strtol_l.constprop.0+0xe8>
 810abae:	1e69      	subs	r1, r5, #1
 810abb0:	6011      	str	r1, [r2, #0]
 810abb2:	e7f3      	b.n	810ab9c <_strtol_l.constprop.0+0xd4>
 810abb4:	2430      	movs	r4, #48	; 0x30
 810abb6:	2b00      	cmp	r3, #0
 810abb8:	d1b1      	bne.n	810ab1e <_strtol_l.constprop.0+0x56>
 810abba:	2308      	movs	r3, #8
 810abbc:	e7af      	b.n	810ab1e <_strtol_l.constprop.0+0x56>
 810abbe:	2c30      	cmp	r4, #48	; 0x30
 810abc0:	d0a5      	beq.n	810ab0e <_strtol_l.constprop.0+0x46>
 810abc2:	230a      	movs	r3, #10
 810abc4:	e7ab      	b.n	810ab1e <_strtol_l.constprop.0+0x56>
 810abc6:	bf00      	nop
 810abc8:	0810dfc9 	.word	0x0810dfc9

0810abcc <_strtol_r>:
 810abcc:	f7ff bf7c 	b.w	810aac8 <_strtol_l.constprop.0>

0810abd0 <__swbuf_r>:
 810abd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810abd2:	460e      	mov	r6, r1
 810abd4:	4614      	mov	r4, r2
 810abd6:	4605      	mov	r5, r0
 810abd8:	b118      	cbz	r0, 810abe2 <__swbuf_r+0x12>
 810abda:	6983      	ldr	r3, [r0, #24]
 810abdc:	b90b      	cbnz	r3, 810abe2 <__swbuf_r+0x12>
 810abde:	f001 f84b 	bl	810bc78 <__sinit>
 810abe2:	4b21      	ldr	r3, [pc, #132]	; (810ac68 <__swbuf_r+0x98>)
 810abe4:	429c      	cmp	r4, r3
 810abe6:	d12b      	bne.n	810ac40 <__swbuf_r+0x70>
 810abe8:	686c      	ldr	r4, [r5, #4]
 810abea:	69a3      	ldr	r3, [r4, #24]
 810abec:	60a3      	str	r3, [r4, #8]
 810abee:	89a3      	ldrh	r3, [r4, #12]
 810abf0:	071a      	lsls	r2, r3, #28
 810abf2:	d52f      	bpl.n	810ac54 <__swbuf_r+0x84>
 810abf4:	6923      	ldr	r3, [r4, #16]
 810abf6:	b36b      	cbz	r3, 810ac54 <__swbuf_r+0x84>
 810abf8:	6923      	ldr	r3, [r4, #16]
 810abfa:	6820      	ldr	r0, [r4, #0]
 810abfc:	1ac0      	subs	r0, r0, r3
 810abfe:	6963      	ldr	r3, [r4, #20]
 810ac00:	b2f6      	uxtb	r6, r6
 810ac02:	4283      	cmp	r3, r0
 810ac04:	4637      	mov	r7, r6
 810ac06:	dc04      	bgt.n	810ac12 <__swbuf_r+0x42>
 810ac08:	4621      	mov	r1, r4
 810ac0a:	4628      	mov	r0, r5
 810ac0c:	f000 ffa0 	bl	810bb50 <_fflush_r>
 810ac10:	bb30      	cbnz	r0, 810ac60 <__swbuf_r+0x90>
 810ac12:	68a3      	ldr	r3, [r4, #8]
 810ac14:	3b01      	subs	r3, #1
 810ac16:	60a3      	str	r3, [r4, #8]
 810ac18:	6823      	ldr	r3, [r4, #0]
 810ac1a:	1c5a      	adds	r2, r3, #1
 810ac1c:	6022      	str	r2, [r4, #0]
 810ac1e:	701e      	strb	r6, [r3, #0]
 810ac20:	6963      	ldr	r3, [r4, #20]
 810ac22:	3001      	adds	r0, #1
 810ac24:	4283      	cmp	r3, r0
 810ac26:	d004      	beq.n	810ac32 <__swbuf_r+0x62>
 810ac28:	89a3      	ldrh	r3, [r4, #12]
 810ac2a:	07db      	lsls	r3, r3, #31
 810ac2c:	d506      	bpl.n	810ac3c <__swbuf_r+0x6c>
 810ac2e:	2e0a      	cmp	r6, #10
 810ac30:	d104      	bne.n	810ac3c <__swbuf_r+0x6c>
 810ac32:	4621      	mov	r1, r4
 810ac34:	4628      	mov	r0, r5
 810ac36:	f000 ff8b 	bl	810bb50 <_fflush_r>
 810ac3a:	b988      	cbnz	r0, 810ac60 <__swbuf_r+0x90>
 810ac3c:	4638      	mov	r0, r7
 810ac3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810ac40:	4b0a      	ldr	r3, [pc, #40]	; (810ac6c <__swbuf_r+0x9c>)
 810ac42:	429c      	cmp	r4, r3
 810ac44:	d101      	bne.n	810ac4a <__swbuf_r+0x7a>
 810ac46:	68ac      	ldr	r4, [r5, #8]
 810ac48:	e7cf      	b.n	810abea <__swbuf_r+0x1a>
 810ac4a:	4b09      	ldr	r3, [pc, #36]	; (810ac70 <__swbuf_r+0xa0>)
 810ac4c:	429c      	cmp	r4, r3
 810ac4e:	bf08      	it	eq
 810ac50:	68ec      	ldreq	r4, [r5, #12]
 810ac52:	e7ca      	b.n	810abea <__swbuf_r+0x1a>
 810ac54:	4621      	mov	r1, r4
 810ac56:	4628      	mov	r0, r5
 810ac58:	f000 f80c 	bl	810ac74 <__swsetup_r>
 810ac5c:	2800      	cmp	r0, #0
 810ac5e:	d0cb      	beq.n	810abf8 <__swbuf_r+0x28>
 810ac60:	f04f 37ff 	mov.w	r7, #4294967295
 810ac64:	e7ea      	b.n	810ac3c <__swbuf_r+0x6c>
 810ac66:	bf00      	nop
 810ac68:	0810e17c 	.word	0x0810e17c
 810ac6c:	0810e19c 	.word	0x0810e19c
 810ac70:	0810e15c 	.word	0x0810e15c

0810ac74 <__swsetup_r>:
 810ac74:	4b32      	ldr	r3, [pc, #200]	; (810ad40 <__swsetup_r+0xcc>)
 810ac76:	b570      	push	{r4, r5, r6, lr}
 810ac78:	681d      	ldr	r5, [r3, #0]
 810ac7a:	4606      	mov	r6, r0
 810ac7c:	460c      	mov	r4, r1
 810ac7e:	b125      	cbz	r5, 810ac8a <__swsetup_r+0x16>
 810ac80:	69ab      	ldr	r3, [r5, #24]
 810ac82:	b913      	cbnz	r3, 810ac8a <__swsetup_r+0x16>
 810ac84:	4628      	mov	r0, r5
 810ac86:	f000 fff7 	bl	810bc78 <__sinit>
 810ac8a:	4b2e      	ldr	r3, [pc, #184]	; (810ad44 <__swsetup_r+0xd0>)
 810ac8c:	429c      	cmp	r4, r3
 810ac8e:	d10f      	bne.n	810acb0 <__swsetup_r+0x3c>
 810ac90:	686c      	ldr	r4, [r5, #4]
 810ac92:	89a3      	ldrh	r3, [r4, #12]
 810ac94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810ac98:	0719      	lsls	r1, r3, #28
 810ac9a:	d42c      	bmi.n	810acf6 <__swsetup_r+0x82>
 810ac9c:	06dd      	lsls	r5, r3, #27
 810ac9e:	d411      	bmi.n	810acc4 <__swsetup_r+0x50>
 810aca0:	2309      	movs	r3, #9
 810aca2:	6033      	str	r3, [r6, #0]
 810aca4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 810aca8:	81a3      	strh	r3, [r4, #12]
 810acaa:	f04f 30ff 	mov.w	r0, #4294967295
 810acae:	e03e      	b.n	810ad2e <__swsetup_r+0xba>
 810acb0:	4b25      	ldr	r3, [pc, #148]	; (810ad48 <__swsetup_r+0xd4>)
 810acb2:	429c      	cmp	r4, r3
 810acb4:	d101      	bne.n	810acba <__swsetup_r+0x46>
 810acb6:	68ac      	ldr	r4, [r5, #8]
 810acb8:	e7eb      	b.n	810ac92 <__swsetup_r+0x1e>
 810acba:	4b24      	ldr	r3, [pc, #144]	; (810ad4c <__swsetup_r+0xd8>)
 810acbc:	429c      	cmp	r4, r3
 810acbe:	bf08      	it	eq
 810acc0:	68ec      	ldreq	r4, [r5, #12]
 810acc2:	e7e6      	b.n	810ac92 <__swsetup_r+0x1e>
 810acc4:	0758      	lsls	r0, r3, #29
 810acc6:	d512      	bpl.n	810acee <__swsetup_r+0x7a>
 810acc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810acca:	b141      	cbz	r1, 810acde <__swsetup_r+0x6a>
 810accc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810acd0:	4299      	cmp	r1, r3
 810acd2:	d002      	beq.n	810acda <__swsetup_r+0x66>
 810acd4:	4630      	mov	r0, r6
 810acd6:	f002 f939 	bl	810cf4c <_free_r>
 810acda:	2300      	movs	r3, #0
 810acdc:	6363      	str	r3, [r4, #52]	; 0x34
 810acde:	89a3      	ldrh	r3, [r4, #12]
 810ace0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 810ace4:	81a3      	strh	r3, [r4, #12]
 810ace6:	2300      	movs	r3, #0
 810ace8:	6063      	str	r3, [r4, #4]
 810acea:	6923      	ldr	r3, [r4, #16]
 810acec:	6023      	str	r3, [r4, #0]
 810acee:	89a3      	ldrh	r3, [r4, #12]
 810acf0:	f043 0308 	orr.w	r3, r3, #8
 810acf4:	81a3      	strh	r3, [r4, #12]
 810acf6:	6923      	ldr	r3, [r4, #16]
 810acf8:	b94b      	cbnz	r3, 810ad0e <__swsetup_r+0x9a>
 810acfa:	89a3      	ldrh	r3, [r4, #12]
 810acfc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 810ad00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810ad04:	d003      	beq.n	810ad0e <__swsetup_r+0x9a>
 810ad06:	4621      	mov	r1, r4
 810ad08:	4630      	mov	r0, r6
 810ad0a:	f001 fbed 	bl	810c4e8 <__smakebuf_r>
 810ad0e:	89a0      	ldrh	r0, [r4, #12]
 810ad10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810ad14:	f010 0301 	ands.w	r3, r0, #1
 810ad18:	d00a      	beq.n	810ad30 <__swsetup_r+0xbc>
 810ad1a:	2300      	movs	r3, #0
 810ad1c:	60a3      	str	r3, [r4, #8]
 810ad1e:	6963      	ldr	r3, [r4, #20]
 810ad20:	425b      	negs	r3, r3
 810ad22:	61a3      	str	r3, [r4, #24]
 810ad24:	6923      	ldr	r3, [r4, #16]
 810ad26:	b943      	cbnz	r3, 810ad3a <__swsetup_r+0xc6>
 810ad28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 810ad2c:	d1ba      	bne.n	810aca4 <__swsetup_r+0x30>
 810ad2e:	bd70      	pop	{r4, r5, r6, pc}
 810ad30:	0781      	lsls	r1, r0, #30
 810ad32:	bf58      	it	pl
 810ad34:	6963      	ldrpl	r3, [r4, #20]
 810ad36:	60a3      	str	r3, [r4, #8]
 810ad38:	e7f4      	b.n	810ad24 <__swsetup_r+0xb0>
 810ad3a:	2000      	movs	r0, #0
 810ad3c:	e7f7      	b.n	810ad2e <__swsetup_r+0xba>
 810ad3e:	bf00      	nop
 810ad40:	1000002c 	.word	0x1000002c
 810ad44:	0810e17c 	.word	0x0810e17c
 810ad48:	0810e19c 	.word	0x0810e19c
 810ad4c:	0810e15c 	.word	0x0810e15c

0810ad50 <quorem>:
 810ad50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ad54:	6903      	ldr	r3, [r0, #16]
 810ad56:	690c      	ldr	r4, [r1, #16]
 810ad58:	42a3      	cmp	r3, r4
 810ad5a:	4607      	mov	r7, r0
 810ad5c:	f2c0 8081 	blt.w	810ae62 <quorem+0x112>
 810ad60:	3c01      	subs	r4, #1
 810ad62:	f101 0814 	add.w	r8, r1, #20
 810ad66:	f100 0514 	add.w	r5, r0, #20
 810ad6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810ad6e:	9301      	str	r3, [sp, #4]
 810ad70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 810ad74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810ad78:	3301      	adds	r3, #1
 810ad7a:	429a      	cmp	r2, r3
 810ad7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 810ad80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 810ad84:	fbb2 f6f3 	udiv	r6, r2, r3
 810ad88:	d331      	bcc.n	810adee <quorem+0x9e>
 810ad8a:	f04f 0e00 	mov.w	lr, #0
 810ad8e:	4640      	mov	r0, r8
 810ad90:	46ac      	mov	ip, r5
 810ad92:	46f2      	mov	sl, lr
 810ad94:	f850 2b04 	ldr.w	r2, [r0], #4
 810ad98:	b293      	uxth	r3, r2
 810ad9a:	fb06 e303 	mla	r3, r6, r3, lr
 810ad9e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 810ada2:	b29b      	uxth	r3, r3
 810ada4:	ebaa 0303 	sub.w	r3, sl, r3
 810ada8:	f8dc a000 	ldr.w	sl, [ip]
 810adac:	0c12      	lsrs	r2, r2, #16
 810adae:	fa13 f38a 	uxtah	r3, r3, sl
 810adb2:	fb06 e202 	mla	r2, r6, r2, lr
 810adb6:	9300      	str	r3, [sp, #0]
 810adb8:	9b00      	ldr	r3, [sp, #0]
 810adba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 810adbe:	b292      	uxth	r2, r2
 810adc0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 810adc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810adc8:	f8bd 3000 	ldrh.w	r3, [sp]
 810adcc:	4581      	cmp	r9, r0
 810adce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810add2:	f84c 3b04 	str.w	r3, [ip], #4
 810add6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 810adda:	d2db      	bcs.n	810ad94 <quorem+0x44>
 810addc:	f855 300b 	ldr.w	r3, [r5, fp]
 810ade0:	b92b      	cbnz	r3, 810adee <quorem+0x9e>
 810ade2:	9b01      	ldr	r3, [sp, #4]
 810ade4:	3b04      	subs	r3, #4
 810ade6:	429d      	cmp	r5, r3
 810ade8:	461a      	mov	r2, r3
 810adea:	d32e      	bcc.n	810ae4a <quorem+0xfa>
 810adec:	613c      	str	r4, [r7, #16]
 810adee:	4638      	mov	r0, r7
 810adf0:	f001 fea0 	bl	810cb34 <__mcmp>
 810adf4:	2800      	cmp	r0, #0
 810adf6:	db24      	blt.n	810ae42 <quorem+0xf2>
 810adf8:	3601      	adds	r6, #1
 810adfa:	4628      	mov	r0, r5
 810adfc:	f04f 0c00 	mov.w	ip, #0
 810ae00:	f858 2b04 	ldr.w	r2, [r8], #4
 810ae04:	f8d0 e000 	ldr.w	lr, [r0]
 810ae08:	b293      	uxth	r3, r2
 810ae0a:	ebac 0303 	sub.w	r3, ip, r3
 810ae0e:	0c12      	lsrs	r2, r2, #16
 810ae10:	fa13 f38e 	uxtah	r3, r3, lr
 810ae14:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 810ae18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810ae1c:	b29b      	uxth	r3, r3
 810ae1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810ae22:	45c1      	cmp	r9, r8
 810ae24:	f840 3b04 	str.w	r3, [r0], #4
 810ae28:	ea4f 4c22 	mov.w	ip, r2, asr #16
 810ae2c:	d2e8      	bcs.n	810ae00 <quorem+0xb0>
 810ae2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810ae32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810ae36:	b922      	cbnz	r2, 810ae42 <quorem+0xf2>
 810ae38:	3b04      	subs	r3, #4
 810ae3a:	429d      	cmp	r5, r3
 810ae3c:	461a      	mov	r2, r3
 810ae3e:	d30a      	bcc.n	810ae56 <quorem+0x106>
 810ae40:	613c      	str	r4, [r7, #16]
 810ae42:	4630      	mov	r0, r6
 810ae44:	b003      	add	sp, #12
 810ae46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ae4a:	6812      	ldr	r2, [r2, #0]
 810ae4c:	3b04      	subs	r3, #4
 810ae4e:	2a00      	cmp	r2, #0
 810ae50:	d1cc      	bne.n	810adec <quorem+0x9c>
 810ae52:	3c01      	subs	r4, #1
 810ae54:	e7c7      	b.n	810ade6 <quorem+0x96>
 810ae56:	6812      	ldr	r2, [r2, #0]
 810ae58:	3b04      	subs	r3, #4
 810ae5a:	2a00      	cmp	r2, #0
 810ae5c:	d1f0      	bne.n	810ae40 <quorem+0xf0>
 810ae5e:	3c01      	subs	r4, #1
 810ae60:	e7eb      	b.n	810ae3a <quorem+0xea>
 810ae62:	2000      	movs	r0, #0
 810ae64:	e7ee      	b.n	810ae44 <quorem+0xf4>
	...

0810ae68 <_dtoa_r>:
 810ae68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ae6c:	ed2d 8b04 	vpush	{d8-d9}
 810ae70:	ec57 6b10 	vmov	r6, r7, d0
 810ae74:	b093      	sub	sp, #76	; 0x4c
 810ae76:	6a45      	ldr	r5, [r0, #36]	; 0x24
 810ae78:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 810ae7c:	9106      	str	r1, [sp, #24]
 810ae7e:	ee10 aa10 	vmov	sl, s0
 810ae82:	4604      	mov	r4, r0
 810ae84:	9209      	str	r2, [sp, #36]	; 0x24
 810ae86:	930c      	str	r3, [sp, #48]	; 0x30
 810ae88:	46bb      	mov	fp, r7
 810ae8a:	b975      	cbnz	r5, 810aeaa <_dtoa_r+0x42>
 810ae8c:	2010      	movs	r0, #16
 810ae8e:	f001 fb6b 	bl	810c568 <malloc>
 810ae92:	4602      	mov	r2, r0
 810ae94:	6260      	str	r0, [r4, #36]	; 0x24
 810ae96:	b920      	cbnz	r0, 810aea2 <_dtoa_r+0x3a>
 810ae98:	4ba7      	ldr	r3, [pc, #668]	; (810b138 <_dtoa_r+0x2d0>)
 810ae9a:	21ea      	movs	r1, #234	; 0xea
 810ae9c:	48a7      	ldr	r0, [pc, #668]	; (810b13c <_dtoa_r+0x2d4>)
 810ae9e:	f002 fc79 	bl	810d794 <__assert_func>
 810aea2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810aea6:	6005      	str	r5, [r0, #0]
 810aea8:	60c5      	str	r5, [r0, #12]
 810aeaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810aeac:	6819      	ldr	r1, [r3, #0]
 810aeae:	b151      	cbz	r1, 810aec6 <_dtoa_r+0x5e>
 810aeb0:	685a      	ldr	r2, [r3, #4]
 810aeb2:	604a      	str	r2, [r1, #4]
 810aeb4:	2301      	movs	r3, #1
 810aeb6:	4093      	lsls	r3, r2
 810aeb8:	608b      	str	r3, [r1, #8]
 810aeba:	4620      	mov	r0, r4
 810aebc:	f001 fbae 	bl	810c61c <_Bfree>
 810aec0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810aec2:	2200      	movs	r2, #0
 810aec4:	601a      	str	r2, [r3, #0]
 810aec6:	1e3b      	subs	r3, r7, #0
 810aec8:	bfaa      	itet	ge
 810aeca:	2300      	movge	r3, #0
 810aecc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 810aed0:	f8c8 3000 	strge.w	r3, [r8]
 810aed4:	4b9a      	ldr	r3, [pc, #616]	; (810b140 <_dtoa_r+0x2d8>)
 810aed6:	bfbc      	itt	lt
 810aed8:	2201      	movlt	r2, #1
 810aeda:	f8c8 2000 	strlt.w	r2, [r8]
 810aede:	ea33 030b 	bics.w	r3, r3, fp
 810aee2:	d11b      	bne.n	810af1c <_dtoa_r+0xb4>
 810aee4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810aee6:	f242 730f 	movw	r3, #9999	; 0x270f
 810aeea:	6013      	str	r3, [r2, #0]
 810aeec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810aef0:	4333      	orrs	r3, r6
 810aef2:	f000 8592 	beq.w	810ba1a <_dtoa_r+0xbb2>
 810aef6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810aef8:	b963      	cbnz	r3, 810af14 <_dtoa_r+0xac>
 810aefa:	4b92      	ldr	r3, [pc, #584]	; (810b144 <_dtoa_r+0x2dc>)
 810aefc:	e022      	b.n	810af44 <_dtoa_r+0xdc>
 810aefe:	4b92      	ldr	r3, [pc, #584]	; (810b148 <_dtoa_r+0x2e0>)
 810af00:	9301      	str	r3, [sp, #4]
 810af02:	3308      	adds	r3, #8
 810af04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810af06:	6013      	str	r3, [r2, #0]
 810af08:	9801      	ldr	r0, [sp, #4]
 810af0a:	b013      	add	sp, #76	; 0x4c
 810af0c:	ecbd 8b04 	vpop	{d8-d9}
 810af10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810af14:	4b8b      	ldr	r3, [pc, #556]	; (810b144 <_dtoa_r+0x2dc>)
 810af16:	9301      	str	r3, [sp, #4]
 810af18:	3303      	adds	r3, #3
 810af1a:	e7f3      	b.n	810af04 <_dtoa_r+0x9c>
 810af1c:	2200      	movs	r2, #0
 810af1e:	2300      	movs	r3, #0
 810af20:	4650      	mov	r0, sl
 810af22:	4659      	mov	r1, fp
 810af24:	f7f5 fe58 	bl	8100bd8 <__aeabi_dcmpeq>
 810af28:	ec4b ab19 	vmov	d9, sl, fp
 810af2c:	4680      	mov	r8, r0
 810af2e:	b158      	cbz	r0, 810af48 <_dtoa_r+0xe0>
 810af30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810af32:	2301      	movs	r3, #1
 810af34:	6013      	str	r3, [r2, #0]
 810af36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810af38:	2b00      	cmp	r3, #0
 810af3a:	f000 856b 	beq.w	810ba14 <_dtoa_r+0xbac>
 810af3e:	4883      	ldr	r0, [pc, #524]	; (810b14c <_dtoa_r+0x2e4>)
 810af40:	6018      	str	r0, [r3, #0]
 810af42:	1e43      	subs	r3, r0, #1
 810af44:	9301      	str	r3, [sp, #4]
 810af46:	e7df      	b.n	810af08 <_dtoa_r+0xa0>
 810af48:	ec4b ab10 	vmov	d0, sl, fp
 810af4c:	aa10      	add	r2, sp, #64	; 0x40
 810af4e:	a911      	add	r1, sp, #68	; 0x44
 810af50:	4620      	mov	r0, r4
 810af52:	f001 ff11 	bl	810cd78 <__d2b>
 810af56:	f3cb 550a 	ubfx	r5, fp, #20, #11
 810af5a:	ee08 0a10 	vmov	s16, r0
 810af5e:	2d00      	cmp	r5, #0
 810af60:	f000 8084 	beq.w	810b06c <_dtoa_r+0x204>
 810af64:	ee19 3a90 	vmov	r3, s19
 810af68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810af6c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 810af70:	4656      	mov	r6, sl
 810af72:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 810af76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 810af7a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 810af7e:	4b74      	ldr	r3, [pc, #464]	; (810b150 <_dtoa_r+0x2e8>)
 810af80:	2200      	movs	r2, #0
 810af82:	4630      	mov	r0, r6
 810af84:	4639      	mov	r1, r7
 810af86:	f7f5 fa07 	bl	8100398 <__aeabi_dsub>
 810af8a:	a365      	add	r3, pc, #404	; (adr r3, 810b120 <_dtoa_r+0x2b8>)
 810af8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810af90:	f7f5 fbba 	bl	8100708 <__aeabi_dmul>
 810af94:	a364      	add	r3, pc, #400	; (adr r3, 810b128 <_dtoa_r+0x2c0>)
 810af96:	e9d3 2300 	ldrd	r2, r3, [r3]
 810af9a:	f7f5 f9ff 	bl	810039c <__adddf3>
 810af9e:	4606      	mov	r6, r0
 810afa0:	4628      	mov	r0, r5
 810afa2:	460f      	mov	r7, r1
 810afa4:	f7f5 fb46 	bl	8100634 <__aeabi_i2d>
 810afa8:	a361      	add	r3, pc, #388	; (adr r3, 810b130 <_dtoa_r+0x2c8>)
 810afaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 810afae:	f7f5 fbab 	bl	8100708 <__aeabi_dmul>
 810afb2:	4602      	mov	r2, r0
 810afb4:	460b      	mov	r3, r1
 810afb6:	4630      	mov	r0, r6
 810afb8:	4639      	mov	r1, r7
 810afba:	f7f5 f9ef 	bl	810039c <__adddf3>
 810afbe:	4606      	mov	r6, r0
 810afc0:	460f      	mov	r7, r1
 810afc2:	f7f5 fe51 	bl	8100c68 <__aeabi_d2iz>
 810afc6:	2200      	movs	r2, #0
 810afc8:	9000      	str	r0, [sp, #0]
 810afca:	2300      	movs	r3, #0
 810afcc:	4630      	mov	r0, r6
 810afce:	4639      	mov	r1, r7
 810afd0:	f7f5 fe0c 	bl	8100bec <__aeabi_dcmplt>
 810afd4:	b150      	cbz	r0, 810afec <_dtoa_r+0x184>
 810afd6:	9800      	ldr	r0, [sp, #0]
 810afd8:	f7f5 fb2c 	bl	8100634 <__aeabi_i2d>
 810afdc:	4632      	mov	r2, r6
 810afde:	463b      	mov	r3, r7
 810afe0:	f7f5 fdfa 	bl	8100bd8 <__aeabi_dcmpeq>
 810afe4:	b910      	cbnz	r0, 810afec <_dtoa_r+0x184>
 810afe6:	9b00      	ldr	r3, [sp, #0]
 810afe8:	3b01      	subs	r3, #1
 810afea:	9300      	str	r3, [sp, #0]
 810afec:	9b00      	ldr	r3, [sp, #0]
 810afee:	2b16      	cmp	r3, #22
 810aff0:	d85a      	bhi.n	810b0a8 <_dtoa_r+0x240>
 810aff2:	9a00      	ldr	r2, [sp, #0]
 810aff4:	4b57      	ldr	r3, [pc, #348]	; (810b154 <_dtoa_r+0x2ec>)
 810aff6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810affa:	e9d3 2300 	ldrd	r2, r3, [r3]
 810affe:	ec51 0b19 	vmov	r0, r1, d9
 810b002:	f7f5 fdf3 	bl	8100bec <__aeabi_dcmplt>
 810b006:	2800      	cmp	r0, #0
 810b008:	d050      	beq.n	810b0ac <_dtoa_r+0x244>
 810b00a:	9b00      	ldr	r3, [sp, #0]
 810b00c:	3b01      	subs	r3, #1
 810b00e:	9300      	str	r3, [sp, #0]
 810b010:	2300      	movs	r3, #0
 810b012:	930b      	str	r3, [sp, #44]	; 0x2c
 810b014:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810b016:	1b5d      	subs	r5, r3, r5
 810b018:	1e6b      	subs	r3, r5, #1
 810b01a:	9305      	str	r3, [sp, #20]
 810b01c:	bf45      	ittet	mi
 810b01e:	f1c5 0301 	rsbmi	r3, r5, #1
 810b022:	9304      	strmi	r3, [sp, #16]
 810b024:	2300      	movpl	r3, #0
 810b026:	2300      	movmi	r3, #0
 810b028:	bf4c      	ite	mi
 810b02a:	9305      	strmi	r3, [sp, #20]
 810b02c:	9304      	strpl	r3, [sp, #16]
 810b02e:	9b00      	ldr	r3, [sp, #0]
 810b030:	2b00      	cmp	r3, #0
 810b032:	db3d      	blt.n	810b0b0 <_dtoa_r+0x248>
 810b034:	9b05      	ldr	r3, [sp, #20]
 810b036:	9a00      	ldr	r2, [sp, #0]
 810b038:	920a      	str	r2, [sp, #40]	; 0x28
 810b03a:	4413      	add	r3, r2
 810b03c:	9305      	str	r3, [sp, #20]
 810b03e:	2300      	movs	r3, #0
 810b040:	9307      	str	r3, [sp, #28]
 810b042:	9b06      	ldr	r3, [sp, #24]
 810b044:	2b09      	cmp	r3, #9
 810b046:	f200 8089 	bhi.w	810b15c <_dtoa_r+0x2f4>
 810b04a:	2b05      	cmp	r3, #5
 810b04c:	bfc4      	itt	gt
 810b04e:	3b04      	subgt	r3, #4
 810b050:	9306      	strgt	r3, [sp, #24]
 810b052:	9b06      	ldr	r3, [sp, #24]
 810b054:	f1a3 0302 	sub.w	r3, r3, #2
 810b058:	bfcc      	ite	gt
 810b05a:	2500      	movgt	r5, #0
 810b05c:	2501      	movle	r5, #1
 810b05e:	2b03      	cmp	r3, #3
 810b060:	f200 8087 	bhi.w	810b172 <_dtoa_r+0x30a>
 810b064:	e8df f003 	tbb	[pc, r3]
 810b068:	59383a2d 	.word	0x59383a2d
 810b06c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 810b070:	441d      	add	r5, r3
 810b072:	f205 4332 	addw	r3, r5, #1074	; 0x432
 810b076:	2b20      	cmp	r3, #32
 810b078:	bfc1      	itttt	gt
 810b07a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 810b07e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 810b082:	fa0b f303 	lslgt.w	r3, fp, r3
 810b086:	fa26 f000 	lsrgt.w	r0, r6, r0
 810b08a:	bfda      	itte	le
 810b08c:	f1c3 0320 	rsble	r3, r3, #32
 810b090:	fa06 f003 	lslle.w	r0, r6, r3
 810b094:	4318      	orrgt	r0, r3
 810b096:	f7f5 fabd 	bl	8100614 <__aeabi_ui2d>
 810b09a:	2301      	movs	r3, #1
 810b09c:	4606      	mov	r6, r0
 810b09e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 810b0a2:	3d01      	subs	r5, #1
 810b0a4:	930e      	str	r3, [sp, #56]	; 0x38
 810b0a6:	e76a      	b.n	810af7e <_dtoa_r+0x116>
 810b0a8:	2301      	movs	r3, #1
 810b0aa:	e7b2      	b.n	810b012 <_dtoa_r+0x1aa>
 810b0ac:	900b      	str	r0, [sp, #44]	; 0x2c
 810b0ae:	e7b1      	b.n	810b014 <_dtoa_r+0x1ac>
 810b0b0:	9b04      	ldr	r3, [sp, #16]
 810b0b2:	9a00      	ldr	r2, [sp, #0]
 810b0b4:	1a9b      	subs	r3, r3, r2
 810b0b6:	9304      	str	r3, [sp, #16]
 810b0b8:	4253      	negs	r3, r2
 810b0ba:	9307      	str	r3, [sp, #28]
 810b0bc:	2300      	movs	r3, #0
 810b0be:	930a      	str	r3, [sp, #40]	; 0x28
 810b0c0:	e7bf      	b.n	810b042 <_dtoa_r+0x1da>
 810b0c2:	2300      	movs	r3, #0
 810b0c4:	9308      	str	r3, [sp, #32]
 810b0c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b0c8:	2b00      	cmp	r3, #0
 810b0ca:	dc55      	bgt.n	810b178 <_dtoa_r+0x310>
 810b0cc:	2301      	movs	r3, #1
 810b0ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 810b0d2:	461a      	mov	r2, r3
 810b0d4:	9209      	str	r2, [sp, #36]	; 0x24
 810b0d6:	e00c      	b.n	810b0f2 <_dtoa_r+0x28a>
 810b0d8:	2301      	movs	r3, #1
 810b0da:	e7f3      	b.n	810b0c4 <_dtoa_r+0x25c>
 810b0dc:	2300      	movs	r3, #0
 810b0de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810b0e0:	9308      	str	r3, [sp, #32]
 810b0e2:	9b00      	ldr	r3, [sp, #0]
 810b0e4:	4413      	add	r3, r2
 810b0e6:	9302      	str	r3, [sp, #8]
 810b0e8:	3301      	adds	r3, #1
 810b0ea:	2b01      	cmp	r3, #1
 810b0ec:	9303      	str	r3, [sp, #12]
 810b0ee:	bfb8      	it	lt
 810b0f0:	2301      	movlt	r3, #1
 810b0f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 810b0f4:	2200      	movs	r2, #0
 810b0f6:	6042      	str	r2, [r0, #4]
 810b0f8:	2204      	movs	r2, #4
 810b0fa:	f102 0614 	add.w	r6, r2, #20
 810b0fe:	429e      	cmp	r6, r3
 810b100:	6841      	ldr	r1, [r0, #4]
 810b102:	d93d      	bls.n	810b180 <_dtoa_r+0x318>
 810b104:	4620      	mov	r0, r4
 810b106:	f001 fa49 	bl	810c59c <_Balloc>
 810b10a:	9001      	str	r0, [sp, #4]
 810b10c:	2800      	cmp	r0, #0
 810b10e:	d13b      	bne.n	810b188 <_dtoa_r+0x320>
 810b110:	4b11      	ldr	r3, [pc, #68]	; (810b158 <_dtoa_r+0x2f0>)
 810b112:	4602      	mov	r2, r0
 810b114:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 810b118:	e6c0      	b.n	810ae9c <_dtoa_r+0x34>
 810b11a:	2301      	movs	r3, #1
 810b11c:	e7df      	b.n	810b0de <_dtoa_r+0x276>
 810b11e:	bf00      	nop
 810b120:	636f4361 	.word	0x636f4361
 810b124:	3fd287a7 	.word	0x3fd287a7
 810b128:	8b60c8b3 	.word	0x8b60c8b3
 810b12c:	3fc68a28 	.word	0x3fc68a28
 810b130:	509f79fb 	.word	0x509f79fb
 810b134:	3fd34413 	.word	0x3fd34413
 810b138:	0810e0d6 	.word	0x0810e0d6
 810b13c:	0810e0ed 	.word	0x0810e0ed
 810b140:	7ff00000 	.word	0x7ff00000
 810b144:	0810e0d2 	.word	0x0810e0d2
 810b148:	0810e0c9 	.word	0x0810e0c9
 810b14c:	0810df4d 	.word	0x0810df4d
 810b150:	3ff80000 	.word	0x3ff80000
 810b154:	0810e2c0 	.word	0x0810e2c0
 810b158:	0810e148 	.word	0x0810e148
 810b15c:	2501      	movs	r5, #1
 810b15e:	2300      	movs	r3, #0
 810b160:	9306      	str	r3, [sp, #24]
 810b162:	9508      	str	r5, [sp, #32]
 810b164:	f04f 33ff 	mov.w	r3, #4294967295
 810b168:	e9cd 3302 	strd	r3, r3, [sp, #8]
 810b16c:	2200      	movs	r2, #0
 810b16e:	2312      	movs	r3, #18
 810b170:	e7b0      	b.n	810b0d4 <_dtoa_r+0x26c>
 810b172:	2301      	movs	r3, #1
 810b174:	9308      	str	r3, [sp, #32]
 810b176:	e7f5      	b.n	810b164 <_dtoa_r+0x2fc>
 810b178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b17a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 810b17e:	e7b8      	b.n	810b0f2 <_dtoa_r+0x28a>
 810b180:	3101      	adds	r1, #1
 810b182:	6041      	str	r1, [r0, #4]
 810b184:	0052      	lsls	r2, r2, #1
 810b186:	e7b8      	b.n	810b0fa <_dtoa_r+0x292>
 810b188:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810b18a:	9a01      	ldr	r2, [sp, #4]
 810b18c:	601a      	str	r2, [r3, #0]
 810b18e:	9b03      	ldr	r3, [sp, #12]
 810b190:	2b0e      	cmp	r3, #14
 810b192:	f200 809d 	bhi.w	810b2d0 <_dtoa_r+0x468>
 810b196:	2d00      	cmp	r5, #0
 810b198:	f000 809a 	beq.w	810b2d0 <_dtoa_r+0x468>
 810b19c:	9b00      	ldr	r3, [sp, #0]
 810b19e:	2b00      	cmp	r3, #0
 810b1a0:	dd32      	ble.n	810b208 <_dtoa_r+0x3a0>
 810b1a2:	4ab7      	ldr	r2, [pc, #732]	; (810b480 <_dtoa_r+0x618>)
 810b1a4:	f003 030f 	and.w	r3, r3, #15
 810b1a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 810b1ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 810b1b0:	9b00      	ldr	r3, [sp, #0]
 810b1b2:	05d8      	lsls	r0, r3, #23
 810b1b4:	ea4f 1723 	mov.w	r7, r3, asr #4
 810b1b8:	d516      	bpl.n	810b1e8 <_dtoa_r+0x380>
 810b1ba:	4bb2      	ldr	r3, [pc, #712]	; (810b484 <_dtoa_r+0x61c>)
 810b1bc:	ec51 0b19 	vmov	r0, r1, d9
 810b1c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810b1c4:	f7f5 fbca 	bl	810095c <__aeabi_ddiv>
 810b1c8:	f007 070f 	and.w	r7, r7, #15
 810b1cc:	4682      	mov	sl, r0
 810b1ce:	468b      	mov	fp, r1
 810b1d0:	2503      	movs	r5, #3
 810b1d2:	4eac      	ldr	r6, [pc, #688]	; (810b484 <_dtoa_r+0x61c>)
 810b1d4:	b957      	cbnz	r7, 810b1ec <_dtoa_r+0x384>
 810b1d6:	4642      	mov	r2, r8
 810b1d8:	464b      	mov	r3, r9
 810b1da:	4650      	mov	r0, sl
 810b1dc:	4659      	mov	r1, fp
 810b1de:	f7f5 fbbd 	bl	810095c <__aeabi_ddiv>
 810b1e2:	4682      	mov	sl, r0
 810b1e4:	468b      	mov	fp, r1
 810b1e6:	e028      	b.n	810b23a <_dtoa_r+0x3d2>
 810b1e8:	2502      	movs	r5, #2
 810b1ea:	e7f2      	b.n	810b1d2 <_dtoa_r+0x36a>
 810b1ec:	07f9      	lsls	r1, r7, #31
 810b1ee:	d508      	bpl.n	810b202 <_dtoa_r+0x39a>
 810b1f0:	4640      	mov	r0, r8
 810b1f2:	4649      	mov	r1, r9
 810b1f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 810b1f8:	f7f5 fa86 	bl	8100708 <__aeabi_dmul>
 810b1fc:	3501      	adds	r5, #1
 810b1fe:	4680      	mov	r8, r0
 810b200:	4689      	mov	r9, r1
 810b202:	107f      	asrs	r7, r7, #1
 810b204:	3608      	adds	r6, #8
 810b206:	e7e5      	b.n	810b1d4 <_dtoa_r+0x36c>
 810b208:	f000 809b 	beq.w	810b342 <_dtoa_r+0x4da>
 810b20c:	9b00      	ldr	r3, [sp, #0]
 810b20e:	4f9d      	ldr	r7, [pc, #628]	; (810b484 <_dtoa_r+0x61c>)
 810b210:	425e      	negs	r6, r3
 810b212:	4b9b      	ldr	r3, [pc, #620]	; (810b480 <_dtoa_r+0x618>)
 810b214:	f006 020f 	and.w	r2, r6, #15
 810b218:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810b21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b220:	ec51 0b19 	vmov	r0, r1, d9
 810b224:	f7f5 fa70 	bl	8100708 <__aeabi_dmul>
 810b228:	1136      	asrs	r6, r6, #4
 810b22a:	4682      	mov	sl, r0
 810b22c:	468b      	mov	fp, r1
 810b22e:	2300      	movs	r3, #0
 810b230:	2502      	movs	r5, #2
 810b232:	2e00      	cmp	r6, #0
 810b234:	d17a      	bne.n	810b32c <_dtoa_r+0x4c4>
 810b236:	2b00      	cmp	r3, #0
 810b238:	d1d3      	bne.n	810b1e2 <_dtoa_r+0x37a>
 810b23a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810b23c:	2b00      	cmp	r3, #0
 810b23e:	f000 8082 	beq.w	810b346 <_dtoa_r+0x4de>
 810b242:	4b91      	ldr	r3, [pc, #580]	; (810b488 <_dtoa_r+0x620>)
 810b244:	2200      	movs	r2, #0
 810b246:	4650      	mov	r0, sl
 810b248:	4659      	mov	r1, fp
 810b24a:	f7f5 fccf 	bl	8100bec <__aeabi_dcmplt>
 810b24e:	2800      	cmp	r0, #0
 810b250:	d079      	beq.n	810b346 <_dtoa_r+0x4de>
 810b252:	9b03      	ldr	r3, [sp, #12]
 810b254:	2b00      	cmp	r3, #0
 810b256:	d076      	beq.n	810b346 <_dtoa_r+0x4de>
 810b258:	9b02      	ldr	r3, [sp, #8]
 810b25a:	2b00      	cmp	r3, #0
 810b25c:	dd36      	ble.n	810b2cc <_dtoa_r+0x464>
 810b25e:	9b00      	ldr	r3, [sp, #0]
 810b260:	4650      	mov	r0, sl
 810b262:	4659      	mov	r1, fp
 810b264:	1e5f      	subs	r7, r3, #1
 810b266:	2200      	movs	r2, #0
 810b268:	4b88      	ldr	r3, [pc, #544]	; (810b48c <_dtoa_r+0x624>)
 810b26a:	f7f5 fa4d 	bl	8100708 <__aeabi_dmul>
 810b26e:	9e02      	ldr	r6, [sp, #8]
 810b270:	4682      	mov	sl, r0
 810b272:	468b      	mov	fp, r1
 810b274:	3501      	adds	r5, #1
 810b276:	4628      	mov	r0, r5
 810b278:	f7f5 f9dc 	bl	8100634 <__aeabi_i2d>
 810b27c:	4652      	mov	r2, sl
 810b27e:	465b      	mov	r3, fp
 810b280:	f7f5 fa42 	bl	8100708 <__aeabi_dmul>
 810b284:	4b82      	ldr	r3, [pc, #520]	; (810b490 <_dtoa_r+0x628>)
 810b286:	2200      	movs	r2, #0
 810b288:	f7f5 f888 	bl	810039c <__adddf3>
 810b28c:	46d0      	mov	r8, sl
 810b28e:	46d9      	mov	r9, fp
 810b290:	4682      	mov	sl, r0
 810b292:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 810b296:	2e00      	cmp	r6, #0
 810b298:	d158      	bne.n	810b34c <_dtoa_r+0x4e4>
 810b29a:	4b7e      	ldr	r3, [pc, #504]	; (810b494 <_dtoa_r+0x62c>)
 810b29c:	2200      	movs	r2, #0
 810b29e:	4640      	mov	r0, r8
 810b2a0:	4649      	mov	r1, r9
 810b2a2:	f7f5 f879 	bl	8100398 <__aeabi_dsub>
 810b2a6:	4652      	mov	r2, sl
 810b2a8:	465b      	mov	r3, fp
 810b2aa:	4680      	mov	r8, r0
 810b2ac:	4689      	mov	r9, r1
 810b2ae:	f7f5 fcbb 	bl	8100c28 <__aeabi_dcmpgt>
 810b2b2:	2800      	cmp	r0, #0
 810b2b4:	f040 8295 	bne.w	810b7e2 <_dtoa_r+0x97a>
 810b2b8:	4652      	mov	r2, sl
 810b2ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 810b2be:	4640      	mov	r0, r8
 810b2c0:	4649      	mov	r1, r9
 810b2c2:	f7f5 fc93 	bl	8100bec <__aeabi_dcmplt>
 810b2c6:	2800      	cmp	r0, #0
 810b2c8:	f040 8289 	bne.w	810b7de <_dtoa_r+0x976>
 810b2cc:	ec5b ab19 	vmov	sl, fp, d9
 810b2d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810b2d2:	2b00      	cmp	r3, #0
 810b2d4:	f2c0 8148 	blt.w	810b568 <_dtoa_r+0x700>
 810b2d8:	9a00      	ldr	r2, [sp, #0]
 810b2da:	2a0e      	cmp	r2, #14
 810b2dc:	f300 8144 	bgt.w	810b568 <_dtoa_r+0x700>
 810b2e0:	4b67      	ldr	r3, [pc, #412]	; (810b480 <_dtoa_r+0x618>)
 810b2e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810b2e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 810b2ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b2ec:	2b00      	cmp	r3, #0
 810b2ee:	f280 80d5 	bge.w	810b49c <_dtoa_r+0x634>
 810b2f2:	9b03      	ldr	r3, [sp, #12]
 810b2f4:	2b00      	cmp	r3, #0
 810b2f6:	f300 80d1 	bgt.w	810b49c <_dtoa_r+0x634>
 810b2fa:	f040 826f 	bne.w	810b7dc <_dtoa_r+0x974>
 810b2fe:	4b65      	ldr	r3, [pc, #404]	; (810b494 <_dtoa_r+0x62c>)
 810b300:	2200      	movs	r2, #0
 810b302:	4640      	mov	r0, r8
 810b304:	4649      	mov	r1, r9
 810b306:	f7f5 f9ff 	bl	8100708 <__aeabi_dmul>
 810b30a:	4652      	mov	r2, sl
 810b30c:	465b      	mov	r3, fp
 810b30e:	f7f5 fc81 	bl	8100c14 <__aeabi_dcmpge>
 810b312:	9e03      	ldr	r6, [sp, #12]
 810b314:	4637      	mov	r7, r6
 810b316:	2800      	cmp	r0, #0
 810b318:	f040 8245 	bne.w	810b7a6 <_dtoa_r+0x93e>
 810b31c:	9d01      	ldr	r5, [sp, #4]
 810b31e:	2331      	movs	r3, #49	; 0x31
 810b320:	f805 3b01 	strb.w	r3, [r5], #1
 810b324:	9b00      	ldr	r3, [sp, #0]
 810b326:	3301      	adds	r3, #1
 810b328:	9300      	str	r3, [sp, #0]
 810b32a:	e240      	b.n	810b7ae <_dtoa_r+0x946>
 810b32c:	07f2      	lsls	r2, r6, #31
 810b32e:	d505      	bpl.n	810b33c <_dtoa_r+0x4d4>
 810b330:	e9d7 2300 	ldrd	r2, r3, [r7]
 810b334:	f7f5 f9e8 	bl	8100708 <__aeabi_dmul>
 810b338:	3501      	adds	r5, #1
 810b33a:	2301      	movs	r3, #1
 810b33c:	1076      	asrs	r6, r6, #1
 810b33e:	3708      	adds	r7, #8
 810b340:	e777      	b.n	810b232 <_dtoa_r+0x3ca>
 810b342:	2502      	movs	r5, #2
 810b344:	e779      	b.n	810b23a <_dtoa_r+0x3d2>
 810b346:	9f00      	ldr	r7, [sp, #0]
 810b348:	9e03      	ldr	r6, [sp, #12]
 810b34a:	e794      	b.n	810b276 <_dtoa_r+0x40e>
 810b34c:	9901      	ldr	r1, [sp, #4]
 810b34e:	4b4c      	ldr	r3, [pc, #304]	; (810b480 <_dtoa_r+0x618>)
 810b350:	4431      	add	r1, r6
 810b352:	910d      	str	r1, [sp, #52]	; 0x34
 810b354:	9908      	ldr	r1, [sp, #32]
 810b356:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 810b35a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810b35e:	2900      	cmp	r1, #0
 810b360:	d043      	beq.n	810b3ea <_dtoa_r+0x582>
 810b362:	494d      	ldr	r1, [pc, #308]	; (810b498 <_dtoa_r+0x630>)
 810b364:	2000      	movs	r0, #0
 810b366:	f7f5 faf9 	bl	810095c <__aeabi_ddiv>
 810b36a:	4652      	mov	r2, sl
 810b36c:	465b      	mov	r3, fp
 810b36e:	f7f5 f813 	bl	8100398 <__aeabi_dsub>
 810b372:	9d01      	ldr	r5, [sp, #4]
 810b374:	4682      	mov	sl, r0
 810b376:	468b      	mov	fp, r1
 810b378:	4649      	mov	r1, r9
 810b37a:	4640      	mov	r0, r8
 810b37c:	f7f5 fc74 	bl	8100c68 <__aeabi_d2iz>
 810b380:	4606      	mov	r6, r0
 810b382:	f7f5 f957 	bl	8100634 <__aeabi_i2d>
 810b386:	4602      	mov	r2, r0
 810b388:	460b      	mov	r3, r1
 810b38a:	4640      	mov	r0, r8
 810b38c:	4649      	mov	r1, r9
 810b38e:	f7f5 f803 	bl	8100398 <__aeabi_dsub>
 810b392:	3630      	adds	r6, #48	; 0x30
 810b394:	f805 6b01 	strb.w	r6, [r5], #1
 810b398:	4652      	mov	r2, sl
 810b39a:	465b      	mov	r3, fp
 810b39c:	4680      	mov	r8, r0
 810b39e:	4689      	mov	r9, r1
 810b3a0:	f7f5 fc24 	bl	8100bec <__aeabi_dcmplt>
 810b3a4:	2800      	cmp	r0, #0
 810b3a6:	d163      	bne.n	810b470 <_dtoa_r+0x608>
 810b3a8:	4642      	mov	r2, r8
 810b3aa:	464b      	mov	r3, r9
 810b3ac:	4936      	ldr	r1, [pc, #216]	; (810b488 <_dtoa_r+0x620>)
 810b3ae:	2000      	movs	r0, #0
 810b3b0:	f7f4 fff2 	bl	8100398 <__aeabi_dsub>
 810b3b4:	4652      	mov	r2, sl
 810b3b6:	465b      	mov	r3, fp
 810b3b8:	f7f5 fc18 	bl	8100bec <__aeabi_dcmplt>
 810b3bc:	2800      	cmp	r0, #0
 810b3be:	f040 80b5 	bne.w	810b52c <_dtoa_r+0x6c4>
 810b3c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810b3c4:	429d      	cmp	r5, r3
 810b3c6:	d081      	beq.n	810b2cc <_dtoa_r+0x464>
 810b3c8:	4b30      	ldr	r3, [pc, #192]	; (810b48c <_dtoa_r+0x624>)
 810b3ca:	2200      	movs	r2, #0
 810b3cc:	4650      	mov	r0, sl
 810b3ce:	4659      	mov	r1, fp
 810b3d0:	f7f5 f99a 	bl	8100708 <__aeabi_dmul>
 810b3d4:	4b2d      	ldr	r3, [pc, #180]	; (810b48c <_dtoa_r+0x624>)
 810b3d6:	4682      	mov	sl, r0
 810b3d8:	468b      	mov	fp, r1
 810b3da:	4640      	mov	r0, r8
 810b3dc:	4649      	mov	r1, r9
 810b3de:	2200      	movs	r2, #0
 810b3e0:	f7f5 f992 	bl	8100708 <__aeabi_dmul>
 810b3e4:	4680      	mov	r8, r0
 810b3e6:	4689      	mov	r9, r1
 810b3e8:	e7c6      	b.n	810b378 <_dtoa_r+0x510>
 810b3ea:	4650      	mov	r0, sl
 810b3ec:	4659      	mov	r1, fp
 810b3ee:	f7f5 f98b 	bl	8100708 <__aeabi_dmul>
 810b3f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810b3f4:	9d01      	ldr	r5, [sp, #4]
 810b3f6:	930f      	str	r3, [sp, #60]	; 0x3c
 810b3f8:	4682      	mov	sl, r0
 810b3fa:	468b      	mov	fp, r1
 810b3fc:	4649      	mov	r1, r9
 810b3fe:	4640      	mov	r0, r8
 810b400:	f7f5 fc32 	bl	8100c68 <__aeabi_d2iz>
 810b404:	4606      	mov	r6, r0
 810b406:	f7f5 f915 	bl	8100634 <__aeabi_i2d>
 810b40a:	3630      	adds	r6, #48	; 0x30
 810b40c:	4602      	mov	r2, r0
 810b40e:	460b      	mov	r3, r1
 810b410:	4640      	mov	r0, r8
 810b412:	4649      	mov	r1, r9
 810b414:	f7f4 ffc0 	bl	8100398 <__aeabi_dsub>
 810b418:	f805 6b01 	strb.w	r6, [r5], #1
 810b41c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810b41e:	429d      	cmp	r5, r3
 810b420:	4680      	mov	r8, r0
 810b422:	4689      	mov	r9, r1
 810b424:	f04f 0200 	mov.w	r2, #0
 810b428:	d124      	bne.n	810b474 <_dtoa_r+0x60c>
 810b42a:	4b1b      	ldr	r3, [pc, #108]	; (810b498 <_dtoa_r+0x630>)
 810b42c:	4650      	mov	r0, sl
 810b42e:	4659      	mov	r1, fp
 810b430:	f7f4 ffb4 	bl	810039c <__adddf3>
 810b434:	4602      	mov	r2, r0
 810b436:	460b      	mov	r3, r1
 810b438:	4640      	mov	r0, r8
 810b43a:	4649      	mov	r1, r9
 810b43c:	f7f5 fbf4 	bl	8100c28 <__aeabi_dcmpgt>
 810b440:	2800      	cmp	r0, #0
 810b442:	d173      	bne.n	810b52c <_dtoa_r+0x6c4>
 810b444:	4652      	mov	r2, sl
 810b446:	465b      	mov	r3, fp
 810b448:	4913      	ldr	r1, [pc, #76]	; (810b498 <_dtoa_r+0x630>)
 810b44a:	2000      	movs	r0, #0
 810b44c:	f7f4 ffa4 	bl	8100398 <__aeabi_dsub>
 810b450:	4602      	mov	r2, r0
 810b452:	460b      	mov	r3, r1
 810b454:	4640      	mov	r0, r8
 810b456:	4649      	mov	r1, r9
 810b458:	f7f5 fbc8 	bl	8100bec <__aeabi_dcmplt>
 810b45c:	2800      	cmp	r0, #0
 810b45e:	f43f af35 	beq.w	810b2cc <_dtoa_r+0x464>
 810b462:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 810b464:	1e6b      	subs	r3, r5, #1
 810b466:	930f      	str	r3, [sp, #60]	; 0x3c
 810b468:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810b46c:	2b30      	cmp	r3, #48	; 0x30
 810b46e:	d0f8      	beq.n	810b462 <_dtoa_r+0x5fa>
 810b470:	9700      	str	r7, [sp, #0]
 810b472:	e049      	b.n	810b508 <_dtoa_r+0x6a0>
 810b474:	4b05      	ldr	r3, [pc, #20]	; (810b48c <_dtoa_r+0x624>)
 810b476:	f7f5 f947 	bl	8100708 <__aeabi_dmul>
 810b47a:	4680      	mov	r8, r0
 810b47c:	4689      	mov	r9, r1
 810b47e:	e7bd      	b.n	810b3fc <_dtoa_r+0x594>
 810b480:	0810e2c0 	.word	0x0810e2c0
 810b484:	0810e298 	.word	0x0810e298
 810b488:	3ff00000 	.word	0x3ff00000
 810b48c:	40240000 	.word	0x40240000
 810b490:	401c0000 	.word	0x401c0000
 810b494:	40140000 	.word	0x40140000
 810b498:	3fe00000 	.word	0x3fe00000
 810b49c:	9d01      	ldr	r5, [sp, #4]
 810b49e:	4656      	mov	r6, sl
 810b4a0:	465f      	mov	r7, fp
 810b4a2:	4642      	mov	r2, r8
 810b4a4:	464b      	mov	r3, r9
 810b4a6:	4630      	mov	r0, r6
 810b4a8:	4639      	mov	r1, r7
 810b4aa:	f7f5 fa57 	bl	810095c <__aeabi_ddiv>
 810b4ae:	f7f5 fbdb 	bl	8100c68 <__aeabi_d2iz>
 810b4b2:	4682      	mov	sl, r0
 810b4b4:	f7f5 f8be 	bl	8100634 <__aeabi_i2d>
 810b4b8:	4642      	mov	r2, r8
 810b4ba:	464b      	mov	r3, r9
 810b4bc:	f7f5 f924 	bl	8100708 <__aeabi_dmul>
 810b4c0:	4602      	mov	r2, r0
 810b4c2:	460b      	mov	r3, r1
 810b4c4:	4630      	mov	r0, r6
 810b4c6:	4639      	mov	r1, r7
 810b4c8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 810b4cc:	f7f4 ff64 	bl	8100398 <__aeabi_dsub>
 810b4d0:	f805 6b01 	strb.w	r6, [r5], #1
 810b4d4:	9e01      	ldr	r6, [sp, #4]
 810b4d6:	9f03      	ldr	r7, [sp, #12]
 810b4d8:	1bae      	subs	r6, r5, r6
 810b4da:	42b7      	cmp	r7, r6
 810b4dc:	4602      	mov	r2, r0
 810b4de:	460b      	mov	r3, r1
 810b4e0:	d135      	bne.n	810b54e <_dtoa_r+0x6e6>
 810b4e2:	f7f4 ff5b 	bl	810039c <__adddf3>
 810b4e6:	4642      	mov	r2, r8
 810b4e8:	464b      	mov	r3, r9
 810b4ea:	4606      	mov	r6, r0
 810b4ec:	460f      	mov	r7, r1
 810b4ee:	f7f5 fb9b 	bl	8100c28 <__aeabi_dcmpgt>
 810b4f2:	b9d0      	cbnz	r0, 810b52a <_dtoa_r+0x6c2>
 810b4f4:	4642      	mov	r2, r8
 810b4f6:	464b      	mov	r3, r9
 810b4f8:	4630      	mov	r0, r6
 810b4fa:	4639      	mov	r1, r7
 810b4fc:	f7f5 fb6c 	bl	8100bd8 <__aeabi_dcmpeq>
 810b500:	b110      	cbz	r0, 810b508 <_dtoa_r+0x6a0>
 810b502:	f01a 0f01 	tst.w	sl, #1
 810b506:	d110      	bne.n	810b52a <_dtoa_r+0x6c2>
 810b508:	4620      	mov	r0, r4
 810b50a:	ee18 1a10 	vmov	r1, s16
 810b50e:	f001 f885 	bl	810c61c <_Bfree>
 810b512:	2300      	movs	r3, #0
 810b514:	9800      	ldr	r0, [sp, #0]
 810b516:	702b      	strb	r3, [r5, #0]
 810b518:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810b51a:	3001      	adds	r0, #1
 810b51c:	6018      	str	r0, [r3, #0]
 810b51e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810b520:	2b00      	cmp	r3, #0
 810b522:	f43f acf1 	beq.w	810af08 <_dtoa_r+0xa0>
 810b526:	601d      	str	r5, [r3, #0]
 810b528:	e4ee      	b.n	810af08 <_dtoa_r+0xa0>
 810b52a:	9f00      	ldr	r7, [sp, #0]
 810b52c:	462b      	mov	r3, r5
 810b52e:	461d      	mov	r5, r3
 810b530:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810b534:	2a39      	cmp	r2, #57	; 0x39
 810b536:	d106      	bne.n	810b546 <_dtoa_r+0x6de>
 810b538:	9a01      	ldr	r2, [sp, #4]
 810b53a:	429a      	cmp	r2, r3
 810b53c:	d1f7      	bne.n	810b52e <_dtoa_r+0x6c6>
 810b53e:	9901      	ldr	r1, [sp, #4]
 810b540:	2230      	movs	r2, #48	; 0x30
 810b542:	3701      	adds	r7, #1
 810b544:	700a      	strb	r2, [r1, #0]
 810b546:	781a      	ldrb	r2, [r3, #0]
 810b548:	3201      	adds	r2, #1
 810b54a:	701a      	strb	r2, [r3, #0]
 810b54c:	e790      	b.n	810b470 <_dtoa_r+0x608>
 810b54e:	4ba6      	ldr	r3, [pc, #664]	; (810b7e8 <_dtoa_r+0x980>)
 810b550:	2200      	movs	r2, #0
 810b552:	f7f5 f8d9 	bl	8100708 <__aeabi_dmul>
 810b556:	2200      	movs	r2, #0
 810b558:	2300      	movs	r3, #0
 810b55a:	4606      	mov	r6, r0
 810b55c:	460f      	mov	r7, r1
 810b55e:	f7f5 fb3b 	bl	8100bd8 <__aeabi_dcmpeq>
 810b562:	2800      	cmp	r0, #0
 810b564:	d09d      	beq.n	810b4a2 <_dtoa_r+0x63a>
 810b566:	e7cf      	b.n	810b508 <_dtoa_r+0x6a0>
 810b568:	9a08      	ldr	r2, [sp, #32]
 810b56a:	2a00      	cmp	r2, #0
 810b56c:	f000 80d7 	beq.w	810b71e <_dtoa_r+0x8b6>
 810b570:	9a06      	ldr	r2, [sp, #24]
 810b572:	2a01      	cmp	r2, #1
 810b574:	f300 80ba 	bgt.w	810b6ec <_dtoa_r+0x884>
 810b578:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810b57a:	2a00      	cmp	r2, #0
 810b57c:	f000 80b2 	beq.w	810b6e4 <_dtoa_r+0x87c>
 810b580:	f203 4333 	addw	r3, r3, #1075	; 0x433
 810b584:	9e07      	ldr	r6, [sp, #28]
 810b586:	9d04      	ldr	r5, [sp, #16]
 810b588:	9a04      	ldr	r2, [sp, #16]
 810b58a:	441a      	add	r2, r3
 810b58c:	9204      	str	r2, [sp, #16]
 810b58e:	9a05      	ldr	r2, [sp, #20]
 810b590:	2101      	movs	r1, #1
 810b592:	441a      	add	r2, r3
 810b594:	4620      	mov	r0, r4
 810b596:	9205      	str	r2, [sp, #20]
 810b598:	f001 f942 	bl	810c820 <__i2b>
 810b59c:	4607      	mov	r7, r0
 810b59e:	2d00      	cmp	r5, #0
 810b5a0:	dd0c      	ble.n	810b5bc <_dtoa_r+0x754>
 810b5a2:	9b05      	ldr	r3, [sp, #20]
 810b5a4:	2b00      	cmp	r3, #0
 810b5a6:	dd09      	ble.n	810b5bc <_dtoa_r+0x754>
 810b5a8:	42ab      	cmp	r3, r5
 810b5aa:	9a04      	ldr	r2, [sp, #16]
 810b5ac:	bfa8      	it	ge
 810b5ae:	462b      	movge	r3, r5
 810b5b0:	1ad2      	subs	r2, r2, r3
 810b5b2:	9204      	str	r2, [sp, #16]
 810b5b4:	9a05      	ldr	r2, [sp, #20]
 810b5b6:	1aed      	subs	r5, r5, r3
 810b5b8:	1ad3      	subs	r3, r2, r3
 810b5ba:	9305      	str	r3, [sp, #20]
 810b5bc:	9b07      	ldr	r3, [sp, #28]
 810b5be:	b31b      	cbz	r3, 810b608 <_dtoa_r+0x7a0>
 810b5c0:	9b08      	ldr	r3, [sp, #32]
 810b5c2:	2b00      	cmp	r3, #0
 810b5c4:	f000 80af 	beq.w	810b726 <_dtoa_r+0x8be>
 810b5c8:	2e00      	cmp	r6, #0
 810b5ca:	dd13      	ble.n	810b5f4 <_dtoa_r+0x78c>
 810b5cc:	4639      	mov	r1, r7
 810b5ce:	4632      	mov	r2, r6
 810b5d0:	4620      	mov	r0, r4
 810b5d2:	f001 f9e5 	bl	810c9a0 <__pow5mult>
 810b5d6:	ee18 2a10 	vmov	r2, s16
 810b5da:	4601      	mov	r1, r0
 810b5dc:	4607      	mov	r7, r0
 810b5de:	4620      	mov	r0, r4
 810b5e0:	f001 f934 	bl	810c84c <__multiply>
 810b5e4:	ee18 1a10 	vmov	r1, s16
 810b5e8:	4680      	mov	r8, r0
 810b5ea:	4620      	mov	r0, r4
 810b5ec:	f001 f816 	bl	810c61c <_Bfree>
 810b5f0:	ee08 8a10 	vmov	s16, r8
 810b5f4:	9b07      	ldr	r3, [sp, #28]
 810b5f6:	1b9a      	subs	r2, r3, r6
 810b5f8:	d006      	beq.n	810b608 <_dtoa_r+0x7a0>
 810b5fa:	ee18 1a10 	vmov	r1, s16
 810b5fe:	4620      	mov	r0, r4
 810b600:	f001 f9ce 	bl	810c9a0 <__pow5mult>
 810b604:	ee08 0a10 	vmov	s16, r0
 810b608:	2101      	movs	r1, #1
 810b60a:	4620      	mov	r0, r4
 810b60c:	f001 f908 	bl	810c820 <__i2b>
 810b610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b612:	2b00      	cmp	r3, #0
 810b614:	4606      	mov	r6, r0
 810b616:	f340 8088 	ble.w	810b72a <_dtoa_r+0x8c2>
 810b61a:	461a      	mov	r2, r3
 810b61c:	4601      	mov	r1, r0
 810b61e:	4620      	mov	r0, r4
 810b620:	f001 f9be 	bl	810c9a0 <__pow5mult>
 810b624:	9b06      	ldr	r3, [sp, #24]
 810b626:	2b01      	cmp	r3, #1
 810b628:	4606      	mov	r6, r0
 810b62a:	f340 8081 	ble.w	810b730 <_dtoa_r+0x8c8>
 810b62e:	f04f 0800 	mov.w	r8, #0
 810b632:	6933      	ldr	r3, [r6, #16]
 810b634:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 810b638:	6918      	ldr	r0, [r3, #16]
 810b63a:	f001 f8a1 	bl	810c780 <__hi0bits>
 810b63e:	f1c0 0020 	rsb	r0, r0, #32
 810b642:	9b05      	ldr	r3, [sp, #20]
 810b644:	4418      	add	r0, r3
 810b646:	f010 001f 	ands.w	r0, r0, #31
 810b64a:	f000 8092 	beq.w	810b772 <_dtoa_r+0x90a>
 810b64e:	f1c0 0320 	rsb	r3, r0, #32
 810b652:	2b04      	cmp	r3, #4
 810b654:	f340 808a 	ble.w	810b76c <_dtoa_r+0x904>
 810b658:	f1c0 001c 	rsb	r0, r0, #28
 810b65c:	9b04      	ldr	r3, [sp, #16]
 810b65e:	4403      	add	r3, r0
 810b660:	9304      	str	r3, [sp, #16]
 810b662:	9b05      	ldr	r3, [sp, #20]
 810b664:	4403      	add	r3, r0
 810b666:	4405      	add	r5, r0
 810b668:	9305      	str	r3, [sp, #20]
 810b66a:	9b04      	ldr	r3, [sp, #16]
 810b66c:	2b00      	cmp	r3, #0
 810b66e:	dd07      	ble.n	810b680 <_dtoa_r+0x818>
 810b670:	ee18 1a10 	vmov	r1, s16
 810b674:	461a      	mov	r2, r3
 810b676:	4620      	mov	r0, r4
 810b678:	f001 f9ec 	bl	810ca54 <__lshift>
 810b67c:	ee08 0a10 	vmov	s16, r0
 810b680:	9b05      	ldr	r3, [sp, #20]
 810b682:	2b00      	cmp	r3, #0
 810b684:	dd05      	ble.n	810b692 <_dtoa_r+0x82a>
 810b686:	4631      	mov	r1, r6
 810b688:	461a      	mov	r2, r3
 810b68a:	4620      	mov	r0, r4
 810b68c:	f001 f9e2 	bl	810ca54 <__lshift>
 810b690:	4606      	mov	r6, r0
 810b692:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810b694:	2b00      	cmp	r3, #0
 810b696:	d06e      	beq.n	810b776 <_dtoa_r+0x90e>
 810b698:	ee18 0a10 	vmov	r0, s16
 810b69c:	4631      	mov	r1, r6
 810b69e:	f001 fa49 	bl	810cb34 <__mcmp>
 810b6a2:	2800      	cmp	r0, #0
 810b6a4:	da67      	bge.n	810b776 <_dtoa_r+0x90e>
 810b6a6:	9b00      	ldr	r3, [sp, #0]
 810b6a8:	3b01      	subs	r3, #1
 810b6aa:	ee18 1a10 	vmov	r1, s16
 810b6ae:	9300      	str	r3, [sp, #0]
 810b6b0:	220a      	movs	r2, #10
 810b6b2:	2300      	movs	r3, #0
 810b6b4:	4620      	mov	r0, r4
 810b6b6:	f000 ffd3 	bl	810c660 <__multadd>
 810b6ba:	9b08      	ldr	r3, [sp, #32]
 810b6bc:	ee08 0a10 	vmov	s16, r0
 810b6c0:	2b00      	cmp	r3, #0
 810b6c2:	f000 81b1 	beq.w	810ba28 <_dtoa_r+0xbc0>
 810b6c6:	2300      	movs	r3, #0
 810b6c8:	4639      	mov	r1, r7
 810b6ca:	220a      	movs	r2, #10
 810b6cc:	4620      	mov	r0, r4
 810b6ce:	f000 ffc7 	bl	810c660 <__multadd>
 810b6d2:	9b02      	ldr	r3, [sp, #8]
 810b6d4:	2b00      	cmp	r3, #0
 810b6d6:	4607      	mov	r7, r0
 810b6d8:	f300 808e 	bgt.w	810b7f8 <_dtoa_r+0x990>
 810b6dc:	9b06      	ldr	r3, [sp, #24]
 810b6de:	2b02      	cmp	r3, #2
 810b6e0:	dc51      	bgt.n	810b786 <_dtoa_r+0x91e>
 810b6e2:	e089      	b.n	810b7f8 <_dtoa_r+0x990>
 810b6e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810b6e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 810b6ea:	e74b      	b.n	810b584 <_dtoa_r+0x71c>
 810b6ec:	9b03      	ldr	r3, [sp, #12]
 810b6ee:	1e5e      	subs	r6, r3, #1
 810b6f0:	9b07      	ldr	r3, [sp, #28]
 810b6f2:	42b3      	cmp	r3, r6
 810b6f4:	bfbf      	itttt	lt
 810b6f6:	9b07      	ldrlt	r3, [sp, #28]
 810b6f8:	9607      	strlt	r6, [sp, #28]
 810b6fa:	1af2      	sublt	r2, r6, r3
 810b6fc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 810b6fe:	bfb6      	itet	lt
 810b700:	189b      	addlt	r3, r3, r2
 810b702:	1b9e      	subge	r6, r3, r6
 810b704:	930a      	strlt	r3, [sp, #40]	; 0x28
 810b706:	9b03      	ldr	r3, [sp, #12]
 810b708:	bfb8      	it	lt
 810b70a:	2600      	movlt	r6, #0
 810b70c:	2b00      	cmp	r3, #0
 810b70e:	bfb7      	itett	lt
 810b710:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 810b714:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 810b718:	1a9d      	sublt	r5, r3, r2
 810b71a:	2300      	movlt	r3, #0
 810b71c:	e734      	b.n	810b588 <_dtoa_r+0x720>
 810b71e:	9e07      	ldr	r6, [sp, #28]
 810b720:	9d04      	ldr	r5, [sp, #16]
 810b722:	9f08      	ldr	r7, [sp, #32]
 810b724:	e73b      	b.n	810b59e <_dtoa_r+0x736>
 810b726:	9a07      	ldr	r2, [sp, #28]
 810b728:	e767      	b.n	810b5fa <_dtoa_r+0x792>
 810b72a:	9b06      	ldr	r3, [sp, #24]
 810b72c:	2b01      	cmp	r3, #1
 810b72e:	dc18      	bgt.n	810b762 <_dtoa_r+0x8fa>
 810b730:	f1ba 0f00 	cmp.w	sl, #0
 810b734:	d115      	bne.n	810b762 <_dtoa_r+0x8fa>
 810b736:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810b73a:	b993      	cbnz	r3, 810b762 <_dtoa_r+0x8fa>
 810b73c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810b740:	0d1b      	lsrs	r3, r3, #20
 810b742:	051b      	lsls	r3, r3, #20
 810b744:	b183      	cbz	r3, 810b768 <_dtoa_r+0x900>
 810b746:	9b04      	ldr	r3, [sp, #16]
 810b748:	3301      	adds	r3, #1
 810b74a:	9304      	str	r3, [sp, #16]
 810b74c:	9b05      	ldr	r3, [sp, #20]
 810b74e:	3301      	adds	r3, #1
 810b750:	9305      	str	r3, [sp, #20]
 810b752:	f04f 0801 	mov.w	r8, #1
 810b756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b758:	2b00      	cmp	r3, #0
 810b75a:	f47f af6a 	bne.w	810b632 <_dtoa_r+0x7ca>
 810b75e:	2001      	movs	r0, #1
 810b760:	e76f      	b.n	810b642 <_dtoa_r+0x7da>
 810b762:	f04f 0800 	mov.w	r8, #0
 810b766:	e7f6      	b.n	810b756 <_dtoa_r+0x8ee>
 810b768:	4698      	mov	r8, r3
 810b76a:	e7f4      	b.n	810b756 <_dtoa_r+0x8ee>
 810b76c:	f43f af7d 	beq.w	810b66a <_dtoa_r+0x802>
 810b770:	4618      	mov	r0, r3
 810b772:	301c      	adds	r0, #28
 810b774:	e772      	b.n	810b65c <_dtoa_r+0x7f4>
 810b776:	9b03      	ldr	r3, [sp, #12]
 810b778:	2b00      	cmp	r3, #0
 810b77a:	dc37      	bgt.n	810b7ec <_dtoa_r+0x984>
 810b77c:	9b06      	ldr	r3, [sp, #24]
 810b77e:	2b02      	cmp	r3, #2
 810b780:	dd34      	ble.n	810b7ec <_dtoa_r+0x984>
 810b782:	9b03      	ldr	r3, [sp, #12]
 810b784:	9302      	str	r3, [sp, #8]
 810b786:	9b02      	ldr	r3, [sp, #8]
 810b788:	b96b      	cbnz	r3, 810b7a6 <_dtoa_r+0x93e>
 810b78a:	4631      	mov	r1, r6
 810b78c:	2205      	movs	r2, #5
 810b78e:	4620      	mov	r0, r4
 810b790:	f000 ff66 	bl	810c660 <__multadd>
 810b794:	4601      	mov	r1, r0
 810b796:	4606      	mov	r6, r0
 810b798:	ee18 0a10 	vmov	r0, s16
 810b79c:	f001 f9ca 	bl	810cb34 <__mcmp>
 810b7a0:	2800      	cmp	r0, #0
 810b7a2:	f73f adbb 	bgt.w	810b31c <_dtoa_r+0x4b4>
 810b7a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b7a8:	9d01      	ldr	r5, [sp, #4]
 810b7aa:	43db      	mvns	r3, r3
 810b7ac:	9300      	str	r3, [sp, #0]
 810b7ae:	f04f 0800 	mov.w	r8, #0
 810b7b2:	4631      	mov	r1, r6
 810b7b4:	4620      	mov	r0, r4
 810b7b6:	f000 ff31 	bl	810c61c <_Bfree>
 810b7ba:	2f00      	cmp	r7, #0
 810b7bc:	f43f aea4 	beq.w	810b508 <_dtoa_r+0x6a0>
 810b7c0:	f1b8 0f00 	cmp.w	r8, #0
 810b7c4:	d005      	beq.n	810b7d2 <_dtoa_r+0x96a>
 810b7c6:	45b8      	cmp	r8, r7
 810b7c8:	d003      	beq.n	810b7d2 <_dtoa_r+0x96a>
 810b7ca:	4641      	mov	r1, r8
 810b7cc:	4620      	mov	r0, r4
 810b7ce:	f000 ff25 	bl	810c61c <_Bfree>
 810b7d2:	4639      	mov	r1, r7
 810b7d4:	4620      	mov	r0, r4
 810b7d6:	f000 ff21 	bl	810c61c <_Bfree>
 810b7da:	e695      	b.n	810b508 <_dtoa_r+0x6a0>
 810b7dc:	2600      	movs	r6, #0
 810b7de:	4637      	mov	r7, r6
 810b7e0:	e7e1      	b.n	810b7a6 <_dtoa_r+0x93e>
 810b7e2:	9700      	str	r7, [sp, #0]
 810b7e4:	4637      	mov	r7, r6
 810b7e6:	e599      	b.n	810b31c <_dtoa_r+0x4b4>
 810b7e8:	40240000 	.word	0x40240000
 810b7ec:	9b08      	ldr	r3, [sp, #32]
 810b7ee:	2b00      	cmp	r3, #0
 810b7f0:	f000 80ca 	beq.w	810b988 <_dtoa_r+0xb20>
 810b7f4:	9b03      	ldr	r3, [sp, #12]
 810b7f6:	9302      	str	r3, [sp, #8]
 810b7f8:	2d00      	cmp	r5, #0
 810b7fa:	dd05      	ble.n	810b808 <_dtoa_r+0x9a0>
 810b7fc:	4639      	mov	r1, r7
 810b7fe:	462a      	mov	r2, r5
 810b800:	4620      	mov	r0, r4
 810b802:	f001 f927 	bl	810ca54 <__lshift>
 810b806:	4607      	mov	r7, r0
 810b808:	f1b8 0f00 	cmp.w	r8, #0
 810b80c:	d05b      	beq.n	810b8c6 <_dtoa_r+0xa5e>
 810b80e:	6879      	ldr	r1, [r7, #4]
 810b810:	4620      	mov	r0, r4
 810b812:	f000 fec3 	bl	810c59c <_Balloc>
 810b816:	4605      	mov	r5, r0
 810b818:	b928      	cbnz	r0, 810b826 <_dtoa_r+0x9be>
 810b81a:	4b87      	ldr	r3, [pc, #540]	; (810ba38 <_dtoa_r+0xbd0>)
 810b81c:	4602      	mov	r2, r0
 810b81e:	f240 21ea 	movw	r1, #746	; 0x2ea
 810b822:	f7ff bb3b 	b.w	810ae9c <_dtoa_r+0x34>
 810b826:	693a      	ldr	r2, [r7, #16]
 810b828:	3202      	adds	r2, #2
 810b82a:	0092      	lsls	r2, r2, #2
 810b82c:	f107 010c 	add.w	r1, r7, #12
 810b830:	300c      	adds	r0, #12
 810b832:	f7fd fbdb 	bl	8108fec <memcpy>
 810b836:	2201      	movs	r2, #1
 810b838:	4629      	mov	r1, r5
 810b83a:	4620      	mov	r0, r4
 810b83c:	f001 f90a 	bl	810ca54 <__lshift>
 810b840:	9b01      	ldr	r3, [sp, #4]
 810b842:	f103 0901 	add.w	r9, r3, #1
 810b846:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 810b84a:	4413      	add	r3, r2
 810b84c:	9305      	str	r3, [sp, #20]
 810b84e:	f00a 0301 	and.w	r3, sl, #1
 810b852:	46b8      	mov	r8, r7
 810b854:	9304      	str	r3, [sp, #16]
 810b856:	4607      	mov	r7, r0
 810b858:	4631      	mov	r1, r6
 810b85a:	ee18 0a10 	vmov	r0, s16
 810b85e:	f7ff fa77 	bl	810ad50 <quorem>
 810b862:	4641      	mov	r1, r8
 810b864:	9002      	str	r0, [sp, #8]
 810b866:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 810b86a:	ee18 0a10 	vmov	r0, s16
 810b86e:	f001 f961 	bl	810cb34 <__mcmp>
 810b872:	463a      	mov	r2, r7
 810b874:	9003      	str	r0, [sp, #12]
 810b876:	4631      	mov	r1, r6
 810b878:	4620      	mov	r0, r4
 810b87a:	f001 f977 	bl	810cb6c <__mdiff>
 810b87e:	68c2      	ldr	r2, [r0, #12]
 810b880:	f109 3bff 	add.w	fp, r9, #4294967295
 810b884:	4605      	mov	r5, r0
 810b886:	bb02      	cbnz	r2, 810b8ca <_dtoa_r+0xa62>
 810b888:	4601      	mov	r1, r0
 810b88a:	ee18 0a10 	vmov	r0, s16
 810b88e:	f001 f951 	bl	810cb34 <__mcmp>
 810b892:	4602      	mov	r2, r0
 810b894:	4629      	mov	r1, r5
 810b896:	4620      	mov	r0, r4
 810b898:	9207      	str	r2, [sp, #28]
 810b89a:	f000 febf 	bl	810c61c <_Bfree>
 810b89e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 810b8a2:	ea43 0102 	orr.w	r1, r3, r2
 810b8a6:	9b04      	ldr	r3, [sp, #16]
 810b8a8:	430b      	orrs	r3, r1
 810b8aa:	464d      	mov	r5, r9
 810b8ac:	d10f      	bne.n	810b8ce <_dtoa_r+0xa66>
 810b8ae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810b8b2:	d02a      	beq.n	810b90a <_dtoa_r+0xaa2>
 810b8b4:	9b03      	ldr	r3, [sp, #12]
 810b8b6:	2b00      	cmp	r3, #0
 810b8b8:	dd02      	ble.n	810b8c0 <_dtoa_r+0xa58>
 810b8ba:	9b02      	ldr	r3, [sp, #8]
 810b8bc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 810b8c0:	f88b a000 	strb.w	sl, [fp]
 810b8c4:	e775      	b.n	810b7b2 <_dtoa_r+0x94a>
 810b8c6:	4638      	mov	r0, r7
 810b8c8:	e7ba      	b.n	810b840 <_dtoa_r+0x9d8>
 810b8ca:	2201      	movs	r2, #1
 810b8cc:	e7e2      	b.n	810b894 <_dtoa_r+0xa2c>
 810b8ce:	9b03      	ldr	r3, [sp, #12]
 810b8d0:	2b00      	cmp	r3, #0
 810b8d2:	db04      	blt.n	810b8de <_dtoa_r+0xa76>
 810b8d4:	9906      	ldr	r1, [sp, #24]
 810b8d6:	430b      	orrs	r3, r1
 810b8d8:	9904      	ldr	r1, [sp, #16]
 810b8da:	430b      	orrs	r3, r1
 810b8dc:	d122      	bne.n	810b924 <_dtoa_r+0xabc>
 810b8de:	2a00      	cmp	r2, #0
 810b8e0:	ddee      	ble.n	810b8c0 <_dtoa_r+0xa58>
 810b8e2:	ee18 1a10 	vmov	r1, s16
 810b8e6:	2201      	movs	r2, #1
 810b8e8:	4620      	mov	r0, r4
 810b8ea:	f001 f8b3 	bl	810ca54 <__lshift>
 810b8ee:	4631      	mov	r1, r6
 810b8f0:	ee08 0a10 	vmov	s16, r0
 810b8f4:	f001 f91e 	bl	810cb34 <__mcmp>
 810b8f8:	2800      	cmp	r0, #0
 810b8fa:	dc03      	bgt.n	810b904 <_dtoa_r+0xa9c>
 810b8fc:	d1e0      	bne.n	810b8c0 <_dtoa_r+0xa58>
 810b8fe:	f01a 0f01 	tst.w	sl, #1
 810b902:	d0dd      	beq.n	810b8c0 <_dtoa_r+0xa58>
 810b904:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810b908:	d1d7      	bne.n	810b8ba <_dtoa_r+0xa52>
 810b90a:	2339      	movs	r3, #57	; 0x39
 810b90c:	f88b 3000 	strb.w	r3, [fp]
 810b910:	462b      	mov	r3, r5
 810b912:	461d      	mov	r5, r3
 810b914:	3b01      	subs	r3, #1
 810b916:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810b91a:	2a39      	cmp	r2, #57	; 0x39
 810b91c:	d071      	beq.n	810ba02 <_dtoa_r+0xb9a>
 810b91e:	3201      	adds	r2, #1
 810b920:	701a      	strb	r2, [r3, #0]
 810b922:	e746      	b.n	810b7b2 <_dtoa_r+0x94a>
 810b924:	2a00      	cmp	r2, #0
 810b926:	dd07      	ble.n	810b938 <_dtoa_r+0xad0>
 810b928:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810b92c:	d0ed      	beq.n	810b90a <_dtoa_r+0xaa2>
 810b92e:	f10a 0301 	add.w	r3, sl, #1
 810b932:	f88b 3000 	strb.w	r3, [fp]
 810b936:	e73c      	b.n	810b7b2 <_dtoa_r+0x94a>
 810b938:	9b05      	ldr	r3, [sp, #20]
 810b93a:	f809 ac01 	strb.w	sl, [r9, #-1]
 810b93e:	4599      	cmp	r9, r3
 810b940:	d047      	beq.n	810b9d2 <_dtoa_r+0xb6a>
 810b942:	ee18 1a10 	vmov	r1, s16
 810b946:	2300      	movs	r3, #0
 810b948:	220a      	movs	r2, #10
 810b94a:	4620      	mov	r0, r4
 810b94c:	f000 fe88 	bl	810c660 <__multadd>
 810b950:	45b8      	cmp	r8, r7
 810b952:	ee08 0a10 	vmov	s16, r0
 810b956:	f04f 0300 	mov.w	r3, #0
 810b95a:	f04f 020a 	mov.w	r2, #10
 810b95e:	4641      	mov	r1, r8
 810b960:	4620      	mov	r0, r4
 810b962:	d106      	bne.n	810b972 <_dtoa_r+0xb0a>
 810b964:	f000 fe7c 	bl	810c660 <__multadd>
 810b968:	4680      	mov	r8, r0
 810b96a:	4607      	mov	r7, r0
 810b96c:	f109 0901 	add.w	r9, r9, #1
 810b970:	e772      	b.n	810b858 <_dtoa_r+0x9f0>
 810b972:	f000 fe75 	bl	810c660 <__multadd>
 810b976:	4639      	mov	r1, r7
 810b978:	4680      	mov	r8, r0
 810b97a:	2300      	movs	r3, #0
 810b97c:	220a      	movs	r2, #10
 810b97e:	4620      	mov	r0, r4
 810b980:	f000 fe6e 	bl	810c660 <__multadd>
 810b984:	4607      	mov	r7, r0
 810b986:	e7f1      	b.n	810b96c <_dtoa_r+0xb04>
 810b988:	9b03      	ldr	r3, [sp, #12]
 810b98a:	9302      	str	r3, [sp, #8]
 810b98c:	9d01      	ldr	r5, [sp, #4]
 810b98e:	ee18 0a10 	vmov	r0, s16
 810b992:	4631      	mov	r1, r6
 810b994:	f7ff f9dc 	bl	810ad50 <quorem>
 810b998:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 810b99c:	9b01      	ldr	r3, [sp, #4]
 810b99e:	f805 ab01 	strb.w	sl, [r5], #1
 810b9a2:	1aea      	subs	r2, r5, r3
 810b9a4:	9b02      	ldr	r3, [sp, #8]
 810b9a6:	4293      	cmp	r3, r2
 810b9a8:	dd09      	ble.n	810b9be <_dtoa_r+0xb56>
 810b9aa:	ee18 1a10 	vmov	r1, s16
 810b9ae:	2300      	movs	r3, #0
 810b9b0:	220a      	movs	r2, #10
 810b9b2:	4620      	mov	r0, r4
 810b9b4:	f000 fe54 	bl	810c660 <__multadd>
 810b9b8:	ee08 0a10 	vmov	s16, r0
 810b9bc:	e7e7      	b.n	810b98e <_dtoa_r+0xb26>
 810b9be:	9b02      	ldr	r3, [sp, #8]
 810b9c0:	2b00      	cmp	r3, #0
 810b9c2:	bfc8      	it	gt
 810b9c4:	461d      	movgt	r5, r3
 810b9c6:	9b01      	ldr	r3, [sp, #4]
 810b9c8:	bfd8      	it	le
 810b9ca:	2501      	movle	r5, #1
 810b9cc:	441d      	add	r5, r3
 810b9ce:	f04f 0800 	mov.w	r8, #0
 810b9d2:	ee18 1a10 	vmov	r1, s16
 810b9d6:	2201      	movs	r2, #1
 810b9d8:	4620      	mov	r0, r4
 810b9da:	f001 f83b 	bl	810ca54 <__lshift>
 810b9de:	4631      	mov	r1, r6
 810b9e0:	ee08 0a10 	vmov	s16, r0
 810b9e4:	f001 f8a6 	bl	810cb34 <__mcmp>
 810b9e8:	2800      	cmp	r0, #0
 810b9ea:	dc91      	bgt.n	810b910 <_dtoa_r+0xaa8>
 810b9ec:	d102      	bne.n	810b9f4 <_dtoa_r+0xb8c>
 810b9ee:	f01a 0f01 	tst.w	sl, #1
 810b9f2:	d18d      	bne.n	810b910 <_dtoa_r+0xaa8>
 810b9f4:	462b      	mov	r3, r5
 810b9f6:	461d      	mov	r5, r3
 810b9f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810b9fc:	2a30      	cmp	r2, #48	; 0x30
 810b9fe:	d0fa      	beq.n	810b9f6 <_dtoa_r+0xb8e>
 810ba00:	e6d7      	b.n	810b7b2 <_dtoa_r+0x94a>
 810ba02:	9a01      	ldr	r2, [sp, #4]
 810ba04:	429a      	cmp	r2, r3
 810ba06:	d184      	bne.n	810b912 <_dtoa_r+0xaaa>
 810ba08:	9b00      	ldr	r3, [sp, #0]
 810ba0a:	3301      	adds	r3, #1
 810ba0c:	9300      	str	r3, [sp, #0]
 810ba0e:	2331      	movs	r3, #49	; 0x31
 810ba10:	7013      	strb	r3, [r2, #0]
 810ba12:	e6ce      	b.n	810b7b2 <_dtoa_r+0x94a>
 810ba14:	4b09      	ldr	r3, [pc, #36]	; (810ba3c <_dtoa_r+0xbd4>)
 810ba16:	f7ff ba95 	b.w	810af44 <_dtoa_r+0xdc>
 810ba1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810ba1c:	2b00      	cmp	r3, #0
 810ba1e:	f47f aa6e 	bne.w	810aefe <_dtoa_r+0x96>
 810ba22:	4b07      	ldr	r3, [pc, #28]	; (810ba40 <_dtoa_r+0xbd8>)
 810ba24:	f7ff ba8e 	b.w	810af44 <_dtoa_r+0xdc>
 810ba28:	9b02      	ldr	r3, [sp, #8]
 810ba2a:	2b00      	cmp	r3, #0
 810ba2c:	dcae      	bgt.n	810b98c <_dtoa_r+0xb24>
 810ba2e:	9b06      	ldr	r3, [sp, #24]
 810ba30:	2b02      	cmp	r3, #2
 810ba32:	f73f aea8 	bgt.w	810b786 <_dtoa_r+0x91e>
 810ba36:	e7a9      	b.n	810b98c <_dtoa_r+0xb24>
 810ba38:	0810e148 	.word	0x0810e148
 810ba3c:	0810df4c 	.word	0x0810df4c
 810ba40:	0810e0c9 	.word	0x0810e0c9

0810ba44 <__sflush_r>:
 810ba44:	898a      	ldrh	r2, [r1, #12]
 810ba46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810ba4a:	4605      	mov	r5, r0
 810ba4c:	0710      	lsls	r0, r2, #28
 810ba4e:	460c      	mov	r4, r1
 810ba50:	d458      	bmi.n	810bb04 <__sflush_r+0xc0>
 810ba52:	684b      	ldr	r3, [r1, #4]
 810ba54:	2b00      	cmp	r3, #0
 810ba56:	dc05      	bgt.n	810ba64 <__sflush_r+0x20>
 810ba58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810ba5a:	2b00      	cmp	r3, #0
 810ba5c:	dc02      	bgt.n	810ba64 <__sflush_r+0x20>
 810ba5e:	2000      	movs	r0, #0
 810ba60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810ba64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810ba66:	2e00      	cmp	r6, #0
 810ba68:	d0f9      	beq.n	810ba5e <__sflush_r+0x1a>
 810ba6a:	2300      	movs	r3, #0
 810ba6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 810ba70:	682f      	ldr	r7, [r5, #0]
 810ba72:	602b      	str	r3, [r5, #0]
 810ba74:	d032      	beq.n	810badc <__sflush_r+0x98>
 810ba76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 810ba78:	89a3      	ldrh	r3, [r4, #12]
 810ba7a:	075a      	lsls	r2, r3, #29
 810ba7c:	d505      	bpl.n	810ba8a <__sflush_r+0x46>
 810ba7e:	6863      	ldr	r3, [r4, #4]
 810ba80:	1ac0      	subs	r0, r0, r3
 810ba82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810ba84:	b10b      	cbz	r3, 810ba8a <__sflush_r+0x46>
 810ba86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810ba88:	1ac0      	subs	r0, r0, r3
 810ba8a:	2300      	movs	r3, #0
 810ba8c:	4602      	mov	r2, r0
 810ba8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810ba90:	6a21      	ldr	r1, [r4, #32]
 810ba92:	4628      	mov	r0, r5
 810ba94:	47b0      	blx	r6
 810ba96:	1c43      	adds	r3, r0, #1
 810ba98:	89a3      	ldrh	r3, [r4, #12]
 810ba9a:	d106      	bne.n	810baaa <__sflush_r+0x66>
 810ba9c:	6829      	ldr	r1, [r5, #0]
 810ba9e:	291d      	cmp	r1, #29
 810baa0:	d82c      	bhi.n	810bafc <__sflush_r+0xb8>
 810baa2:	4a2a      	ldr	r2, [pc, #168]	; (810bb4c <__sflush_r+0x108>)
 810baa4:	40ca      	lsrs	r2, r1
 810baa6:	07d6      	lsls	r6, r2, #31
 810baa8:	d528      	bpl.n	810bafc <__sflush_r+0xb8>
 810baaa:	2200      	movs	r2, #0
 810baac:	6062      	str	r2, [r4, #4]
 810baae:	04d9      	lsls	r1, r3, #19
 810bab0:	6922      	ldr	r2, [r4, #16]
 810bab2:	6022      	str	r2, [r4, #0]
 810bab4:	d504      	bpl.n	810bac0 <__sflush_r+0x7c>
 810bab6:	1c42      	adds	r2, r0, #1
 810bab8:	d101      	bne.n	810babe <__sflush_r+0x7a>
 810baba:	682b      	ldr	r3, [r5, #0]
 810babc:	b903      	cbnz	r3, 810bac0 <__sflush_r+0x7c>
 810babe:	6560      	str	r0, [r4, #84]	; 0x54
 810bac0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810bac2:	602f      	str	r7, [r5, #0]
 810bac4:	2900      	cmp	r1, #0
 810bac6:	d0ca      	beq.n	810ba5e <__sflush_r+0x1a>
 810bac8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810bacc:	4299      	cmp	r1, r3
 810bace:	d002      	beq.n	810bad6 <__sflush_r+0x92>
 810bad0:	4628      	mov	r0, r5
 810bad2:	f001 fa3b 	bl	810cf4c <_free_r>
 810bad6:	2000      	movs	r0, #0
 810bad8:	6360      	str	r0, [r4, #52]	; 0x34
 810bada:	e7c1      	b.n	810ba60 <__sflush_r+0x1c>
 810badc:	6a21      	ldr	r1, [r4, #32]
 810bade:	2301      	movs	r3, #1
 810bae0:	4628      	mov	r0, r5
 810bae2:	47b0      	blx	r6
 810bae4:	1c41      	adds	r1, r0, #1
 810bae6:	d1c7      	bne.n	810ba78 <__sflush_r+0x34>
 810bae8:	682b      	ldr	r3, [r5, #0]
 810baea:	2b00      	cmp	r3, #0
 810baec:	d0c4      	beq.n	810ba78 <__sflush_r+0x34>
 810baee:	2b1d      	cmp	r3, #29
 810baf0:	d001      	beq.n	810baf6 <__sflush_r+0xb2>
 810baf2:	2b16      	cmp	r3, #22
 810baf4:	d101      	bne.n	810bafa <__sflush_r+0xb6>
 810baf6:	602f      	str	r7, [r5, #0]
 810baf8:	e7b1      	b.n	810ba5e <__sflush_r+0x1a>
 810bafa:	89a3      	ldrh	r3, [r4, #12]
 810bafc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810bb00:	81a3      	strh	r3, [r4, #12]
 810bb02:	e7ad      	b.n	810ba60 <__sflush_r+0x1c>
 810bb04:	690f      	ldr	r7, [r1, #16]
 810bb06:	2f00      	cmp	r7, #0
 810bb08:	d0a9      	beq.n	810ba5e <__sflush_r+0x1a>
 810bb0a:	0793      	lsls	r3, r2, #30
 810bb0c:	680e      	ldr	r6, [r1, #0]
 810bb0e:	bf08      	it	eq
 810bb10:	694b      	ldreq	r3, [r1, #20]
 810bb12:	600f      	str	r7, [r1, #0]
 810bb14:	bf18      	it	ne
 810bb16:	2300      	movne	r3, #0
 810bb18:	eba6 0807 	sub.w	r8, r6, r7
 810bb1c:	608b      	str	r3, [r1, #8]
 810bb1e:	f1b8 0f00 	cmp.w	r8, #0
 810bb22:	dd9c      	ble.n	810ba5e <__sflush_r+0x1a>
 810bb24:	6a21      	ldr	r1, [r4, #32]
 810bb26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 810bb28:	4643      	mov	r3, r8
 810bb2a:	463a      	mov	r2, r7
 810bb2c:	4628      	mov	r0, r5
 810bb2e:	47b0      	blx	r6
 810bb30:	2800      	cmp	r0, #0
 810bb32:	dc06      	bgt.n	810bb42 <__sflush_r+0xfe>
 810bb34:	89a3      	ldrh	r3, [r4, #12]
 810bb36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810bb3a:	81a3      	strh	r3, [r4, #12]
 810bb3c:	f04f 30ff 	mov.w	r0, #4294967295
 810bb40:	e78e      	b.n	810ba60 <__sflush_r+0x1c>
 810bb42:	4407      	add	r7, r0
 810bb44:	eba8 0800 	sub.w	r8, r8, r0
 810bb48:	e7e9      	b.n	810bb1e <__sflush_r+0xda>
 810bb4a:	bf00      	nop
 810bb4c:	20400001 	.word	0x20400001

0810bb50 <_fflush_r>:
 810bb50:	b538      	push	{r3, r4, r5, lr}
 810bb52:	690b      	ldr	r3, [r1, #16]
 810bb54:	4605      	mov	r5, r0
 810bb56:	460c      	mov	r4, r1
 810bb58:	b913      	cbnz	r3, 810bb60 <_fflush_r+0x10>
 810bb5a:	2500      	movs	r5, #0
 810bb5c:	4628      	mov	r0, r5
 810bb5e:	bd38      	pop	{r3, r4, r5, pc}
 810bb60:	b118      	cbz	r0, 810bb6a <_fflush_r+0x1a>
 810bb62:	6983      	ldr	r3, [r0, #24]
 810bb64:	b90b      	cbnz	r3, 810bb6a <_fflush_r+0x1a>
 810bb66:	f000 f887 	bl	810bc78 <__sinit>
 810bb6a:	4b14      	ldr	r3, [pc, #80]	; (810bbbc <_fflush_r+0x6c>)
 810bb6c:	429c      	cmp	r4, r3
 810bb6e:	d11b      	bne.n	810bba8 <_fflush_r+0x58>
 810bb70:	686c      	ldr	r4, [r5, #4]
 810bb72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810bb76:	2b00      	cmp	r3, #0
 810bb78:	d0ef      	beq.n	810bb5a <_fflush_r+0xa>
 810bb7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810bb7c:	07d0      	lsls	r0, r2, #31
 810bb7e:	d404      	bmi.n	810bb8a <_fflush_r+0x3a>
 810bb80:	0599      	lsls	r1, r3, #22
 810bb82:	d402      	bmi.n	810bb8a <_fflush_r+0x3a>
 810bb84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810bb86:	f000 fc88 	bl	810c49a <__retarget_lock_acquire_recursive>
 810bb8a:	4628      	mov	r0, r5
 810bb8c:	4621      	mov	r1, r4
 810bb8e:	f7ff ff59 	bl	810ba44 <__sflush_r>
 810bb92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810bb94:	07da      	lsls	r2, r3, #31
 810bb96:	4605      	mov	r5, r0
 810bb98:	d4e0      	bmi.n	810bb5c <_fflush_r+0xc>
 810bb9a:	89a3      	ldrh	r3, [r4, #12]
 810bb9c:	059b      	lsls	r3, r3, #22
 810bb9e:	d4dd      	bmi.n	810bb5c <_fflush_r+0xc>
 810bba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810bba2:	f000 fc7b 	bl	810c49c <__retarget_lock_release_recursive>
 810bba6:	e7d9      	b.n	810bb5c <_fflush_r+0xc>
 810bba8:	4b05      	ldr	r3, [pc, #20]	; (810bbc0 <_fflush_r+0x70>)
 810bbaa:	429c      	cmp	r4, r3
 810bbac:	d101      	bne.n	810bbb2 <_fflush_r+0x62>
 810bbae:	68ac      	ldr	r4, [r5, #8]
 810bbb0:	e7df      	b.n	810bb72 <_fflush_r+0x22>
 810bbb2:	4b04      	ldr	r3, [pc, #16]	; (810bbc4 <_fflush_r+0x74>)
 810bbb4:	429c      	cmp	r4, r3
 810bbb6:	bf08      	it	eq
 810bbb8:	68ec      	ldreq	r4, [r5, #12]
 810bbba:	e7da      	b.n	810bb72 <_fflush_r+0x22>
 810bbbc:	0810e17c 	.word	0x0810e17c
 810bbc0:	0810e19c 	.word	0x0810e19c
 810bbc4:	0810e15c 	.word	0x0810e15c

0810bbc8 <std>:
 810bbc8:	2300      	movs	r3, #0
 810bbca:	b510      	push	{r4, lr}
 810bbcc:	4604      	mov	r4, r0
 810bbce:	e9c0 3300 	strd	r3, r3, [r0]
 810bbd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810bbd6:	6083      	str	r3, [r0, #8]
 810bbd8:	8181      	strh	r1, [r0, #12]
 810bbda:	6643      	str	r3, [r0, #100]	; 0x64
 810bbdc:	81c2      	strh	r2, [r0, #14]
 810bbde:	6183      	str	r3, [r0, #24]
 810bbe0:	4619      	mov	r1, r3
 810bbe2:	2208      	movs	r2, #8
 810bbe4:	305c      	adds	r0, #92	; 0x5c
 810bbe6:	f7fd fa0f 	bl	8109008 <memset>
 810bbea:	4b05      	ldr	r3, [pc, #20]	; (810bc00 <std+0x38>)
 810bbec:	6263      	str	r3, [r4, #36]	; 0x24
 810bbee:	4b05      	ldr	r3, [pc, #20]	; (810bc04 <std+0x3c>)
 810bbf0:	62a3      	str	r3, [r4, #40]	; 0x28
 810bbf2:	4b05      	ldr	r3, [pc, #20]	; (810bc08 <std+0x40>)
 810bbf4:	62e3      	str	r3, [r4, #44]	; 0x2c
 810bbf6:	4b05      	ldr	r3, [pc, #20]	; (810bc0c <std+0x44>)
 810bbf8:	6224      	str	r4, [r4, #32]
 810bbfa:	6323      	str	r3, [r4, #48]	; 0x30
 810bbfc:	bd10      	pop	{r4, pc}
 810bbfe:	bf00      	nop
 810bc00:	0810d6a9 	.word	0x0810d6a9
 810bc04:	0810d6cb 	.word	0x0810d6cb
 810bc08:	0810d703 	.word	0x0810d703
 810bc0c:	0810d727 	.word	0x0810d727

0810bc10 <_cleanup_r>:
 810bc10:	4901      	ldr	r1, [pc, #4]	; (810bc18 <_cleanup_r+0x8>)
 810bc12:	f000 b8af 	b.w	810bd74 <_fwalk_reent>
 810bc16:	bf00      	nop
 810bc18:	0810bb51 	.word	0x0810bb51

0810bc1c <__sfmoreglue>:
 810bc1c:	b570      	push	{r4, r5, r6, lr}
 810bc1e:	2268      	movs	r2, #104	; 0x68
 810bc20:	1e4d      	subs	r5, r1, #1
 810bc22:	4355      	muls	r5, r2
 810bc24:	460e      	mov	r6, r1
 810bc26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 810bc2a:	f001 f9fb 	bl	810d024 <_malloc_r>
 810bc2e:	4604      	mov	r4, r0
 810bc30:	b140      	cbz	r0, 810bc44 <__sfmoreglue+0x28>
 810bc32:	2100      	movs	r1, #0
 810bc34:	e9c0 1600 	strd	r1, r6, [r0]
 810bc38:	300c      	adds	r0, #12
 810bc3a:	60a0      	str	r0, [r4, #8]
 810bc3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 810bc40:	f7fd f9e2 	bl	8109008 <memset>
 810bc44:	4620      	mov	r0, r4
 810bc46:	bd70      	pop	{r4, r5, r6, pc}

0810bc48 <__sfp_lock_acquire>:
 810bc48:	4801      	ldr	r0, [pc, #4]	; (810bc50 <__sfp_lock_acquire+0x8>)
 810bc4a:	f000 bc26 	b.w	810c49a <__retarget_lock_acquire_recursive>
 810bc4e:	bf00      	nop
 810bc50:	100004b5 	.word	0x100004b5

0810bc54 <__sfp_lock_release>:
 810bc54:	4801      	ldr	r0, [pc, #4]	; (810bc5c <__sfp_lock_release+0x8>)
 810bc56:	f000 bc21 	b.w	810c49c <__retarget_lock_release_recursive>
 810bc5a:	bf00      	nop
 810bc5c:	100004b5 	.word	0x100004b5

0810bc60 <__sinit_lock_acquire>:
 810bc60:	4801      	ldr	r0, [pc, #4]	; (810bc68 <__sinit_lock_acquire+0x8>)
 810bc62:	f000 bc1a 	b.w	810c49a <__retarget_lock_acquire_recursive>
 810bc66:	bf00      	nop
 810bc68:	100004b6 	.word	0x100004b6

0810bc6c <__sinit_lock_release>:
 810bc6c:	4801      	ldr	r0, [pc, #4]	; (810bc74 <__sinit_lock_release+0x8>)
 810bc6e:	f000 bc15 	b.w	810c49c <__retarget_lock_release_recursive>
 810bc72:	bf00      	nop
 810bc74:	100004b6 	.word	0x100004b6

0810bc78 <__sinit>:
 810bc78:	b510      	push	{r4, lr}
 810bc7a:	4604      	mov	r4, r0
 810bc7c:	f7ff fff0 	bl	810bc60 <__sinit_lock_acquire>
 810bc80:	69a3      	ldr	r3, [r4, #24]
 810bc82:	b11b      	cbz	r3, 810bc8c <__sinit+0x14>
 810bc84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810bc88:	f7ff bff0 	b.w	810bc6c <__sinit_lock_release>
 810bc8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 810bc90:	6523      	str	r3, [r4, #80]	; 0x50
 810bc92:	4b13      	ldr	r3, [pc, #76]	; (810bce0 <__sinit+0x68>)
 810bc94:	4a13      	ldr	r2, [pc, #76]	; (810bce4 <__sinit+0x6c>)
 810bc96:	681b      	ldr	r3, [r3, #0]
 810bc98:	62a2      	str	r2, [r4, #40]	; 0x28
 810bc9a:	42a3      	cmp	r3, r4
 810bc9c:	bf04      	itt	eq
 810bc9e:	2301      	moveq	r3, #1
 810bca0:	61a3      	streq	r3, [r4, #24]
 810bca2:	4620      	mov	r0, r4
 810bca4:	f000 f820 	bl	810bce8 <__sfp>
 810bca8:	6060      	str	r0, [r4, #4]
 810bcaa:	4620      	mov	r0, r4
 810bcac:	f000 f81c 	bl	810bce8 <__sfp>
 810bcb0:	60a0      	str	r0, [r4, #8]
 810bcb2:	4620      	mov	r0, r4
 810bcb4:	f000 f818 	bl	810bce8 <__sfp>
 810bcb8:	2200      	movs	r2, #0
 810bcba:	60e0      	str	r0, [r4, #12]
 810bcbc:	2104      	movs	r1, #4
 810bcbe:	6860      	ldr	r0, [r4, #4]
 810bcc0:	f7ff ff82 	bl	810bbc8 <std>
 810bcc4:	68a0      	ldr	r0, [r4, #8]
 810bcc6:	2201      	movs	r2, #1
 810bcc8:	2109      	movs	r1, #9
 810bcca:	f7ff ff7d 	bl	810bbc8 <std>
 810bcce:	68e0      	ldr	r0, [r4, #12]
 810bcd0:	2202      	movs	r2, #2
 810bcd2:	2112      	movs	r1, #18
 810bcd4:	f7ff ff78 	bl	810bbc8 <std>
 810bcd8:	2301      	movs	r3, #1
 810bcda:	61a3      	str	r3, [r4, #24]
 810bcdc:	e7d2      	b.n	810bc84 <__sinit+0xc>
 810bcde:	bf00      	nop
 810bce0:	0810df38 	.word	0x0810df38
 810bce4:	0810bc11 	.word	0x0810bc11

0810bce8 <__sfp>:
 810bce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810bcea:	4607      	mov	r7, r0
 810bcec:	f7ff ffac 	bl	810bc48 <__sfp_lock_acquire>
 810bcf0:	4b1e      	ldr	r3, [pc, #120]	; (810bd6c <__sfp+0x84>)
 810bcf2:	681e      	ldr	r6, [r3, #0]
 810bcf4:	69b3      	ldr	r3, [r6, #24]
 810bcf6:	b913      	cbnz	r3, 810bcfe <__sfp+0x16>
 810bcf8:	4630      	mov	r0, r6
 810bcfa:	f7ff ffbd 	bl	810bc78 <__sinit>
 810bcfe:	3648      	adds	r6, #72	; 0x48
 810bd00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 810bd04:	3b01      	subs	r3, #1
 810bd06:	d503      	bpl.n	810bd10 <__sfp+0x28>
 810bd08:	6833      	ldr	r3, [r6, #0]
 810bd0a:	b30b      	cbz	r3, 810bd50 <__sfp+0x68>
 810bd0c:	6836      	ldr	r6, [r6, #0]
 810bd0e:	e7f7      	b.n	810bd00 <__sfp+0x18>
 810bd10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 810bd14:	b9d5      	cbnz	r5, 810bd4c <__sfp+0x64>
 810bd16:	4b16      	ldr	r3, [pc, #88]	; (810bd70 <__sfp+0x88>)
 810bd18:	60e3      	str	r3, [r4, #12]
 810bd1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 810bd1e:	6665      	str	r5, [r4, #100]	; 0x64
 810bd20:	f000 fbba 	bl	810c498 <__retarget_lock_init_recursive>
 810bd24:	f7ff ff96 	bl	810bc54 <__sfp_lock_release>
 810bd28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 810bd2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 810bd30:	6025      	str	r5, [r4, #0]
 810bd32:	61a5      	str	r5, [r4, #24]
 810bd34:	2208      	movs	r2, #8
 810bd36:	4629      	mov	r1, r5
 810bd38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 810bd3c:	f7fd f964 	bl	8109008 <memset>
 810bd40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 810bd44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 810bd48:	4620      	mov	r0, r4
 810bd4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810bd4c:	3468      	adds	r4, #104	; 0x68
 810bd4e:	e7d9      	b.n	810bd04 <__sfp+0x1c>
 810bd50:	2104      	movs	r1, #4
 810bd52:	4638      	mov	r0, r7
 810bd54:	f7ff ff62 	bl	810bc1c <__sfmoreglue>
 810bd58:	4604      	mov	r4, r0
 810bd5a:	6030      	str	r0, [r6, #0]
 810bd5c:	2800      	cmp	r0, #0
 810bd5e:	d1d5      	bne.n	810bd0c <__sfp+0x24>
 810bd60:	f7ff ff78 	bl	810bc54 <__sfp_lock_release>
 810bd64:	230c      	movs	r3, #12
 810bd66:	603b      	str	r3, [r7, #0]
 810bd68:	e7ee      	b.n	810bd48 <__sfp+0x60>
 810bd6a:	bf00      	nop
 810bd6c:	0810df38 	.word	0x0810df38
 810bd70:	ffff0001 	.word	0xffff0001

0810bd74 <_fwalk_reent>:
 810bd74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810bd78:	4606      	mov	r6, r0
 810bd7a:	4688      	mov	r8, r1
 810bd7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 810bd80:	2700      	movs	r7, #0
 810bd82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810bd86:	f1b9 0901 	subs.w	r9, r9, #1
 810bd8a:	d505      	bpl.n	810bd98 <_fwalk_reent+0x24>
 810bd8c:	6824      	ldr	r4, [r4, #0]
 810bd8e:	2c00      	cmp	r4, #0
 810bd90:	d1f7      	bne.n	810bd82 <_fwalk_reent+0xe>
 810bd92:	4638      	mov	r0, r7
 810bd94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810bd98:	89ab      	ldrh	r3, [r5, #12]
 810bd9a:	2b01      	cmp	r3, #1
 810bd9c:	d907      	bls.n	810bdae <_fwalk_reent+0x3a>
 810bd9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810bda2:	3301      	adds	r3, #1
 810bda4:	d003      	beq.n	810bdae <_fwalk_reent+0x3a>
 810bda6:	4629      	mov	r1, r5
 810bda8:	4630      	mov	r0, r6
 810bdaa:	47c0      	blx	r8
 810bdac:	4307      	orrs	r7, r0
 810bdae:	3568      	adds	r5, #104	; 0x68
 810bdb0:	e7e9      	b.n	810bd86 <_fwalk_reent+0x12>

0810bdb2 <rshift>:
 810bdb2:	6903      	ldr	r3, [r0, #16]
 810bdb4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810bdb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810bdbc:	ea4f 1261 	mov.w	r2, r1, asr #5
 810bdc0:	f100 0414 	add.w	r4, r0, #20
 810bdc4:	dd45      	ble.n	810be52 <rshift+0xa0>
 810bdc6:	f011 011f 	ands.w	r1, r1, #31
 810bdca:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810bdce:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810bdd2:	d10c      	bne.n	810bdee <rshift+0x3c>
 810bdd4:	f100 0710 	add.w	r7, r0, #16
 810bdd8:	4629      	mov	r1, r5
 810bdda:	42b1      	cmp	r1, r6
 810bddc:	d334      	bcc.n	810be48 <rshift+0x96>
 810bdde:	1a9b      	subs	r3, r3, r2
 810bde0:	009b      	lsls	r3, r3, #2
 810bde2:	1eea      	subs	r2, r5, #3
 810bde4:	4296      	cmp	r6, r2
 810bde6:	bf38      	it	cc
 810bde8:	2300      	movcc	r3, #0
 810bdea:	4423      	add	r3, r4
 810bdec:	e015      	b.n	810be1a <rshift+0x68>
 810bdee:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810bdf2:	f1c1 0820 	rsb	r8, r1, #32
 810bdf6:	40cf      	lsrs	r7, r1
 810bdf8:	f105 0e04 	add.w	lr, r5, #4
 810bdfc:	46a1      	mov	r9, r4
 810bdfe:	4576      	cmp	r6, lr
 810be00:	46f4      	mov	ip, lr
 810be02:	d815      	bhi.n	810be30 <rshift+0x7e>
 810be04:	1a9a      	subs	r2, r3, r2
 810be06:	0092      	lsls	r2, r2, #2
 810be08:	3a04      	subs	r2, #4
 810be0a:	3501      	adds	r5, #1
 810be0c:	42ae      	cmp	r6, r5
 810be0e:	bf38      	it	cc
 810be10:	2200      	movcc	r2, #0
 810be12:	18a3      	adds	r3, r4, r2
 810be14:	50a7      	str	r7, [r4, r2]
 810be16:	b107      	cbz	r7, 810be1a <rshift+0x68>
 810be18:	3304      	adds	r3, #4
 810be1a:	1b1a      	subs	r2, r3, r4
 810be1c:	42a3      	cmp	r3, r4
 810be1e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810be22:	bf08      	it	eq
 810be24:	2300      	moveq	r3, #0
 810be26:	6102      	str	r2, [r0, #16]
 810be28:	bf08      	it	eq
 810be2a:	6143      	streq	r3, [r0, #20]
 810be2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810be30:	f8dc c000 	ldr.w	ip, [ip]
 810be34:	fa0c fc08 	lsl.w	ip, ip, r8
 810be38:	ea4c 0707 	orr.w	r7, ip, r7
 810be3c:	f849 7b04 	str.w	r7, [r9], #4
 810be40:	f85e 7b04 	ldr.w	r7, [lr], #4
 810be44:	40cf      	lsrs	r7, r1
 810be46:	e7da      	b.n	810bdfe <rshift+0x4c>
 810be48:	f851 cb04 	ldr.w	ip, [r1], #4
 810be4c:	f847 cf04 	str.w	ip, [r7, #4]!
 810be50:	e7c3      	b.n	810bdda <rshift+0x28>
 810be52:	4623      	mov	r3, r4
 810be54:	e7e1      	b.n	810be1a <rshift+0x68>

0810be56 <__hexdig_fun>:
 810be56:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 810be5a:	2b09      	cmp	r3, #9
 810be5c:	d802      	bhi.n	810be64 <__hexdig_fun+0xe>
 810be5e:	3820      	subs	r0, #32
 810be60:	b2c0      	uxtb	r0, r0
 810be62:	4770      	bx	lr
 810be64:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 810be68:	2b05      	cmp	r3, #5
 810be6a:	d801      	bhi.n	810be70 <__hexdig_fun+0x1a>
 810be6c:	3847      	subs	r0, #71	; 0x47
 810be6e:	e7f7      	b.n	810be60 <__hexdig_fun+0xa>
 810be70:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 810be74:	2b05      	cmp	r3, #5
 810be76:	d801      	bhi.n	810be7c <__hexdig_fun+0x26>
 810be78:	3827      	subs	r0, #39	; 0x27
 810be7a:	e7f1      	b.n	810be60 <__hexdig_fun+0xa>
 810be7c:	2000      	movs	r0, #0
 810be7e:	4770      	bx	lr

0810be80 <__gethex>:
 810be80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810be84:	ed2d 8b02 	vpush	{d8}
 810be88:	b089      	sub	sp, #36	; 0x24
 810be8a:	ee08 0a10 	vmov	s16, r0
 810be8e:	9304      	str	r3, [sp, #16]
 810be90:	4bb4      	ldr	r3, [pc, #720]	; (810c164 <__gethex+0x2e4>)
 810be92:	681b      	ldr	r3, [r3, #0]
 810be94:	9301      	str	r3, [sp, #4]
 810be96:	4618      	mov	r0, r3
 810be98:	468b      	mov	fp, r1
 810be9a:	4690      	mov	r8, r2
 810be9c:	f7f4 fa20 	bl	81002e0 <strlen>
 810bea0:	9b01      	ldr	r3, [sp, #4]
 810bea2:	f8db 2000 	ldr.w	r2, [fp]
 810bea6:	4403      	add	r3, r0
 810bea8:	4682      	mov	sl, r0
 810beaa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 810beae:	9305      	str	r3, [sp, #20]
 810beb0:	1c93      	adds	r3, r2, #2
 810beb2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 810beb6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 810beba:	32fe      	adds	r2, #254	; 0xfe
 810bebc:	18d1      	adds	r1, r2, r3
 810bebe:	461f      	mov	r7, r3
 810bec0:	f813 0b01 	ldrb.w	r0, [r3], #1
 810bec4:	9100      	str	r1, [sp, #0]
 810bec6:	2830      	cmp	r0, #48	; 0x30
 810bec8:	d0f8      	beq.n	810bebc <__gethex+0x3c>
 810beca:	f7ff ffc4 	bl	810be56 <__hexdig_fun>
 810bece:	4604      	mov	r4, r0
 810bed0:	2800      	cmp	r0, #0
 810bed2:	d13a      	bne.n	810bf4a <__gethex+0xca>
 810bed4:	9901      	ldr	r1, [sp, #4]
 810bed6:	4652      	mov	r2, sl
 810bed8:	4638      	mov	r0, r7
 810beda:	f001 fc28 	bl	810d72e <strncmp>
 810bede:	4605      	mov	r5, r0
 810bee0:	2800      	cmp	r0, #0
 810bee2:	d168      	bne.n	810bfb6 <__gethex+0x136>
 810bee4:	f817 000a 	ldrb.w	r0, [r7, sl]
 810bee8:	eb07 060a 	add.w	r6, r7, sl
 810beec:	f7ff ffb3 	bl	810be56 <__hexdig_fun>
 810bef0:	2800      	cmp	r0, #0
 810bef2:	d062      	beq.n	810bfba <__gethex+0x13a>
 810bef4:	4633      	mov	r3, r6
 810bef6:	7818      	ldrb	r0, [r3, #0]
 810bef8:	2830      	cmp	r0, #48	; 0x30
 810befa:	461f      	mov	r7, r3
 810befc:	f103 0301 	add.w	r3, r3, #1
 810bf00:	d0f9      	beq.n	810bef6 <__gethex+0x76>
 810bf02:	f7ff ffa8 	bl	810be56 <__hexdig_fun>
 810bf06:	2301      	movs	r3, #1
 810bf08:	fab0 f480 	clz	r4, r0
 810bf0c:	0964      	lsrs	r4, r4, #5
 810bf0e:	4635      	mov	r5, r6
 810bf10:	9300      	str	r3, [sp, #0]
 810bf12:	463a      	mov	r2, r7
 810bf14:	4616      	mov	r6, r2
 810bf16:	3201      	adds	r2, #1
 810bf18:	7830      	ldrb	r0, [r6, #0]
 810bf1a:	f7ff ff9c 	bl	810be56 <__hexdig_fun>
 810bf1e:	2800      	cmp	r0, #0
 810bf20:	d1f8      	bne.n	810bf14 <__gethex+0x94>
 810bf22:	9901      	ldr	r1, [sp, #4]
 810bf24:	4652      	mov	r2, sl
 810bf26:	4630      	mov	r0, r6
 810bf28:	f001 fc01 	bl	810d72e <strncmp>
 810bf2c:	b980      	cbnz	r0, 810bf50 <__gethex+0xd0>
 810bf2e:	b94d      	cbnz	r5, 810bf44 <__gethex+0xc4>
 810bf30:	eb06 050a 	add.w	r5, r6, sl
 810bf34:	462a      	mov	r2, r5
 810bf36:	4616      	mov	r6, r2
 810bf38:	3201      	adds	r2, #1
 810bf3a:	7830      	ldrb	r0, [r6, #0]
 810bf3c:	f7ff ff8b 	bl	810be56 <__hexdig_fun>
 810bf40:	2800      	cmp	r0, #0
 810bf42:	d1f8      	bne.n	810bf36 <__gethex+0xb6>
 810bf44:	1bad      	subs	r5, r5, r6
 810bf46:	00ad      	lsls	r5, r5, #2
 810bf48:	e004      	b.n	810bf54 <__gethex+0xd4>
 810bf4a:	2400      	movs	r4, #0
 810bf4c:	4625      	mov	r5, r4
 810bf4e:	e7e0      	b.n	810bf12 <__gethex+0x92>
 810bf50:	2d00      	cmp	r5, #0
 810bf52:	d1f7      	bne.n	810bf44 <__gethex+0xc4>
 810bf54:	7833      	ldrb	r3, [r6, #0]
 810bf56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810bf5a:	2b50      	cmp	r3, #80	; 0x50
 810bf5c:	d13b      	bne.n	810bfd6 <__gethex+0x156>
 810bf5e:	7873      	ldrb	r3, [r6, #1]
 810bf60:	2b2b      	cmp	r3, #43	; 0x2b
 810bf62:	d02c      	beq.n	810bfbe <__gethex+0x13e>
 810bf64:	2b2d      	cmp	r3, #45	; 0x2d
 810bf66:	d02e      	beq.n	810bfc6 <__gethex+0x146>
 810bf68:	1c71      	adds	r1, r6, #1
 810bf6a:	f04f 0900 	mov.w	r9, #0
 810bf6e:	7808      	ldrb	r0, [r1, #0]
 810bf70:	f7ff ff71 	bl	810be56 <__hexdig_fun>
 810bf74:	1e43      	subs	r3, r0, #1
 810bf76:	b2db      	uxtb	r3, r3
 810bf78:	2b18      	cmp	r3, #24
 810bf7a:	d82c      	bhi.n	810bfd6 <__gethex+0x156>
 810bf7c:	f1a0 0210 	sub.w	r2, r0, #16
 810bf80:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810bf84:	f7ff ff67 	bl	810be56 <__hexdig_fun>
 810bf88:	1e43      	subs	r3, r0, #1
 810bf8a:	b2db      	uxtb	r3, r3
 810bf8c:	2b18      	cmp	r3, #24
 810bf8e:	d91d      	bls.n	810bfcc <__gethex+0x14c>
 810bf90:	f1b9 0f00 	cmp.w	r9, #0
 810bf94:	d000      	beq.n	810bf98 <__gethex+0x118>
 810bf96:	4252      	negs	r2, r2
 810bf98:	4415      	add	r5, r2
 810bf9a:	f8cb 1000 	str.w	r1, [fp]
 810bf9e:	b1e4      	cbz	r4, 810bfda <__gethex+0x15a>
 810bfa0:	9b00      	ldr	r3, [sp, #0]
 810bfa2:	2b00      	cmp	r3, #0
 810bfa4:	bf14      	ite	ne
 810bfa6:	2700      	movne	r7, #0
 810bfa8:	2706      	moveq	r7, #6
 810bfaa:	4638      	mov	r0, r7
 810bfac:	b009      	add	sp, #36	; 0x24
 810bfae:	ecbd 8b02 	vpop	{d8}
 810bfb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bfb6:	463e      	mov	r6, r7
 810bfb8:	4625      	mov	r5, r4
 810bfba:	2401      	movs	r4, #1
 810bfbc:	e7ca      	b.n	810bf54 <__gethex+0xd4>
 810bfbe:	f04f 0900 	mov.w	r9, #0
 810bfc2:	1cb1      	adds	r1, r6, #2
 810bfc4:	e7d3      	b.n	810bf6e <__gethex+0xee>
 810bfc6:	f04f 0901 	mov.w	r9, #1
 810bfca:	e7fa      	b.n	810bfc2 <__gethex+0x142>
 810bfcc:	230a      	movs	r3, #10
 810bfce:	fb03 0202 	mla	r2, r3, r2, r0
 810bfd2:	3a10      	subs	r2, #16
 810bfd4:	e7d4      	b.n	810bf80 <__gethex+0x100>
 810bfd6:	4631      	mov	r1, r6
 810bfd8:	e7df      	b.n	810bf9a <__gethex+0x11a>
 810bfda:	1bf3      	subs	r3, r6, r7
 810bfdc:	3b01      	subs	r3, #1
 810bfde:	4621      	mov	r1, r4
 810bfe0:	2b07      	cmp	r3, #7
 810bfe2:	dc0b      	bgt.n	810bffc <__gethex+0x17c>
 810bfe4:	ee18 0a10 	vmov	r0, s16
 810bfe8:	f000 fad8 	bl	810c59c <_Balloc>
 810bfec:	4604      	mov	r4, r0
 810bfee:	b940      	cbnz	r0, 810c002 <__gethex+0x182>
 810bff0:	4b5d      	ldr	r3, [pc, #372]	; (810c168 <__gethex+0x2e8>)
 810bff2:	4602      	mov	r2, r0
 810bff4:	21de      	movs	r1, #222	; 0xde
 810bff6:	485d      	ldr	r0, [pc, #372]	; (810c16c <__gethex+0x2ec>)
 810bff8:	f001 fbcc 	bl	810d794 <__assert_func>
 810bffc:	3101      	adds	r1, #1
 810bffe:	105b      	asrs	r3, r3, #1
 810c000:	e7ee      	b.n	810bfe0 <__gethex+0x160>
 810c002:	f100 0914 	add.w	r9, r0, #20
 810c006:	f04f 0b00 	mov.w	fp, #0
 810c00a:	f1ca 0301 	rsb	r3, sl, #1
 810c00e:	f8cd 9008 	str.w	r9, [sp, #8]
 810c012:	f8cd b000 	str.w	fp, [sp]
 810c016:	9306      	str	r3, [sp, #24]
 810c018:	42b7      	cmp	r7, r6
 810c01a:	d340      	bcc.n	810c09e <__gethex+0x21e>
 810c01c:	9802      	ldr	r0, [sp, #8]
 810c01e:	9b00      	ldr	r3, [sp, #0]
 810c020:	f840 3b04 	str.w	r3, [r0], #4
 810c024:	eba0 0009 	sub.w	r0, r0, r9
 810c028:	1080      	asrs	r0, r0, #2
 810c02a:	0146      	lsls	r6, r0, #5
 810c02c:	6120      	str	r0, [r4, #16]
 810c02e:	4618      	mov	r0, r3
 810c030:	f000 fba6 	bl	810c780 <__hi0bits>
 810c034:	1a30      	subs	r0, r6, r0
 810c036:	f8d8 6000 	ldr.w	r6, [r8]
 810c03a:	42b0      	cmp	r0, r6
 810c03c:	dd63      	ble.n	810c106 <__gethex+0x286>
 810c03e:	1b87      	subs	r7, r0, r6
 810c040:	4639      	mov	r1, r7
 810c042:	4620      	mov	r0, r4
 810c044:	f000 ff4a 	bl	810cedc <__any_on>
 810c048:	4682      	mov	sl, r0
 810c04a:	b1a8      	cbz	r0, 810c078 <__gethex+0x1f8>
 810c04c:	1e7b      	subs	r3, r7, #1
 810c04e:	1159      	asrs	r1, r3, #5
 810c050:	f003 021f 	and.w	r2, r3, #31
 810c054:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 810c058:	f04f 0a01 	mov.w	sl, #1
 810c05c:	fa0a f202 	lsl.w	r2, sl, r2
 810c060:	420a      	tst	r2, r1
 810c062:	d009      	beq.n	810c078 <__gethex+0x1f8>
 810c064:	4553      	cmp	r3, sl
 810c066:	dd05      	ble.n	810c074 <__gethex+0x1f4>
 810c068:	1eb9      	subs	r1, r7, #2
 810c06a:	4620      	mov	r0, r4
 810c06c:	f000 ff36 	bl	810cedc <__any_on>
 810c070:	2800      	cmp	r0, #0
 810c072:	d145      	bne.n	810c100 <__gethex+0x280>
 810c074:	f04f 0a02 	mov.w	sl, #2
 810c078:	4639      	mov	r1, r7
 810c07a:	4620      	mov	r0, r4
 810c07c:	f7ff fe99 	bl	810bdb2 <rshift>
 810c080:	443d      	add	r5, r7
 810c082:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810c086:	42ab      	cmp	r3, r5
 810c088:	da4c      	bge.n	810c124 <__gethex+0x2a4>
 810c08a:	ee18 0a10 	vmov	r0, s16
 810c08e:	4621      	mov	r1, r4
 810c090:	f000 fac4 	bl	810c61c <_Bfree>
 810c094:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810c096:	2300      	movs	r3, #0
 810c098:	6013      	str	r3, [r2, #0]
 810c09a:	27a3      	movs	r7, #163	; 0xa3
 810c09c:	e785      	b.n	810bfaa <__gethex+0x12a>
 810c09e:	1e73      	subs	r3, r6, #1
 810c0a0:	9a05      	ldr	r2, [sp, #20]
 810c0a2:	9303      	str	r3, [sp, #12]
 810c0a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 810c0a8:	4293      	cmp	r3, r2
 810c0aa:	d019      	beq.n	810c0e0 <__gethex+0x260>
 810c0ac:	f1bb 0f20 	cmp.w	fp, #32
 810c0b0:	d107      	bne.n	810c0c2 <__gethex+0x242>
 810c0b2:	9b02      	ldr	r3, [sp, #8]
 810c0b4:	9a00      	ldr	r2, [sp, #0]
 810c0b6:	f843 2b04 	str.w	r2, [r3], #4
 810c0ba:	9302      	str	r3, [sp, #8]
 810c0bc:	2300      	movs	r3, #0
 810c0be:	9300      	str	r3, [sp, #0]
 810c0c0:	469b      	mov	fp, r3
 810c0c2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 810c0c6:	f7ff fec6 	bl	810be56 <__hexdig_fun>
 810c0ca:	9b00      	ldr	r3, [sp, #0]
 810c0cc:	f000 000f 	and.w	r0, r0, #15
 810c0d0:	fa00 f00b 	lsl.w	r0, r0, fp
 810c0d4:	4303      	orrs	r3, r0
 810c0d6:	9300      	str	r3, [sp, #0]
 810c0d8:	f10b 0b04 	add.w	fp, fp, #4
 810c0dc:	9b03      	ldr	r3, [sp, #12]
 810c0de:	e00d      	b.n	810c0fc <__gethex+0x27c>
 810c0e0:	9b03      	ldr	r3, [sp, #12]
 810c0e2:	9a06      	ldr	r2, [sp, #24]
 810c0e4:	4413      	add	r3, r2
 810c0e6:	42bb      	cmp	r3, r7
 810c0e8:	d3e0      	bcc.n	810c0ac <__gethex+0x22c>
 810c0ea:	4618      	mov	r0, r3
 810c0ec:	9901      	ldr	r1, [sp, #4]
 810c0ee:	9307      	str	r3, [sp, #28]
 810c0f0:	4652      	mov	r2, sl
 810c0f2:	f001 fb1c 	bl	810d72e <strncmp>
 810c0f6:	9b07      	ldr	r3, [sp, #28]
 810c0f8:	2800      	cmp	r0, #0
 810c0fa:	d1d7      	bne.n	810c0ac <__gethex+0x22c>
 810c0fc:	461e      	mov	r6, r3
 810c0fe:	e78b      	b.n	810c018 <__gethex+0x198>
 810c100:	f04f 0a03 	mov.w	sl, #3
 810c104:	e7b8      	b.n	810c078 <__gethex+0x1f8>
 810c106:	da0a      	bge.n	810c11e <__gethex+0x29e>
 810c108:	1a37      	subs	r7, r6, r0
 810c10a:	4621      	mov	r1, r4
 810c10c:	ee18 0a10 	vmov	r0, s16
 810c110:	463a      	mov	r2, r7
 810c112:	f000 fc9f 	bl	810ca54 <__lshift>
 810c116:	1bed      	subs	r5, r5, r7
 810c118:	4604      	mov	r4, r0
 810c11a:	f100 0914 	add.w	r9, r0, #20
 810c11e:	f04f 0a00 	mov.w	sl, #0
 810c122:	e7ae      	b.n	810c082 <__gethex+0x202>
 810c124:	f8d8 0004 	ldr.w	r0, [r8, #4]
 810c128:	42a8      	cmp	r0, r5
 810c12a:	dd72      	ble.n	810c212 <__gethex+0x392>
 810c12c:	1b45      	subs	r5, r0, r5
 810c12e:	42ae      	cmp	r6, r5
 810c130:	dc36      	bgt.n	810c1a0 <__gethex+0x320>
 810c132:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810c136:	2b02      	cmp	r3, #2
 810c138:	d02a      	beq.n	810c190 <__gethex+0x310>
 810c13a:	2b03      	cmp	r3, #3
 810c13c:	d02c      	beq.n	810c198 <__gethex+0x318>
 810c13e:	2b01      	cmp	r3, #1
 810c140:	d11c      	bne.n	810c17c <__gethex+0x2fc>
 810c142:	42ae      	cmp	r6, r5
 810c144:	d11a      	bne.n	810c17c <__gethex+0x2fc>
 810c146:	2e01      	cmp	r6, #1
 810c148:	d112      	bne.n	810c170 <__gethex+0x2f0>
 810c14a:	9a04      	ldr	r2, [sp, #16]
 810c14c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 810c150:	6013      	str	r3, [r2, #0]
 810c152:	2301      	movs	r3, #1
 810c154:	6123      	str	r3, [r4, #16]
 810c156:	f8c9 3000 	str.w	r3, [r9]
 810c15a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810c15c:	2762      	movs	r7, #98	; 0x62
 810c15e:	601c      	str	r4, [r3, #0]
 810c160:	e723      	b.n	810bfaa <__gethex+0x12a>
 810c162:	bf00      	nop
 810c164:	0810e224 	.word	0x0810e224
 810c168:	0810e148 	.word	0x0810e148
 810c16c:	0810e1bc 	.word	0x0810e1bc
 810c170:	1e71      	subs	r1, r6, #1
 810c172:	4620      	mov	r0, r4
 810c174:	f000 feb2 	bl	810cedc <__any_on>
 810c178:	2800      	cmp	r0, #0
 810c17a:	d1e6      	bne.n	810c14a <__gethex+0x2ca>
 810c17c:	ee18 0a10 	vmov	r0, s16
 810c180:	4621      	mov	r1, r4
 810c182:	f000 fa4b 	bl	810c61c <_Bfree>
 810c186:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810c188:	2300      	movs	r3, #0
 810c18a:	6013      	str	r3, [r2, #0]
 810c18c:	2750      	movs	r7, #80	; 0x50
 810c18e:	e70c      	b.n	810bfaa <__gethex+0x12a>
 810c190:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810c192:	2b00      	cmp	r3, #0
 810c194:	d1f2      	bne.n	810c17c <__gethex+0x2fc>
 810c196:	e7d8      	b.n	810c14a <__gethex+0x2ca>
 810c198:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810c19a:	2b00      	cmp	r3, #0
 810c19c:	d1d5      	bne.n	810c14a <__gethex+0x2ca>
 810c19e:	e7ed      	b.n	810c17c <__gethex+0x2fc>
 810c1a0:	1e6f      	subs	r7, r5, #1
 810c1a2:	f1ba 0f00 	cmp.w	sl, #0
 810c1a6:	d131      	bne.n	810c20c <__gethex+0x38c>
 810c1a8:	b127      	cbz	r7, 810c1b4 <__gethex+0x334>
 810c1aa:	4639      	mov	r1, r7
 810c1ac:	4620      	mov	r0, r4
 810c1ae:	f000 fe95 	bl	810cedc <__any_on>
 810c1b2:	4682      	mov	sl, r0
 810c1b4:	117b      	asrs	r3, r7, #5
 810c1b6:	2101      	movs	r1, #1
 810c1b8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 810c1bc:	f007 071f 	and.w	r7, r7, #31
 810c1c0:	fa01 f707 	lsl.w	r7, r1, r7
 810c1c4:	421f      	tst	r7, r3
 810c1c6:	4629      	mov	r1, r5
 810c1c8:	4620      	mov	r0, r4
 810c1ca:	bf18      	it	ne
 810c1cc:	f04a 0a02 	orrne.w	sl, sl, #2
 810c1d0:	1b76      	subs	r6, r6, r5
 810c1d2:	f7ff fdee 	bl	810bdb2 <rshift>
 810c1d6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 810c1da:	2702      	movs	r7, #2
 810c1dc:	f1ba 0f00 	cmp.w	sl, #0
 810c1e0:	d048      	beq.n	810c274 <__gethex+0x3f4>
 810c1e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810c1e6:	2b02      	cmp	r3, #2
 810c1e8:	d015      	beq.n	810c216 <__gethex+0x396>
 810c1ea:	2b03      	cmp	r3, #3
 810c1ec:	d017      	beq.n	810c21e <__gethex+0x39e>
 810c1ee:	2b01      	cmp	r3, #1
 810c1f0:	d109      	bne.n	810c206 <__gethex+0x386>
 810c1f2:	f01a 0f02 	tst.w	sl, #2
 810c1f6:	d006      	beq.n	810c206 <__gethex+0x386>
 810c1f8:	f8d9 0000 	ldr.w	r0, [r9]
 810c1fc:	ea4a 0a00 	orr.w	sl, sl, r0
 810c200:	f01a 0f01 	tst.w	sl, #1
 810c204:	d10e      	bne.n	810c224 <__gethex+0x3a4>
 810c206:	f047 0710 	orr.w	r7, r7, #16
 810c20a:	e033      	b.n	810c274 <__gethex+0x3f4>
 810c20c:	f04f 0a01 	mov.w	sl, #1
 810c210:	e7d0      	b.n	810c1b4 <__gethex+0x334>
 810c212:	2701      	movs	r7, #1
 810c214:	e7e2      	b.n	810c1dc <__gethex+0x35c>
 810c216:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810c218:	f1c3 0301 	rsb	r3, r3, #1
 810c21c:	9315      	str	r3, [sp, #84]	; 0x54
 810c21e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810c220:	2b00      	cmp	r3, #0
 810c222:	d0f0      	beq.n	810c206 <__gethex+0x386>
 810c224:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810c228:	f104 0314 	add.w	r3, r4, #20
 810c22c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 810c230:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 810c234:	f04f 0c00 	mov.w	ip, #0
 810c238:	4618      	mov	r0, r3
 810c23a:	f853 2b04 	ldr.w	r2, [r3], #4
 810c23e:	f1b2 3fff 	cmp.w	r2, #4294967295
 810c242:	d01c      	beq.n	810c27e <__gethex+0x3fe>
 810c244:	3201      	adds	r2, #1
 810c246:	6002      	str	r2, [r0, #0]
 810c248:	2f02      	cmp	r7, #2
 810c24a:	f104 0314 	add.w	r3, r4, #20
 810c24e:	d13f      	bne.n	810c2d0 <__gethex+0x450>
 810c250:	f8d8 2000 	ldr.w	r2, [r8]
 810c254:	3a01      	subs	r2, #1
 810c256:	42b2      	cmp	r2, r6
 810c258:	d10a      	bne.n	810c270 <__gethex+0x3f0>
 810c25a:	1171      	asrs	r1, r6, #5
 810c25c:	2201      	movs	r2, #1
 810c25e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 810c262:	f006 061f 	and.w	r6, r6, #31
 810c266:	fa02 f606 	lsl.w	r6, r2, r6
 810c26a:	421e      	tst	r6, r3
 810c26c:	bf18      	it	ne
 810c26e:	4617      	movne	r7, r2
 810c270:	f047 0720 	orr.w	r7, r7, #32
 810c274:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810c276:	601c      	str	r4, [r3, #0]
 810c278:	9b04      	ldr	r3, [sp, #16]
 810c27a:	601d      	str	r5, [r3, #0]
 810c27c:	e695      	b.n	810bfaa <__gethex+0x12a>
 810c27e:	4299      	cmp	r1, r3
 810c280:	f843 cc04 	str.w	ip, [r3, #-4]
 810c284:	d8d8      	bhi.n	810c238 <__gethex+0x3b8>
 810c286:	68a3      	ldr	r3, [r4, #8]
 810c288:	459b      	cmp	fp, r3
 810c28a:	db19      	blt.n	810c2c0 <__gethex+0x440>
 810c28c:	6861      	ldr	r1, [r4, #4]
 810c28e:	ee18 0a10 	vmov	r0, s16
 810c292:	3101      	adds	r1, #1
 810c294:	f000 f982 	bl	810c59c <_Balloc>
 810c298:	4681      	mov	r9, r0
 810c29a:	b918      	cbnz	r0, 810c2a4 <__gethex+0x424>
 810c29c:	4b1a      	ldr	r3, [pc, #104]	; (810c308 <__gethex+0x488>)
 810c29e:	4602      	mov	r2, r0
 810c2a0:	2184      	movs	r1, #132	; 0x84
 810c2a2:	e6a8      	b.n	810bff6 <__gethex+0x176>
 810c2a4:	6922      	ldr	r2, [r4, #16]
 810c2a6:	3202      	adds	r2, #2
 810c2a8:	f104 010c 	add.w	r1, r4, #12
 810c2ac:	0092      	lsls	r2, r2, #2
 810c2ae:	300c      	adds	r0, #12
 810c2b0:	f7fc fe9c 	bl	8108fec <memcpy>
 810c2b4:	4621      	mov	r1, r4
 810c2b6:	ee18 0a10 	vmov	r0, s16
 810c2ba:	f000 f9af 	bl	810c61c <_Bfree>
 810c2be:	464c      	mov	r4, r9
 810c2c0:	6923      	ldr	r3, [r4, #16]
 810c2c2:	1c5a      	adds	r2, r3, #1
 810c2c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810c2c8:	6122      	str	r2, [r4, #16]
 810c2ca:	2201      	movs	r2, #1
 810c2cc:	615a      	str	r2, [r3, #20]
 810c2ce:	e7bb      	b.n	810c248 <__gethex+0x3c8>
 810c2d0:	6922      	ldr	r2, [r4, #16]
 810c2d2:	455a      	cmp	r2, fp
 810c2d4:	dd0b      	ble.n	810c2ee <__gethex+0x46e>
 810c2d6:	2101      	movs	r1, #1
 810c2d8:	4620      	mov	r0, r4
 810c2da:	f7ff fd6a 	bl	810bdb2 <rshift>
 810c2de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810c2e2:	3501      	adds	r5, #1
 810c2e4:	42ab      	cmp	r3, r5
 810c2e6:	f6ff aed0 	blt.w	810c08a <__gethex+0x20a>
 810c2ea:	2701      	movs	r7, #1
 810c2ec:	e7c0      	b.n	810c270 <__gethex+0x3f0>
 810c2ee:	f016 061f 	ands.w	r6, r6, #31
 810c2f2:	d0fa      	beq.n	810c2ea <__gethex+0x46a>
 810c2f4:	4453      	add	r3, sl
 810c2f6:	f1c6 0620 	rsb	r6, r6, #32
 810c2fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 810c2fe:	f000 fa3f 	bl	810c780 <__hi0bits>
 810c302:	42b0      	cmp	r0, r6
 810c304:	dbe7      	blt.n	810c2d6 <__gethex+0x456>
 810c306:	e7f0      	b.n	810c2ea <__gethex+0x46a>
 810c308:	0810e148 	.word	0x0810e148

0810c30c <L_shift>:
 810c30c:	f1c2 0208 	rsb	r2, r2, #8
 810c310:	0092      	lsls	r2, r2, #2
 810c312:	b570      	push	{r4, r5, r6, lr}
 810c314:	f1c2 0620 	rsb	r6, r2, #32
 810c318:	6843      	ldr	r3, [r0, #4]
 810c31a:	6804      	ldr	r4, [r0, #0]
 810c31c:	fa03 f506 	lsl.w	r5, r3, r6
 810c320:	432c      	orrs	r4, r5
 810c322:	40d3      	lsrs	r3, r2
 810c324:	6004      	str	r4, [r0, #0]
 810c326:	f840 3f04 	str.w	r3, [r0, #4]!
 810c32a:	4288      	cmp	r0, r1
 810c32c:	d3f4      	bcc.n	810c318 <L_shift+0xc>
 810c32e:	bd70      	pop	{r4, r5, r6, pc}

0810c330 <__match>:
 810c330:	b530      	push	{r4, r5, lr}
 810c332:	6803      	ldr	r3, [r0, #0]
 810c334:	3301      	adds	r3, #1
 810c336:	f811 4b01 	ldrb.w	r4, [r1], #1
 810c33a:	b914      	cbnz	r4, 810c342 <__match+0x12>
 810c33c:	6003      	str	r3, [r0, #0]
 810c33e:	2001      	movs	r0, #1
 810c340:	bd30      	pop	{r4, r5, pc}
 810c342:	f813 2b01 	ldrb.w	r2, [r3], #1
 810c346:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 810c34a:	2d19      	cmp	r5, #25
 810c34c:	bf98      	it	ls
 810c34e:	3220      	addls	r2, #32
 810c350:	42a2      	cmp	r2, r4
 810c352:	d0f0      	beq.n	810c336 <__match+0x6>
 810c354:	2000      	movs	r0, #0
 810c356:	e7f3      	b.n	810c340 <__match+0x10>

0810c358 <__hexnan>:
 810c358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c35c:	680b      	ldr	r3, [r1, #0]
 810c35e:	115e      	asrs	r6, r3, #5
 810c360:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810c364:	f013 031f 	ands.w	r3, r3, #31
 810c368:	b087      	sub	sp, #28
 810c36a:	bf18      	it	ne
 810c36c:	3604      	addne	r6, #4
 810c36e:	2500      	movs	r5, #0
 810c370:	1f37      	subs	r7, r6, #4
 810c372:	4690      	mov	r8, r2
 810c374:	6802      	ldr	r2, [r0, #0]
 810c376:	9301      	str	r3, [sp, #4]
 810c378:	4682      	mov	sl, r0
 810c37a:	f846 5c04 	str.w	r5, [r6, #-4]
 810c37e:	46b9      	mov	r9, r7
 810c380:	463c      	mov	r4, r7
 810c382:	9502      	str	r5, [sp, #8]
 810c384:	46ab      	mov	fp, r5
 810c386:	7851      	ldrb	r1, [r2, #1]
 810c388:	1c53      	adds	r3, r2, #1
 810c38a:	9303      	str	r3, [sp, #12]
 810c38c:	b341      	cbz	r1, 810c3e0 <__hexnan+0x88>
 810c38e:	4608      	mov	r0, r1
 810c390:	9205      	str	r2, [sp, #20]
 810c392:	9104      	str	r1, [sp, #16]
 810c394:	f7ff fd5f 	bl	810be56 <__hexdig_fun>
 810c398:	2800      	cmp	r0, #0
 810c39a:	d14f      	bne.n	810c43c <__hexnan+0xe4>
 810c39c:	9904      	ldr	r1, [sp, #16]
 810c39e:	9a05      	ldr	r2, [sp, #20]
 810c3a0:	2920      	cmp	r1, #32
 810c3a2:	d818      	bhi.n	810c3d6 <__hexnan+0x7e>
 810c3a4:	9b02      	ldr	r3, [sp, #8]
 810c3a6:	459b      	cmp	fp, r3
 810c3a8:	dd13      	ble.n	810c3d2 <__hexnan+0x7a>
 810c3aa:	454c      	cmp	r4, r9
 810c3ac:	d206      	bcs.n	810c3bc <__hexnan+0x64>
 810c3ae:	2d07      	cmp	r5, #7
 810c3b0:	dc04      	bgt.n	810c3bc <__hexnan+0x64>
 810c3b2:	462a      	mov	r2, r5
 810c3b4:	4649      	mov	r1, r9
 810c3b6:	4620      	mov	r0, r4
 810c3b8:	f7ff ffa8 	bl	810c30c <L_shift>
 810c3bc:	4544      	cmp	r4, r8
 810c3be:	d950      	bls.n	810c462 <__hexnan+0x10a>
 810c3c0:	2300      	movs	r3, #0
 810c3c2:	f1a4 0904 	sub.w	r9, r4, #4
 810c3c6:	f844 3c04 	str.w	r3, [r4, #-4]
 810c3ca:	f8cd b008 	str.w	fp, [sp, #8]
 810c3ce:	464c      	mov	r4, r9
 810c3d0:	461d      	mov	r5, r3
 810c3d2:	9a03      	ldr	r2, [sp, #12]
 810c3d4:	e7d7      	b.n	810c386 <__hexnan+0x2e>
 810c3d6:	2929      	cmp	r1, #41	; 0x29
 810c3d8:	d156      	bne.n	810c488 <__hexnan+0x130>
 810c3da:	3202      	adds	r2, #2
 810c3dc:	f8ca 2000 	str.w	r2, [sl]
 810c3e0:	f1bb 0f00 	cmp.w	fp, #0
 810c3e4:	d050      	beq.n	810c488 <__hexnan+0x130>
 810c3e6:	454c      	cmp	r4, r9
 810c3e8:	d206      	bcs.n	810c3f8 <__hexnan+0xa0>
 810c3ea:	2d07      	cmp	r5, #7
 810c3ec:	dc04      	bgt.n	810c3f8 <__hexnan+0xa0>
 810c3ee:	462a      	mov	r2, r5
 810c3f0:	4649      	mov	r1, r9
 810c3f2:	4620      	mov	r0, r4
 810c3f4:	f7ff ff8a 	bl	810c30c <L_shift>
 810c3f8:	4544      	cmp	r4, r8
 810c3fa:	d934      	bls.n	810c466 <__hexnan+0x10e>
 810c3fc:	f1a8 0204 	sub.w	r2, r8, #4
 810c400:	4623      	mov	r3, r4
 810c402:	f853 1b04 	ldr.w	r1, [r3], #4
 810c406:	f842 1f04 	str.w	r1, [r2, #4]!
 810c40a:	429f      	cmp	r7, r3
 810c40c:	d2f9      	bcs.n	810c402 <__hexnan+0xaa>
 810c40e:	1b3b      	subs	r3, r7, r4
 810c410:	f023 0303 	bic.w	r3, r3, #3
 810c414:	3304      	adds	r3, #4
 810c416:	3401      	adds	r4, #1
 810c418:	3e03      	subs	r6, #3
 810c41a:	42b4      	cmp	r4, r6
 810c41c:	bf88      	it	hi
 810c41e:	2304      	movhi	r3, #4
 810c420:	4443      	add	r3, r8
 810c422:	2200      	movs	r2, #0
 810c424:	f843 2b04 	str.w	r2, [r3], #4
 810c428:	429f      	cmp	r7, r3
 810c42a:	d2fb      	bcs.n	810c424 <__hexnan+0xcc>
 810c42c:	683b      	ldr	r3, [r7, #0]
 810c42e:	b91b      	cbnz	r3, 810c438 <__hexnan+0xe0>
 810c430:	4547      	cmp	r7, r8
 810c432:	d127      	bne.n	810c484 <__hexnan+0x12c>
 810c434:	2301      	movs	r3, #1
 810c436:	603b      	str	r3, [r7, #0]
 810c438:	2005      	movs	r0, #5
 810c43a:	e026      	b.n	810c48a <__hexnan+0x132>
 810c43c:	3501      	adds	r5, #1
 810c43e:	2d08      	cmp	r5, #8
 810c440:	f10b 0b01 	add.w	fp, fp, #1
 810c444:	dd06      	ble.n	810c454 <__hexnan+0xfc>
 810c446:	4544      	cmp	r4, r8
 810c448:	d9c3      	bls.n	810c3d2 <__hexnan+0x7a>
 810c44a:	2300      	movs	r3, #0
 810c44c:	f844 3c04 	str.w	r3, [r4, #-4]
 810c450:	2501      	movs	r5, #1
 810c452:	3c04      	subs	r4, #4
 810c454:	6822      	ldr	r2, [r4, #0]
 810c456:	f000 000f 	and.w	r0, r0, #15
 810c45a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 810c45e:	6022      	str	r2, [r4, #0]
 810c460:	e7b7      	b.n	810c3d2 <__hexnan+0x7a>
 810c462:	2508      	movs	r5, #8
 810c464:	e7b5      	b.n	810c3d2 <__hexnan+0x7a>
 810c466:	9b01      	ldr	r3, [sp, #4]
 810c468:	2b00      	cmp	r3, #0
 810c46a:	d0df      	beq.n	810c42c <__hexnan+0xd4>
 810c46c:	f04f 32ff 	mov.w	r2, #4294967295
 810c470:	f1c3 0320 	rsb	r3, r3, #32
 810c474:	fa22 f303 	lsr.w	r3, r2, r3
 810c478:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810c47c:	401a      	ands	r2, r3
 810c47e:	f846 2c04 	str.w	r2, [r6, #-4]
 810c482:	e7d3      	b.n	810c42c <__hexnan+0xd4>
 810c484:	3f04      	subs	r7, #4
 810c486:	e7d1      	b.n	810c42c <__hexnan+0xd4>
 810c488:	2004      	movs	r0, #4
 810c48a:	b007      	add	sp, #28
 810c48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810c490 <_localeconv_r>:
 810c490:	4800      	ldr	r0, [pc, #0]	; (810c494 <_localeconv_r+0x4>)
 810c492:	4770      	bx	lr
 810c494:	10000184 	.word	0x10000184

0810c498 <__retarget_lock_init_recursive>:
 810c498:	4770      	bx	lr

0810c49a <__retarget_lock_acquire_recursive>:
 810c49a:	4770      	bx	lr

0810c49c <__retarget_lock_release_recursive>:
 810c49c:	4770      	bx	lr

0810c49e <__swhatbuf_r>:
 810c49e:	b570      	push	{r4, r5, r6, lr}
 810c4a0:	460e      	mov	r6, r1
 810c4a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810c4a6:	2900      	cmp	r1, #0
 810c4a8:	b096      	sub	sp, #88	; 0x58
 810c4aa:	4614      	mov	r4, r2
 810c4ac:	461d      	mov	r5, r3
 810c4ae:	da08      	bge.n	810c4c2 <__swhatbuf_r+0x24>
 810c4b0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 810c4b4:	2200      	movs	r2, #0
 810c4b6:	602a      	str	r2, [r5, #0]
 810c4b8:	061a      	lsls	r2, r3, #24
 810c4ba:	d410      	bmi.n	810c4de <__swhatbuf_r+0x40>
 810c4bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810c4c0:	e00e      	b.n	810c4e0 <__swhatbuf_r+0x42>
 810c4c2:	466a      	mov	r2, sp
 810c4c4:	f001 f9a6 	bl	810d814 <_fstat_r>
 810c4c8:	2800      	cmp	r0, #0
 810c4ca:	dbf1      	blt.n	810c4b0 <__swhatbuf_r+0x12>
 810c4cc:	9a01      	ldr	r2, [sp, #4]
 810c4ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 810c4d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 810c4d6:	425a      	negs	r2, r3
 810c4d8:	415a      	adcs	r2, r3
 810c4da:	602a      	str	r2, [r5, #0]
 810c4dc:	e7ee      	b.n	810c4bc <__swhatbuf_r+0x1e>
 810c4de:	2340      	movs	r3, #64	; 0x40
 810c4e0:	2000      	movs	r0, #0
 810c4e2:	6023      	str	r3, [r4, #0]
 810c4e4:	b016      	add	sp, #88	; 0x58
 810c4e6:	bd70      	pop	{r4, r5, r6, pc}

0810c4e8 <__smakebuf_r>:
 810c4e8:	898b      	ldrh	r3, [r1, #12]
 810c4ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810c4ec:	079d      	lsls	r5, r3, #30
 810c4ee:	4606      	mov	r6, r0
 810c4f0:	460c      	mov	r4, r1
 810c4f2:	d507      	bpl.n	810c504 <__smakebuf_r+0x1c>
 810c4f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810c4f8:	6023      	str	r3, [r4, #0]
 810c4fa:	6123      	str	r3, [r4, #16]
 810c4fc:	2301      	movs	r3, #1
 810c4fe:	6163      	str	r3, [r4, #20]
 810c500:	b002      	add	sp, #8
 810c502:	bd70      	pop	{r4, r5, r6, pc}
 810c504:	ab01      	add	r3, sp, #4
 810c506:	466a      	mov	r2, sp
 810c508:	f7ff ffc9 	bl	810c49e <__swhatbuf_r>
 810c50c:	9900      	ldr	r1, [sp, #0]
 810c50e:	4605      	mov	r5, r0
 810c510:	4630      	mov	r0, r6
 810c512:	f000 fd87 	bl	810d024 <_malloc_r>
 810c516:	b948      	cbnz	r0, 810c52c <__smakebuf_r+0x44>
 810c518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810c51c:	059a      	lsls	r2, r3, #22
 810c51e:	d4ef      	bmi.n	810c500 <__smakebuf_r+0x18>
 810c520:	f023 0303 	bic.w	r3, r3, #3
 810c524:	f043 0302 	orr.w	r3, r3, #2
 810c528:	81a3      	strh	r3, [r4, #12]
 810c52a:	e7e3      	b.n	810c4f4 <__smakebuf_r+0xc>
 810c52c:	4b0d      	ldr	r3, [pc, #52]	; (810c564 <__smakebuf_r+0x7c>)
 810c52e:	62b3      	str	r3, [r6, #40]	; 0x28
 810c530:	89a3      	ldrh	r3, [r4, #12]
 810c532:	6020      	str	r0, [r4, #0]
 810c534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810c538:	81a3      	strh	r3, [r4, #12]
 810c53a:	9b00      	ldr	r3, [sp, #0]
 810c53c:	6163      	str	r3, [r4, #20]
 810c53e:	9b01      	ldr	r3, [sp, #4]
 810c540:	6120      	str	r0, [r4, #16]
 810c542:	b15b      	cbz	r3, 810c55c <__smakebuf_r+0x74>
 810c544:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810c548:	4630      	mov	r0, r6
 810c54a:	f001 f975 	bl	810d838 <_isatty_r>
 810c54e:	b128      	cbz	r0, 810c55c <__smakebuf_r+0x74>
 810c550:	89a3      	ldrh	r3, [r4, #12]
 810c552:	f023 0303 	bic.w	r3, r3, #3
 810c556:	f043 0301 	orr.w	r3, r3, #1
 810c55a:	81a3      	strh	r3, [r4, #12]
 810c55c:	89a0      	ldrh	r0, [r4, #12]
 810c55e:	4305      	orrs	r5, r0
 810c560:	81a5      	strh	r5, [r4, #12]
 810c562:	e7cd      	b.n	810c500 <__smakebuf_r+0x18>
 810c564:	0810bc11 	.word	0x0810bc11

0810c568 <malloc>:
 810c568:	4b02      	ldr	r3, [pc, #8]	; (810c574 <malloc+0xc>)
 810c56a:	4601      	mov	r1, r0
 810c56c:	6818      	ldr	r0, [r3, #0]
 810c56e:	f000 bd59 	b.w	810d024 <_malloc_r>
 810c572:	bf00      	nop
 810c574:	1000002c 	.word	0x1000002c

0810c578 <__ascii_mbtowc>:
 810c578:	b082      	sub	sp, #8
 810c57a:	b901      	cbnz	r1, 810c57e <__ascii_mbtowc+0x6>
 810c57c:	a901      	add	r1, sp, #4
 810c57e:	b142      	cbz	r2, 810c592 <__ascii_mbtowc+0x1a>
 810c580:	b14b      	cbz	r3, 810c596 <__ascii_mbtowc+0x1e>
 810c582:	7813      	ldrb	r3, [r2, #0]
 810c584:	600b      	str	r3, [r1, #0]
 810c586:	7812      	ldrb	r2, [r2, #0]
 810c588:	1e10      	subs	r0, r2, #0
 810c58a:	bf18      	it	ne
 810c58c:	2001      	movne	r0, #1
 810c58e:	b002      	add	sp, #8
 810c590:	4770      	bx	lr
 810c592:	4610      	mov	r0, r2
 810c594:	e7fb      	b.n	810c58e <__ascii_mbtowc+0x16>
 810c596:	f06f 0001 	mvn.w	r0, #1
 810c59a:	e7f8      	b.n	810c58e <__ascii_mbtowc+0x16>

0810c59c <_Balloc>:
 810c59c:	b570      	push	{r4, r5, r6, lr}
 810c59e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810c5a0:	4604      	mov	r4, r0
 810c5a2:	460d      	mov	r5, r1
 810c5a4:	b976      	cbnz	r6, 810c5c4 <_Balloc+0x28>
 810c5a6:	2010      	movs	r0, #16
 810c5a8:	f7ff ffde 	bl	810c568 <malloc>
 810c5ac:	4602      	mov	r2, r0
 810c5ae:	6260      	str	r0, [r4, #36]	; 0x24
 810c5b0:	b920      	cbnz	r0, 810c5bc <_Balloc+0x20>
 810c5b2:	4b18      	ldr	r3, [pc, #96]	; (810c614 <_Balloc+0x78>)
 810c5b4:	4818      	ldr	r0, [pc, #96]	; (810c618 <_Balloc+0x7c>)
 810c5b6:	2166      	movs	r1, #102	; 0x66
 810c5b8:	f001 f8ec 	bl	810d794 <__assert_func>
 810c5bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810c5c0:	6006      	str	r6, [r0, #0]
 810c5c2:	60c6      	str	r6, [r0, #12]
 810c5c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 810c5c6:	68f3      	ldr	r3, [r6, #12]
 810c5c8:	b183      	cbz	r3, 810c5ec <_Balloc+0x50>
 810c5ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810c5cc:	68db      	ldr	r3, [r3, #12]
 810c5ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810c5d2:	b9b8      	cbnz	r0, 810c604 <_Balloc+0x68>
 810c5d4:	2101      	movs	r1, #1
 810c5d6:	fa01 f605 	lsl.w	r6, r1, r5
 810c5da:	1d72      	adds	r2, r6, #5
 810c5dc:	0092      	lsls	r2, r2, #2
 810c5de:	4620      	mov	r0, r4
 810c5e0:	f000 fc9d 	bl	810cf1e <_calloc_r>
 810c5e4:	b160      	cbz	r0, 810c600 <_Balloc+0x64>
 810c5e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810c5ea:	e00e      	b.n	810c60a <_Balloc+0x6e>
 810c5ec:	2221      	movs	r2, #33	; 0x21
 810c5ee:	2104      	movs	r1, #4
 810c5f0:	4620      	mov	r0, r4
 810c5f2:	f000 fc94 	bl	810cf1e <_calloc_r>
 810c5f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810c5f8:	60f0      	str	r0, [r6, #12]
 810c5fa:	68db      	ldr	r3, [r3, #12]
 810c5fc:	2b00      	cmp	r3, #0
 810c5fe:	d1e4      	bne.n	810c5ca <_Balloc+0x2e>
 810c600:	2000      	movs	r0, #0
 810c602:	bd70      	pop	{r4, r5, r6, pc}
 810c604:	6802      	ldr	r2, [r0, #0]
 810c606:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810c60a:	2300      	movs	r3, #0
 810c60c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810c610:	e7f7      	b.n	810c602 <_Balloc+0x66>
 810c612:	bf00      	nop
 810c614:	0810e0d6 	.word	0x0810e0d6
 810c618:	0810e238 	.word	0x0810e238

0810c61c <_Bfree>:
 810c61c:	b570      	push	{r4, r5, r6, lr}
 810c61e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810c620:	4605      	mov	r5, r0
 810c622:	460c      	mov	r4, r1
 810c624:	b976      	cbnz	r6, 810c644 <_Bfree+0x28>
 810c626:	2010      	movs	r0, #16
 810c628:	f7ff ff9e 	bl	810c568 <malloc>
 810c62c:	4602      	mov	r2, r0
 810c62e:	6268      	str	r0, [r5, #36]	; 0x24
 810c630:	b920      	cbnz	r0, 810c63c <_Bfree+0x20>
 810c632:	4b09      	ldr	r3, [pc, #36]	; (810c658 <_Bfree+0x3c>)
 810c634:	4809      	ldr	r0, [pc, #36]	; (810c65c <_Bfree+0x40>)
 810c636:	218a      	movs	r1, #138	; 0x8a
 810c638:	f001 f8ac 	bl	810d794 <__assert_func>
 810c63c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810c640:	6006      	str	r6, [r0, #0]
 810c642:	60c6      	str	r6, [r0, #12]
 810c644:	b13c      	cbz	r4, 810c656 <_Bfree+0x3a>
 810c646:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 810c648:	6862      	ldr	r2, [r4, #4]
 810c64a:	68db      	ldr	r3, [r3, #12]
 810c64c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810c650:	6021      	str	r1, [r4, #0]
 810c652:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810c656:	bd70      	pop	{r4, r5, r6, pc}
 810c658:	0810e0d6 	.word	0x0810e0d6
 810c65c:	0810e238 	.word	0x0810e238

0810c660 <__multadd>:
 810c660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c664:	690d      	ldr	r5, [r1, #16]
 810c666:	4607      	mov	r7, r0
 810c668:	460c      	mov	r4, r1
 810c66a:	461e      	mov	r6, r3
 810c66c:	f101 0c14 	add.w	ip, r1, #20
 810c670:	2000      	movs	r0, #0
 810c672:	f8dc 3000 	ldr.w	r3, [ip]
 810c676:	b299      	uxth	r1, r3
 810c678:	fb02 6101 	mla	r1, r2, r1, r6
 810c67c:	0c1e      	lsrs	r6, r3, #16
 810c67e:	0c0b      	lsrs	r3, r1, #16
 810c680:	fb02 3306 	mla	r3, r2, r6, r3
 810c684:	b289      	uxth	r1, r1
 810c686:	3001      	adds	r0, #1
 810c688:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 810c68c:	4285      	cmp	r5, r0
 810c68e:	f84c 1b04 	str.w	r1, [ip], #4
 810c692:	ea4f 4613 	mov.w	r6, r3, lsr #16
 810c696:	dcec      	bgt.n	810c672 <__multadd+0x12>
 810c698:	b30e      	cbz	r6, 810c6de <__multadd+0x7e>
 810c69a:	68a3      	ldr	r3, [r4, #8]
 810c69c:	42ab      	cmp	r3, r5
 810c69e:	dc19      	bgt.n	810c6d4 <__multadd+0x74>
 810c6a0:	6861      	ldr	r1, [r4, #4]
 810c6a2:	4638      	mov	r0, r7
 810c6a4:	3101      	adds	r1, #1
 810c6a6:	f7ff ff79 	bl	810c59c <_Balloc>
 810c6aa:	4680      	mov	r8, r0
 810c6ac:	b928      	cbnz	r0, 810c6ba <__multadd+0x5a>
 810c6ae:	4602      	mov	r2, r0
 810c6b0:	4b0c      	ldr	r3, [pc, #48]	; (810c6e4 <__multadd+0x84>)
 810c6b2:	480d      	ldr	r0, [pc, #52]	; (810c6e8 <__multadd+0x88>)
 810c6b4:	21b5      	movs	r1, #181	; 0xb5
 810c6b6:	f001 f86d 	bl	810d794 <__assert_func>
 810c6ba:	6922      	ldr	r2, [r4, #16]
 810c6bc:	3202      	adds	r2, #2
 810c6be:	f104 010c 	add.w	r1, r4, #12
 810c6c2:	0092      	lsls	r2, r2, #2
 810c6c4:	300c      	adds	r0, #12
 810c6c6:	f7fc fc91 	bl	8108fec <memcpy>
 810c6ca:	4621      	mov	r1, r4
 810c6cc:	4638      	mov	r0, r7
 810c6ce:	f7ff ffa5 	bl	810c61c <_Bfree>
 810c6d2:	4644      	mov	r4, r8
 810c6d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810c6d8:	3501      	adds	r5, #1
 810c6da:	615e      	str	r6, [r3, #20]
 810c6dc:	6125      	str	r5, [r4, #16]
 810c6de:	4620      	mov	r0, r4
 810c6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810c6e4:	0810e148 	.word	0x0810e148
 810c6e8:	0810e238 	.word	0x0810e238

0810c6ec <__s2b>:
 810c6ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810c6f0:	460c      	mov	r4, r1
 810c6f2:	4615      	mov	r5, r2
 810c6f4:	461f      	mov	r7, r3
 810c6f6:	2209      	movs	r2, #9
 810c6f8:	3308      	adds	r3, #8
 810c6fa:	4606      	mov	r6, r0
 810c6fc:	fb93 f3f2 	sdiv	r3, r3, r2
 810c700:	2100      	movs	r1, #0
 810c702:	2201      	movs	r2, #1
 810c704:	429a      	cmp	r2, r3
 810c706:	db09      	blt.n	810c71c <__s2b+0x30>
 810c708:	4630      	mov	r0, r6
 810c70a:	f7ff ff47 	bl	810c59c <_Balloc>
 810c70e:	b940      	cbnz	r0, 810c722 <__s2b+0x36>
 810c710:	4602      	mov	r2, r0
 810c712:	4b19      	ldr	r3, [pc, #100]	; (810c778 <__s2b+0x8c>)
 810c714:	4819      	ldr	r0, [pc, #100]	; (810c77c <__s2b+0x90>)
 810c716:	21ce      	movs	r1, #206	; 0xce
 810c718:	f001 f83c 	bl	810d794 <__assert_func>
 810c71c:	0052      	lsls	r2, r2, #1
 810c71e:	3101      	adds	r1, #1
 810c720:	e7f0      	b.n	810c704 <__s2b+0x18>
 810c722:	9b08      	ldr	r3, [sp, #32]
 810c724:	6143      	str	r3, [r0, #20]
 810c726:	2d09      	cmp	r5, #9
 810c728:	f04f 0301 	mov.w	r3, #1
 810c72c:	6103      	str	r3, [r0, #16]
 810c72e:	dd16      	ble.n	810c75e <__s2b+0x72>
 810c730:	f104 0909 	add.w	r9, r4, #9
 810c734:	46c8      	mov	r8, r9
 810c736:	442c      	add	r4, r5
 810c738:	f818 3b01 	ldrb.w	r3, [r8], #1
 810c73c:	4601      	mov	r1, r0
 810c73e:	3b30      	subs	r3, #48	; 0x30
 810c740:	220a      	movs	r2, #10
 810c742:	4630      	mov	r0, r6
 810c744:	f7ff ff8c 	bl	810c660 <__multadd>
 810c748:	45a0      	cmp	r8, r4
 810c74a:	d1f5      	bne.n	810c738 <__s2b+0x4c>
 810c74c:	f1a5 0408 	sub.w	r4, r5, #8
 810c750:	444c      	add	r4, r9
 810c752:	1b2d      	subs	r5, r5, r4
 810c754:	1963      	adds	r3, r4, r5
 810c756:	42bb      	cmp	r3, r7
 810c758:	db04      	blt.n	810c764 <__s2b+0x78>
 810c75a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810c75e:	340a      	adds	r4, #10
 810c760:	2509      	movs	r5, #9
 810c762:	e7f6      	b.n	810c752 <__s2b+0x66>
 810c764:	f814 3b01 	ldrb.w	r3, [r4], #1
 810c768:	4601      	mov	r1, r0
 810c76a:	3b30      	subs	r3, #48	; 0x30
 810c76c:	220a      	movs	r2, #10
 810c76e:	4630      	mov	r0, r6
 810c770:	f7ff ff76 	bl	810c660 <__multadd>
 810c774:	e7ee      	b.n	810c754 <__s2b+0x68>
 810c776:	bf00      	nop
 810c778:	0810e148 	.word	0x0810e148
 810c77c:	0810e238 	.word	0x0810e238

0810c780 <__hi0bits>:
 810c780:	0c03      	lsrs	r3, r0, #16
 810c782:	041b      	lsls	r3, r3, #16
 810c784:	b9d3      	cbnz	r3, 810c7bc <__hi0bits+0x3c>
 810c786:	0400      	lsls	r0, r0, #16
 810c788:	2310      	movs	r3, #16
 810c78a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 810c78e:	bf04      	itt	eq
 810c790:	0200      	lsleq	r0, r0, #8
 810c792:	3308      	addeq	r3, #8
 810c794:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 810c798:	bf04      	itt	eq
 810c79a:	0100      	lsleq	r0, r0, #4
 810c79c:	3304      	addeq	r3, #4
 810c79e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 810c7a2:	bf04      	itt	eq
 810c7a4:	0080      	lsleq	r0, r0, #2
 810c7a6:	3302      	addeq	r3, #2
 810c7a8:	2800      	cmp	r0, #0
 810c7aa:	db05      	blt.n	810c7b8 <__hi0bits+0x38>
 810c7ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 810c7b0:	f103 0301 	add.w	r3, r3, #1
 810c7b4:	bf08      	it	eq
 810c7b6:	2320      	moveq	r3, #32
 810c7b8:	4618      	mov	r0, r3
 810c7ba:	4770      	bx	lr
 810c7bc:	2300      	movs	r3, #0
 810c7be:	e7e4      	b.n	810c78a <__hi0bits+0xa>

0810c7c0 <__lo0bits>:
 810c7c0:	6803      	ldr	r3, [r0, #0]
 810c7c2:	f013 0207 	ands.w	r2, r3, #7
 810c7c6:	4601      	mov	r1, r0
 810c7c8:	d00b      	beq.n	810c7e2 <__lo0bits+0x22>
 810c7ca:	07da      	lsls	r2, r3, #31
 810c7cc:	d423      	bmi.n	810c816 <__lo0bits+0x56>
 810c7ce:	0798      	lsls	r0, r3, #30
 810c7d0:	bf49      	itett	mi
 810c7d2:	085b      	lsrmi	r3, r3, #1
 810c7d4:	089b      	lsrpl	r3, r3, #2
 810c7d6:	2001      	movmi	r0, #1
 810c7d8:	600b      	strmi	r3, [r1, #0]
 810c7da:	bf5c      	itt	pl
 810c7dc:	600b      	strpl	r3, [r1, #0]
 810c7de:	2002      	movpl	r0, #2
 810c7e0:	4770      	bx	lr
 810c7e2:	b298      	uxth	r0, r3
 810c7e4:	b9a8      	cbnz	r0, 810c812 <__lo0bits+0x52>
 810c7e6:	0c1b      	lsrs	r3, r3, #16
 810c7e8:	2010      	movs	r0, #16
 810c7ea:	b2da      	uxtb	r2, r3
 810c7ec:	b90a      	cbnz	r2, 810c7f2 <__lo0bits+0x32>
 810c7ee:	3008      	adds	r0, #8
 810c7f0:	0a1b      	lsrs	r3, r3, #8
 810c7f2:	071a      	lsls	r2, r3, #28
 810c7f4:	bf04      	itt	eq
 810c7f6:	091b      	lsreq	r3, r3, #4
 810c7f8:	3004      	addeq	r0, #4
 810c7fa:	079a      	lsls	r2, r3, #30
 810c7fc:	bf04      	itt	eq
 810c7fe:	089b      	lsreq	r3, r3, #2
 810c800:	3002      	addeq	r0, #2
 810c802:	07da      	lsls	r2, r3, #31
 810c804:	d403      	bmi.n	810c80e <__lo0bits+0x4e>
 810c806:	085b      	lsrs	r3, r3, #1
 810c808:	f100 0001 	add.w	r0, r0, #1
 810c80c:	d005      	beq.n	810c81a <__lo0bits+0x5a>
 810c80e:	600b      	str	r3, [r1, #0]
 810c810:	4770      	bx	lr
 810c812:	4610      	mov	r0, r2
 810c814:	e7e9      	b.n	810c7ea <__lo0bits+0x2a>
 810c816:	2000      	movs	r0, #0
 810c818:	4770      	bx	lr
 810c81a:	2020      	movs	r0, #32
 810c81c:	4770      	bx	lr
	...

0810c820 <__i2b>:
 810c820:	b510      	push	{r4, lr}
 810c822:	460c      	mov	r4, r1
 810c824:	2101      	movs	r1, #1
 810c826:	f7ff feb9 	bl	810c59c <_Balloc>
 810c82a:	4602      	mov	r2, r0
 810c82c:	b928      	cbnz	r0, 810c83a <__i2b+0x1a>
 810c82e:	4b05      	ldr	r3, [pc, #20]	; (810c844 <__i2b+0x24>)
 810c830:	4805      	ldr	r0, [pc, #20]	; (810c848 <__i2b+0x28>)
 810c832:	f44f 71a0 	mov.w	r1, #320	; 0x140
 810c836:	f000 ffad 	bl	810d794 <__assert_func>
 810c83a:	2301      	movs	r3, #1
 810c83c:	6144      	str	r4, [r0, #20]
 810c83e:	6103      	str	r3, [r0, #16]
 810c840:	bd10      	pop	{r4, pc}
 810c842:	bf00      	nop
 810c844:	0810e148 	.word	0x0810e148
 810c848:	0810e238 	.word	0x0810e238

0810c84c <__multiply>:
 810c84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c850:	4691      	mov	r9, r2
 810c852:	690a      	ldr	r2, [r1, #16]
 810c854:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810c858:	429a      	cmp	r2, r3
 810c85a:	bfb8      	it	lt
 810c85c:	460b      	movlt	r3, r1
 810c85e:	460c      	mov	r4, r1
 810c860:	bfbc      	itt	lt
 810c862:	464c      	movlt	r4, r9
 810c864:	4699      	movlt	r9, r3
 810c866:	6927      	ldr	r7, [r4, #16]
 810c868:	f8d9 a010 	ldr.w	sl, [r9, #16]
 810c86c:	68a3      	ldr	r3, [r4, #8]
 810c86e:	6861      	ldr	r1, [r4, #4]
 810c870:	eb07 060a 	add.w	r6, r7, sl
 810c874:	42b3      	cmp	r3, r6
 810c876:	b085      	sub	sp, #20
 810c878:	bfb8      	it	lt
 810c87a:	3101      	addlt	r1, #1
 810c87c:	f7ff fe8e 	bl	810c59c <_Balloc>
 810c880:	b930      	cbnz	r0, 810c890 <__multiply+0x44>
 810c882:	4602      	mov	r2, r0
 810c884:	4b44      	ldr	r3, [pc, #272]	; (810c998 <__multiply+0x14c>)
 810c886:	4845      	ldr	r0, [pc, #276]	; (810c99c <__multiply+0x150>)
 810c888:	f240 115d 	movw	r1, #349	; 0x15d
 810c88c:	f000 ff82 	bl	810d794 <__assert_func>
 810c890:	f100 0514 	add.w	r5, r0, #20
 810c894:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 810c898:	462b      	mov	r3, r5
 810c89a:	2200      	movs	r2, #0
 810c89c:	4543      	cmp	r3, r8
 810c89e:	d321      	bcc.n	810c8e4 <__multiply+0x98>
 810c8a0:	f104 0314 	add.w	r3, r4, #20
 810c8a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 810c8a8:	f109 0314 	add.w	r3, r9, #20
 810c8ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 810c8b0:	9202      	str	r2, [sp, #8]
 810c8b2:	1b3a      	subs	r2, r7, r4
 810c8b4:	3a15      	subs	r2, #21
 810c8b6:	f022 0203 	bic.w	r2, r2, #3
 810c8ba:	3204      	adds	r2, #4
 810c8bc:	f104 0115 	add.w	r1, r4, #21
 810c8c0:	428f      	cmp	r7, r1
 810c8c2:	bf38      	it	cc
 810c8c4:	2204      	movcc	r2, #4
 810c8c6:	9201      	str	r2, [sp, #4]
 810c8c8:	9a02      	ldr	r2, [sp, #8]
 810c8ca:	9303      	str	r3, [sp, #12]
 810c8cc:	429a      	cmp	r2, r3
 810c8ce:	d80c      	bhi.n	810c8ea <__multiply+0x9e>
 810c8d0:	2e00      	cmp	r6, #0
 810c8d2:	dd03      	ble.n	810c8dc <__multiply+0x90>
 810c8d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810c8d8:	2b00      	cmp	r3, #0
 810c8da:	d05a      	beq.n	810c992 <__multiply+0x146>
 810c8dc:	6106      	str	r6, [r0, #16]
 810c8de:	b005      	add	sp, #20
 810c8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c8e4:	f843 2b04 	str.w	r2, [r3], #4
 810c8e8:	e7d8      	b.n	810c89c <__multiply+0x50>
 810c8ea:	f8b3 a000 	ldrh.w	sl, [r3]
 810c8ee:	f1ba 0f00 	cmp.w	sl, #0
 810c8f2:	d024      	beq.n	810c93e <__multiply+0xf2>
 810c8f4:	f104 0e14 	add.w	lr, r4, #20
 810c8f8:	46a9      	mov	r9, r5
 810c8fa:	f04f 0c00 	mov.w	ip, #0
 810c8fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 810c902:	f8d9 1000 	ldr.w	r1, [r9]
 810c906:	fa1f fb82 	uxth.w	fp, r2
 810c90a:	b289      	uxth	r1, r1
 810c90c:	fb0a 110b 	mla	r1, sl, fp, r1
 810c910:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 810c914:	f8d9 2000 	ldr.w	r2, [r9]
 810c918:	4461      	add	r1, ip
 810c91a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810c91e:	fb0a c20b 	mla	r2, sl, fp, ip
 810c922:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 810c926:	b289      	uxth	r1, r1
 810c928:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 810c92c:	4577      	cmp	r7, lr
 810c92e:	f849 1b04 	str.w	r1, [r9], #4
 810c932:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810c936:	d8e2      	bhi.n	810c8fe <__multiply+0xb2>
 810c938:	9a01      	ldr	r2, [sp, #4]
 810c93a:	f845 c002 	str.w	ip, [r5, r2]
 810c93e:	9a03      	ldr	r2, [sp, #12]
 810c940:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 810c944:	3304      	adds	r3, #4
 810c946:	f1b9 0f00 	cmp.w	r9, #0
 810c94a:	d020      	beq.n	810c98e <__multiply+0x142>
 810c94c:	6829      	ldr	r1, [r5, #0]
 810c94e:	f104 0c14 	add.w	ip, r4, #20
 810c952:	46ae      	mov	lr, r5
 810c954:	f04f 0a00 	mov.w	sl, #0
 810c958:	f8bc b000 	ldrh.w	fp, [ip]
 810c95c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 810c960:	fb09 220b 	mla	r2, r9, fp, r2
 810c964:	4492      	add	sl, r2
 810c966:	b289      	uxth	r1, r1
 810c968:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 810c96c:	f84e 1b04 	str.w	r1, [lr], #4
 810c970:	f85c 2b04 	ldr.w	r2, [ip], #4
 810c974:	f8be 1000 	ldrh.w	r1, [lr]
 810c978:	0c12      	lsrs	r2, r2, #16
 810c97a:	fb09 1102 	mla	r1, r9, r2, r1
 810c97e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 810c982:	4567      	cmp	r7, ip
 810c984:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 810c988:	d8e6      	bhi.n	810c958 <__multiply+0x10c>
 810c98a:	9a01      	ldr	r2, [sp, #4]
 810c98c:	50a9      	str	r1, [r5, r2]
 810c98e:	3504      	adds	r5, #4
 810c990:	e79a      	b.n	810c8c8 <__multiply+0x7c>
 810c992:	3e01      	subs	r6, #1
 810c994:	e79c      	b.n	810c8d0 <__multiply+0x84>
 810c996:	bf00      	nop
 810c998:	0810e148 	.word	0x0810e148
 810c99c:	0810e238 	.word	0x0810e238

0810c9a0 <__pow5mult>:
 810c9a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810c9a4:	4615      	mov	r5, r2
 810c9a6:	f012 0203 	ands.w	r2, r2, #3
 810c9aa:	4606      	mov	r6, r0
 810c9ac:	460f      	mov	r7, r1
 810c9ae:	d007      	beq.n	810c9c0 <__pow5mult+0x20>
 810c9b0:	4c25      	ldr	r4, [pc, #148]	; (810ca48 <__pow5mult+0xa8>)
 810c9b2:	3a01      	subs	r2, #1
 810c9b4:	2300      	movs	r3, #0
 810c9b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810c9ba:	f7ff fe51 	bl	810c660 <__multadd>
 810c9be:	4607      	mov	r7, r0
 810c9c0:	10ad      	asrs	r5, r5, #2
 810c9c2:	d03d      	beq.n	810ca40 <__pow5mult+0xa0>
 810c9c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 810c9c6:	b97c      	cbnz	r4, 810c9e8 <__pow5mult+0x48>
 810c9c8:	2010      	movs	r0, #16
 810c9ca:	f7ff fdcd 	bl	810c568 <malloc>
 810c9ce:	4602      	mov	r2, r0
 810c9d0:	6270      	str	r0, [r6, #36]	; 0x24
 810c9d2:	b928      	cbnz	r0, 810c9e0 <__pow5mult+0x40>
 810c9d4:	4b1d      	ldr	r3, [pc, #116]	; (810ca4c <__pow5mult+0xac>)
 810c9d6:	481e      	ldr	r0, [pc, #120]	; (810ca50 <__pow5mult+0xb0>)
 810c9d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 810c9dc:	f000 feda 	bl	810d794 <__assert_func>
 810c9e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810c9e4:	6004      	str	r4, [r0, #0]
 810c9e6:	60c4      	str	r4, [r0, #12]
 810c9e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 810c9ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810c9f0:	b94c      	cbnz	r4, 810ca06 <__pow5mult+0x66>
 810c9f2:	f240 2171 	movw	r1, #625	; 0x271
 810c9f6:	4630      	mov	r0, r6
 810c9f8:	f7ff ff12 	bl	810c820 <__i2b>
 810c9fc:	2300      	movs	r3, #0
 810c9fe:	f8c8 0008 	str.w	r0, [r8, #8]
 810ca02:	4604      	mov	r4, r0
 810ca04:	6003      	str	r3, [r0, #0]
 810ca06:	f04f 0900 	mov.w	r9, #0
 810ca0a:	07eb      	lsls	r3, r5, #31
 810ca0c:	d50a      	bpl.n	810ca24 <__pow5mult+0x84>
 810ca0e:	4639      	mov	r1, r7
 810ca10:	4622      	mov	r2, r4
 810ca12:	4630      	mov	r0, r6
 810ca14:	f7ff ff1a 	bl	810c84c <__multiply>
 810ca18:	4639      	mov	r1, r7
 810ca1a:	4680      	mov	r8, r0
 810ca1c:	4630      	mov	r0, r6
 810ca1e:	f7ff fdfd 	bl	810c61c <_Bfree>
 810ca22:	4647      	mov	r7, r8
 810ca24:	106d      	asrs	r5, r5, #1
 810ca26:	d00b      	beq.n	810ca40 <__pow5mult+0xa0>
 810ca28:	6820      	ldr	r0, [r4, #0]
 810ca2a:	b938      	cbnz	r0, 810ca3c <__pow5mult+0x9c>
 810ca2c:	4622      	mov	r2, r4
 810ca2e:	4621      	mov	r1, r4
 810ca30:	4630      	mov	r0, r6
 810ca32:	f7ff ff0b 	bl	810c84c <__multiply>
 810ca36:	6020      	str	r0, [r4, #0]
 810ca38:	f8c0 9000 	str.w	r9, [r0]
 810ca3c:	4604      	mov	r4, r0
 810ca3e:	e7e4      	b.n	810ca0a <__pow5mult+0x6a>
 810ca40:	4638      	mov	r0, r7
 810ca42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810ca46:	bf00      	nop
 810ca48:	0810e388 	.word	0x0810e388
 810ca4c:	0810e0d6 	.word	0x0810e0d6
 810ca50:	0810e238 	.word	0x0810e238

0810ca54 <__lshift>:
 810ca54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810ca58:	460c      	mov	r4, r1
 810ca5a:	6849      	ldr	r1, [r1, #4]
 810ca5c:	6923      	ldr	r3, [r4, #16]
 810ca5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810ca62:	68a3      	ldr	r3, [r4, #8]
 810ca64:	4607      	mov	r7, r0
 810ca66:	4691      	mov	r9, r2
 810ca68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810ca6c:	f108 0601 	add.w	r6, r8, #1
 810ca70:	42b3      	cmp	r3, r6
 810ca72:	db0b      	blt.n	810ca8c <__lshift+0x38>
 810ca74:	4638      	mov	r0, r7
 810ca76:	f7ff fd91 	bl	810c59c <_Balloc>
 810ca7a:	4605      	mov	r5, r0
 810ca7c:	b948      	cbnz	r0, 810ca92 <__lshift+0x3e>
 810ca7e:	4602      	mov	r2, r0
 810ca80:	4b2a      	ldr	r3, [pc, #168]	; (810cb2c <__lshift+0xd8>)
 810ca82:	482b      	ldr	r0, [pc, #172]	; (810cb30 <__lshift+0xdc>)
 810ca84:	f240 11d9 	movw	r1, #473	; 0x1d9
 810ca88:	f000 fe84 	bl	810d794 <__assert_func>
 810ca8c:	3101      	adds	r1, #1
 810ca8e:	005b      	lsls	r3, r3, #1
 810ca90:	e7ee      	b.n	810ca70 <__lshift+0x1c>
 810ca92:	2300      	movs	r3, #0
 810ca94:	f100 0114 	add.w	r1, r0, #20
 810ca98:	f100 0210 	add.w	r2, r0, #16
 810ca9c:	4618      	mov	r0, r3
 810ca9e:	4553      	cmp	r3, sl
 810caa0:	db37      	blt.n	810cb12 <__lshift+0xbe>
 810caa2:	6920      	ldr	r0, [r4, #16]
 810caa4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810caa8:	f104 0314 	add.w	r3, r4, #20
 810caac:	f019 091f 	ands.w	r9, r9, #31
 810cab0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810cab4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 810cab8:	d02f      	beq.n	810cb1a <__lshift+0xc6>
 810caba:	f1c9 0e20 	rsb	lr, r9, #32
 810cabe:	468a      	mov	sl, r1
 810cac0:	f04f 0c00 	mov.w	ip, #0
 810cac4:	681a      	ldr	r2, [r3, #0]
 810cac6:	fa02 f209 	lsl.w	r2, r2, r9
 810caca:	ea42 020c 	orr.w	r2, r2, ip
 810cace:	f84a 2b04 	str.w	r2, [sl], #4
 810cad2:	f853 2b04 	ldr.w	r2, [r3], #4
 810cad6:	4298      	cmp	r0, r3
 810cad8:	fa22 fc0e 	lsr.w	ip, r2, lr
 810cadc:	d8f2      	bhi.n	810cac4 <__lshift+0x70>
 810cade:	1b03      	subs	r3, r0, r4
 810cae0:	3b15      	subs	r3, #21
 810cae2:	f023 0303 	bic.w	r3, r3, #3
 810cae6:	3304      	adds	r3, #4
 810cae8:	f104 0215 	add.w	r2, r4, #21
 810caec:	4290      	cmp	r0, r2
 810caee:	bf38      	it	cc
 810caf0:	2304      	movcc	r3, #4
 810caf2:	f841 c003 	str.w	ip, [r1, r3]
 810caf6:	f1bc 0f00 	cmp.w	ip, #0
 810cafa:	d001      	beq.n	810cb00 <__lshift+0xac>
 810cafc:	f108 0602 	add.w	r6, r8, #2
 810cb00:	3e01      	subs	r6, #1
 810cb02:	4638      	mov	r0, r7
 810cb04:	612e      	str	r6, [r5, #16]
 810cb06:	4621      	mov	r1, r4
 810cb08:	f7ff fd88 	bl	810c61c <_Bfree>
 810cb0c:	4628      	mov	r0, r5
 810cb0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810cb12:	f842 0f04 	str.w	r0, [r2, #4]!
 810cb16:	3301      	adds	r3, #1
 810cb18:	e7c1      	b.n	810ca9e <__lshift+0x4a>
 810cb1a:	3904      	subs	r1, #4
 810cb1c:	f853 2b04 	ldr.w	r2, [r3], #4
 810cb20:	f841 2f04 	str.w	r2, [r1, #4]!
 810cb24:	4298      	cmp	r0, r3
 810cb26:	d8f9      	bhi.n	810cb1c <__lshift+0xc8>
 810cb28:	e7ea      	b.n	810cb00 <__lshift+0xac>
 810cb2a:	bf00      	nop
 810cb2c:	0810e148 	.word	0x0810e148
 810cb30:	0810e238 	.word	0x0810e238

0810cb34 <__mcmp>:
 810cb34:	b530      	push	{r4, r5, lr}
 810cb36:	6902      	ldr	r2, [r0, #16]
 810cb38:	690c      	ldr	r4, [r1, #16]
 810cb3a:	1b12      	subs	r2, r2, r4
 810cb3c:	d10e      	bne.n	810cb5c <__mcmp+0x28>
 810cb3e:	f100 0314 	add.w	r3, r0, #20
 810cb42:	3114      	adds	r1, #20
 810cb44:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 810cb48:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 810cb4c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 810cb50:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 810cb54:	42a5      	cmp	r5, r4
 810cb56:	d003      	beq.n	810cb60 <__mcmp+0x2c>
 810cb58:	d305      	bcc.n	810cb66 <__mcmp+0x32>
 810cb5a:	2201      	movs	r2, #1
 810cb5c:	4610      	mov	r0, r2
 810cb5e:	bd30      	pop	{r4, r5, pc}
 810cb60:	4283      	cmp	r3, r0
 810cb62:	d3f3      	bcc.n	810cb4c <__mcmp+0x18>
 810cb64:	e7fa      	b.n	810cb5c <__mcmp+0x28>
 810cb66:	f04f 32ff 	mov.w	r2, #4294967295
 810cb6a:	e7f7      	b.n	810cb5c <__mcmp+0x28>

0810cb6c <__mdiff>:
 810cb6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810cb70:	460c      	mov	r4, r1
 810cb72:	4606      	mov	r6, r0
 810cb74:	4611      	mov	r1, r2
 810cb76:	4620      	mov	r0, r4
 810cb78:	4690      	mov	r8, r2
 810cb7a:	f7ff ffdb 	bl	810cb34 <__mcmp>
 810cb7e:	1e05      	subs	r5, r0, #0
 810cb80:	d110      	bne.n	810cba4 <__mdiff+0x38>
 810cb82:	4629      	mov	r1, r5
 810cb84:	4630      	mov	r0, r6
 810cb86:	f7ff fd09 	bl	810c59c <_Balloc>
 810cb8a:	b930      	cbnz	r0, 810cb9a <__mdiff+0x2e>
 810cb8c:	4b3a      	ldr	r3, [pc, #232]	; (810cc78 <__mdiff+0x10c>)
 810cb8e:	4602      	mov	r2, r0
 810cb90:	f240 2132 	movw	r1, #562	; 0x232
 810cb94:	4839      	ldr	r0, [pc, #228]	; (810cc7c <__mdiff+0x110>)
 810cb96:	f000 fdfd 	bl	810d794 <__assert_func>
 810cb9a:	2301      	movs	r3, #1
 810cb9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810cba0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810cba4:	bfa4      	itt	ge
 810cba6:	4643      	movge	r3, r8
 810cba8:	46a0      	movge	r8, r4
 810cbaa:	4630      	mov	r0, r6
 810cbac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 810cbb0:	bfa6      	itte	ge
 810cbb2:	461c      	movge	r4, r3
 810cbb4:	2500      	movge	r5, #0
 810cbb6:	2501      	movlt	r5, #1
 810cbb8:	f7ff fcf0 	bl	810c59c <_Balloc>
 810cbbc:	b920      	cbnz	r0, 810cbc8 <__mdiff+0x5c>
 810cbbe:	4b2e      	ldr	r3, [pc, #184]	; (810cc78 <__mdiff+0x10c>)
 810cbc0:	4602      	mov	r2, r0
 810cbc2:	f44f 7110 	mov.w	r1, #576	; 0x240
 810cbc6:	e7e5      	b.n	810cb94 <__mdiff+0x28>
 810cbc8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 810cbcc:	6926      	ldr	r6, [r4, #16]
 810cbce:	60c5      	str	r5, [r0, #12]
 810cbd0:	f104 0914 	add.w	r9, r4, #20
 810cbd4:	f108 0514 	add.w	r5, r8, #20
 810cbd8:	f100 0e14 	add.w	lr, r0, #20
 810cbdc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 810cbe0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 810cbe4:	f108 0210 	add.w	r2, r8, #16
 810cbe8:	46f2      	mov	sl, lr
 810cbea:	2100      	movs	r1, #0
 810cbec:	f859 3b04 	ldr.w	r3, [r9], #4
 810cbf0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 810cbf4:	fa1f f883 	uxth.w	r8, r3
 810cbf8:	fa11 f18b 	uxtah	r1, r1, fp
 810cbfc:	0c1b      	lsrs	r3, r3, #16
 810cbfe:	eba1 0808 	sub.w	r8, r1, r8
 810cc02:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 810cc06:	eb03 4328 	add.w	r3, r3, r8, asr #16
 810cc0a:	fa1f f888 	uxth.w	r8, r8
 810cc0e:	1419      	asrs	r1, r3, #16
 810cc10:	454e      	cmp	r6, r9
 810cc12:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 810cc16:	f84a 3b04 	str.w	r3, [sl], #4
 810cc1a:	d8e7      	bhi.n	810cbec <__mdiff+0x80>
 810cc1c:	1b33      	subs	r3, r6, r4
 810cc1e:	3b15      	subs	r3, #21
 810cc20:	f023 0303 	bic.w	r3, r3, #3
 810cc24:	3304      	adds	r3, #4
 810cc26:	3415      	adds	r4, #21
 810cc28:	42a6      	cmp	r6, r4
 810cc2a:	bf38      	it	cc
 810cc2c:	2304      	movcc	r3, #4
 810cc2e:	441d      	add	r5, r3
 810cc30:	4473      	add	r3, lr
 810cc32:	469e      	mov	lr, r3
 810cc34:	462e      	mov	r6, r5
 810cc36:	4566      	cmp	r6, ip
 810cc38:	d30e      	bcc.n	810cc58 <__mdiff+0xec>
 810cc3a:	f10c 0203 	add.w	r2, ip, #3
 810cc3e:	1b52      	subs	r2, r2, r5
 810cc40:	f022 0203 	bic.w	r2, r2, #3
 810cc44:	3d03      	subs	r5, #3
 810cc46:	45ac      	cmp	ip, r5
 810cc48:	bf38      	it	cc
 810cc4a:	2200      	movcc	r2, #0
 810cc4c:	441a      	add	r2, r3
 810cc4e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 810cc52:	b17b      	cbz	r3, 810cc74 <__mdiff+0x108>
 810cc54:	6107      	str	r7, [r0, #16]
 810cc56:	e7a3      	b.n	810cba0 <__mdiff+0x34>
 810cc58:	f856 8b04 	ldr.w	r8, [r6], #4
 810cc5c:	fa11 f288 	uxtah	r2, r1, r8
 810cc60:	1414      	asrs	r4, r2, #16
 810cc62:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 810cc66:	b292      	uxth	r2, r2
 810cc68:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 810cc6c:	f84e 2b04 	str.w	r2, [lr], #4
 810cc70:	1421      	asrs	r1, r4, #16
 810cc72:	e7e0      	b.n	810cc36 <__mdiff+0xca>
 810cc74:	3f01      	subs	r7, #1
 810cc76:	e7ea      	b.n	810cc4e <__mdiff+0xe2>
 810cc78:	0810e148 	.word	0x0810e148
 810cc7c:	0810e238 	.word	0x0810e238

0810cc80 <__ulp>:
 810cc80:	b082      	sub	sp, #8
 810cc82:	ed8d 0b00 	vstr	d0, [sp]
 810cc86:	9b01      	ldr	r3, [sp, #4]
 810cc88:	4912      	ldr	r1, [pc, #72]	; (810ccd4 <__ulp+0x54>)
 810cc8a:	4019      	ands	r1, r3
 810cc8c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 810cc90:	2900      	cmp	r1, #0
 810cc92:	dd05      	ble.n	810cca0 <__ulp+0x20>
 810cc94:	2200      	movs	r2, #0
 810cc96:	460b      	mov	r3, r1
 810cc98:	ec43 2b10 	vmov	d0, r2, r3
 810cc9c:	b002      	add	sp, #8
 810cc9e:	4770      	bx	lr
 810cca0:	4249      	negs	r1, r1
 810cca2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 810cca6:	ea4f 5021 	mov.w	r0, r1, asr #20
 810ccaa:	f04f 0200 	mov.w	r2, #0
 810ccae:	f04f 0300 	mov.w	r3, #0
 810ccb2:	da04      	bge.n	810ccbe <__ulp+0x3e>
 810ccb4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 810ccb8:	fa41 f300 	asr.w	r3, r1, r0
 810ccbc:	e7ec      	b.n	810cc98 <__ulp+0x18>
 810ccbe:	f1a0 0114 	sub.w	r1, r0, #20
 810ccc2:	291e      	cmp	r1, #30
 810ccc4:	bfda      	itte	le
 810ccc6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 810ccca:	fa20 f101 	lsrle.w	r1, r0, r1
 810ccce:	2101      	movgt	r1, #1
 810ccd0:	460a      	mov	r2, r1
 810ccd2:	e7e1      	b.n	810cc98 <__ulp+0x18>
 810ccd4:	7ff00000 	.word	0x7ff00000

0810ccd8 <__b2d>:
 810ccd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810ccda:	6905      	ldr	r5, [r0, #16]
 810ccdc:	f100 0714 	add.w	r7, r0, #20
 810cce0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 810cce4:	1f2e      	subs	r6, r5, #4
 810cce6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 810ccea:	4620      	mov	r0, r4
 810ccec:	f7ff fd48 	bl	810c780 <__hi0bits>
 810ccf0:	f1c0 0320 	rsb	r3, r0, #32
 810ccf4:	280a      	cmp	r0, #10
 810ccf6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 810cd74 <__b2d+0x9c>
 810ccfa:	600b      	str	r3, [r1, #0]
 810ccfc:	dc14      	bgt.n	810cd28 <__b2d+0x50>
 810ccfe:	f1c0 0e0b 	rsb	lr, r0, #11
 810cd02:	fa24 f10e 	lsr.w	r1, r4, lr
 810cd06:	42b7      	cmp	r7, r6
 810cd08:	ea41 030c 	orr.w	r3, r1, ip
 810cd0c:	bf34      	ite	cc
 810cd0e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810cd12:	2100      	movcs	r1, #0
 810cd14:	3015      	adds	r0, #21
 810cd16:	fa04 f000 	lsl.w	r0, r4, r0
 810cd1a:	fa21 f10e 	lsr.w	r1, r1, lr
 810cd1e:	ea40 0201 	orr.w	r2, r0, r1
 810cd22:	ec43 2b10 	vmov	d0, r2, r3
 810cd26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810cd28:	42b7      	cmp	r7, r6
 810cd2a:	bf3a      	itte	cc
 810cd2c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810cd30:	f1a5 0608 	subcc.w	r6, r5, #8
 810cd34:	2100      	movcs	r1, #0
 810cd36:	380b      	subs	r0, #11
 810cd38:	d017      	beq.n	810cd6a <__b2d+0x92>
 810cd3a:	f1c0 0c20 	rsb	ip, r0, #32
 810cd3e:	fa04 f500 	lsl.w	r5, r4, r0
 810cd42:	42be      	cmp	r6, r7
 810cd44:	fa21 f40c 	lsr.w	r4, r1, ip
 810cd48:	ea45 0504 	orr.w	r5, r5, r4
 810cd4c:	bf8c      	ite	hi
 810cd4e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 810cd52:	2400      	movls	r4, #0
 810cd54:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 810cd58:	fa01 f000 	lsl.w	r0, r1, r0
 810cd5c:	fa24 f40c 	lsr.w	r4, r4, ip
 810cd60:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 810cd64:	ea40 0204 	orr.w	r2, r0, r4
 810cd68:	e7db      	b.n	810cd22 <__b2d+0x4a>
 810cd6a:	ea44 030c 	orr.w	r3, r4, ip
 810cd6e:	460a      	mov	r2, r1
 810cd70:	e7d7      	b.n	810cd22 <__b2d+0x4a>
 810cd72:	bf00      	nop
 810cd74:	3ff00000 	.word	0x3ff00000

0810cd78 <__d2b>:
 810cd78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810cd7c:	4689      	mov	r9, r1
 810cd7e:	2101      	movs	r1, #1
 810cd80:	ec57 6b10 	vmov	r6, r7, d0
 810cd84:	4690      	mov	r8, r2
 810cd86:	f7ff fc09 	bl	810c59c <_Balloc>
 810cd8a:	4604      	mov	r4, r0
 810cd8c:	b930      	cbnz	r0, 810cd9c <__d2b+0x24>
 810cd8e:	4602      	mov	r2, r0
 810cd90:	4b25      	ldr	r3, [pc, #148]	; (810ce28 <__d2b+0xb0>)
 810cd92:	4826      	ldr	r0, [pc, #152]	; (810ce2c <__d2b+0xb4>)
 810cd94:	f240 310a 	movw	r1, #778	; 0x30a
 810cd98:	f000 fcfc 	bl	810d794 <__assert_func>
 810cd9c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 810cda0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810cda4:	bb35      	cbnz	r5, 810cdf4 <__d2b+0x7c>
 810cda6:	2e00      	cmp	r6, #0
 810cda8:	9301      	str	r3, [sp, #4]
 810cdaa:	d028      	beq.n	810cdfe <__d2b+0x86>
 810cdac:	4668      	mov	r0, sp
 810cdae:	9600      	str	r6, [sp, #0]
 810cdb0:	f7ff fd06 	bl	810c7c0 <__lo0bits>
 810cdb4:	9900      	ldr	r1, [sp, #0]
 810cdb6:	b300      	cbz	r0, 810cdfa <__d2b+0x82>
 810cdb8:	9a01      	ldr	r2, [sp, #4]
 810cdba:	f1c0 0320 	rsb	r3, r0, #32
 810cdbe:	fa02 f303 	lsl.w	r3, r2, r3
 810cdc2:	430b      	orrs	r3, r1
 810cdc4:	40c2      	lsrs	r2, r0
 810cdc6:	6163      	str	r3, [r4, #20]
 810cdc8:	9201      	str	r2, [sp, #4]
 810cdca:	9b01      	ldr	r3, [sp, #4]
 810cdcc:	61a3      	str	r3, [r4, #24]
 810cdce:	2b00      	cmp	r3, #0
 810cdd0:	bf14      	ite	ne
 810cdd2:	2202      	movne	r2, #2
 810cdd4:	2201      	moveq	r2, #1
 810cdd6:	6122      	str	r2, [r4, #16]
 810cdd8:	b1d5      	cbz	r5, 810ce10 <__d2b+0x98>
 810cdda:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 810cdde:	4405      	add	r5, r0
 810cde0:	f8c9 5000 	str.w	r5, [r9]
 810cde4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810cde8:	f8c8 0000 	str.w	r0, [r8]
 810cdec:	4620      	mov	r0, r4
 810cdee:	b003      	add	sp, #12
 810cdf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810cdf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810cdf8:	e7d5      	b.n	810cda6 <__d2b+0x2e>
 810cdfa:	6161      	str	r1, [r4, #20]
 810cdfc:	e7e5      	b.n	810cdca <__d2b+0x52>
 810cdfe:	a801      	add	r0, sp, #4
 810ce00:	f7ff fcde 	bl	810c7c0 <__lo0bits>
 810ce04:	9b01      	ldr	r3, [sp, #4]
 810ce06:	6163      	str	r3, [r4, #20]
 810ce08:	2201      	movs	r2, #1
 810ce0a:	6122      	str	r2, [r4, #16]
 810ce0c:	3020      	adds	r0, #32
 810ce0e:	e7e3      	b.n	810cdd8 <__d2b+0x60>
 810ce10:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810ce14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810ce18:	f8c9 0000 	str.w	r0, [r9]
 810ce1c:	6918      	ldr	r0, [r3, #16]
 810ce1e:	f7ff fcaf 	bl	810c780 <__hi0bits>
 810ce22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810ce26:	e7df      	b.n	810cde8 <__d2b+0x70>
 810ce28:	0810e148 	.word	0x0810e148
 810ce2c:	0810e238 	.word	0x0810e238

0810ce30 <__ratio>:
 810ce30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ce34:	4688      	mov	r8, r1
 810ce36:	4669      	mov	r1, sp
 810ce38:	4681      	mov	r9, r0
 810ce3a:	f7ff ff4d 	bl	810ccd8 <__b2d>
 810ce3e:	a901      	add	r1, sp, #4
 810ce40:	4640      	mov	r0, r8
 810ce42:	ec55 4b10 	vmov	r4, r5, d0
 810ce46:	f7ff ff47 	bl	810ccd8 <__b2d>
 810ce4a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810ce4e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 810ce52:	eba3 0c02 	sub.w	ip, r3, r2
 810ce56:	e9dd 3200 	ldrd	r3, r2, [sp]
 810ce5a:	1a9b      	subs	r3, r3, r2
 810ce5c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 810ce60:	ec51 0b10 	vmov	r0, r1, d0
 810ce64:	2b00      	cmp	r3, #0
 810ce66:	bfd6      	itet	le
 810ce68:	460a      	movle	r2, r1
 810ce6a:	462a      	movgt	r2, r5
 810ce6c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810ce70:	468b      	mov	fp, r1
 810ce72:	462f      	mov	r7, r5
 810ce74:	bfd4      	ite	le
 810ce76:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 810ce7a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810ce7e:	4620      	mov	r0, r4
 810ce80:	ee10 2a10 	vmov	r2, s0
 810ce84:	465b      	mov	r3, fp
 810ce86:	4639      	mov	r1, r7
 810ce88:	f7f3 fd68 	bl	810095c <__aeabi_ddiv>
 810ce8c:	ec41 0b10 	vmov	d0, r0, r1
 810ce90:	b003      	add	sp, #12
 810ce92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810ce96 <__copybits>:
 810ce96:	3901      	subs	r1, #1
 810ce98:	b570      	push	{r4, r5, r6, lr}
 810ce9a:	1149      	asrs	r1, r1, #5
 810ce9c:	6914      	ldr	r4, [r2, #16]
 810ce9e:	3101      	adds	r1, #1
 810cea0:	f102 0314 	add.w	r3, r2, #20
 810cea4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810cea8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810ceac:	1f05      	subs	r5, r0, #4
 810ceae:	42a3      	cmp	r3, r4
 810ceb0:	d30c      	bcc.n	810cecc <__copybits+0x36>
 810ceb2:	1aa3      	subs	r3, r4, r2
 810ceb4:	3b11      	subs	r3, #17
 810ceb6:	f023 0303 	bic.w	r3, r3, #3
 810ceba:	3211      	adds	r2, #17
 810cebc:	42a2      	cmp	r2, r4
 810cebe:	bf88      	it	hi
 810cec0:	2300      	movhi	r3, #0
 810cec2:	4418      	add	r0, r3
 810cec4:	2300      	movs	r3, #0
 810cec6:	4288      	cmp	r0, r1
 810cec8:	d305      	bcc.n	810ced6 <__copybits+0x40>
 810ceca:	bd70      	pop	{r4, r5, r6, pc}
 810cecc:	f853 6b04 	ldr.w	r6, [r3], #4
 810ced0:	f845 6f04 	str.w	r6, [r5, #4]!
 810ced4:	e7eb      	b.n	810ceae <__copybits+0x18>
 810ced6:	f840 3b04 	str.w	r3, [r0], #4
 810ceda:	e7f4      	b.n	810cec6 <__copybits+0x30>

0810cedc <__any_on>:
 810cedc:	f100 0214 	add.w	r2, r0, #20
 810cee0:	6900      	ldr	r0, [r0, #16]
 810cee2:	114b      	asrs	r3, r1, #5
 810cee4:	4298      	cmp	r0, r3
 810cee6:	b510      	push	{r4, lr}
 810cee8:	db11      	blt.n	810cf0e <__any_on+0x32>
 810ceea:	dd0a      	ble.n	810cf02 <__any_on+0x26>
 810ceec:	f011 011f 	ands.w	r1, r1, #31
 810cef0:	d007      	beq.n	810cf02 <__any_on+0x26>
 810cef2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810cef6:	fa24 f001 	lsr.w	r0, r4, r1
 810cefa:	fa00 f101 	lsl.w	r1, r0, r1
 810cefe:	428c      	cmp	r4, r1
 810cf00:	d10b      	bne.n	810cf1a <__any_on+0x3e>
 810cf02:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810cf06:	4293      	cmp	r3, r2
 810cf08:	d803      	bhi.n	810cf12 <__any_on+0x36>
 810cf0a:	2000      	movs	r0, #0
 810cf0c:	bd10      	pop	{r4, pc}
 810cf0e:	4603      	mov	r3, r0
 810cf10:	e7f7      	b.n	810cf02 <__any_on+0x26>
 810cf12:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810cf16:	2900      	cmp	r1, #0
 810cf18:	d0f5      	beq.n	810cf06 <__any_on+0x2a>
 810cf1a:	2001      	movs	r0, #1
 810cf1c:	e7f6      	b.n	810cf0c <__any_on+0x30>

0810cf1e <_calloc_r>:
 810cf1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810cf20:	fba1 2402 	umull	r2, r4, r1, r2
 810cf24:	b94c      	cbnz	r4, 810cf3a <_calloc_r+0x1c>
 810cf26:	4611      	mov	r1, r2
 810cf28:	9201      	str	r2, [sp, #4]
 810cf2a:	f000 f87b 	bl	810d024 <_malloc_r>
 810cf2e:	9a01      	ldr	r2, [sp, #4]
 810cf30:	4605      	mov	r5, r0
 810cf32:	b930      	cbnz	r0, 810cf42 <_calloc_r+0x24>
 810cf34:	4628      	mov	r0, r5
 810cf36:	b003      	add	sp, #12
 810cf38:	bd30      	pop	{r4, r5, pc}
 810cf3a:	220c      	movs	r2, #12
 810cf3c:	6002      	str	r2, [r0, #0]
 810cf3e:	2500      	movs	r5, #0
 810cf40:	e7f8      	b.n	810cf34 <_calloc_r+0x16>
 810cf42:	4621      	mov	r1, r4
 810cf44:	f7fc f860 	bl	8109008 <memset>
 810cf48:	e7f4      	b.n	810cf34 <_calloc_r+0x16>
	...

0810cf4c <_free_r>:
 810cf4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810cf4e:	2900      	cmp	r1, #0
 810cf50:	d044      	beq.n	810cfdc <_free_r+0x90>
 810cf52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810cf56:	9001      	str	r0, [sp, #4]
 810cf58:	2b00      	cmp	r3, #0
 810cf5a:	f1a1 0404 	sub.w	r4, r1, #4
 810cf5e:	bfb8      	it	lt
 810cf60:	18e4      	addlt	r4, r4, r3
 810cf62:	f000 fca5 	bl	810d8b0 <__malloc_lock>
 810cf66:	4a1e      	ldr	r2, [pc, #120]	; (810cfe0 <_free_r+0x94>)
 810cf68:	9801      	ldr	r0, [sp, #4]
 810cf6a:	6813      	ldr	r3, [r2, #0]
 810cf6c:	b933      	cbnz	r3, 810cf7c <_free_r+0x30>
 810cf6e:	6063      	str	r3, [r4, #4]
 810cf70:	6014      	str	r4, [r2, #0]
 810cf72:	b003      	add	sp, #12
 810cf74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810cf78:	f000 bca0 	b.w	810d8bc <__malloc_unlock>
 810cf7c:	42a3      	cmp	r3, r4
 810cf7e:	d908      	bls.n	810cf92 <_free_r+0x46>
 810cf80:	6825      	ldr	r5, [r4, #0]
 810cf82:	1961      	adds	r1, r4, r5
 810cf84:	428b      	cmp	r3, r1
 810cf86:	bf01      	itttt	eq
 810cf88:	6819      	ldreq	r1, [r3, #0]
 810cf8a:	685b      	ldreq	r3, [r3, #4]
 810cf8c:	1949      	addeq	r1, r1, r5
 810cf8e:	6021      	streq	r1, [r4, #0]
 810cf90:	e7ed      	b.n	810cf6e <_free_r+0x22>
 810cf92:	461a      	mov	r2, r3
 810cf94:	685b      	ldr	r3, [r3, #4]
 810cf96:	b10b      	cbz	r3, 810cf9c <_free_r+0x50>
 810cf98:	42a3      	cmp	r3, r4
 810cf9a:	d9fa      	bls.n	810cf92 <_free_r+0x46>
 810cf9c:	6811      	ldr	r1, [r2, #0]
 810cf9e:	1855      	adds	r5, r2, r1
 810cfa0:	42a5      	cmp	r5, r4
 810cfa2:	d10b      	bne.n	810cfbc <_free_r+0x70>
 810cfa4:	6824      	ldr	r4, [r4, #0]
 810cfa6:	4421      	add	r1, r4
 810cfa8:	1854      	adds	r4, r2, r1
 810cfaa:	42a3      	cmp	r3, r4
 810cfac:	6011      	str	r1, [r2, #0]
 810cfae:	d1e0      	bne.n	810cf72 <_free_r+0x26>
 810cfb0:	681c      	ldr	r4, [r3, #0]
 810cfb2:	685b      	ldr	r3, [r3, #4]
 810cfb4:	6053      	str	r3, [r2, #4]
 810cfb6:	4421      	add	r1, r4
 810cfb8:	6011      	str	r1, [r2, #0]
 810cfba:	e7da      	b.n	810cf72 <_free_r+0x26>
 810cfbc:	d902      	bls.n	810cfc4 <_free_r+0x78>
 810cfbe:	230c      	movs	r3, #12
 810cfc0:	6003      	str	r3, [r0, #0]
 810cfc2:	e7d6      	b.n	810cf72 <_free_r+0x26>
 810cfc4:	6825      	ldr	r5, [r4, #0]
 810cfc6:	1961      	adds	r1, r4, r5
 810cfc8:	428b      	cmp	r3, r1
 810cfca:	bf04      	itt	eq
 810cfcc:	6819      	ldreq	r1, [r3, #0]
 810cfce:	685b      	ldreq	r3, [r3, #4]
 810cfd0:	6063      	str	r3, [r4, #4]
 810cfd2:	bf04      	itt	eq
 810cfd4:	1949      	addeq	r1, r1, r5
 810cfd6:	6021      	streq	r1, [r4, #0]
 810cfd8:	6054      	str	r4, [r2, #4]
 810cfda:	e7ca      	b.n	810cf72 <_free_r+0x26>
 810cfdc:	b003      	add	sp, #12
 810cfde:	bd30      	pop	{r4, r5, pc}
 810cfe0:	100004b8 	.word	0x100004b8

0810cfe4 <sbrk_aligned>:
 810cfe4:	b570      	push	{r4, r5, r6, lr}
 810cfe6:	4e0e      	ldr	r6, [pc, #56]	; (810d020 <sbrk_aligned+0x3c>)
 810cfe8:	460c      	mov	r4, r1
 810cfea:	6831      	ldr	r1, [r6, #0]
 810cfec:	4605      	mov	r5, r0
 810cfee:	b911      	cbnz	r1, 810cff6 <sbrk_aligned+0x12>
 810cff0:	f000 fb4a 	bl	810d688 <_sbrk_r>
 810cff4:	6030      	str	r0, [r6, #0]
 810cff6:	4621      	mov	r1, r4
 810cff8:	4628      	mov	r0, r5
 810cffa:	f000 fb45 	bl	810d688 <_sbrk_r>
 810cffe:	1c43      	adds	r3, r0, #1
 810d000:	d00a      	beq.n	810d018 <sbrk_aligned+0x34>
 810d002:	1cc4      	adds	r4, r0, #3
 810d004:	f024 0403 	bic.w	r4, r4, #3
 810d008:	42a0      	cmp	r0, r4
 810d00a:	d007      	beq.n	810d01c <sbrk_aligned+0x38>
 810d00c:	1a21      	subs	r1, r4, r0
 810d00e:	4628      	mov	r0, r5
 810d010:	f000 fb3a 	bl	810d688 <_sbrk_r>
 810d014:	3001      	adds	r0, #1
 810d016:	d101      	bne.n	810d01c <sbrk_aligned+0x38>
 810d018:	f04f 34ff 	mov.w	r4, #4294967295
 810d01c:	4620      	mov	r0, r4
 810d01e:	bd70      	pop	{r4, r5, r6, pc}
 810d020:	100004bc 	.word	0x100004bc

0810d024 <_malloc_r>:
 810d024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810d028:	1ccd      	adds	r5, r1, #3
 810d02a:	f025 0503 	bic.w	r5, r5, #3
 810d02e:	3508      	adds	r5, #8
 810d030:	2d0c      	cmp	r5, #12
 810d032:	bf38      	it	cc
 810d034:	250c      	movcc	r5, #12
 810d036:	2d00      	cmp	r5, #0
 810d038:	4607      	mov	r7, r0
 810d03a:	db01      	blt.n	810d040 <_malloc_r+0x1c>
 810d03c:	42a9      	cmp	r1, r5
 810d03e:	d905      	bls.n	810d04c <_malloc_r+0x28>
 810d040:	230c      	movs	r3, #12
 810d042:	603b      	str	r3, [r7, #0]
 810d044:	2600      	movs	r6, #0
 810d046:	4630      	mov	r0, r6
 810d048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810d04c:	4e2e      	ldr	r6, [pc, #184]	; (810d108 <_malloc_r+0xe4>)
 810d04e:	f000 fc2f 	bl	810d8b0 <__malloc_lock>
 810d052:	6833      	ldr	r3, [r6, #0]
 810d054:	461c      	mov	r4, r3
 810d056:	bb34      	cbnz	r4, 810d0a6 <_malloc_r+0x82>
 810d058:	4629      	mov	r1, r5
 810d05a:	4638      	mov	r0, r7
 810d05c:	f7ff ffc2 	bl	810cfe4 <sbrk_aligned>
 810d060:	1c43      	adds	r3, r0, #1
 810d062:	4604      	mov	r4, r0
 810d064:	d14d      	bne.n	810d102 <_malloc_r+0xde>
 810d066:	6834      	ldr	r4, [r6, #0]
 810d068:	4626      	mov	r6, r4
 810d06a:	2e00      	cmp	r6, #0
 810d06c:	d140      	bne.n	810d0f0 <_malloc_r+0xcc>
 810d06e:	6823      	ldr	r3, [r4, #0]
 810d070:	4631      	mov	r1, r6
 810d072:	4638      	mov	r0, r7
 810d074:	eb04 0803 	add.w	r8, r4, r3
 810d078:	f000 fb06 	bl	810d688 <_sbrk_r>
 810d07c:	4580      	cmp	r8, r0
 810d07e:	d13a      	bne.n	810d0f6 <_malloc_r+0xd2>
 810d080:	6821      	ldr	r1, [r4, #0]
 810d082:	3503      	adds	r5, #3
 810d084:	1a6d      	subs	r5, r5, r1
 810d086:	f025 0503 	bic.w	r5, r5, #3
 810d08a:	3508      	adds	r5, #8
 810d08c:	2d0c      	cmp	r5, #12
 810d08e:	bf38      	it	cc
 810d090:	250c      	movcc	r5, #12
 810d092:	4629      	mov	r1, r5
 810d094:	4638      	mov	r0, r7
 810d096:	f7ff ffa5 	bl	810cfe4 <sbrk_aligned>
 810d09a:	3001      	adds	r0, #1
 810d09c:	d02b      	beq.n	810d0f6 <_malloc_r+0xd2>
 810d09e:	6823      	ldr	r3, [r4, #0]
 810d0a0:	442b      	add	r3, r5
 810d0a2:	6023      	str	r3, [r4, #0]
 810d0a4:	e00e      	b.n	810d0c4 <_malloc_r+0xa0>
 810d0a6:	6822      	ldr	r2, [r4, #0]
 810d0a8:	1b52      	subs	r2, r2, r5
 810d0aa:	d41e      	bmi.n	810d0ea <_malloc_r+0xc6>
 810d0ac:	2a0b      	cmp	r2, #11
 810d0ae:	d916      	bls.n	810d0de <_malloc_r+0xba>
 810d0b0:	1961      	adds	r1, r4, r5
 810d0b2:	42a3      	cmp	r3, r4
 810d0b4:	6025      	str	r5, [r4, #0]
 810d0b6:	bf18      	it	ne
 810d0b8:	6059      	strne	r1, [r3, #4]
 810d0ba:	6863      	ldr	r3, [r4, #4]
 810d0bc:	bf08      	it	eq
 810d0be:	6031      	streq	r1, [r6, #0]
 810d0c0:	5162      	str	r2, [r4, r5]
 810d0c2:	604b      	str	r3, [r1, #4]
 810d0c4:	4638      	mov	r0, r7
 810d0c6:	f104 060b 	add.w	r6, r4, #11
 810d0ca:	f000 fbf7 	bl	810d8bc <__malloc_unlock>
 810d0ce:	f026 0607 	bic.w	r6, r6, #7
 810d0d2:	1d23      	adds	r3, r4, #4
 810d0d4:	1af2      	subs	r2, r6, r3
 810d0d6:	d0b6      	beq.n	810d046 <_malloc_r+0x22>
 810d0d8:	1b9b      	subs	r3, r3, r6
 810d0da:	50a3      	str	r3, [r4, r2]
 810d0dc:	e7b3      	b.n	810d046 <_malloc_r+0x22>
 810d0de:	6862      	ldr	r2, [r4, #4]
 810d0e0:	42a3      	cmp	r3, r4
 810d0e2:	bf0c      	ite	eq
 810d0e4:	6032      	streq	r2, [r6, #0]
 810d0e6:	605a      	strne	r2, [r3, #4]
 810d0e8:	e7ec      	b.n	810d0c4 <_malloc_r+0xa0>
 810d0ea:	4623      	mov	r3, r4
 810d0ec:	6864      	ldr	r4, [r4, #4]
 810d0ee:	e7b2      	b.n	810d056 <_malloc_r+0x32>
 810d0f0:	4634      	mov	r4, r6
 810d0f2:	6876      	ldr	r6, [r6, #4]
 810d0f4:	e7b9      	b.n	810d06a <_malloc_r+0x46>
 810d0f6:	230c      	movs	r3, #12
 810d0f8:	603b      	str	r3, [r7, #0]
 810d0fa:	4638      	mov	r0, r7
 810d0fc:	f000 fbde 	bl	810d8bc <__malloc_unlock>
 810d100:	e7a1      	b.n	810d046 <_malloc_r+0x22>
 810d102:	6025      	str	r5, [r4, #0]
 810d104:	e7de      	b.n	810d0c4 <_malloc_r+0xa0>
 810d106:	bf00      	nop
 810d108:	100004b8 	.word	0x100004b8

0810d10c <__ssputs_r>:
 810d10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810d110:	688e      	ldr	r6, [r1, #8]
 810d112:	429e      	cmp	r6, r3
 810d114:	4682      	mov	sl, r0
 810d116:	460c      	mov	r4, r1
 810d118:	4690      	mov	r8, r2
 810d11a:	461f      	mov	r7, r3
 810d11c:	d838      	bhi.n	810d190 <__ssputs_r+0x84>
 810d11e:	898a      	ldrh	r2, [r1, #12]
 810d120:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810d124:	d032      	beq.n	810d18c <__ssputs_r+0x80>
 810d126:	6825      	ldr	r5, [r4, #0]
 810d128:	6909      	ldr	r1, [r1, #16]
 810d12a:	eba5 0901 	sub.w	r9, r5, r1
 810d12e:	6965      	ldr	r5, [r4, #20]
 810d130:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810d134:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810d138:	3301      	adds	r3, #1
 810d13a:	444b      	add	r3, r9
 810d13c:	106d      	asrs	r5, r5, #1
 810d13e:	429d      	cmp	r5, r3
 810d140:	bf38      	it	cc
 810d142:	461d      	movcc	r5, r3
 810d144:	0553      	lsls	r3, r2, #21
 810d146:	d531      	bpl.n	810d1ac <__ssputs_r+0xa0>
 810d148:	4629      	mov	r1, r5
 810d14a:	f7ff ff6b 	bl	810d024 <_malloc_r>
 810d14e:	4606      	mov	r6, r0
 810d150:	b950      	cbnz	r0, 810d168 <__ssputs_r+0x5c>
 810d152:	230c      	movs	r3, #12
 810d154:	f8ca 3000 	str.w	r3, [sl]
 810d158:	89a3      	ldrh	r3, [r4, #12]
 810d15a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810d15e:	81a3      	strh	r3, [r4, #12]
 810d160:	f04f 30ff 	mov.w	r0, #4294967295
 810d164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810d168:	6921      	ldr	r1, [r4, #16]
 810d16a:	464a      	mov	r2, r9
 810d16c:	f7fb ff3e 	bl	8108fec <memcpy>
 810d170:	89a3      	ldrh	r3, [r4, #12]
 810d172:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810d176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810d17a:	81a3      	strh	r3, [r4, #12]
 810d17c:	6126      	str	r6, [r4, #16]
 810d17e:	6165      	str	r5, [r4, #20]
 810d180:	444e      	add	r6, r9
 810d182:	eba5 0509 	sub.w	r5, r5, r9
 810d186:	6026      	str	r6, [r4, #0]
 810d188:	60a5      	str	r5, [r4, #8]
 810d18a:	463e      	mov	r6, r7
 810d18c:	42be      	cmp	r6, r7
 810d18e:	d900      	bls.n	810d192 <__ssputs_r+0x86>
 810d190:	463e      	mov	r6, r7
 810d192:	6820      	ldr	r0, [r4, #0]
 810d194:	4632      	mov	r2, r6
 810d196:	4641      	mov	r1, r8
 810d198:	f000 fb70 	bl	810d87c <memmove>
 810d19c:	68a3      	ldr	r3, [r4, #8]
 810d19e:	1b9b      	subs	r3, r3, r6
 810d1a0:	60a3      	str	r3, [r4, #8]
 810d1a2:	6823      	ldr	r3, [r4, #0]
 810d1a4:	4433      	add	r3, r6
 810d1a6:	6023      	str	r3, [r4, #0]
 810d1a8:	2000      	movs	r0, #0
 810d1aa:	e7db      	b.n	810d164 <__ssputs_r+0x58>
 810d1ac:	462a      	mov	r2, r5
 810d1ae:	f000 fb8b 	bl	810d8c8 <_realloc_r>
 810d1b2:	4606      	mov	r6, r0
 810d1b4:	2800      	cmp	r0, #0
 810d1b6:	d1e1      	bne.n	810d17c <__ssputs_r+0x70>
 810d1b8:	6921      	ldr	r1, [r4, #16]
 810d1ba:	4650      	mov	r0, sl
 810d1bc:	f7ff fec6 	bl	810cf4c <_free_r>
 810d1c0:	e7c7      	b.n	810d152 <__ssputs_r+0x46>
	...

0810d1c4 <_svfiprintf_r>:
 810d1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d1c8:	4698      	mov	r8, r3
 810d1ca:	898b      	ldrh	r3, [r1, #12]
 810d1cc:	061b      	lsls	r3, r3, #24
 810d1ce:	b09d      	sub	sp, #116	; 0x74
 810d1d0:	4607      	mov	r7, r0
 810d1d2:	460d      	mov	r5, r1
 810d1d4:	4614      	mov	r4, r2
 810d1d6:	d50e      	bpl.n	810d1f6 <_svfiprintf_r+0x32>
 810d1d8:	690b      	ldr	r3, [r1, #16]
 810d1da:	b963      	cbnz	r3, 810d1f6 <_svfiprintf_r+0x32>
 810d1dc:	2140      	movs	r1, #64	; 0x40
 810d1de:	f7ff ff21 	bl	810d024 <_malloc_r>
 810d1e2:	6028      	str	r0, [r5, #0]
 810d1e4:	6128      	str	r0, [r5, #16]
 810d1e6:	b920      	cbnz	r0, 810d1f2 <_svfiprintf_r+0x2e>
 810d1e8:	230c      	movs	r3, #12
 810d1ea:	603b      	str	r3, [r7, #0]
 810d1ec:	f04f 30ff 	mov.w	r0, #4294967295
 810d1f0:	e0d1      	b.n	810d396 <_svfiprintf_r+0x1d2>
 810d1f2:	2340      	movs	r3, #64	; 0x40
 810d1f4:	616b      	str	r3, [r5, #20]
 810d1f6:	2300      	movs	r3, #0
 810d1f8:	9309      	str	r3, [sp, #36]	; 0x24
 810d1fa:	2320      	movs	r3, #32
 810d1fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810d200:	f8cd 800c 	str.w	r8, [sp, #12]
 810d204:	2330      	movs	r3, #48	; 0x30
 810d206:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 810d3b0 <_svfiprintf_r+0x1ec>
 810d20a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810d20e:	f04f 0901 	mov.w	r9, #1
 810d212:	4623      	mov	r3, r4
 810d214:	469a      	mov	sl, r3
 810d216:	f813 2b01 	ldrb.w	r2, [r3], #1
 810d21a:	b10a      	cbz	r2, 810d220 <_svfiprintf_r+0x5c>
 810d21c:	2a25      	cmp	r2, #37	; 0x25
 810d21e:	d1f9      	bne.n	810d214 <_svfiprintf_r+0x50>
 810d220:	ebba 0b04 	subs.w	fp, sl, r4
 810d224:	d00b      	beq.n	810d23e <_svfiprintf_r+0x7a>
 810d226:	465b      	mov	r3, fp
 810d228:	4622      	mov	r2, r4
 810d22a:	4629      	mov	r1, r5
 810d22c:	4638      	mov	r0, r7
 810d22e:	f7ff ff6d 	bl	810d10c <__ssputs_r>
 810d232:	3001      	adds	r0, #1
 810d234:	f000 80aa 	beq.w	810d38c <_svfiprintf_r+0x1c8>
 810d238:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810d23a:	445a      	add	r2, fp
 810d23c:	9209      	str	r2, [sp, #36]	; 0x24
 810d23e:	f89a 3000 	ldrb.w	r3, [sl]
 810d242:	2b00      	cmp	r3, #0
 810d244:	f000 80a2 	beq.w	810d38c <_svfiprintf_r+0x1c8>
 810d248:	2300      	movs	r3, #0
 810d24a:	f04f 32ff 	mov.w	r2, #4294967295
 810d24e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810d252:	f10a 0a01 	add.w	sl, sl, #1
 810d256:	9304      	str	r3, [sp, #16]
 810d258:	9307      	str	r3, [sp, #28]
 810d25a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810d25e:	931a      	str	r3, [sp, #104]	; 0x68
 810d260:	4654      	mov	r4, sl
 810d262:	2205      	movs	r2, #5
 810d264:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d268:	4851      	ldr	r0, [pc, #324]	; (810d3b0 <_svfiprintf_r+0x1ec>)
 810d26a:	f7f3 f841 	bl	81002f0 <memchr>
 810d26e:	9a04      	ldr	r2, [sp, #16]
 810d270:	b9d8      	cbnz	r0, 810d2aa <_svfiprintf_r+0xe6>
 810d272:	06d0      	lsls	r0, r2, #27
 810d274:	bf44      	itt	mi
 810d276:	2320      	movmi	r3, #32
 810d278:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810d27c:	0711      	lsls	r1, r2, #28
 810d27e:	bf44      	itt	mi
 810d280:	232b      	movmi	r3, #43	; 0x2b
 810d282:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810d286:	f89a 3000 	ldrb.w	r3, [sl]
 810d28a:	2b2a      	cmp	r3, #42	; 0x2a
 810d28c:	d015      	beq.n	810d2ba <_svfiprintf_r+0xf6>
 810d28e:	9a07      	ldr	r2, [sp, #28]
 810d290:	4654      	mov	r4, sl
 810d292:	2000      	movs	r0, #0
 810d294:	f04f 0c0a 	mov.w	ip, #10
 810d298:	4621      	mov	r1, r4
 810d29a:	f811 3b01 	ldrb.w	r3, [r1], #1
 810d29e:	3b30      	subs	r3, #48	; 0x30
 810d2a0:	2b09      	cmp	r3, #9
 810d2a2:	d94e      	bls.n	810d342 <_svfiprintf_r+0x17e>
 810d2a4:	b1b0      	cbz	r0, 810d2d4 <_svfiprintf_r+0x110>
 810d2a6:	9207      	str	r2, [sp, #28]
 810d2a8:	e014      	b.n	810d2d4 <_svfiprintf_r+0x110>
 810d2aa:	eba0 0308 	sub.w	r3, r0, r8
 810d2ae:	fa09 f303 	lsl.w	r3, r9, r3
 810d2b2:	4313      	orrs	r3, r2
 810d2b4:	9304      	str	r3, [sp, #16]
 810d2b6:	46a2      	mov	sl, r4
 810d2b8:	e7d2      	b.n	810d260 <_svfiprintf_r+0x9c>
 810d2ba:	9b03      	ldr	r3, [sp, #12]
 810d2bc:	1d19      	adds	r1, r3, #4
 810d2be:	681b      	ldr	r3, [r3, #0]
 810d2c0:	9103      	str	r1, [sp, #12]
 810d2c2:	2b00      	cmp	r3, #0
 810d2c4:	bfbb      	ittet	lt
 810d2c6:	425b      	neglt	r3, r3
 810d2c8:	f042 0202 	orrlt.w	r2, r2, #2
 810d2cc:	9307      	strge	r3, [sp, #28]
 810d2ce:	9307      	strlt	r3, [sp, #28]
 810d2d0:	bfb8      	it	lt
 810d2d2:	9204      	strlt	r2, [sp, #16]
 810d2d4:	7823      	ldrb	r3, [r4, #0]
 810d2d6:	2b2e      	cmp	r3, #46	; 0x2e
 810d2d8:	d10c      	bne.n	810d2f4 <_svfiprintf_r+0x130>
 810d2da:	7863      	ldrb	r3, [r4, #1]
 810d2dc:	2b2a      	cmp	r3, #42	; 0x2a
 810d2de:	d135      	bne.n	810d34c <_svfiprintf_r+0x188>
 810d2e0:	9b03      	ldr	r3, [sp, #12]
 810d2e2:	1d1a      	adds	r2, r3, #4
 810d2e4:	681b      	ldr	r3, [r3, #0]
 810d2e6:	9203      	str	r2, [sp, #12]
 810d2e8:	2b00      	cmp	r3, #0
 810d2ea:	bfb8      	it	lt
 810d2ec:	f04f 33ff 	movlt.w	r3, #4294967295
 810d2f0:	3402      	adds	r4, #2
 810d2f2:	9305      	str	r3, [sp, #20]
 810d2f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 810d3c0 <_svfiprintf_r+0x1fc>
 810d2f8:	7821      	ldrb	r1, [r4, #0]
 810d2fa:	2203      	movs	r2, #3
 810d2fc:	4650      	mov	r0, sl
 810d2fe:	f7f2 fff7 	bl	81002f0 <memchr>
 810d302:	b140      	cbz	r0, 810d316 <_svfiprintf_r+0x152>
 810d304:	2340      	movs	r3, #64	; 0x40
 810d306:	eba0 000a 	sub.w	r0, r0, sl
 810d30a:	fa03 f000 	lsl.w	r0, r3, r0
 810d30e:	9b04      	ldr	r3, [sp, #16]
 810d310:	4303      	orrs	r3, r0
 810d312:	3401      	adds	r4, #1
 810d314:	9304      	str	r3, [sp, #16]
 810d316:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d31a:	4826      	ldr	r0, [pc, #152]	; (810d3b4 <_svfiprintf_r+0x1f0>)
 810d31c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810d320:	2206      	movs	r2, #6
 810d322:	f7f2 ffe5 	bl	81002f0 <memchr>
 810d326:	2800      	cmp	r0, #0
 810d328:	d038      	beq.n	810d39c <_svfiprintf_r+0x1d8>
 810d32a:	4b23      	ldr	r3, [pc, #140]	; (810d3b8 <_svfiprintf_r+0x1f4>)
 810d32c:	bb1b      	cbnz	r3, 810d376 <_svfiprintf_r+0x1b2>
 810d32e:	9b03      	ldr	r3, [sp, #12]
 810d330:	3307      	adds	r3, #7
 810d332:	f023 0307 	bic.w	r3, r3, #7
 810d336:	3308      	adds	r3, #8
 810d338:	9303      	str	r3, [sp, #12]
 810d33a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d33c:	4433      	add	r3, r6
 810d33e:	9309      	str	r3, [sp, #36]	; 0x24
 810d340:	e767      	b.n	810d212 <_svfiprintf_r+0x4e>
 810d342:	fb0c 3202 	mla	r2, ip, r2, r3
 810d346:	460c      	mov	r4, r1
 810d348:	2001      	movs	r0, #1
 810d34a:	e7a5      	b.n	810d298 <_svfiprintf_r+0xd4>
 810d34c:	2300      	movs	r3, #0
 810d34e:	3401      	adds	r4, #1
 810d350:	9305      	str	r3, [sp, #20]
 810d352:	4619      	mov	r1, r3
 810d354:	f04f 0c0a 	mov.w	ip, #10
 810d358:	4620      	mov	r0, r4
 810d35a:	f810 2b01 	ldrb.w	r2, [r0], #1
 810d35e:	3a30      	subs	r2, #48	; 0x30
 810d360:	2a09      	cmp	r2, #9
 810d362:	d903      	bls.n	810d36c <_svfiprintf_r+0x1a8>
 810d364:	2b00      	cmp	r3, #0
 810d366:	d0c5      	beq.n	810d2f4 <_svfiprintf_r+0x130>
 810d368:	9105      	str	r1, [sp, #20]
 810d36a:	e7c3      	b.n	810d2f4 <_svfiprintf_r+0x130>
 810d36c:	fb0c 2101 	mla	r1, ip, r1, r2
 810d370:	4604      	mov	r4, r0
 810d372:	2301      	movs	r3, #1
 810d374:	e7f0      	b.n	810d358 <_svfiprintf_r+0x194>
 810d376:	ab03      	add	r3, sp, #12
 810d378:	9300      	str	r3, [sp, #0]
 810d37a:	462a      	mov	r2, r5
 810d37c:	4b0f      	ldr	r3, [pc, #60]	; (810d3bc <_svfiprintf_r+0x1f8>)
 810d37e:	a904      	add	r1, sp, #16
 810d380:	4638      	mov	r0, r7
 810d382:	f7fb fee9 	bl	8109158 <_printf_float>
 810d386:	1c42      	adds	r2, r0, #1
 810d388:	4606      	mov	r6, r0
 810d38a:	d1d6      	bne.n	810d33a <_svfiprintf_r+0x176>
 810d38c:	89ab      	ldrh	r3, [r5, #12]
 810d38e:	065b      	lsls	r3, r3, #25
 810d390:	f53f af2c 	bmi.w	810d1ec <_svfiprintf_r+0x28>
 810d394:	9809      	ldr	r0, [sp, #36]	; 0x24
 810d396:	b01d      	add	sp, #116	; 0x74
 810d398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d39c:	ab03      	add	r3, sp, #12
 810d39e:	9300      	str	r3, [sp, #0]
 810d3a0:	462a      	mov	r2, r5
 810d3a2:	4b06      	ldr	r3, [pc, #24]	; (810d3bc <_svfiprintf_r+0x1f8>)
 810d3a4:	a904      	add	r1, sp, #16
 810d3a6:	4638      	mov	r0, r7
 810d3a8:	f7fc f97a 	bl	81096a0 <_printf_i>
 810d3ac:	e7eb      	b.n	810d386 <_svfiprintf_r+0x1c2>
 810d3ae:	bf00      	nop
 810d3b0:	0810e394 	.word	0x0810e394
 810d3b4:	0810e39e 	.word	0x0810e39e
 810d3b8:	08109159 	.word	0x08109159
 810d3bc:	0810d10d 	.word	0x0810d10d
 810d3c0:	0810e39a 	.word	0x0810e39a

0810d3c4 <__sfputc_r>:
 810d3c4:	6893      	ldr	r3, [r2, #8]
 810d3c6:	3b01      	subs	r3, #1
 810d3c8:	2b00      	cmp	r3, #0
 810d3ca:	b410      	push	{r4}
 810d3cc:	6093      	str	r3, [r2, #8]
 810d3ce:	da08      	bge.n	810d3e2 <__sfputc_r+0x1e>
 810d3d0:	6994      	ldr	r4, [r2, #24]
 810d3d2:	42a3      	cmp	r3, r4
 810d3d4:	db01      	blt.n	810d3da <__sfputc_r+0x16>
 810d3d6:	290a      	cmp	r1, #10
 810d3d8:	d103      	bne.n	810d3e2 <__sfputc_r+0x1e>
 810d3da:	f85d 4b04 	ldr.w	r4, [sp], #4
 810d3de:	f7fd bbf7 	b.w	810abd0 <__swbuf_r>
 810d3e2:	6813      	ldr	r3, [r2, #0]
 810d3e4:	1c58      	adds	r0, r3, #1
 810d3e6:	6010      	str	r0, [r2, #0]
 810d3e8:	7019      	strb	r1, [r3, #0]
 810d3ea:	4608      	mov	r0, r1
 810d3ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 810d3f0:	4770      	bx	lr

0810d3f2 <__sfputs_r>:
 810d3f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d3f4:	4606      	mov	r6, r0
 810d3f6:	460f      	mov	r7, r1
 810d3f8:	4614      	mov	r4, r2
 810d3fa:	18d5      	adds	r5, r2, r3
 810d3fc:	42ac      	cmp	r4, r5
 810d3fe:	d101      	bne.n	810d404 <__sfputs_r+0x12>
 810d400:	2000      	movs	r0, #0
 810d402:	e007      	b.n	810d414 <__sfputs_r+0x22>
 810d404:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d408:	463a      	mov	r2, r7
 810d40a:	4630      	mov	r0, r6
 810d40c:	f7ff ffda 	bl	810d3c4 <__sfputc_r>
 810d410:	1c43      	adds	r3, r0, #1
 810d412:	d1f3      	bne.n	810d3fc <__sfputs_r+0xa>
 810d414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810d418 <_vfiprintf_r>:
 810d418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d41c:	460d      	mov	r5, r1
 810d41e:	b09d      	sub	sp, #116	; 0x74
 810d420:	4614      	mov	r4, r2
 810d422:	4698      	mov	r8, r3
 810d424:	4606      	mov	r6, r0
 810d426:	b118      	cbz	r0, 810d430 <_vfiprintf_r+0x18>
 810d428:	6983      	ldr	r3, [r0, #24]
 810d42a:	b90b      	cbnz	r3, 810d430 <_vfiprintf_r+0x18>
 810d42c:	f7fe fc24 	bl	810bc78 <__sinit>
 810d430:	4b89      	ldr	r3, [pc, #548]	; (810d658 <_vfiprintf_r+0x240>)
 810d432:	429d      	cmp	r5, r3
 810d434:	d11b      	bne.n	810d46e <_vfiprintf_r+0x56>
 810d436:	6875      	ldr	r5, [r6, #4]
 810d438:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810d43a:	07d9      	lsls	r1, r3, #31
 810d43c:	d405      	bmi.n	810d44a <_vfiprintf_r+0x32>
 810d43e:	89ab      	ldrh	r3, [r5, #12]
 810d440:	059a      	lsls	r2, r3, #22
 810d442:	d402      	bmi.n	810d44a <_vfiprintf_r+0x32>
 810d444:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810d446:	f7ff f828 	bl	810c49a <__retarget_lock_acquire_recursive>
 810d44a:	89ab      	ldrh	r3, [r5, #12]
 810d44c:	071b      	lsls	r3, r3, #28
 810d44e:	d501      	bpl.n	810d454 <_vfiprintf_r+0x3c>
 810d450:	692b      	ldr	r3, [r5, #16]
 810d452:	b9eb      	cbnz	r3, 810d490 <_vfiprintf_r+0x78>
 810d454:	4629      	mov	r1, r5
 810d456:	4630      	mov	r0, r6
 810d458:	f7fd fc0c 	bl	810ac74 <__swsetup_r>
 810d45c:	b1c0      	cbz	r0, 810d490 <_vfiprintf_r+0x78>
 810d45e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810d460:	07dc      	lsls	r4, r3, #31
 810d462:	d50e      	bpl.n	810d482 <_vfiprintf_r+0x6a>
 810d464:	f04f 30ff 	mov.w	r0, #4294967295
 810d468:	b01d      	add	sp, #116	; 0x74
 810d46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d46e:	4b7b      	ldr	r3, [pc, #492]	; (810d65c <_vfiprintf_r+0x244>)
 810d470:	429d      	cmp	r5, r3
 810d472:	d101      	bne.n	810d478 <_vfiprintf_r+0x60>
 810d474:	68b5      	ldr	r5, [r6, #8]
 810d476:	e7df      	b.n	810d438 <_vfiprintf_r+0x20>
 810d478:	4b79      	ldr	r3, [pc, #484]	; (810d660 <_vfiprintf_r+0x248>)
 810d47a:	429d      	cmp	r5, r3
 810d47c:	bf08      	it	eq
 810d47e:	68f5      	ldreq	r5, [r6, #12]
 810d480:	e7da      	b.n	810d438 <_vfiprintf_r+0x20>
 810d482:	89ab      	ldrh	r3, [r5, #12]
 810d484:	0598      	lsls	r0, r3, #22
 810d486:	d4ed      	bmi.n	810d464 <_vfiprintf_r+0x4c>
 810d488:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810d48a:	f7ff f807 	bl	810c49c <__retarget_lock_release_recursive>
 810d48e:	e7e9      	b.n	810d464 <_vfiprintf_r+0x4c>
 810d490:	2300      	movs	r3, #0
 810d492:	9309      	str	r3, [sp, #36]	; 0x24
 810d494:	2320      	movs	r3, #32
 810d496:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810d49a:	f8cd 800c 	str.w	r8, [sp, #12]
 810d49e:	2330      	movs	r3, #48	; 0x30
 810d4a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 810d664 <_vfiprintf_r+0x24c>
 810d4a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810d4a8:	f04f 0901 	mov.w	r9, #1
 810d4ac:	4623      	mov	r3, r4
 810d4ae:	469a      	mov	sl, r3
 810d4b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 810d4b4:	b10a      	cbz	r2, 810d4ba <_vfiprintf_r+0xa2>
 810d4b6:	2a25      	cmp	r2, #37	; 0x25
 810d4b8:	d1f9      	bne.n	810d4ae <_vfiprintf_r+0x96>
 810d4ba:	ebba 0b04 	subs.w	fp, sl, r4
 810d4be:	d00b      	beq.n	810d4d8 <_vfiprintf_r+0xc0>
 810d4c0:	465b      	mov	r3, fp
 810d4c2:	4622      	mov	r2, r4
 810d4c4:	4629      	mov	r1, r5
 810d4c6:	4630      	mov	r0, r6
 810d4c8:	f7ff ff93 	bl	810d3f2 <__sfputs_r>
 810d4cc:	3001      	adds	r0, #1
 810d4ce:	f000 80aa 	beq.w	810d626 <_vfiprintf_r+0x20e>
 810d4d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810d4d4:	445a      	add	r2, fp
 810d4d6:	9209      	str	r2, [sp, #36]	; 0x24
 810d4d8:	f89a 3000 	ldrb.w	r3, [sl]
 810d4dc:	2b00      	cmp	r3, #0
 810d4de:	f000 80a2 	beq.w	810d626 <_vfiprintf_r+0x20e>
 810d4e2:	2300      	movs	r3, #0
 810d4e4:	f04f 32ff 	mov.w	r2, #4294967295
 810d4e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810d4ec:	f10a 0a01 	add.w	sl, sl, #1
 810d4f0:	9304      	str	r3, [sp, #16]
 810d4f2:	9307      	str	r3, [sp, #28]
 810d4f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810d4f8:	931a      	str	r3, [sp, #104]	; 0x68
 810d4fa:	4654      	mov	r4, sl
 810d4fc:	2205      	movs	r2, #5
 810d4fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d502:	4858      	ldr	r0, [pc, #352]	; (810d664 <_vfiprintf_r+0x24c>)
 810d504:	f7f2 fef4 	bl	81002f0 <memchr>
 810d508:	9a04      	ldr	r2, [sp, #16]
 810d50a:	b9d8      	cbnz	r0, 810d544 <_vfiprintf_r+0x12c>
 810d50c:	06d1      	lsls	r1, r2, #27
 810d50e:	bf44      	itt	mi
 810d510:	2320      	movmi	r3, #32
 810d512:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810d516:	0713      	lsls	r3, r2, #28
 810d518:	bf44      	itt	mi
 810d51a:	232b      	movmi	r3, #43	; 0x2b
 810d51c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810d520:	f89a 3000 	ldrb.w	r3, [sl]
 810d524:	2b2a      	cmp	r3, #42	; 0x2a
 810d526:	d015      	beq.n	810d554 <_vfiprintf_r+0x13c>
 810d528:	9a07      	ldr	r2, [sp, #28]
 810d52a:	4654      	mov	r4, sl
 810d52c:	2000      	movs	r0, #0
 810d52e:	f04f 0c0a 	mov.w	ip, #10
 810d532:	4621      	mov	r1, r4
 810d534:	f811 3b01 	ldrb.w	r3, [r1], #1
 810d538:	3b30      	subs	r3, #48	; 0x30
 810d53a:	2b09      	cmp	r3, #9
 810d53c:	d94e      	bls.n	810d5dc <_vfiprintf_r+0x1c4>
 810d53e:	b1b0      	cbz	r0, 810d56e <_vfiprintf_r+0x156>
 810d540:	9207      	str	r2, [sp, #28]
 810d542:	e014      	b.n	810d56e <_vfiprintf_r+0x156>
 810d544:	eba0 0308 	sub.w	r3, r0, r8
 810d548:	fa09 f303 	lsl.w	r3, r9, r3
 810d54c:	4313      	orrs	r3, r2
 810d54e:	9304      	str	r3, [sp, #16]
 810d550:	46a2      	mov	sl, r4
 810d552:	e7d2      	b.n	810d4fa <_vfiprintf_r+0xe2>
 810d554:	9b03      	ldr	r3, [sp, #12]
 810d556:	1d19      	adds	r1, r3, #4
 810d558:	681b      	ldr	r3, [r3, #0]
 810d55a:	9103      	str	r1, [sp, #12]
 810d55c:	2b00      	cmp	r3, #0
 810d55e:	bfbb      	ittet	lt
 810d560:	425b      	neglt	r3, r3
 810d562:	f042 0202 	orrlt.w	r2, r2, #2
 810d566:	9307      	strge	r3, [sp, #28]
 810d568:	9307      	strlt	r3, [sp, #28]
 810d56a:	bfb8      	it	lt
 810d56c:	9204      	strlt	r2, [sp, #16]
 810d56e:	7823      	ldrb	r3, [r4, #0]
 810d570:	2b2e      	cmp	r3, #46	; 0x2e
 810d572:	d10c      	bne.n	810d58e <_vfiprintf_r+0x176>
 810d574:	7863      	ldrb	r3, [r4, #1]
 810d576:	2b2a      	cmp	r3, #42	; 0x2a
 810d578:	d135      	bne.n	810d5e6 <_vfiprintf_r+0x1ce>
 810d57a:	9b03      	ldr	r3, [sp, #12]
 810d57c:	1d1a      	adds	r2, r3, #4
 810d57e:	681b      	ldr	r3, [r3, #0]
 810d580:	9203      	str	r2, [sp, #12]
 810d582:	2b00      	cmp	r3, #0
 810d584:	bfb8      	it	lt
 810d586:	f04f 33ff 	movlt.w	r3, #4294967295
 810d58a:	3402      	adds	r4, #2
 810d58c:	9305      	str	r3, [sp, #20]
 810d58e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 810d674 <_vfiprintf_r+0x25c>
 810d592:	7821      	ldrb	r1, [r4, #0]
 810d594:	2203      	movs	r2, #3
 810d596:	4650      	mov	r0, sl
 810d598:	f7f2 feaa 	bl	81002f0 <memchr>
 810d59c:	b140      	cbz	r0, 810d5b0 <_vfiprintf_r+0x198>
 810d59e:	2340      	movs	r3, #64	; 0x40
 810d5a0:	eba0 000a 	sub.w	r0, r0, sl
 810d5a4:	fa03 f000 	lsl.w	r0, r3, r0
 810d5a8:	9b04      	ldr	r3, [sp, #16]
 810d5aa:	4303      	orrs	r3, r0
 810d5ac:	3401      	adds	r4, #1
 810d5ae:	9304      	str	r3, [sp, #16]
 810d5b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d5b4:	482c      	ldr	r0, [pc, #176]	; (810d668 <_vfiprintf_r+0x250>)
 810d5b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810d5ba:	2206      	movs	r2, #6
 810d5bc:	f7f2 fe98 	bl	81002f0 <memchr>
 810d5c0:	2800      	cmp	r0, #0
 810d5c2:	d03f      	beq.n	810d644 <_vfiprintf_r+0x22c>
 810d5c4:	4b29      	ldr	r3, [pc, #164]	; (810d66c <_vfiprintf_r+0x254>)
 810d5c6:	bb1b      	cbnz	r3, 810d610 <_vfiprintf_r+0x1f8>
 810d5c8:	9b03      	ldr	r3, [sp, #12]
 810d5ca:	3307      	adds	r3, #7
 810d5cc:	f023 0307 	bic.w	r3, r3, #7
 810d5d0:	3308      	adds	r3, #8
 810d5d2:	9303      	str	r3, [sp, #12]
 810d5d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d5d6:	443b      	add	r3, r7
 810d5d8:	9309      	str	r3, [sp, #36]	; 0x24
 810d5da:	e767      	b.n	810d4ac <_vfiprintf_r+0x94>
 810d5dc:	fb0c 3202 	mla	r2, ip, r2, r3
 810d5e0:	460c      	mov	r4, r1
 810d5e2:	2001      	movs	r0, #1
 810d5e4:	e7a5      	b.n	810d532 <_vfiprintf_r+0x11a>
 810d5e6:	2300      	movs	r3, #0
 810d5e8:	3401      	adds	r4, #1
 810d5ea:	9305      	str	r3, [sp, #20]
 810d5ec:	4619      	mov	r1, r3
 810d5ee:	f04f 0c0a 	mov.w	ip, #10
 810d5f2:	4620      	mov	r0, r4
 810d5f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 810d5f8:	3a30      	subs	r2, #48	; 0x30
 810d5fa:	2a09      	cmp	r2, #9
 810d5fc:	d903      	bls.n	810d606 <_vfiprintf_r+0x1ee>
 810d5fe:	2b00      	cmp	r3, #0
 810d600:	d0c5      	beq.n	810d58e <_vfiprintf_r+0x176>
 810d602:	9105      	str	r1, [sp, #20]
 810d604:	e7c3      	b.n	810d58e <_vfiprintf_r+0x176>
 810d606:	fb0c 2101 	mla	r1, ip, r1, r2
 810d60a:	4604      	mov	r4, r0
 810d60c:	2301      	movs	r3, #1
 810d60e:	e7f0      	b.n	810d5f2 <_vfiprintf_r+0x1da>
 810d610:	ab03      	add	r3, sp, #12
 810d612:	9300      	str	r3, [sp, #0]
 810d614:	462a      	mov	r2, r5
 810d616:	4b16      	ldr	r3, [pc, #88]	; (810d670 <_vfiprintf_r+0x258>)
 810d618:	a904      	add	r1, sp, #16
 810d61a:	4630      	mov	r0, r6
 810d61c:	f7fb fd9c 	bl	8109158 <_printf_float>
 810d620:	4607      	mov	r7, r0
 810d622:	1c78      	adds	r0, r7, #1
 810d624:	d1d6      	bne.n	810d5d4 <_vfiprintf_r+0x1bc>
 810d626:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810d628:	07d9      	lsls	r1, r3, #31
 810d62a:	d405      	bmi.n	810d638 <_vfiprintf_r+0x220>
 810d62c:	89ab      	ldrh	r3, [r5, #12]
 810d62e:	059a      	lsls	r2, r3, #22
 810d630:	d402      	bmi.n	810d638 <_vfiprintf_r+0x220>
 810d632:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810d634:	f7fe ff32 	bl	810c49c <__retarget_lock_release_recursive>
 810d638:	89ab      	ldrh	r3, [r5, #12]
 810d63a:	065b      	lsls	r3, r3, #25
 810d63c:	f53f af12 	bmi.w	810d464 <_vfiprintf_r+0x4c>
 810d640:	9809      	ldr	r0, [sp, #36]	; 0x24
 810d642:	e711      	b.n	810d468 <_vfiprintf_r+0x50>
 810d644:	ab03      	add	r3, sp, #12
 810d646:	9300      	str	r3, [sp, #0]
 810d648:	462a      	mov	r2, r5
 810d64a:	4b09      	ldr	r3, [pc, #36]	; (810d670 <_vfiprintf_r+0x258>)
 810d64c:	a904      	add	r1, sp, #16
 810d64e:	4630      	mov	r0, r6
 810d650:	f7fc f826 	bl	81096a0 <_printf_i>
 810d654:	e7e4      	b.n	810d620 <_vfiprintf_r+0x208>
 810d656:	bf00      	nop
 810d658:	0810e17c 	.word	0x0810e17c
 810d65c:	0810e19c 	.word	0x0810e19c
 810d660:	0810e15c 	.word	0x0810e15c
 810d664:	0810e394 	.word	0x0810e394
 810d668:	0810e39e 	.word	0x0810e39e
 810d66c:	08109159 	.word	0x08109159
 810d670:	0810d3f3 	.word	0x0810d3f3
 810d674:	0810e39a 	.word	0x0810e39a

0810d678 <nan>:
 810d678:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810d680 <nan+0x8>
 810d67c:	4770      	bx	lr
 810d67e:	bf00      	nop
 810d680:	00000000 	.word	0x00000000
 810d684:	7ff80000 	.word	0x7ff80000

0810d688 <_sbrk_r>:
 810d688:	b538      	push	{r3, r4, r5, lr}
 810d68a:	4d06      	ldr	r5, [pc, #24]	; (810d6a4 <_sbrk_r+0x1c>)
 810d68c:	2300      	movs	r3, #0
 810d68e:	4604      	mov	r4, r0
 810d690:	4608      	mov	r0, r1
 810d692:	602b      	str	r3, [r5, #0]
 810d694:	f7f5 fcda 	bl	810304c <_sbrk>
 810d698:	1c43      	adds	r3, r0, #1
 810d69a:	d102      	bne.n	810d6a2 <_sbrk_r+0x1a>
 810d69c:	682b      	ldr	r3, [r5, #0]
 810d69e:	b103      	cbz	r3, 810d6a2 <_sbrk_r+0x1a>
 810d6a0:	6023      	str	r3, [r4, #0]
 810d6a2:	bd38      	pop	{r3, r4, r5, pc}
 810d6a4:	100004c0 	.word	0x100004c0

0810d6a8 <__sread>:
 810d6a8:	b510      	push	{r4, lr}
 810d6aa:	460c      	mov	r4, r1
 810d6ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810d6b0:	f000 f93a 	bl	810d928 <_read_r>
 810d6b4:	2800      	cmp	r0, #0
 810d6b6:	bfab      	itete	ge
 810d6b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 810d6ba:	89a3      	ldrhlt	r3, [r4, #12]
 810d6bc:	181b      	addge	r3, r3, r0
 810d6be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810d6c2:	bfac      	ite	ge
 810d6c4:	6563      	strge	r3, [r4, #84]	; 0x54
 810d6c6:	81a3      	strhlt	r3, [r4, #12]
 810d6c8:	bd10      	pop	{r4, pc}

0810d6ca <__swrite>:
 810d6ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810d6ce:	461f      	mov	r7, r3
 810d6d0:	898b      	ldrh	r3, [r1, #12]
 810d6d2:	05db      	lsls	r3, r3, #23
 810d6d4:	4605      	mov	r5, r0
 810d6d6:	460c      	mov	r4, r1
 810d6d8:	4616      	mov	r6, r2
 810d6da:	d505      	bpl.n	810d6e8 <__swrite+0x1e>
 810d6dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810d6e0:	2302      	movs	r3, #2
 810d6e2:	2200      	movs	r2, #0
 810d6e4:	f000 f8b8 	bl	810d858 <_lseek_r>
 810d6e8:	89a3      	ldrh	r3, [r4, #12]
 810d6ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810d6ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810d6f2:	81a3      	strh	r3, [r4, #12]
 810d6f4:	4632      	mov	r2, r6
 810d6f6:	463b      	mov	r3, r7
 810d6f8:	4628      	mov	r0, r5
 810d6fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810d6fe:	f000 b837 	b.w	810d770 <_write_r>

0810d702 <__sseek>:
 810d702:	b510      	push	{r4, lr}
 810d704:	460c      	mov	r4, r1
 810d706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810d70a:	f000 f8a5 	bl	810d858 <_lseek_r>
 810d70e:	1c43      	adds	r3, r0, #1
 810d710:	89a3      	ldrh	r3, [r4, #12]
 810d712:	bf15      	itete	ne
 810d714:	6560      	strne	r0, [r4, #84]	; 0x54
 810d716:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810d71a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810d71e:	81a3      	strheq	r3, [r4, #12]
 810d720:	bf18      	it	ne
 810d722:	81a3      	strhne	r3, [r4, #12]
 810d724:	bd10      	pop	{r4, pc}

0810d726 <__sclose>:
 810d726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810d72a:	f000 b851 	b.w	810d7d0 <_close_r>

0810d72e <strncmp>:
 810d72e:	b510      	push	{r4, lr}
 810d730:	b17a      	cbz	r2, 810d752 <strncmp+0x24>
 810d732:	4603      	mov	r3, r0
 810d734:	3901      	subs	r1, #1
 810d736:	1884      	adds	r4, r0, r2
 810d738:	f813 0b01 	ldrb.w	r0, [r3], #1
 810d73c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 810d740:	4290      	cmp	r0, r2
 810d742:	d101      	bne.n	810d748 <strncmp+0x1a>
 810d744:	42a3      	cmp	r3, r4
 810d746:	d101      	bne.n	810d74c <strncmp+0x1e>
 810d748:	1a80      	subs	r0, r0, r2
 810d74a:	bd10      	pop	{r4, pc}
 810d74c:	2800      	cmp	r0, #0
 810d74e:	d1f3      	bne.n	810d738 <strncmp+0xa>
 810d750:	e7fa      	b.n	810d748 <strncmp+0x1a>
 810d752:	4610      	mov	r0, r2
 810d754:	e7f9      	b.n	810d74a <strncmp+0x1c>

0810d756 <__ascii_wctomb>:
 810d756:	b149      	cbz	r1, 810d76c <__ascii_wctomb+0x16>
 810d758:	2aff      	cmp	r2, #255	; 0xff
 810d75a:	bf85      	ittet	hi
 810d75c:	238a      	movhi	r3, #138	; 0x8a
 810d75e:	6003      	strhi	r3, [r0, #0]
 810d760:	700a      	strbls	r2, [r1, #0]
 810d762:	f04f 30ff 	movhi.w	r0, #4294967295
 810d766:	bf98      	it	ls
 810d768:	2001      	movls	r0, #1
 810d76a:	4770      	bx	lr
 810d76c:	4608      	mov	r0, r1
 810d76e:	4770      	bx	lr

0810d770 <_write_r>:
 810d770:	b538      	push	{r3, r4, r5, lr}
 810d772:	4d07      	ldr	r5, [pc, #28]	; (810d790 <_write_r+0x20>)
 810d774:	4604      	mov	r4, r0
 810d776:	4608      	mov	r0, r1
 810d778:	4611      	mov	r1, r2
 810d77a:	2200      	movs	r2, #0
 810d77c:	602a      	str	r2, [r5, #0]
 810d77e:	461a      	mov	r2, r3
 810d780:	f7f5 fc13 	bl	8102faa <_write>
 810d784:	1c43      	adds	r3, r0, #1
 810d786:	d102      	bne.n	810d78e <_write_r+0x1e>
 810d788:	682b      	ldr	r3, [r5, #0]
 810d78a:	b103      	cbz	r3, 810d78e <_write_r+0x1e>
 810d78c:	6023      	str	r3, [r4, #0]
 810d78e:	bd38      	pop	{r3, r4, r5, pc}
 810d790:	100004c0 	.word	0x100004c0

0810d794 <__assert_func>:
 810d794:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810d796:	4614      	mov	r4, r2
 810d798:	461a      	mov	r2, r3
 810d79a:	4b09      	ldr	r3, [pc, #36]	; (810d7c0 <__assert_func+0x2c>)
 810d79c:	681b      	ldr	r3, [r3, #0]
 810d79e:	4605      	mov	r5, r0
 810d7a0:	68d8      	ldr	r0, [r3, #12]
 810d7a2:	b14c      	cbz	r4, 810d7b8 <__assert_func+0x24>
 810d7a4:	4b07      	ldr	r3, [pc, #28]	; (810d7c4 <__assert_func+0x30>)
 810d7a6:	9100      	str	r1, [sp, #0]
 810d7a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810d7ac:	4906      	ldr	r1, [pc, #24]	; (810d7c8 <__assert_func+0x34>)
 810d7ae:	462b      	mov	r3, r5
 810d7b0:	f000 f81e 	bl	810d7f0 <fiprintf>
 810d7b4:	f000 f8ca 	bl	810d94c <abort>
 810d7b8:	4b04      	ldr	r3, [pc, #16]	; (810d7cc <__assert_func+0x38>)
 810d7ba:	461c      	mov	r4, r3
 810d7bc:	e7f3      	b.n	810d7a6 <__assert_func+0x12>
 810d7be:	bf00      	nop
 810d7c0:	1000002c 	.word	0x1000002c
 810d7c4:	0810e3a5 	.word	0x0810e3a5
 810d7c8:	0810e3b2 	.word	0x0810e3b2
 810d7cc:	0810e3e0 	.word	0x0810e3e0

0810d7d0 <_close_r>:
 810d7d0:	b538      	push	{r3, r4, r5, lr}
 810d7d2:	4d06      	ldr	r5, [pc, #24]	; (810d7ec <_close_r+0x1c>)
 810d7d4:	2300      	movs	r3, #0
 810d7d6:	4604      	mov	r4, r0
 810d7d8:	4608      	mov	r0, r1
 810d7da:	602b      	str	r3, [r5, #0]
 810d7dc:	f7f5 fc01 	bl	8102fe2 <_close>
 810d7e0:	1c43      	adds	r3, r0, #1
 810d7e2:	d102      	bne.n	810d7ea <_close_r+0x1a>
 810d7e4:	682b      	ldr	r3, [r5, #0]
 810d7e6:	b103      	cbz	r3, 810d7ea <_close_r+0x1a>
 810d7e8:	6023      	str	r3, [r4, #0]
 810d7ea:	bd38      	pop	{r3, r4, r5, pc}
 810d7ec:	100004c0 	.word	0x100004c0

0810d7f0 <fiprintf>:
 810d7f0:	b40e      	push	{r1, r2, r3}
 810d7f2:	b503      	push	{r0, r1, lr}
 810d7f4:	4601      	mov	r1, r0
 810d7f6:	ab03      	add	r3, sp, #12
 810d7f8:	4805      	ldr	r0, [pc, #20]	; (810d810 <fiprintf+0x20>)
 810d7fa:	f853 2b04 	ldr.w	r2, [r3], #4
 810d7fe:	6800      	ldr	r0, [r0, #0]
 810d800:	9301      	str	r3, [sp, #4]
 810d802:	f7ff fe09 	bl	810d418 <_vfiprintf_r>
 810d806:	b002      	add	sp, #8
 810d808:	f85d eb04 	ldr.w	lr, [sp], #4
 810d80c:	b003      	add	sp, #12
 810d80e:	4770      	bx	lr
 810d810:	1000002c 	.word	0x1000002c

0810d814 <_fstat_r>:
 810d814:	b538      	push	{r3, r4, r5, lr}
 810d816:	4d07      	ldr	r5, [pc, #28]	; (810d834 <_fstat_r+0x20>)
 810d818:	2300      	movs	r3, #0
 810d81a:	4604      	mov	r4, r0
 810d81c:	4608      	mov	r0, r1
 810d81e:	4611      	mov	r1, r2
 810d820:	602b      	str	r3, [r5, #0]
 810d822:	f7f5 fbea 	bl	8102ffa <_fstat>
 810d826:	1c43      	adds	r3, r0, #1
 810d828:	d102      	bne.n	810d830 <_fstat_r+0x1c>
 810d82a:	682b      	ldr	r3, [r5, #0]
 810d82c:	b103      	cbz	r3, 810d830 <_fstat_r+0x1c>
 810d82e:	6023      	str	r3, [r4, #0]
 810d830:	bd38      	pop	{r3, r4, r5, pc}
 810d832:	bf00      	nop
 810d834:	100004c0 	.word	0x100004c0

0810d838 <_isatty_r>:
 810d838:	b538      	push	{r3, r4, r5, lr}
 810d83a:	4d06      	ldr	r5, [pc, #24]	; (810d854 <_isatty_r+0x1c>)
 810d83c:	2300      	movs	r3, #0
 810d83e:	4604      	mov	r4, r0
 810d840:	4608      	mov	r0, r1
 810d842:	602b      	str	r3, [r5, #0]
 810d844:	f7f5 fbe9 	bl	810301a <_isatty>
 810d848:	1c43      	adds	r3, r0, #1
 810d84a:	d102      	bne.n	810d852 <_isatty_r+0x1a>
 810d84c:	682b      	ldr	r3, [r5, #0]
 810d84e:	b103      	cbz	r3, 810d852 <_isatty_r+0x1a>
 810d850:	6023      	str	r3, [r4, #0]
 810d852:	bd38      	pop	{r3, r4, r5, pc}
 810d854:	100004c0 	.word	0x100004c0

0810d858 <_lseek_r>:
 810d858:	b538      	push	{r3, r4, r5, lr}
 810d85a:	4d07      	ldr	r5, [pc, #28]	; (810d878 <_lseek_r+0x20>)
 810d85c:	4604      	mov	r4, r0
 810d85e:	4608      	mov	r0, r1
 810d860:	4611      	mov	r1, r2
 810d862:	2200      	movs	r2, #0
 810d864:	602a      	str	r2, [r5, #0]
 810d866:	461a      	mov	r2, r3
 810d868:	f7f5 fbe2 	bl	8103030 <_lseek>
 810d86c:	1c43      	adds	r3, r0, #1
 810d86e:	d102      	bne.n	810d876 <_lseek_r+0x1e>
 810d870:	682b      	ldr	r3, [r5, #0]
 810d872:	b103      	cbz	r3, 810d876 <_lseek_r+0x1e>
 810d874:	6023      	str	r3, [r4, #0]
 810d876:	bd38      	pop	{r3, r4, r5, pc}
 810d878:	100004c0 	.word	0x100004c0

0810d87c <memmove>:
 810d87c:	4288      	cmp	r0, r1
 810d87e:	b510      	push	{r4, lr}
 810d880:	eb01 0402 	add.w	r4, r1, r2
 810d884:	d902      	bls.n	810d88c <memmove+0x10>
 810d886:	4284      	cmp	r4, r0
 810d888:	4623      	mov	r3, r4
 810d88a:	d807      	bhi.n	810d89c <memmove+0x20>
 810d88c:	1e43      	subs	r3, r0, #1
 810d88e:	42a1      	cmp	r1, r4
 810d890:	d008      	beq.n	810d8a4 <memmove+0x28>
 810d892:	f811 2b01 	ldrb.w	r2, [r1], #1
 810d896:	f803 2f01 	strb.w	r2, [r3, #1]!
 810d89a:	e7f8      	b.n	810d88e <memmove+0x12>
 810d89c:	4402      	add	r2, r0
 810d89e:	4601      	mov	r1, r0
 810d8a0:	428a      	cmp	r2, r1
 810d8a2:	d100      	bne.n	810d8a6 <memmove+0x2a>
 810d8a4:	bd10      	pop	{r4, pc}
 810d8a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810d8aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810d8ae:	e7f7      	b.n	810d8a0 <memmove+0x24>

0810d8b0 <__malloc_lock>:
 810d8b0:	4801      	ldr	r0, [pc, #4]	; (810d8b8 <__malloc_lock+0x8>)
 810d8b2:	f7fe bdf2 	b.w	810c49a <__retarget_lock_acquire_recursive>
 810d8b6:	bf00      	nop
 810d8b8:	100004b4 	.word	0x100004b4

0810d8bc <__malloc_unlock>:
 810d8bc:	4801      	ldr	r0, [pc, #4]	; (810d8c4 <__malloc_unlock+0x8>)
 810d8be:	f7fe bded 	b.w	810c49c <__retarget_lock_release_recursive>
 810d8c2:	bf00      	nop
 810d8c4:	100004b4 	.word	0x100004b4

0810d8c8 <_realloc_r>:
 810d8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810d8cc:	4680      	mov	r8, r0
 810d8ce:	4614      	mov	r4, r2
 810d8d0:	460e      	mov	r6, r1
 810d8d2:	b921      	cbnz	r1, 810d8de <_realloc_r+0x16>
 810d8d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810d8d8:	4611      	mov	r1, r2
 810d8da:	f7ff bba3 	b.w	810d024 <_malloc_r>
 810d8de:	b92a      	cbnz	r2, 810d8ec <_realloc_r+0x24>
 810d8e0:	f7ff fb34 	bl	810cf4c <_free_r>
 810d8e4:	4625      	mov	r5, r4
 810d8e6:	4628      	mov	r0, r5
 810d8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810d8ec:	f000 f835 	bl	810d95a <_malloc_usable_size_r>
 810d8f0:	4284      	cmp	r4, r0
 810d8f2:	4607      	mov	r7, r0
 810d8f4:	d802      	bhi.n	810d8fc <_realloc_r+0x34>
 810d8f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 810d8fa:	d812      	bhi.n	810d922 <_realloc_r+0x5a>
 810d8fc:	4621      	mov	r1, r4
 810d8fe:	4640      	mov	r0, r8
 810d900:	f7ff fb90 	bl	810d024 <_malloc_r>
 810d904:	4605      	mov	r5, r0
 810d906:	2800      	cmp	r0, #0
 810d908:	d0ed      	beq.n	810d8e6 <_realloc_r+0x1e>
 810d90a:	42bc      	cmp	r4, r7
 810d90c:	4622      	mov	r2, r4
 810d90e:	4631      	mov	r1, r6
 810d910:	bf28      	it	cs
 810d912:	463a      	movcs	r2, r7
 810d914:	f7fb fb6a 	bl	8108fec <memcpy>
 810d918:	4631      	mov	r1, r6
 810d91a:	4640      	mov	r0, r8
 810d91c:	f7ff fb16 	bl	810cf4c <_free_r>
 810d920:	e7e1      	b.n	810d8e6 <_realloc_r+0x1e>
 810d922:	4635      	mov	r5, r6
 810d924:	e7df      	b.n	810d8e6 <_realloc_r+0x1e>
	...

0810d928 <_read_r>:
 810d928:	b538      	push	{r3, r4, r5, lr}
 810d92a:	4d07      	ldr	r5, [pc, #28]	; (810d948 <_read_r+0x20>)
 810d92c:	4604      	mov	r4, r0
 810d92e:	4608      	mov	r0, r1
 810d930:	4611      	mov	r1, r2
 810d932:	2200      	movs	r2, #0
 810d934:	602a      	str	r2, [r5, #0]
 810d936:	461a      	mov	r2, r3
 810d938:	f7f5 fb1a 	bl	8102f70 <_read>
 810d93c:	1c43      	adds	r3, r0, #1
 810d93e:	d102      	bne.n	810d946 <_read_r+0x1e>
 810d940:	682b      	ldr	r3, [r5, #0]
 810d942:	b103      	cbz	r3, 810d946 <_read_r+0x1e>
 810d944:	6023      	str	r3, [r4, #0]
 810d946:	bd38      	pop	{r3, r4, r5, pc}
 810d948:	100004c0 	.word	0x100004c0

0810d94c <abort>:
 810d94c:	b508      	push	{r3, lr}
 810d94e:	2006      	movs	r0, #6
 810d950:	f000 f834 	bl	810d9bc <raise>
 810d954:	2001      	movs	r0, #1
 810d956:	f7f5 fb01 	bl	8102f5c <_exit>

0810d95a <_malloc_usable_size_r>:
 810d95a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810d95e:	1f18      	subs	r0, r3, #4
 810d960:	2b00      	cmp	r3, #0
 810d962:	bfbc      	itt	lt
 810d964:	580b      	ldrlt	r3, [r1, r0]
 810d966:	18c0      	addlt	r0, r0, r3
 810d968:	4770      	bx	lr

0810d96a <_raise_r>:
 810d96a:	291f      	cmp	r1, #31
 810d96c:	b538      	push	{r3, r4, r5, lr}
 810d96e:	4604      	mov	r4, r0
 810d970:	460d      	mov	r5, r1
 810d972:	d904      	bls.n	810d97e <_raise_r+0x14>
 810d974:	2316      	movs	r3, #22
 810d976:	6003      	str	r3, [r0, #0]
 810d978:	f04f 30ff 	mov.w	r0, #4294967295
 810d97c:	bd38      	pop	{r3, r4, r5, pc}
 810d97e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810d980:	b112      	cbz	r2, 810d988 <_raise_r+0x1e>
 810d982:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810d986:	b94b      	cbnz	r3, 810d99c <_raise_r+0x32>
 810d988:	4620      	mov	r0, r4
 810d98a:	f000 f831 	bl	810d9f0 <_getpid_r>
 810d98e:	462a      	mov	r2, r5
 810d990:	4601      	mov	r1, r0
 810d992:	4620      	mov	r0, r4
 810d994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810d998:	f000 b818 	b.w	810d9cc <_kill_r>
 810d99c:	2b01      	cmp	r3, #1
 810d99e:	d00a      	beq.n	810d9b6 <_raise_r+0x4c>
 810d9a0:	1c59      	adds	r1, r3, #1
 810d9a2:	d103      	bne.n	810d9ac <_raise_r+0x42>
 810d9a4:	2316      	movs	r3, #22
 810d9a6:	6003      	str	r3, [r0, #0]
 810d9a8:	2001      	movs	r0, #1
 810d9aa:	e7e7      	b.n	810d97c <_raise_r+0x12>
 810d9ac:	2400      	movs	r4, #0
 810d9ae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810d9b2:	4628      	mov	r0, r5
 810d9b4:	4798      	blx	r3
 810d9b6:	2000      	movs	r0, #0
 810d9b8:	e7e0      	b.n	810d97c <_raise_r+0x12>
	...

0810d9bc <raise>:
 810d9bc:	4b02      	ldr	r3, [pc, #8]	; (810d9c8 <raise+0xc>)
 810d9be:	4601      	mov	r1, r0
 810d9c0:	6818      	ldr	r0, [r3, #0]
 810d9c2:	f7ff bfd2 	b.w	810d96a <_raise_r>
 810d9c6:	bf00      	nop
 810d9c8:	1000002c 	.word	0x1000002c

0810d9cc <_kill_r>:
 810d9cc:	b538      	push	{r3, r4, r5, lr}
 810d9ce:	4d07      	ldr	r5, [pc, #28]	; (810d9ec <_kill_r+0x20>)
 810d9d0:	2300      	movs	r3, #0
 810d9d2:	4604      	mov	r4, r0
 810d9d4:	4608      	mov	r0, r1
 810d9d6:	4611      	mov	r1, r2
 810d9d8:	602b      	str	r3, [r5, #0]
 810d9da:	f7f5 faaf 	bl	8102f3c <_kill>
 810d9de:	1c43      	adds	r3, r0, #1
 810d9e0:	d102      	bne.n	810d9e8 <_kill_r+0x1c>
 810d9e2:	682b      	ldr	r3, [r5, #0]
 810d9e4:	b103      	cbz	r3, 810d9e8 <_kill_r+0x1c>
 810d9e6:	6023      	str	r3, [r4, #0]
 810d9e8:	bd38      	pop	{r3, r4, r5, pc}
 810d9ea:	bf00      	nop
 810d9ec:	100004c0 	.word	0x100004c0

0810d9f0 <_getpid_r>:
 810d9f0:	f7f5 ba9c 	b.w	8102f2c <_getpid>

0810d9f4 <floorf>:
 810d9f4:	ee10 3a10 	vmov	r3, s0
 810d9f8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 810d9fc:	3a7f      	subs	r2, #127	; 0x7f
 810d9fe:	2a16      	cmp	r2, #22
 810da00:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 810da04:	dc2a      	bgt.n	810da5c <floorf+0x68>
 810da06:	2a00      	cmp	r2, #0
 810da08:	da11      	bge.n	810da2e <floorf+0x3a>
 810da0a:	eddf 7a18 	vldr	s15, [pc, #96]	; 810da6c <floorf+0x78>
 810da0e:	ee30 0a27 	vadd.f32	s0, s0, s15
 810da12:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 810da16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810da1a:	dd05      	ble.n	810da28 <floorf+0x34>
 810da1c:	2b00      	cmp	r3, #0
 810da1e:	da23      	bge.n	810da68 <floorf+0x74>
 810da20:	4a13      	ldr	r2, [pc, #76]	; (810da70 <floorf+0x7c>)
 810da22:	2900      	cmp	r1, #0
 810da24:	bf18      	it	ne
 810da26:	4613      	movne	r3, r2
 810da28:	ee00 3a10 	vmov	s0, r3
 810da2c:	4770      	bx	lr
 810da2e:	4911      	ldr	r1, [pc, #68]	; (810da74 <floorf+0x80>)
 810da30:	4111      	asrs	r1, r2
 810da32:	420b      	tst	r3, r1
 810da34:	d0fa      	beq.n	810da2c <floorf+0x38>
 810da36:	eddf 7a0d 	vldr	s15, [pc, #52]	; 810da6c <floorf+0x78>
 810da3a:	ee30 0a27 	vadd.f32	s0, s0, s15
 810da3e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 810da42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810da46:	ddef      	ble.n	810da28 <floorf+0x34>
 810da48:	2b00      	cmp	r3, #0
 810da4a:	bfbe      	ittt	lt
 810da4c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 810da50:	fa40 f202 	asrlt.w	r2, r0, r2
 810da54:	189b      	addlt	r3, r3, r2
 810da56:	ea23 0301 	bic.w	r3, r3, r1
 810da5a:	e7e5      	b.n	810da28 <floorf+0x34>
 810da5c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 810da60:	d3e4      	bcc.n	810da2c <floorf+0x38>
 810da62:	ee30 0a00 	vadd.f32	s0, s0, s0
 810da66:	4770      	bx	lr
 810da68:	2300      	movs	r3, #0
 810da6a:	e7dd      	b.n	810da28 <floorf+0x34>
 810da6c:	7149f2ca 	.word	0x7149f2ca
 810da70:	bf800000 	.word	0xbf800000
 810da74:	007fffff 	.word	0x007fffff

0810da78 <sqrt>:
 810da78:	b538      	push	{r3, r4, r5, lr}
 810da7a:	ed2d 8b02 	vpush	{d8}
 810da7e:	ec55 4b10 	vmov	r4, r5, d0
 810da82:	f000 f825 	bl	810dad0 <__ieee754_sqrt>
 810da86:	4622      	mov	r2, r4
 810da88:	462b      	mov	r3, r5
 810da8a:	4620      	mov	r0, r4
 810da8c:	4629      	mov	r1, r5
 810da8e:	eeb0 8a40 	vmov.f32	s16, s0
 810da92:	eef0 8a60 	vmov.f32	s17, s1
 810da96:	f7f3 f8d1 	bl	8100c3c <__aeabi_dcmpun>
 810da9a:	b990      	cbnz	r0, 810dac2 <sqrt+0x4a>
 810da9c:	2200      	movs	r2, #0
 810da9e:	2300      	movs	r3, #0
 810daa0:	4620      	mov	r0, r4
 810daa2:	4629      	mov	r1, r5
 810daa4:	f7f3 f8a2 	bl	8100bec <__aeabi_dcmplt>
 810daa8:	b158      	cbz	r0, 810dac2 <sqrt+0x4a>
 810daaa:	f7fb fa75 	bl	8108f98 <__errno>
 810daae:	2321      	movs	r3, #33	; 0x21
 810dab0:	6003      	str	r3, [r0, #0]
 810dab2:	2200      	movs	r2, #0
 810dab4:	2300      	movs	r3, #0
 810dab6:	4610      	mov	r0, r2
 810dab8:	4619      	mov	r1, r3
 810daba:	f7f2 ff4f 	bl	810095c <__aeabi_ddiv>
 810dabe:	ec41 0b18 	vmov	d8, r0, r1
 810dac2:	eeb0 0a48 	vmov.f32	s0, s16
 810dac6:	eef0 0a68 	vmov.f32	s1, s17
 810daca:	ecbd 8b02 	vpop	{d8}
 810dace:	bd38      	pop	{r3, r4, r5, pc}

0810dad0 <__ieee754_sqrt>:
 810dad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810dad4:	ec55 4b10 	vmov	r4, r5, d0
 810dad8:	4e55      	ldr	r6, [pc, #340]	; (810dc30 <__ieee754_sqrt+0x160>)
 810dada:	43ae      	bics	r6, r5
 810dadc:	ee10 0a10 	vmov	r0, s0
 810dae0:	ee10 3a10 	vmov	r3, s0
 810dae4:	462a      	mov	r2, r5
 810dae6:	4629      	mov	r1, r5
 810dae8:	d110      	bne.n	810db0c <__ieee754_sqrt+0x3c>
 810daea:	ee10 2a10 	vmov	r2, s0
 810daee:	462b      	mov	r3, r5
 810daf0:	f7f2 fe0a 	bl	8100708 <__aeabi_dmul>
 810daf4:	4602      	mov	r2, r0
 810daf6:	460b      	mov	r3, r1
 810daf8:	4620      	mov	r0, r4
 810dafa:	4629      	mov	r1, r5
 810dafc:	f7f2 fc4e 	bl	810039c <__adddf3>
 810db00:	4604      	mov	r4, r0
 810db02:	460d      	mov	r5, r1
 810db04:	ec45 4b10 	vmov	d0, r4, r5
 810db08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810db0c:	2d00      	cmp	r5, #0
 810db0e:	dc10      	bgt.n	810db32 <__ieee754_sqrt+0x62>
 810db10:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 810db14:	4330      	orrs	r0, r6
 810db16:	d0f5      	beq.n	810db04 <__ieee754_sqrt+0x34>
 810db18:	b15d      	cbz	r5, 810db32 <__ieee754_sqrt+0x62>
 810db1a:	ee10 2a10 	vmov	r2, s0
 810db1e:	462b      	mov	r3, r5
 810db20:	ee10 0a10 	vmov	r0, s0
 810db24:	f7f2 fc38 	bl	8100398 <__aeabi_dsub>
 810db28:	4602      	mov	r2, r0
 810db2a:	460b      	mov	r3, r1
 810db2c:	f7f2 ff16 	bl	810095c <__aeabi_ddiv>
 810db30:	e7e6      	b.n	810db00 <__ieee754_sqrt+0x30>
 810db32:	1512      	asrs	r2, r2, #20
 810db34:	d074      	beq.n	810dc20 <__ieee754_sqrt+0x150>
 810db36:	07d4      	lsls	r4, r2, #31
 810db38:	f3c1 0113 	ubfx	r1, r1, #0, #20
 810db3c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 810db40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 810db44:	bf5e      	ittt	pl
 810db46:	0fda      	lsrpl	r2, r3, #31
 810db48:	005b      	lslpl	r3, r3, #1
 810db4a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 810db4e:	2400      	movs	r4, #0
 810db50:	0fda      	lsrs	r2, r3, #31
 810db52:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 810db56:	107f      	asrs	r7, r7, #1
 810db58:	005b      	lsls	r3, r3, #1
 810db5a:	2516      	movs	r5, #22
 810db5c:	4620      	mov	r0, r4
 810db5e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 810db62:	1886      	adds	r6, r0, r2
 810db64:	428e      	cmp	r6, r1
 810db66:	bfde      	ittt	le
 810db68:	1b89      	suble	r1, r1, r6
 810db6a:	18b0      	addle	r0, r6, r2
 810db6c:	18a4      	addle	r4, r4, r2
 810db6e:	0049      	lsls	r1, r1, #1
 810db70:	3d01      	subs	r5, #1
 810db72:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 810db76:	ea4f 0252 	mov.w	r2, r2, lsr #1
 810db7a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810db7e:	d1f0      	bne.n	810db62 <__ieee754_sqrt+0x92>
 810db80:	462a      	mov	r2, r5
 810db82:	f04f 0e20 	mov.w	lr, #32
 810db86:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 810db8a:	4281      	cmp	r1, r0
 810db8c:	eb06 0c05 	add.w	ip, r6, r5
 810db90:	dc02      	bgt.n	810db98 <__ieee754_sqrt+0xc8>
 810db92:	d113      	bne.n	810dbbc <__ieee754_sqrt+0xec>
 810db94:	459c      	cmp	ip, r3
 810db96:	d811      	bhi.n	810dbbc <__ieee754_sqrt+0xec>
 810db98:	f1bc 0f00 	cmp.w	ip, #0
 810db9c:	eb0c 0506 	add.w	r5, ip, r6
 810dba0:	da43      	bge.n	810dc2a <__ieee754_sqrt+0x15a>
 810dba2:	2d00      	cmp	r5, #0
 810dba4:	db41      	blt.n	810dc2a <__ieee754_sqrt+0x15a>
 810dba6:	f100 0801 	add.w	r8, r0, #1
 810dbaa:	1a09      	subs	r1, r1, r0
 810dbac:	459c      	cmp	ip, r3
 810dbae:	bf88      	it	hi
 810dbb0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 810dbb4:	eba3 030c 	sub.w	r3, r3, ip
 810dbb8:	4432      	add	r2, r6
 810dbba:	4640      	mov	r0, r8
 810dbbc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 810dbc0:	f1be 0e01 	subs.w	lr, lr, #1
 810dbc4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 810dbc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810dbcc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 810dbd0:	d1db      	bne.n	810db8a <__ieee754_sqrt+0xba>
 810dbd2:	430b      	orrs	r3, r1
 810dbd4:	d006      	beq.n	810dbe4 <__ieee754_sqrt+0x114>
 810dbd6:	1c50      	adds	r0, r2, #1
 810dbd8:	bf13      	iteet	ne
 810dbda:	3201      	addne	r2, #1
 810dbdc:	3401      	addeq	r4, #1
 810dbde:	4672      	moveq	r2, lr
 810dbe0:	f022 0201 	bicne.w	r2, r2, #1
 810dbe4:	1063      	asrs	r3, r4, #1
 810dbe6:	0852      	lsrs	r2, r2, #1
 810dbe8:	07e1      	lsls	r1, r4, #31
 810dbea:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 810dbee:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 810dbf2:	bf48      	it	mi
 810dbf4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 810dbf8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 810dbfc:	4614      	mov	r4, r2
 810dbfe:	e781      	b.n	810db04 <__ieee754_sqrt+0x34>
 810dc00:	0ad9      	lsrs	r1, r3, #11
 810dc02:	3815      	subs	r0, #21
 810dc04:	055b      	lsls	r3, r3, #21
 810dc06:	2900      	cmp	r1, #0
 810dc08:	d0fa      	beq.n	810dc00 <__ieee754_sqrt+0x130>
 810dc0a:	02cd      	lsls	r5, r1, #11
 810dc0c:	d50a      	bpl.n	810dc24 <__ieee754_sqrt+0x154>
 810dc0e:	f1c2 0420 	rsb	r4, r2, #32
 810dc12:	fa23 f404 	lsr.w	r4, r3, r4
 810dc16:	1e55      	subs	r5, r2, #1
 810dc18:	4093      	lsls	r3, r2
 810dc1a:	4321      	orrs	r1, r4
 810dc1c:	1b42      	subs	r2, r0, r5
 810dc1e:	e78a      	b.n	810db36 <__ieee754_sqrt+0x66>
 810dc20:	4610      	mov	r0, r2
 810dc22:	e7f0      	b.n	810dc06 <__ieee754_sqrt+0x136>
 810dc24:	0049      	lsls	r1, r1, #1
 810dc26:	3201      	adds	r2, #1
 810dc28:	e7ef      	b.n	810dc0a <__ieee754_sqrt+0x13a>
 810dc2a:	4680      	mov	r8, r0
 810dc2c:	e7bd      	b.n	810dbaa <__ieee754_sqrt+0xda>
 810dc2e:	bf00      	nop
 810dc30:	7ff00000 	.word	0x7ff00000

0810dc34 <_init>:
 810dc34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810dc36:	bf00      	nop
 810dc38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810dc3a:	bc08      	pop	{r3}
 810dc3c:	469e      	mov	lr, r3
 810dc3e:	4770      	bx	lr

0810dc40 <_fini>:
 810dc40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810dc42:	bf00      	nop
 810dc44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810dc46:	bc08      	pop	{r3}
 810dc48:	469e      	mov	lr, r3
 810dc4a:	4770      	bx	lr
